
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002d9 	.word	0x080002d9
 8000008:	080002db 	.word	0x080002db
 800000c:	080002db 	.word	0x080002db
 8000010:	080002db 	.word	0x080002db
 8000014:	080002db 	.word	0x080002db
 8000018:	080002db 	.word	0x080002db
 800001c:	080002db 	.word	0x080002db
 8000020:	080002db 	.word	0x080002db
 8000024:	080002db 	.word	0x080002db
 8000028:	080002db 	.word	0x080002db
 800002c:	08007941 	.word	0x08007941
 8000030:	080002db 	.word	0x080002db
 8000034:	080002db 	.word	0x080002db
 8000038:	080002db 	.word	0x080002db
 800003c:	080002db 	.word	0x080002db
 8000040:	080002db 	.word	0x080002db
 8000044:	080002db 	.word	0x080002db
 8000048:	080002db 	.word	0x080002db
 800004c:	080002db 	.word	0x080002db
 8000050:	080002db 	.word	0x080002db
 8000054:	080002db 	.word	0x080002db
 8000058:	080002db 	.word	0x080002db
 800005c:	080002db 	.word	0x080002db
 8000060:	080002db 	.word	0x080002db
 8000064:	080002db 	.word	0x080002db
 8000068:	080002db 	.word	0x080002db
 800006c:	08009341 	.word	0x08009341
 8000070:	08009311 	.word	0x08009311
 8000074:	080092e1 	.word	0x080092e1
 8000078:	080092b1 	.word	0x080092b1
 800007c:	08009281 	.word	0x08009281
 8000080:	08009251 	.word	0x08009251
 8000084:	08009221 	.word	0x08009221
 8000088:	080002db 	.word	0x080002db
 800008c:	080002db 	.word	0x080002db
 8000090:	080002db 	.word	0x080002db
 8000094:	080002db 	.word	0x080002db
 8000098:	080002db 	.word	0x080002db
 800009c:	080002db 	.word	0x080002db
 80000a0:	080002db 	.word	0x080002db
 80000a4:	080002db 	.word	0x080002db
 80000a8:	080002db 	.word	0x080002db
 80000ac:	080002db 	.word	0x080002db
 80000b0:	08008961 	.word	0x08008961
 80000b4:	080002db 	.word	0x080002db
 80000b8:	080002db 	.word	0x080002db
 80000bc:	08008f41 	.word	0x08008f41
 80000c0:	08008e51 	.word	0x08008e51
 80000c4:	080002db 	.word	0x080002db
 80000c8:	080002db 	.word	0x080002db
 80000cc:	080002db 	.word	0x080002db
 80000d0:	080002db 	.word	0x080002db
 80000d4:	080088f1 	.word	0x080088f1
 80000d8:	080088d1 	.word	0x080088d1
 80000dc:	080002db 	.word	0x080002db
 80000e0:	080002db 	.word	0x080002db
 80000e4:	080002db 	.word	0x080002db
 80000e8:	080002db 	.word	0x080002db
 80000ec:	080002db 	.word	0x080002db
 80000f0:	080002db 	.word	0x080002db
 80000f4:	080002db 	.word	0x080002db
 80000f8:	080002db 	.word	0x080002db
 80000fc:	080091f1 	.word	0x080091f1
 8000100:	080002db 	.word	0x080002db
 8000104:	080002db 	.word	0x080002db
 8000108:	08008911 	.word	0x08008911
 800010c:	080002db 	.word	0x080002db
 8000110:	080002db 	.word	0x080002db
 8000114:	080002db 	.word	0x080002db
 8000118:	080002db 	.word	0x080002db
 800011c:	080002db 	.word	0x080002db
 8000120:	080091c1 	.word	0x080091c1
 8000124:	08009191 	.word	0x08009191
 8000128:	08009161 	.word	0x08009161
 800012c:	08009131 	.word	0x08009131
 8000130:	08009101 	.word	0x08009101
 8000134:	080002db 	.word	0x080002db
 8000138:	080002db 	.word	0x080002db
 800013c:	080002db 	.word	0x080002db
 8000140:	080002db 	.word	0x080002db
 8000144:	080002db 	.word	0x080002db
 8000148:	080002db 	.word	0x080002db
 800014c:	08008a21 	.word	0x08008a21
 8000150:	080090d1 	.word	0x080090d1
 8000154:	080090a1 	.word	0x080090a1
 8000158:	08009071 	.word	0x08009071
 800015c:	080088b1 	.word	0x080088b1
 8000160:	080002db 	.word	0x080002db
 8000164:	080002db 	.word	0x080002db
 8000168:	080002db 	.word	0x080002db
 800016c:	080002db 	.word	0x080002db
 8000170:	080002db 	.word	0x080002db
 8000174:	080002db 	.word	0x080002db
 8000178:	080002db 	.word	0x080002db
 800017c:	080002db 	.word	0x080002db
 8000180:	080002db 	.word	0x080002db
 8000184:	080002db 	.word	0x080002db
 8000188:	080002db 	.word	0x080002db
 800018c:	080002db 	.word	0x080002db
 8000190:	080002db 	.word	0x080002db
 8000194:	080002db 	.word	0x080002db
 8000198:	080002db 	.word	0x080002db
 800019c:	080002db 	.word	0x080002db
 80001a0:	080002db 	.word	0x080002db
 80001a4:	080002db 	.word	0x080002db
 80001a8:	080002db 	.word	0x080002db
 80001ac:	080002db 	.word	0x080002db
 80001b0:	080002db 	.word	0x080002db
 80001b4:	080002db 	.word	0x080002db
 80001b8:	080002db 	.word	0x080002db
 80001bc:	080002db 	.word	0x080002db
 80001c0:	080002db 	.word	0x080002db
 80001c4:	080002db 	.word	0x080002db
 80001c8:	080002db 	.word	0x080002db
 80001cc:	080002db 	.word	0x080002db
 80001d0:	080002db 	.word	0x080002db
 80001d4:	080002db 	.word	0x080002db
 80001d8:	080002db 	.word	0x080002db
 80001dc:	080002db 	.word	0x080002db

Disassembly of section .text:

08000200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000202:	4827      	ldr	r0, [pc, #156]	; (80002a0 <endfiniloop+0x4>)
                msr     MSP, r0
 8000204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <endfiniloop+0x8>)
                msr     PSP, r0
 800020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800020e:	4826      	ldr	r0, [pc, #152]	; (80002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800021c:	f380 8814 	msr	CONTROL, r0
                isb
 8000220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000224:	f009 f8ec 	bl	8009400 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000228:	f008 fa4a 	bl	80086c0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000230:	491e      	ldr	r1, [pc, #120]	; (80002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <endfiniloop+0x4>)

08000234 <msloop>:
msloop:
                cmp     r1, r2
 8000234:	4291      	cmp	r1, r2
                itt     lo
 8000236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800023c:	e7fa      	bcc.n	8000234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <endfiniloop+0x8>)

08000242 <psloop>:
psloop:
                cmp     r1, r2
 8000242:	4291      	cmp	r1, r2
                itt     lo
 8000244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800024a:	e7fa      	bcc.n	8000242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800024c:	4919      	ldr	r1, [pc, #100]	; (80002b4 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <endfiniloop+0x20>)

08000252 <dloop>:
dloop:
                cmp     r2, r3
 8000252:	429a      	cmp	r2, r3
                ittt    lo
 8000254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800025e:	e7f8      	bcc.n	8000252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000260:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000262:	4917      	ldr	r1, [pc, #92]	; (80002c0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <endfiniloop+0x28>)

08000266 <bloop>:
bloop:
                cmp     r1, r2
 8000266:	4291      	cmp	r1, r2
                itt     lo
 8000268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800026e:	e7fa      	bcc.n	8000266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000270:	f009 f87e 	bl	8009370 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000274:	f009 f8bc 	bl	80093f0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000278:	4c13      	ldr	r4, [pc, #76]	; (80002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800027a:	4d14      	ldr	r5, [pc, #80]	; (80002cc <endfiniloop+0x30>)

0800027c <initloop>:
initloop:
                cmp     r4, r5
 800027c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800027e:	da03      	bge.n	8000288 <endinitloop>
                ldr     r1, [r4], #4
 8000280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000284:	4788      	blx	r1
                b       initloop
 8000286:	e7f9      	b.n	800027c <initloop>

08000288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000288:	f007 fc4a 	bl	8007b20 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800028c:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800028e:	4d11      	ldr	r5, [pc, #68]	; (80002d4 <endfiniloop+0x38>)

08000290 <finiloop>:
finiloop:
                cmp     r4, r5
 8000290:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000292:	da03      	bge.n	800029c <endfiniloop>
                ldr     r1, [r4], #4
 8000294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000298:	4788      	blx	r1
                b       finiloop
 800029a:	e7f9      	b.n	8000290 <finiloop>

0800029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800029c:	f009 b8a0 	b.w	80093e0 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002a8:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002b0:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002b4:	0800a870 	.word	0x0800a870
                ldr     r2, =__data_base__
 80002b8:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002bc:	20000c48 	.word	0x20000c48
                ldr     r1, =__bss_base__
 80002c0:	20000c48 	.word	0x20000c48
                ldr     r2, =__bss_end__
 80002c4:	2000204c 	.word	0x2000204c
                ldr     r4, =__init_array_base__
 80002c8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002cc:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002d0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002d4:	080001e0 	.word	0x080001e0

080002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002d8:	e792      	b.n	8000200 <_crt0_entry>

080002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002da:	f000 f800 	bl	80002de <_unhandled_exception>

080002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002de:	e7fe      	b.n	80002de <_unhandled_exception>

080002e0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002e4:	f8c1 d014 	str.w	sp, [r1, #20]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002e8:	6943      	ldr	r3, [r0, #20]
                mov     sp, r3
 80002ea:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002f0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002f0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002f2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002f6:	4628      	mov	r0, r5
                blx     r4
 80002f8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002fa:	2000      	movs	r0, #0
                bl      chThdExit
 80002fc:	f007 fb30 	bl	8007960 <chThdExit>

08000300 <_zombies>:
_zombies:       b       _zombies
 8000300:	e7fe      	b.n	8000300 <_zombies>

08000302 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000302:	f007 fb35 	bl	8007970 <chSchDoReschedule>

08000306 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000306:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000308:	e7fe      	b.n	8000308 <_port_exit_from_isr+0x2>
	...

0800030c <memcpy>:
 800030c:	4684      	mov	ip, r0
 800030e:	ea41 0300 	orr.w	r3, r1, r0
 8000312:	f013 0303 	ands.w	r3, r3, #3
 8000316:	d16d      	bne.n	80003f4 <memcpy+0xe8>
 8000318:	3a40      	subs	r2, #64	; 0x40
 800031a:	d341      	bcc.n	80003a0 <memcpy+0x94>
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	3a40      	subs	r2, #64	; 0x40
 800039e:	d2bd      	bcs.n	800031c <memcpy+0x10>
 80003a0:	3230      	adds	r2, #48	; 0x30
 80003a2:	d311      	bcc.n	80003c8 <memcpy+0xbc>
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	3a10      	subs	r2, #16
 80003c6:	d2ed      	bcs.n	80003a4 <memcpy+0x98>
 80003c8:	320c      	adds	r2, #12
 80003ca:	d305      	bcc.n	80003d8 <memcpy+0xcc>
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	3a04      	subs	r2, #4
 80003d6:	d2f9      	bcs.n	80003cc <memcpy+0xc0>
 80003d8:	3204      	adds	r2, #4
 80003da:	d008      	beq.n	80003ee <memcpy+0xe2>
 80003dc:	07d2      	lsls	r2, r2, #31
 80003de:	bf1c      	itt	ne
 80003e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003e4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003e8:	d301      	bcc.n	80003ee <memcpy+0xe2>
 80003ea:	880b      	ldrh	r3, [r1, #0]
 80003ec:	8003      	strh	r3, [r0, #0]
 80003ee:	4660      	mov	r0, ip
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	2a08      	cmp	r2, #8
 80003f6:	d313      	bcc.n	8000420 <memcpy+0x114>
 80003f8:	078b      	lsls	r3, r1, #30
 80003fa:	d08d      	beq.n	8000318 <memcpy+0xc>
 80003fc:	f010 0303 	ands.w	r3, r0, #3
 8000400:	d08a      	beq.n	8000318 <memcpy+0xc>
 8000402:	f1c3 0304 	rsb	r3, r3, #4
 8000406:	1ad2      	subs	r2, r2, r3
 8000408:	07db      	lsls	r3, r3, #31
 800040a:	bf1c      	itt	ne
 800040c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000410:	f800 3b01 	strbne.w	r3, [r0], #1
 8000414:	d380      	bcc.n	8000318 <memcpy+0xc>
 8000416:	f831 3b02 	ldrh.w	r3, [r1], #2
 800041a:	f820 3b02 	strh.w	r3, [r0], #2
 800041e:	e77b      	b.n	8000318 <memcpy+0xc>
 8000420:	3a04      	subs	r2, #4
 8000422:	d3d9      	bcc.n	80003d8 <memcpy+0xcc>
 8000424:	3a01      	subs	r2, #1
 8000426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800042a:	f800 3b01 	strb.w	r3, [r0], #1
 800042e:	d2f9      	bcs.n	8000424 <memcpy+0x118>
 8000430:	780b      	ldrb	r3, [r1, #0]
 8000432:	7003      	strb	r3, [r0, #0]
 8000434:	784b      	ldrb	r3, [r1, #1]
 8000436:	7043      	strb	r3, [r0, #1]
 8000438:	788b      	ldrb	r3, [r1, #2]
 800043a:	7083      	strb	r3, [r0, #2]
 800043c:	4660      	mov	r0, ip
 800043e:	4770      	bx	lr
 8000440:	eba2 0003 	sub.w	r0, r2, r3
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop

08000448 <strcmp>:
 8000448:	7802      	ldrb	r2, [r0, #0]
 800044a:	780b      	ldrb	r3, [r1, #0]
 800044c:	2a01      	cmp	r2, #1
 800044e:	bf28      	it	cs
 8000450:	429a      	cmpcs	r2, r3
 8000452:	d1f5      	bne.n	8000440 <memcpy+0x134>
 8000454:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000458:	ea40 0401 	orr.w	r4, r0, r1
 800045c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000460:	f06f 0c00 	mvn.w	ip, #0
 8000464:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000468:	b312      	cbz	r2, 80004b0 <strcmp+0x68>
 800046a:	ea80 0401 	eor.w	r4, r0, r1
 800046e:	f014 0f07 	tst.w	r4, #7
 8000472:	d16a      	bne.n	800054a <strcmp+0x102>
 8000474:	f000 0407 	and.w	r4, r0, #7
 8000478:	f020 0007 	bic.w	r0, r0, #7
 800047c:	f004 0503 	and.w	r5, r4, #3
 8000480:	f021 0107 	bic.w	r1, r1, #7
 8000484:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000488:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800048c:	f014 0f04 	tst.w	r4, #4
 8000490:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000494:	fa0c f405 	lsl.w	r4, ip, r5
 8000498:	ea62 0204 	orn	r2, r2, r4
 800049c:	ea66 0604 	orn	r6, r6, r4
 80004a0:	d00a      	beq.n	80004b8 <strcmp+0x70>
 80004a2:	ea63 0304 	orn	r3, r3, r4
 80004a6:	4662      	mov	r2, ip
 80004a8:	ea67 0704 	orn	r7, r7, r4
 80004ac:	4666      	mov	r6, ip
 80004ae:	e003      	b.n	80004b8 <strcmp+0x70>
 80004b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80004b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80004b8:	fa82 f54c 	uadd8	r5, r2, ip
 80004bc:	ea82 0406 	eor.w	r4, r2, r6
 80004c0:	faa4 f48c 	sel	r4, r4, ip
 80004c4:	bb6c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004c6:	fa83 f54c 	uadd8	r5, r3, ip
 80004ca:	ea83 0507 	eor.w	r5, r3, r7
 80004ce:	faa5 f58c 	sel	r5, r5, ip
 80004d2:	b995      	cbnz	r5, 80004fa <strcmp+0xb2>
 80004d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80004d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80004dc:	fa82 f54c 	uadd8	r5, r2, ip
 80004e0:	ea82 0406 	eor.w	r4, r2, r6
 80004e4:	faa4 f48c 	sel	r4, r4, ip
 80004e8:	fa83 f54c 	uadd8	r5, r3, ip
 80004ec:	ea83 0507 	eor.w	r5, r3, r7
 80004f0:	faa5 f58c 	sel	r5, r5, ip
 80004f4:	4325      	orrs	r5, r4
 80004f6:	d0db      	beq.n	80004b0 <strcmp+0x68>
 80004f8:	b99c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004fa:	ba2d      	rev	r5, r5
 80004fc:	fab5 f485 	clz	r4, r5
 8000500:	f024 0407 	bic.w	r4, r4, #7
 8000504:	fa27 f104 	lsr.w	r1, r7, r4
 8000508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800050c:	fa23 f304 	lsr.w	r3, r3, r4
 8000510:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000514:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000518:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800051c:	eba0 0001 	sub.w	r0, r0, r1
 8000520:	4770      	bx	lr
 8000522:	ba24      	rev	r4, r4
 8000524:	fab4 f484 	clz	r4, r4
 8000528:	f024 0407 	bic.w	r4, r4, #7
 800052c:	fa26 f104 	lsr.w	r1, r6, r4
 8000530:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000534:	fa22 f204 	lsr.w	r2, r2, r4
 8000538:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800053c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000540:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000544:	eba0 0001 	sub.w	r0, r0, r1
 8000548:	4770      	bx	lr
 800054a:	f014 0f03 	tst.w	r4, #3
 800054e:	d13c      	bne.n	80005ca <strcmp+0x182>
 8000550:	f010 0403 	ands.w	r4, r0, #3
 8000554:	d128      	bne.n	80005a8 <strcmp+0x160>
 8000556:	f850 2b08 	ldr.w	r2, [r0], #8
 800055a:	f851 3b08 	ldr.w	r3, [r1], #8
 800055e:	fa82 f54c 	uadd8	r5, r2, ip
 8000562:	ea82 0503 	eor.w	r5, r2, r3
 8000566:	faa5 f58c 	sel	r5, r5, ip
 800056a:	b95d      	cbnz	r5, 8000584 <strcmp+0x13c>
 800056c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000574:	fa82 f54c 	uadd8	r5, r2, ip
 8000578:	ea82 0503 	eor.w	r5, r2, r3
 800057c:	faa5 f58c 	sel	r5, r5, ip
 8000580:	2d00      	cmp	r5, #0
 8000582:	d0e8      	beq.n	8000556 <strcmp+0x10e>
 8000584:	ba2d      	rev	r5, r5
 8000586:	fab5 f485 	clz	r4, r5
 800058a:	f024 0407 	bic.w	r4, r4, #7
 800058e:	fa23 f104 	lsr.w	r1, r3, r4
 8000592:	fa22 f204 	lsr.w	r2, r2, r4
 8000596:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800059a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800059e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80005a2:	eba0 0001 	sub.w	r0, r0, r1
 80005a6:	4770      	bx	lr
 80005a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80005ac:	f020 0003 	bic.w	r0, r0, #3
 80005b0:	f850 2b08 	ldr.w	r2, [r0], #8
 80005b4:	f021 0103 	bic.w	r1, r1, #3
 80005b8:	f851 3b08 	ldr.w	r3, [r1], #8
 80005bc:	fa0c f404 	lsl.w	r4, ip, r4
 80005c0:	ea62 0204 	orn	r2, r2, r4
 80005c4:	ea63 0304 	orn	r3, r3, r4
 80005c8:	e7c9      	b.n	800055e <strcmp+0x116>
 80005ca:	f010 0403 	ands.w	r4, r0, #3
 80005ce:	d01a      	beq.n	8000606 <strcmp+0x1be>
 80005d0:	eba1 0104 	sub.w	r1, r1, r4
 80005d4:	f020 0003 	bic.w	r0, r0, #3
 80005d8:	07e4      	lsls	r4, r4, #31
 80005da:	f850 2b04 	ldr.w	r2, [r0], #4
 80005de:	d006      	beq.n	80005ee <strcmp+0x1a6>
 80005e0:	d20f      	bcs.n	8000602 <strcmp+0x1ba>
 80005e2:	788b      	ldrb	r3, [r1, #2]
 80005e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	d106      	bne.n	80005fa <strcmp+0x1b2>
 80005ec:	b12b      	cbz	r3, 80005fa <strcmp+0x1b2>
 80005ee:	78cb      	ldrb	r3, [r1, #3]
 80005f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80005f4:	1ae4      	subs	r4, r4, r3
 80005f6:	d100      	bne.n	80005fa <strcmp+0x1b2>
 80005f8:	b91b      	cbnz	r3, 8000602 <strcmp+0x1ba>
 80005fa:	4620      	mov	r0, r4
 80005fc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000600:	4770      	bx	lr
 8000602:	f101 0104 	add.w	r1, r1, #4
 8000606:	f850 2b04 	ldr.w	r2, [r0], #4
 800060a:	07cc      	lsls	r4, r1, #31
 800060c:	f021 0103 	bic.w	r1, r1, #3
 8000610:	f851 3b04 	ldr.w	r3, [r1], #4
 8000614:	d848      	bhi.n	80006a8 <strcmp+0x260>
 8000616:	d224      	bcs.n	8000662 <strcmp+0x21a>
 8000618:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800061c:	fa82 f54c 	uadd8	r5, r2, ip
 8000620:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000624:	faa5 f58c 	sel	r5, r5, ip
 8000628:	d10a      	bne.n	8000640 <strcmp+0x1f8>
 800062a:	b965      	cbnz	r5, 8000646 <strcmp+0x1fe>
 800062c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000630:	ea84 0402 	eor.w	r4, r4, r2
 8000634:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000638:	d10e      	bne.n	8000658 <strcmp+0x210>
 800063a:	f850 2b04 	ldr.w	r2, [r0], #4
 800063e:	e7eb      	b.n	8000618 <strcmp+0x1d0>
 8000640:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000644:	e055      	b.n	80006f2 <strcmp+0x2aa>
 8000646:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800064a:	d14d      	bne.n	80006e8 <strcmp+0x2a0>
 800064c:	7808      	ldrb	r0, [r1, #0]
 800064e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000652:	f1c0 0000 	rsb	r0, r0, #0
 8000656:	4770      	bx	lr
 8000658:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800065c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000660:	e047      	b.n	80006f2 <strcmp+0x2aa>
 8000662:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000666:	fa82 f54c 	uadd8	r5, r2, ip
 800066a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800066e:	faa5 f58c 	sel	r5, r5, ip
 8000672:	d10a      	bne.n	800068a <strcmp+0x242>
 8000674:	b965      	cbnz	r5, 8000690 <strcmp+0x248>
 8000676:	f851 3b04 	ldr.w	r3, [r1], #4
 800067a:	ea84 0402 	eor.w	r4, r4, r2
 800067e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000682:	d10c      	bne.n	800069e <strcmp+0x256>
 8000684:	f850 2b04 	ldr.w	r2, [r0], #4
 8000688:	e7eb      	b.n	8000662 <strcmp+0x21a>
 800068a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800068e:	e030      	b.n	80006f2 <strcmp+0x2aa>
 8000690:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000694:	d128      	bne.n	80006e8 <strcmp+0x2a0>
 8000696:	880b      	ldrh	r3, [r1, #0]
 8000698:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800069c:	e029      	b.n	80006f2 <strcmp+0x2aa>
 800069e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80006a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 80006a6:	e024      	b.n	80006f2 <strcmp+0x2aa>
 80006a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80006ac:	fa82 f54c 	uadd8	r5, r2, ip
 80006b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 80006b4:	faa5 f58c 	sel	r5, r5, ip
 80006b8:	d10a      	bne.n	80006d0 <strcmp+0x288>
 80006ba:	b965      	cbnz	r5, 80006d6 <strcmp+0x28e>
 80006bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c0:	ea84 0402 	eor.w	r4, r4, r2
 80006c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80006c8:	d109      	bne.n	80006de <strcmp+0x296>
 80006ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80006ce:	e7eb      	b.n	80006a8 <strcmp+0x260>
 80006d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80006d4:	e00d      	b.n	80006f2 <strcmp+0x2aa>
 80006d6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80006da:	d105      	bne.n	80006e8 <strcmp+0x2a0>
 80006dc:	680b      	ldr	r3, [r1, #0]
 80006de:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80006e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006e6:	e004      	b.n	80006f2 <strcmp+0x2aa>
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006f0:	4770      	bx	lr
 80006f2:	ba12      	rev	r2, r2
 80006f4:	ba1b      	rev	r3, r3
 80006f6:	fa82 f44c 	uadd8	r4, r2, ip
 80006fa:	ea82 0403 	eor.w	r4, r2, r3
 80006fe:	faa4 f58c 	sel	r5, r4, ip
 8000702:	fab5 f485 	clz	r4, r5
 8000706:	fa02 f204 	lsl.w	r2, r2, r4
 800070a:	fa03 f304 	lsl.w	r3, r3, r4
 800070e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000712:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000716:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800071a:	4770      	bx	lr
	...

08000740 <strlen>:
 8000740:	f890 f000 	pld	[r0]
 8000744:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000748:	f020 0107 	bic.w	r1, r0, #7
 800074c:	f06f 0c00 	mvn.w	ip, #0
 8000750:	f010 0407 	ands.w	r4, r0, #7
 8000754:	f891 f020 	pld	[r1, #32]
 8000758:	f040 8049 	bne.w	80007ee <strlen+0xae>
 800075c:	f04f 0400 	mov.w	r4, #0
 8000760:	f06f 0007 	mvn.w	r0, #7
 8000764:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000768:	f891 f040 	pld	[r1, #64]	; 0x40
 800076c:	f100 0008 	add.w	r0, r0, #8
 8000770:	fa82 f24c 	uadd8	r2, r2, ip
 8000774:	faa4 f28c 	sel	r2, r4, ip
 8000778:	fa83 f34c 	uadd8	r3, r3, ip
 800077c:	faa2 f38c 	sel	r3, r2, ip
 8000780:	bb4b      	cbnz	r3, 80007d6 <strlen+0x96>
 8000782:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000786:	fa82 f24c 	uadd8	r2, r2, ip
 800078a:	f100 0008 	add.w	r0, r0, #8
 800078e:	faa4 f28c 	sel	r2, r4, ip
 8000792:	fa83 f34c 	uadd8	r3, r3, ip
 8000796:	faa2 f38c 	sel	r3, r2, ip
 800079a:	b9e3      	cbnz	r3, 80007d6 <strlen+0x96>
 800079c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80007a0:	fa82 f24c 	uadd8	r2, r2, ip
 80007a4:	f100 0008 	add.w	r0, r0, #8
 80007a8:	faa4 f28c 	sel	r2, r4, ip
 80007ac:	fa83 f34c 	uadd8	r3, r3, ip
 80007b0:	faa2 f38c 	sel	r3, r2, ip
 80007b4:	b97b      	cbnz	r3, 80007d6 <strlen+0x96>
 80007b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80007ba:	f101 0120 	add.w	r1, r1, #32
 80007be:	fa82 f24c 	uadd8	r2, r2, ip
 80007c2:	f100 0008 	add.w	r0, r0, #8
 80007c6:	faa4 f28c 	sel	r2, r4, ip
 80007ca:	fa83 f34c 	uadd8	r3, r3, ip
 80007ce:	faa2 f38c 	sel	r3, r2, ip
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0c6      	beq.n	8000764 <strlen+0x24>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	bf04      	itt	eq
 80007da:	3004      	addeq	r0, #4
 80007dc:	461a      	moveq	r2, r3
 80007de:	ba12      	rev	r2, r2
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80007e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80007ec:	4770      	bx	lr
 80007ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007f2:	f004 0503 	and.w	r5, r4, #3
 80007f6:	f1c4 0000 	rsb	r0, r4, #0
 80007fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80007fe:	f014 0f04 	tst.w	r4, #4
 8000802:	f891 f040 	pld	[r1, #64]	; 0x40
 8000806:	fa0c f505 	lsl.w	r5, ip, r5
 800080a:	ea62 0205 	orn	r2, r2, r5
 800080e:	bf1c      	itt	ne
 8000810:	ea63 0305 	ornne	r3, r3, r5
 8000814:	4662      	movne	r2, ip
 8000816:	f04f 0400 	mov.w	r4, #0
 800081a:	e7a9      	b.n	8000770 <strlen+0x30>
 800081c:	0000      	movs	r0, r0
	...

08000820 <sdObjectInit.constprop.0>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000820:	b4f0      	push	{r4, r5, r6, r7}

  sdp->vmt = &vmt;
 8000822:	4603      	mov	r3, r0
 8000824:	4a13      	ldr	r2, [pc, #76]	; (8000874 <sdObjectInit.constprop.0+0x54>)
 8000826:	f843 2b04 	str.w	r2, [r3], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800082a:	2201      	movs	r2, #1
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800082c:	2500      	movs	r5, #0
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800082e:	f44f 7780 	mov.w	r7, #256	; 0x100
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000832:	f500 7615 	add.w	r6, r0, #596	; 0x254
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000836:	f100 040c 	add.w	r4, r0, #12
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 800083a:	6043      	str	r3, [r0, #4]
  oqp->q_notify  = onfy;
 800083c:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_top     = bp + size;
 800083e:	f500 73aa 	add.w	r3, r0, #340	; 0x154
  sdp->state = SD_STOP;
 8000842:	7202      	strb	r2, [r0, #8]
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8000844:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000848:	f100 0254 	add.w	r2, r0, #84	; 0x54
  iqp->q_counter = 0;
 800084c:	6145      	str	r5, [r0, #20]
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  tqp->prev = (thread_t *)tqp;
 800084e:	e9c0 4403 	strd	r4, r4, [r0, #12]
  iqp->q_notify  = infy;
 8000852:	6285      	str	r5, [r0, #40]	; 0x28
  oqp->q_counter = size;
 8000854:	6387      	str	r7, [r0, #56]	; 0x38
  oqp->q_top     = bp + size;
 8000856:	6406      	str	r6, [r0, #64]	; 0x40
  iqp->q_wrptr   = bp;
 8000858:	e9c0 2208 	strd	r2, r2, [r0, #32]
}
 800085c:	bcf0      	pop	{r4, r5, r6, r7}
  oqp->q_wrptr   = bp;
 800085e:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8000862:	e9c0 110c 	strd	r1, r1, [r0, #48]	; 0x30
  iqp->q_link    = link;
 8000866:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_link    = link;
 8000868:	6500      	str	r0, [r0, #80]	; 0x50
  iqp->q_buffer  = bp;
 800086a:	6182      	str	r2, [r0, #24]
  iqp->q_top     = bp + size;
 800086c:	61c3      	str	r3, [r0, #28]
  oqp->q_buffer  = bp;
 800086e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	0800a718 	.word	0x0800a718
	...

08000880 <dmaStreamAllocI.part.0.constprop.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000880:	b4f0      	push	{r4, r5, r6, r7}
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 8000882:	4c2e      	ldr	r4, [pc, #184]	; (800093c <dmaStreamAllocI.part.0.constprop.0+0xbc>)
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000884:	4603      	mov	r3, r0
    uint32_t mask = (1U << i);
 8000886:	2201      	movs	r2, #1
    if ((dma.allocated_mask & mask) == 0U) {
 8000888:	6820      	ldr	r0, [r4, #0]
    uint32_t mask = (1U << i);
 800088a:	409a      	lsls	r2, r3
    if ((dma.allocated_mask & mask) == 0U) {
 800088c:	4202      	tst	r2, r0

      return dmastp;
    }
  }

  return NULL;
 800088e:	bf18      	it	ne
 8000890:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 8000892:	d001      	beq.n	8000898 <dmaStreamAllocI.part.0.constprop.0+0x18>
}
 8000894:	bcf0      	pop	{r4, r5, r6, r7}
 8000896:	4770      	bx	lr
      dma.streams[i].func  = func;
 8000898:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
      dma.allocated_mask  |= mask;
 800089c:	4310      	orrs	r0, r2
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 800089e:	4d28      	ldr	r5, [pc, #160]	; (8000940 <dmaStreamAllocI.part.0.constprop.0+0xc0>)
      dma.allocated_mask  |= mask;
 80008a0:	6020      	str	r0, [r4, #0]
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 80008a2:	f012 0fff 	tst.w	r2, #255	; 0xff
      dma.streams[i].param = param;
 80008a6:	4c27      	ldr	r4, [pc, #156]	; (8000944 <dmaStreamAllocI.part.0.constprop.0+0xc4>)
      dma.streams[i].func  = func;
 80008a8:	6071      	str	r1, [r6, #4]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80008aa:	f04f 000c 	mov.w	r0, #12
      dma.streams[i].param = param;
 80008ae:	60b4      	str	r4, [r6, #8]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80008b0:	fb00 5003 	mla	r0, r0, r3, r5
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 80008b4:	d137      	bne.n	8000926 <dmaStreamAllocI.part.0.constprop.0+0xa6>
        rccEnableDMA2(true);
 80008b6:	4a24      	ldr	r2, [pc, #144]	; (8000948 <dmaStreamAllocI.part.0.constprop.0+0xc8>)
 80008b8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80008ba:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80008be:	6311      	str	r1, [r2, #48]	; 0x30
      dmaStreamDisable(dmastp);
 80008c0:	210c      	movs	r1, #12
        rccEnableDMA2(true);
 80008c2:	6d14      	ldr	r4, [r2, #80]	; 0x50
      dmaStreamDisable(dmastp);
 80008c4:	fb01 f103 	mul.w	r1, r1, r3
        rccEnableDMA2(true);
 80008c8:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
      dmaStreamDisable(dmastp);
 80008cc:	5869      	ldr	r1, [r5, r1]
        rccEnableDMA2(true);
 80008ce:	6514      	str	r4, [r2, #80]	; 0x50
 80008d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
      dmaStreamDisable(dmastp);
 80008d2:	680a      	ldr	r2, [r1, #0]
 80008d4:	f022 021f 	bic.w	r2, r2, #31
 80008d8:	600a      	str	r2, [r1, #0]
 80008da:	680a      	ldr	r2, [r1, #0]
 80008dc:	f012 0201 	ands.w	r2, r2, #1
 80008e0:	d1fb      	bne.n	80008da <dmaStreamAllocI.part.0.constprop.0+0x5a>
 80008e2:	240c      	movs	r4, #12
 80008e4:	fb04 5303 	mla	r3, r4, r3, r5
 80008e8:	253d      	movs	r5, #61	; 0x3d
        nvicEnableVector(dmastp->vector, priority);
 80008ea:	7adc      	ldrb	r4, [r3, #11]
      dmaStreamDisable(dmastp);
 80008ec:	7a5e      	ldrb	r6, [r3, #9]
 80008ee:	685f      	ldr	r7, [r3, #4]
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80008f0:	0963      	lsrs	r3, r4, #5
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	40b5      	lsls	r5, r6
 80008f6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80008fa:	f104 4660 	add.w	r6, r4, #3758096384	; 0xe0000000
 80008fe:	603d      	str	r5, [r7, #0]
 8000900:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000904:	2501      	movs	r5, #1
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8000906:	f506 4661 	add.w	r6, r6, #57600	; 0xe100
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800090a:	f004 041f 	and.w	r4, r4, #31
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 800090e:	600a      	str	r2, [r1, #0]
 8000910:	fa05 f404 	lsl.w	r4, r5, r4
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8000914:	22a0      	movs	r2, #160	; 0xa0
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8000916:	2521      	movs	r5, #33	; 0x21
 8000918:	614d      	str	r5, [r1, #20]
 800091a:	f886 2300 	strb.w	r2, [r6, #768]	; 0x300
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800091e:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000922:	601c      	str	r4, [r3, #0]
 8000924:	e7b6      	b.n	8000894 <dmaStreamAllocI.part.0.constprop.0+0x14>
        rccEnableDMA1(true);
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <dmaStreamAllocI.part.0.constprop.0+0xc8>)
 8000928:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800092a:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 800092e:	6311      	str	r1, [r2, #48]	; 0x30
 8000930:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8000932:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8000936:	6511      	str	r1, [r2, #80]	; 0x50
 8000938:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800093a:	e7bc      	b.n	80008b6 <dmaStreamAllocI.part.0.constprop.0+0x36>
 800093c:	20001aa0 	.word	0x20001aa0
 8000940:	0800a3ac 	.word	0x0800a3ac
 8000944:	20001838 	.word	0x20001838
 8000948:	40023800 	.word	0x40023800
 800094c:	00000000 	.word	0x00000000

08000950 <otg_txfifo_handler.constprop.0>:
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000950:	4a22      	ldr	r2, [pc, #136]	; (80009dc <otg_txfifo_handler.constprop.0+0x8c>)
 8000952:	eb02 0380 	add.w	r3, r2, r0, lsl #2
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 8000956:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 800095a:	68d9      	ldr	r1, [r3, #12]
 800095c:	f8d2 9054 	ldr.w	r9, [r2, #84]	; 0x54
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 8000960:	4680      	mov	r8, r0
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000962:	6948      	ldr	r0, [r1, #20]
 8000964:	e9d0 3700 	ldrd	r3, r7, [r0]
 8000968:	42bb      	cmp	r3, r7
 800096a:	d928      	bls.n	80009be <otg_txfifo_handler.constprop.0+0x6e>
      return false;

#if STM32_USB_OTGFIFO_FILL_BASEPRI
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 800096c:	f108 0401 	add.w	r4, r8, #1
    if (n > usbp->epc[ep]->in_maxsize)
 8000970:	f8b1 e010 	ldrh.w	lr, [r1, #16]
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8000974:	eb09 3404 	add.w	r4, r9, r4, lsl #12
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8000978:	eb09 1c48 	add.w	ip, r9, r8, lsl #5
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 800097c:	1bde      	subs	r6, r3, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800097e:	f8dc 2918 	ldr.w	r2, [ip, #2328]	; 0x918
 8000982:	4576      	cmp	r6, lr
 8000984:	bf28      	it	cs
 8000986:	4676      	movcs	r6, lr
 8000988:	b293      	uxth	r3, r2
 800098a:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 800098e:	d821      	bhi.n	80009d4 <otg_txfifo_handler.constprop.0+0x84>
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8000990:	6885      	ldr	r5, [r0, #8]
    if (n <= 4) {
 8000992:	2e04      	cmp	r6, #4
    *fifop = *((uint32_t *)buf);
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	6023      	str	r3, [r4, #0]
    if (n <= 4) {
 8000998:	d90a      	bls.n	80009b0 <otg_txfifo_handler.constprop.0+0x60>
 800099a:	1f71      	subs	r1, r6, #5
 800099c:	f021 0103 	bic.w	r1, r1, #3
 80009a0:	3104      	adds	r1, #4
 80009a2:	4429      	add	r1, r5
 80009a4:	462b      	mov	r3, r5
    *fifop = *((uint32_t *)buf);
 80009a6:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80009aa:	6022      	str	r2, [r4, #0]
    if (n <= 4) {
 80009ac:	4299      	cmp	r1, r3
 80009ae:	d1fa      	bne.n	80009a6 <otg_txfifo_handler.constprop.0+0x56>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80009b0:	6803      	ldr	r3, [r0, #0]
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
    usbp->epc[ep]->in_state->txcnt += n;
 80009b2:	4437      	add	r7, r6
    usbp->epc[ep]->in_state->txbuf += n;
 80009b4:	4435      	add	r5, r6
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80009b6:	42bb      	cmp	r3, r7
    usbp->epc[ep]->in_state->txcnt += n;
 80009b8:	e9c0 7501 	strd	r7, r5, [r0, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80009bc:	d8de      	bhi.n	800097c <otg_txfifo_handler.constprop.0+0x2c>
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
 80009be:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
 80009c2:	2001      	movs	r0, #1
 80009c4:	fa00 f808 	lsl.w	r8, r0, r8
 80009c8:	ea23 0308 	bic.w	r3, r3, r8
 80009cc:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
  }
}
 80009d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
 80009d4:	2000      	movs	r0, #0
}
 80009d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009da:	bf00      	nop
 80009dc:	20001868 	.word	0x20001868

080009e0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80009e0:	b430      	push	{r4, r5}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80009e2:	2320      	movs	r3, #32
 80009e4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80009e8:	4c0b      	ldr	r4, [pc, #44]	; (8000a18 <chCoreAllocFromTop+0x38>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80009ea:	e9d4 3500 	ldrd	r3, r5, [r4]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80009ee:	4249      	negs	r1, r1
 80009f0:	1a28      	subs	r0, r5, r0
 80009f2:	4008      	ands	r0, r1
  prev = p - offset;
 80009f4:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d307      	bcc.n	8000a0a <chCoreAllocFromTop+0x2a>
 80009fa:	4295      	cmp	r5, r2
 80009fc:	d305      	bcc.n	8000a0a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 80009fe:	6062      	str	r2, [r4, #4]
 8000a00:	2300      	movs	r3, #0
 8000a02:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000a06:	bc30      	pop	{r4, r5}
 8000a08:	4770      	bx	lr
    return NULL;
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f383 8811 	msr	BASEPRI, r3
}
 8000a12:	bc30      	pop	{r4, r5}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20001a68 	.word	0x20001a68
 8000a1c:	00000000 	.word	0x00000000

08000a20 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000a20:	4a02      	ldr	r2, [pc, #8]	; (8000a2c <notify1+0xc>)
 8000a22:	68d3      	ldr	r3, [r2, #12]
 8000a24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000a28:	60d3      	str	r3, [r2, #12]
}
 8000a2a:	4770      	bx	lr
 8000a2c:	40011000 	.word	0x40011000

08000a30 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000a30:	4a02      	ldr	r2, [pc, #8]	; (8000a3c <notify2+0xc>)
 8000a32:	68d3      	ldr	r3, [r2, #12]
 8000a34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000a38:	60d3      	str	r3, [r2, #12]
}
 8000a3a:	4770      	bx	lr
 8000a3c:	40004400 	.word	0x40004400

08000a40 <notify6>:

#if STM32_SERIAL_USE_USART6 || defined(__DOXYGEN__)
static void notify6(io_queue_t *qp) {

  (void)qp;
  USART6->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000a40:	4a02      	ldr	r2, [pc, #8]	; (8000a4c <notify6+0xc>)
 8000a42:	68d3      	ldr	r3, [r2, #12]
 8000a44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000a48:	60d3      	str	r3, [r2, #12]
}
 8000a4a:	4770      	bx	lr
 8000a4c:	40011400 	.word	0x40011400

08000a50 <check_BUS>:
}

static void check_BUS(void){
  /* Check if BUS is used at all. If not there is a timer callback after 10us
      which sets the variable BUS_in_use to 0 . */
  BUS_in_use = 1;
 8000a50:	4a1a      	ldr	r2, [pc, #104]	; (8000abc <check_BUS+0x6c>)
 8000a52:	2101      	movs	r1, #1
static void check_BUS(void){
 8000a54:	b430      	push	{r4, r5}
 8000a56:	2320      	movs	r3, #32
  BUS_in_use = 1;
 8000a58:	7011      	strb	r1, [r2, #0]
 8000a5a:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
 8000a5e:	4818      	ldr	r0, [pc, #96]	; (8000ac0 <check_BUS+0x70>)

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is why the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8000a60:	6844      	ldr	r4, [r0, #4]
  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 8000a62:	68c3      	ldr	r3, [r0, #12]
  if (NULL != gptp->config->callback)
 8000a64:	6864      	ldr	r4, [r4, #4]
  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 8000a66:	2509      	movs	r5, #9
 8000a68:	62dd      	str	r5, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
 8000a6a:	6159      	str	r1, [r3, #20]
 8000a6c:	2503      	movs	r5, #3
  gptp->tim->CNT = 0;                           /* Reset counter.           */
 8000a6e:	2100      	movs	r1, #0
 8000a70:	6259      	str	r1, [r3, #36]	; 0x24
 8000a72:	7005      	strb	r5, [r0, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8000a74:	6119      	str	r1, [r3, #16]
  if (NULL != gptp->config->callback)
 8000a76:	b11c      	cbz	r4, 8000a80 <check_BUS+0x30>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
 8000a78:	68d9      	ldr	r1, [r3, #12]
 8000a7a:	f041 0101 	orr.w	r1, r1, #1
 8000a7e:	60d9      	str	r1, [r3, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8000a80:	2185      	movs	r1, #133	; 0x85
 8000a82:	6019      	str	r1, [r3, #0]
 8000a84:	2300      	movs	r3, #0
 8000a86:	f383 8811 	msr	BASEPRI, r3
  gptStartContinuous(&GPTD5, 10U);
  while ((palReadLine(BUSFREE) == PAL_LOW) && BUS_in_use == 1);
 8000a8a:	490e      	ldr	r1, [pc, #56]	; (8000ac4 <check_BUS+0x74>)
 8000a8c:	e002      	b.n	8000a94 <check_BUS+0x44>
 8000a8e:	7813      	ldrb	r3, [r2, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d102      	bne.n	8000a9a <check_BUS+0x4a>
 8000a94:	690b      	ldr	r3, [r1, #16]
 8000a96:	059b      	lsls	r3, r3, #22
 8000a98:	d5f9      	bpl.n	8000a8e <check_BUS+0x3e>
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 8000aa0:	68c3      	ldr	r3, [r0, #12]
 8000aa2:	2200      	movs	r2, #0
  osalDbgCheck(gptp != NULL);
  osalDbgAssert((gptp->state == GPT_READY) || (gptp->state == GPT_CONTINUOUS) ||
                (gptp->state == GPT_ONESHOT),
                "invalid state");

  gptp->state = GPT_READY;
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	7001      	strb	r1, [r0, #0]
 8000aa8:	601a      	str	r2, [r3, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8000aaa:	611a      	str	r2, [r3, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8000aac:	68d9      	ldr	r1, [r3, #12]
 8000aae:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000ab2:	60d9      	str	r1, [r3, #12]
 8000ab4:	f382 8811 	msr	BASEPRI, r2
  gptStopTimer(&GPTD5);
}
 8000ab8:	bc30      	pop	{r4, r5}
 8000aba:	4770      	bx	lr
 8000abc:	20000c48 	.word	0x20000c48
 8000ac0:	20000c4c 	.word	0x20000c4c
 8000ac4:	40020400 	.word	0x40020400
	...

08000ad0 <select_chip>:
  switch(chip&0x0f){
 8000ad0:	3801      	subs	r0, #1
void select_chip(uint8_t chip){
 8000ad2:	b430      	push	{r4, r5}
 8000ad4:	280e      	cmp	r0, #14
 8000ad6:	f200 80e4 	bhi.w	8000ca2 <select_chip+0x1d2>
 8000ada:	e8df f010 	tbh	[pc, r0, lsl #1]
 8000ade:	001e      	.short	0x001e
 8000ae0:	003a002c 	.word	0x003a002c
 8000ae4:	00560048 	.word	0x00560048
 8000ae8:	00720064 	.word	0x00720064
 8000aec:	008e0080 	.word	0x008e0080
 8000af0:	00aa009c 	.word	0x00aa009c
 8000af4:	00c600b8 	.word	0x00c600b8
 8000af8:	000f00d4 	.word	0x000f00d4
      palSetLine(SEL0);
 8000afc:	4b70      	ldr	r3, [pc, #448]	; (8000cc0 <select_chip+0x1f0>)
      palSetLine(SEL4);
 8000afe:	4a71      	ldr	r2, [pc, #452]	; (8000cc4 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000b00:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000b04:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000b08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000b0c:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000b0e:	831d      	strh	r5, [r3, #24]
      palSetLine(SEL1);
 8000b10:	831c      	strh	r4, [r3, #24]
      palSetLine(SEL2);
 8000b12:	8318      	strh	r0, [r3, #24]
      palSetLine(SEL4);
 8000b14:	8311      	strh	r1, [r2, #24]
}
 8000b16:	bc30      	pop	{r4, r5}
 8000b18:	4770      	bx	lr
      palSetLine(SEL0);
 8000b1a:	4b69      	ldr	r3, [pc, #420]	; (8000cc0 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000b1c:	4a69      	ldr	r2, [pc, #420]	; (8000cc4 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000b1e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000b22:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000b26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000b2a:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000b2c:	831d      	strh	r5, [r3, #24]
      palClearLine(SEL1);
 8000b2e:	835c      	strh	r4, [r3, #26]
      palClearLine(SEL2);
 8000b30:	8358      	strh	r0, [r3, #26]
      palClearLine(SEL4);
 8000b32:	8351      	strh	r1, [r2, #26]
      break;
 8000b34:	e7ef      	b.n	8000b16 <select_chip+0x46>
      palClearLine(SEL0);
 8000b36:	4b62      	ldr	r3, [pc, #392]	; (8000cc0 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000b38:	4a62      	ldr	r2, [pc, #392]	; (8000cc4 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000b3a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000b3e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000b42:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000b46:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000b48:	835d      	strh	r5, [r3, #26]
      palSetLine(SEL1);
 8000b4a:	831c      	strh	r4, [r3, #24]
      palClearLine(SEL2);
 8000b4c:	8358      	strh	r0, [r3, #26]
      palClearLine(SEL4);
 8000b4e:	8351      	strh	r1, [r2, #26]
      break;
 8000b50:	e7e1      	b.n	8000b16 <select_chip+0x46>
      palSetLine(SEL0);
 8000b52:	4b5b      	ldr	r3, [pc, #364]	; (8000cc0 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000b54:	4a5b      	ldr	r2, [pc, #364]	; (8000cc4 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000b56:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000b5a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000b5e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000b62:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000b64:	831d      	strh	r5, [r3, #24]
      palSetLine(SEL1);
 8000b66:	831c      	strh	r4, [r3, #24]
      palClearLine(SEL2);
 8000b68:	8358      	strh	r0, [r3, #26]
      palClearLine(SEL4);
 8000b6a:	8351      	strh	r1, [r2, #26]
      break;
 8000b6c:	e7d3      	b.n	8000b16 <select_chip+0x46>
      palClearLine(SEL0);
 8000b6e:	4b54      	ldr	r3, [pc, #336]	; (8000cc0 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000b70:	4a54      	ldr	r2, [pc, #336]	; (8000cc4 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000b72:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000b76:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000b7a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000b7e:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000b80:	835d      	strh	r5, [r3, #26]
      palClearLine(SEL1);
 8000b82:	835c      	strh	r4, [r3, #26]
      palSetLine(SEL2);
 8000b84:	8318      	strh	r0, [r3, #24]
      palClearLine(SEL4);
 8000b86:	8351      	strh	r1, [r2, #26]
      break;
 8000b88:	e7c5      	b.n	8000b16 <select_chip+0x46>
      palSetLine(SEL0);
 8000b8a:	4b4d      	ldr	r3, [pc, #308]	; (8000cc0 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000b8c:	4a4d      	ldr	r2, [pc, #308]	; (8000cc4 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000b8e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000b92:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000b96:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000b9a:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000b9c:	831d      	strh	r5, [r3, #24]
      palClearLine(SEL1);
 8000b9e:	835c      	strh	r4, [r3, #26]
      palSetLine(SEL2);
 8000ba0:	8318      	strh	r0, [r3, #24]
      palClearLine(SEL4);
 8000ba2:	8351      	strh	r1, [r2, #26]
      break;
 8000ba4:	e7b7      	b.n	8000b16 <select_chip+0x46>
      palClearLine(SEL0);
 8000ba6:	4b46      	ldr	r3, [pc, #280]	; (8000cc0 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000ba8:	4a46      	ldr	r2, [pc, #280]	; (8000cc4 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000baa:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000bae:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000bb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000bb6:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000bb8:	835d      	strh	r5, [r3, #26]
      palSetLine(SEL1);
 8000bba:	831c      	strh	r4, [r3, #24]
      palSetLine(SEL2);
 8000bbc:	8318      	strh	r0, [r3, #24]
      palClearLine(SEL4);
 8000bbe:	8351      	strh	r1, [r2, #26]
      break;
 8000bc0:	e7a9      	b.n	8000b16 <select_chip+0x46>
      palSetLine(SEL0);
 8000bc2:	4b3f      	ldr	r3, [pc, #252]	; (8000cc0 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000bc4:	4a3f      	ldr	r2, [pc, #252]	; (8000cc4 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000bc6:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000bca:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000bce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000bd2:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000bd4:	831d      	strh	r5, [r3, #24]
      palSetLine(SEL1);
 8000bd6:	831c      	strh	r4, [r3, #24]
      palSetLine(SEL2);
 8000bd8:	8318      	strh	r0, [r3, #24]
      palClearLine(SEL4);
 8000bda:	8351      	strh	r1, [r2, #26]
      break;
 8000bdc:	e79b      	b.n	8000b16 <select_chip+0x46>
      palClearLine(SEL0);
 8000bde:	4b38      	ldr	r3, [pc, #224]	; (8000cc0 <select_chip+0x1f0>)
      palSetLine(SEL4);
 8000be0:	4a38      	ldr	r2, [pc, #224]	; (8000cc4 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000be2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000be6:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000bea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000bee:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000bf0:	835d      	strh	r5, [r3, #26]
      palClearLine(SEL1);
 8000bf2:	835c      	strh	r4, [r3, #26]
      palClearLine(SEL2);
 8000bf4:	8358      	strh	r0, [r3, #26]
      palSetLine(SEL4);
 8000bf6:	8311      	strh	r1, [r2, #24]
      break;
 8000bf8:	e78d      	b.n	8000b16 <select_chip+0x46>
      palSetLine(SEL0);
 8000bfa:	4b31      	ldr	r3, [pc, #196]	; (8000cc0 <select_chip+0x1f0>)
      palSetLine(SEL4);
 8000bfc:	4a31      	ldr	r2, [pc, #196]	; (8000cc4 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000bfe:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000c02:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000c06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000c0a:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000c0c:	831d      	strh	r5, [r3, #24]
      palClearLine(SEL1);
 8000c0e:	835c      	strh	r4, [r3, #26]
      palClearLine(SEL2);
 8000c10:	8358      	strh	r0, [r3, #26]
      palSetLine(SEL4);
 8000c12:	8311      	strh	r1, [r2, #24]
      break;
 8000c14:	e77f      	b.n	8000b16 <select_chip+0x46>
      palClearLine(SEL0);
 8000c16:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <select_chip+0x1f0>)
      palSetLine(SEL4);
 8000c18:	4a2a      	ldr	r2, [pc, #168]	; (8000cc4 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000c1a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000c1e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000c22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000c26:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000c28:	835d      	strh	r5, [r3, #26]
      palSetLine(SEL1);
 8000c2a:	831c      	strh	r4, [r3, #24]
      palClearLine(SEL2);
 8000c2c:	8358      	strh	r0, [r3, #26]
      palSetLine(SEL4);
 8000c2e:	8311      	strh	r1, [r2, #24]
      break;
 8000c30:	e771      	b.n	8000b16 <select_chip+0x46>
      palSetLine(SEL0);
 8000c32:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <select_chip+0x1f0>)
      palSetLine(SEL4);
 8000c34:	4a23      	ldr	r2, [pc, #140]	; (8000cc4 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000c36:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000c3a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000c3e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000c42:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000c44:	831d      	strh	r5, [r3, #24]
      palSetLine(SEL1);
 8000c46:	831c      	strh	r4, [r3, #24]
      palClearLine(SEL2);
 8000c48:	8358      	strh	r0, [r3, #26]
      palSetLine(SEL4);
 8000c4a:	8311      	strh	r1, [r2, #24]
      break;
 8000c4c:	e763      	b.n	8000b16 <select_chip+0x46>
      palClearLine(SEL0);
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <select_chip+0x1f0>)
      palSetLine(SEL4);
 8000c50:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000c52:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000c56:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000c5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000c5e:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000c60:	835d      	strh	r5, [r3, #26]
      palClearLine(SEL1);
 8000c62:	835c      	strh	r4, [r3, #26]
      palSetLine(SEL2);
 8000c64:	8318      	strh	r0, [r3, #24]
      palSetLine(SEL4);
 8000c66:	8311      	strh	r1, [r2, #24]
      break;
 8000c68:	e755      	b.n	8000b16 <select_chip+0x46>
      palSetLine(SEL0);
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <select_chip+0x1f0>)
      palSetLine(SEL4);
 8000c6c:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000c6e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000c72:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000c76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000c7a:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000c7c:	831d      	strh	r5, [r3, #24]
      palClearLine(SEL1);
 8000c7e:	835c      	strh	r4, [r3, #26]
      palSetLine(SEL2);
 8000c80:	8318      	strh	r0, [r3, #24]
      palSetLine(SEL4);
 8000c82:	8311      	strh	r1, [r2, #24]
      break;
 8000c84:	e747      	b.n	8000b16 <select_chip+0x46>
      palClearLine(SEL0);
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <select_chip+0x1f0>)
      palSetLine(SEL4);
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000c8a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000c8e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000c92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000c96:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000c98:	835d      	strh	r5, [r3, #26]
      palSetLine(SEL1);
 8000c9a:	831c      	strh	r4, [r3, #24]
      palSetLine(SEL2);
 8000c9c:	8318      	strh	r0, [r3, #24]
      palSetLine(SEL4);
 8000c9e:	8311      	strh	r1, [r2, #24]
      break;
 8000ca0:	e739      	b.n	8000b16 <select_chip+0x46>
      palClearLine(SEL0);
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000ca6:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000caa:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000cae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000cb2:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000cb4:	835d      	strh	r5, [r3, #26]
      palClearLine(SEL1);
 8000cb6:	835c      	strh	r4, [r3, #26]
      palClearLine(SEL2);
 8000cb8:	8358      	strh	r0, [r3, #26]
      palClearLine(SEL4);
 8000cba:	8351      	strh	r1, [r2, #26]
      break;
 8000cbc:	e72b      	b.n	8000b16 <select_chip+0x46>
 8000cbe:	bf00      	nop
 8000cc0:	40020800 	.word	0x40020800
 8000cc4:	40020000 	.word	0x40020000
	...

08000cd0 <gptcb>:
  BUS_in_use = 0;
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <gptcb+0x14>)
  palToggleLine(DEBUG);
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <gptcb+0x18>)
  BUS_in_use = 0;
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	7019      	strb	r1, [r3, #0]
  palToggleLine(DEBUG);
 8000cd8:	6953      	ldr	r3, [r2, #20]
 8000cda:	f083 0301 	eor.w	r3, r3, #1
 8000cde:	6153      	str	r3, [r2, #20]
}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000c48 	.word	0x20000c48
 8000ce8:	40020400 	.word	0x40020400
 8000cec:	00000000 	.word	0x00000000

08000cf0 <requests_hook>:
 * Handling messages not implemented in the default handler nor in the
 * SerialUSB handler.
 */
static bool requests_hook(USBDriver *usbp) {

  if (((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE) &&
 8000cf0:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
static bool requests_hook(USBDriver *usbp) {
 8000cf4:	4603      	mov	r3, r0
  if (((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE) &&
 8000cf6:	f002 001f 	and.w	r0, r2, #31
 8000cfa:	2801      	cmp	r0, #1
 8000cfc:	d103      	bne.n	8000d06 <requests_hook+0x16>
 8000cfe:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8000d02:	290b      	cmp	r1, #11
 8000d04:	d01b      	beq.n	8000d3e <requests_hook+0x4e>
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8000d06:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8000d0a:	2a20      	cmp	r2, #32
 8000d0c:	d001      	beq.n	8000d12 <requests_hook+0x22>
      return true;
    default:
      return false;
    }
  }
  return false;
 8000d0e:	2000      	movs	r0, #0
      (usbp->setup[1] == USB_REQ_SET_INTERFACE)) {
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  }
  return sduRequestsHook(usbp);
}
 8000d10:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8000d12:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8000d16:	2a21      	cmp	r2, #33	; 0x21
 8000d18:	d809      	bhi.n	8000d2e <requests_hook+0x3e>
 8000d1a:	2a1f      	cmp	r2, #31
 8000d1c:	d9f7      	bls.n	8000d0e <requests_hook+0x1e>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <requests_hook+0x58>)
 8000d20:	639a      	str	r2, [r3, #56]	; 0x38
 8000d22:	2107      	movs	r1, #7
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c3 120f 	strd	r1, r2, [r3, #60]	; 0x3c
      return true;
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8000d2e:	2a22      	cmp	r2, #34	; 0x22
 8000d30:	d1ed      	bne.n	8000d0e <requests_hook+0x1e>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000d32:	2200      	movs	r2, #0
 8000d34:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8000d38:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	4770      	bx	lr
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8000d44:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8000d46:	4770      	bx	lr
 8000d48:	20000800 	.word	0x20000800
 8000d4c:	00000000 	.word	0x00000000

08000d50 <get_descriptor>:
  switch (dtype) {
 8000d50:	2902      	cmp	r1, #2
 8000d52:	d006      	beq.n	8000d62 <get_descriptor+0x12>
 8000d54:	2903      	cmp	r1, #3
 8000d56:	d006      	beq.n	8000d66 <get_descriptor+0x16>
 8000d58:	2901      	cmp	r1, #1
    return &vcom_device_descriptor;
 8000d5a:	4807      	ldr	r0, [pc, #28]	; (8000d78 <get_descriptor+0x28>)
 8000d5c:	bf18      	it	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bx	lr
  switch (dtype) {
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <get_descriptor+0x2c>)
 8000d64:	4770      	bx	lr
    if (dindex < 4)
 8000d66:	2a03      	cmp	r2, #3
 8000d68:	d803      	bhi.n	8000d72 <get_descriptor+0x22>
      return &vcom_strings[dindex];
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <get_descriptor+0x30>)
 8000d6c:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8000d70:	4770      	bx	lr
  return NULL;
 8000d72:	2000      	movs	r0, #0
}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	0800a670 	.word	0x0800a670
 8000d7c:	0800a61c 	.word	0x0800a61c
 8000d80:	0800a6f8 	.word	0x0800a6f8
	...

08000d90 <sym_to_val>:
#include "chscanf.h"
#include "memstreams.h"

static long sym_to_val(char sym, int base)
{
  sym = tolower(sym);
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <sym_to_val+0x54>)
 8000d92:	5cc3      	ldrb	r3, [r0, r3]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	bf04      	itt	eq
 8000d9c:	f100 0320 	addeq.w	r3, r0, #32
 8000da0:	b2d8      	uxtbeq	r0, r3
  if (sym <= '7' && sym >= '0') {
 8000da2:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
  sym = tolower(sym);
 8000da6:	bf18      	it	ne
 8000da8:	4603      	movne	r3, r0
  if (sym <= '7' && sym >= '0') {
 8000daa:	2a07      	cmp	r2, #7
 8000dac:	d912      	bls.n	8000dd4 <sym_to_val+0x44>
    return sym - '0';
  }
  switch (base) {
 8000dae:	290a      	cmp	r1, #10
 8000db0:	d008      	beq.n	8000dc4 <sym_to_val+0x34>
 8000db2:	2910      	cmp	r1, #16
 8000db4:	d002      	beq.n	8000dbc <sym_to_val+0x2c>
 8000db6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dba:	4770      	bx	lr
  case 16:
    if (sym <= 'f' && sym >= 'a') {
 8000dbc:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
 8000dc0:	2a05      	cmp	r2, #5
 8000dc2:	d90a      	bls.n	8000dda <sym_to_val+0x4a>
      return (sym - 'a' + 0xa);
    }
    /* fallthrough */
  case 10:
    if (sym == '8') {
 8000dc4:	2838      	cmp	r0, #56	; 0x38
 8000dc6:	d00b      	beq.n	8000de0 <sym_to_val+0x50>
      return 8;
    }
    if (sym == '9') {
      return 9;
 8000dc8:	2839      	cmp	r0, #57	; 0x39
 8000dca:	bf14      	ite	ne
 8000dcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000dd0:	2009      	moveq	r0, #9
 8000dd2:	4770      	bx	lr
    return sym - '0';
 8000dd4:	b2d8      	uxtb	r0, r3
 8000dd6:	3830      	subs	r0, #48	; 0x30
 8000dd8:	4770      	bx	lr
      return (sym - 'a' + 0xa);
 8000dda:	b2d8      	uxtb	r0, r3
 8000ddc:	3857      	subs	r0, #87	; 0x57
 8000dde:	4770      	bx	lr
      return 8;
 8000de0:	2008      	movs	r0, #8
    }
    /* fallthrough */
  default:
    return -1;
  }
}
 8000de2:	4770      	bx	lr
 8000de4:	0800a76d 	.word	0x0800a76d
	...

08000df0 <_port_irq_epilogue>:
 8000df0:	2320      	movs	r3, #32
 8000df2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <_port_irq_epilogue+0x3c>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000dfe:	d102      	bne.n	8000e06 <_port_irq_epilogue+0x16>
 8000e00:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000e04:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000e06:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 8000e0a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8000e0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e10:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000e12:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000e16:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <_port_irq_epilogue+0x40>)
 8000e18:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8000e1a:	6952      	ldr	r2, [r2, #20]
    if (chSchIsPreemptionRequired()) {
 8000e1c:	6889      	ldr	r1, [r1, #8]
 8000e1e:	6892      	ldr	r2, [r2, #8]
 8000e20:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000e22:	bf8c      	ite	hi
 8000e24:	4a03      	ldrhi	r2, [pc, #12]	; (8000e34 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000e26:	4a04      	ldrls	r2, [pc, #16]	; (8000e38 <_port_irq_epilogue+0x48>)
 8000e28:	619a      	str	r2, [r3, #24]
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00
 8000e30:	200018d0 	.word	0x200018d0
 8000e34:	08000303 	.word	0x08000303
 8000e38:	08000306 	.word	0x08000306
 8000e3c:	00000000 	.word	0x00000000

08000e40 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000e40:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000e42:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000e44:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000e48:	4249      	negs	r1, r1
 8000e4a:	1a20      	subs	r0, r4, r0
 8000e4c:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000e4e:	4298      	cmp	r0, r3
 8000e50:	d304      	bcc.n	8000e5c <chCoreAllocAlignedI+0x1c>
 8000e52:	4284      	cmp	r4, r0
 8000e54:	d302      	bcc.n	8000e5c <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000e56:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8000e58:	6050      	str	r0, [r2, #4]
 8000e5a:	4770      	bx	lr
    return NULL;
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	bc10      	pop	{r4}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20001a68 	.word	0x20001a68
	...

08000e70 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000e70:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <chTMStopMeasurementX+0x40>)
 8000e74:	6852      	ldr	r2, [r2, #4]
 8000e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  tmp->last = (now - tmp->last) - offset;
 8000e78:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000e7a:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 8000e7c:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 8000e7e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8000e82:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000e84:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8000e86:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 8000e88:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 8000e8a:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8000e8c:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 8000e8e:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8000e90:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000e92:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000e96:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8000e98:	bf88      	it	hi
 8000e9a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8000e9c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000e9e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8000ea2:	bf38      	it	cc
 8000ea4:	6003      	strcc	r3, [r0, #0]
}
 8000ea6:	bc30      	pop	{r4, r5}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e0001000 	.word	0xe0001000
 8000eb0:	200018d0 	.word	0x200018d0
	...

08000ec0 <chTMStartMeasurementX>:
 8000ec0:	4b01      	ldr	r3, [pc, #4]	; (8000ec8 <chTMStartMeasurementX+0x8>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8000ec4:	6083      	str	r3, [r0, #8]
}
 8000ec6:	4770      	bx	lr
 8000ec8:	e0001000 	.word	0xe0001000
 8000ecc:	00000000 	.word	0x00000000

08000ed0 <chThdCreateSuspendedI>:
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000ed0:	6883      	ldr	r3, [r0, #8]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8000ed2:	6841      	ldr	r1, [r0, #4]
  REG_INSERT(tp);
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	; (8000f40 <chThdCreateSuspendedI+0x70>)
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8000ed6:	b4f0      	push	{r4, r5, r6, r7}
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000ed8:	e9d0 7504 	ldrd	r7, r5, [r0, #16]
  tp->state     = CH_STATE_WTSTART;
 8000edc:	2602      	movs	r6, #2
  tp->wabase = tdp->wbase;
 8000ede:	f843 1c2c 	str.w	r1, [r3, #-44]
  tp->refs      = (trefs_t)1;
 8000ee2:	2401      	movs	r4, #1
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000ee4:	2100      	movs	r1, #0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000ee6:	e943 751b 	strd	r7, r5, [r3, #-108]	; 0x6c

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 8000eea:	6805      	ldr	r5, [r0, #0]
 8000eec:	68c0      	ldr	r0, [r0, #12]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000eee:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 8000ef2:	f803 6c28 	strb.w	r6, [r3, #-40]
  tp->refs      = (trefs_t)1;
 8000ef6:	f803 4c26 	strb.w	r4, [r3, #-38]
  REG_INSERT(tp);
 8000efa:	f843 2c3c 	str.w	r2, [r3, #-60]
 8000efe:	6914      	ldr	r4, [r2, #16]
  tp->prio      = prio;
 8000f00:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
 8000f04:	f843 0c0c 	str.w	r0, [r3, #-12]
  tp->name      = name;
 8000f08:	f843 5c30 	str.w	r5, [r3, #-48]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000f0c:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 8000f10:	4d0c      	ldr	r5, [pc, #48]	; (8000f44 <chThdCreateSuspendedI+0x74>)
 8000f12:	f843 0c34 	str.w	r0, [r3, #-52]
  tp->epending  = (eventmask_t)0;
 8000f16:	e943 1105 	strd	r1, r1, [r3, #-20]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000f1a:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000f1e:	f843 5c4c 	str.w	r5, [r3, #-76]
  queue_init(&tp->msgqueue);
 8000f22:	f1a3 011c 	sub.w	r1, r3, #28
  list_init(&tp->waiting);
 8000f26:	f1a3 0520 	sub.w	r5, r3, #32
  REG_INSERT(tp);
 8000f2a:	f843 4c38 	str.w	r4, [r3, #-56]
 8000f2e:	60e0      	str	r0, [r4, #12]
 8000f30:	6110      	str	r0, [r2, #16]
  tqp->next = (thread_t *)tqp;
 8000f32:	e943 5108 	strd	r5, r1, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8000f36:	f843 1c18 	str.w	r1, [r3, #-24]
}
 8000f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200018d0 	.word	0x200018d0
 8000f44:	080002f1 	.word	0x080002f1
	...

08000f50 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000f50:	2320      	movs	r3, #32
 8000f52:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8000f56:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000f5a:	2b07      	cmp	r3, #7
 8000f5c:	d80d      	bhi.n	8000f7a <wakeup+0x2a>
 8000f5e:	e8df f003 	tbb	[pc, r3]
 8000f62:	0c27      	.short	0x0c27
 8000f64:	0408230c 	.word	0x0408230c
 8000f68:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 8000f6a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000f6c:	6893      	ldr	r3, [r2, #8]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000f72:	e9d0 3200 	ldrd	r3, r2, [r0]
 8000f76:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000f78:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 8000f7a:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 8000f7c:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000f7e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 8000f82:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8000f86:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8000f88:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8000f8c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	428a      	cmp	r2, r1
 8000f92:	d2fb      	bcs.n	8000f8c <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	2100      	movs	r1, #0
 8000f98:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000f9c:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000f9e:	6058      	str	r0, [r3, #4]
 8000fa0:	f381 8811 	msr	BASEPRI, r1
}
 8000fa4:	bc10      	pop	{r4}
 8000fa6:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8000fa8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
    break;
 8000fae:	e7e4      	b.n	8000f7a <wakeup+0x2a>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f383 8811 	msr	BASEPRI, r3
 8000fb6:	4770      	bx	lr
 8000fb8:	200018d0 	.word	0x200018d0
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8000fc0:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8000fc2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 8000fc6:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8000fca:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	428a      	cmp	r2, r1
 8000fd0:	d2fb      	bcs.n	8000fca <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000fd8:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000fda:	6058      	str	r0, [r3, #4]
}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	200018d0 	.word	0x200018d0
	...

08000ff0 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8000ff0:	b538      	push	{r3, r4, r5, lr}
 8000ff2:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000ff4:	6800      	ldr	r0, [r0, #0]

  while (queue_notempty(tqp)) {
 8000ff6:	4284      	cmp	r4, r0
 8000ff8:	d00a      	beq.n	8001010 <chThdDequeueAllI.constprop.0+0x20>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000ffa:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 8000ffe:	6803      	ldr	r3, [r0, #0]
 8001000:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001002:	605c      	str	r4, [r3, #4]
 8001004:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001006:	f7ff ffdb 	bl	8000fc0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800100a:	6820      	ldr	r0, [r4, #0]
 800100c:	42a0      	cmp	r0, r4
 800100e:	d1f6      	bne.n	8000ffe <chThdDequeueAllI.constprop.0+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001010:	bd38      	pop	{r3, r4, r5, pc}
 8001012:	bf00      	nop
	...

08001020 <chThdDequeueNextI.constprop.0>:
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001020:	4603      	mov	r3, r0
 8001022:	6800      	ldr	r0, [r0, #0]
  if (queue_notempty(tqp)) {
 8001024:	4283      	cmp	r3, r0
 8001026:	d006      	beq.n	8001036 <chThdDequeueNextI.constprop.0+0x16>
  tqp->next             = tp->queue.next;
 8001028:	6802      	ldr	r2, [r0, #0]
 800102a:	601a      	str	r2, [r3, #0]
  tp->u.rdymsg = msg;
 800102c:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800102e:	6053      	str	r3, [r2, #4]
 8001030:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001032:	f7ff bfc5 	b.w	8000fc0 <chSchReadyI>
}
 8001036:	4770      	bx	lr
	...

08001040 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8001042:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001044:	42a0      	cmp	r0, r4
 8001046:	d021      	beq.n	800108c <chEvtBroadcastFlagsI+0x4c>
 8001048:	4607      	mov	r7, r0
 800104a:	460d      	mov	r5, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800104c:	2600      	movs	r6, #0
 800104e:	e004      	b.n	800105a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001050:	2a0b      	cmp	r2, #11
 8001052:	d01c      	beq.n	800108e <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
 8001054:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001056:	42a7      	cmp	r7, r4
 8001058:	d018      	beq.n	800108c <chEvtBroadcastFlagsI+0x4c>
    elp->flags |= flags;
 800105a:	68e3      	ldr	r3, [r4, #12]
 800105c:	432b      	orrs	r3, r5
 800105e:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001060:	b115      	cbz	r5, 8001068 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8001062:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8001064:	421d      	tst	r5, r3
 8001066:	d0f5      	beq.n	8001054 <chEvtBroadcastFlagsI+0x14>
  tp->epending |= events;
 8001068:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 800106c:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800106e:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8001072:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001074:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8001076:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001078:	d1ea      	bne.n	8001050 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800107a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 800107c:	4213      	tst	r3, r2
 800107e:	d0e9      	beq.n	8001054 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
 8001080:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001082:	f7ff ff9d 	bl	8000fc0 <chSchReadyI>
    elp = elp->next;
 8001086:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001088:	42a7      	cmp	r7, r4
 800108a:	d1e6      	bne.n	800105a <chEvtBroadcastFlagsI+0x1a>
}
 800108c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800108e:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8001090:	ea32 0303 	bics.w	r3, r2, r3
 8001094:	d1de      	bne.n	8001054 <chEvtBroadcastFlagsI+0x14>
 8001096:	e7f3      	b.n	8001080 <chEvtBroadcastFlagsI+0x40>
	...

080010a0 <chSysPolledDelayX>:
 80010a0:	4a03      	ldr	r2, [pc, #12]	; (80010b0 <chSysPolledDelayX+0x10>)
 80010a2:	6851      	ldr	r1, [r2, #4]
 80010a4:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)(((rtcnt_t)cnt - (rtcnt_t)start) <
 80010a6:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 80010a8:	4298      	cmp	r0, r3
 80010aa:	d8fb      	bhi.n	80010a4 <chSysPolledDelayX+0x4>
  }
}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e0001000 	.word	0xe0001000
	...

080010c0 <_idle_thread>:
}
 80010c0:	e7fe      	b.n	80010c0 <_idle_thread>
 80010c2:	bf00      	nop
	...

080010d0 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 80010d4:	f8d0 6254 	ldr.w	r6, [r0, #596]	; 0x254
  uint16_t cr1 = u->CR1;
 80010d8:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 80010dc:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80010de:	05da      	lsls	r2, r3, #23
static void serve_interrupt(SerialDriver *sdp) {
 80010e0:	4605      	mov	r5, r0
  uint16_t sr = u->SR;
 80010e2:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 80010e4:	d475      	bmi.n	80011d2 <serve_interrupt+0x102>
 80010e6:	2320      	movs	r3, #32
 80010e8:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80010ec:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80010f0:	d045      	beq.n	800117e <serve_interrupt+0xae>
  chnAddFlagsI(sdp, sts);
 80010f2:	1d2f      	adds	r7, r5, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 80010f4:	f105 080c 	add.w	r8, r5, #12
 80010f8:	e008      	b.n	800110c <serve_interrupt+0x3c>
    if (sr & USART_SR_RXNE)
 80010fa:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80010fc:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8001100:	d41e      	bmi.n	8001140 <serve_interrupt+0x70>
    sr = u->SR;
 8001102:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001104:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8001108:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800110a:	d038      	beq.n	800117e <serve_interrupt+0xae>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800110c:	0723      	lsls	r3, r4, #28
 800110e:	d0f4      	beq.n	80010fa <serve_interrupt+0x2a>
    sts |= SD_OVERRUN_ERROR;
 8001110:	f014 0f08 	tst.w	r4, #8
 8001114:	bf0c      	ite	eq
 8001116:	2100      	moveq	r1, #0
 8001118:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800111a:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 800111c:	bf48      	it	mi
 800111e:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8001122:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8001124:	bf48      	it	mi
 8001126:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800112a:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 800112c:	bf48      	it	mi
 800112e:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001132:	4638      	mov	r0, r7
 8001134:	f7ff ff84 	bl	8001040 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8001138:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800113a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800113e:	d5e0      	bpl.n	8001102 <serve_interrupt+0x32>
  if (iqIsEmptyI(&sdp->iqueue))
 8001140:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8001142:	f895 4258 	ldrb.w	r4, [r5, #600]	; 0x258
 8001146:	b39b      	cbz	r3, 80011b0 <serve_interrupt+0xe0>
  if (!iqIsFullI(iqp)) {
 8001148:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 800114c:	4293      	cmp	r3, r2
 800114e:	d037      	beq.n	80011c0 <serve_interrupt+0xf0>
    iqp->q_counter++;
 8001150:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8001152:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8001154:	3201      	adds	r2, #1
 8001156:	ea04 0a0a 	and.w	sl, r4, sl
 800115a:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 800115c:	6229      	str	r1, [r5, #32]
 800115e:	f883 a000 	strb.w	sl, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 8001162:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 8001166:	429a      	cmp	r2, r3
 8001168:	d301      	bcc.n	800116e <serve_interrupt+0x9e>
      iqp->q_wrptr = iqp->q_buffer;
 800116a:	69ab      	ldr	r3, [r5, #24]
 800116c:	622b      	str	r3, [r5, #32]
  chThdDequeueNextI(tqp, msg);
 800116e:	4640      	mov	r0, r8
 8001170:	f7ff ff56 	bl	8001020 <chThdDequeueNextI.constprop.0>
    sr = u->SR;
 8001174:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001176:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 800117a:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800117c:	d1c6      	bne.n	800110c <serve_interrupt+0x3c>
 800117e:	2300      	movs	r3, #0
 8001180:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001184:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001188:	d001      	beq.n	800118e <serve_interrupt+0xbe>
 800118a:	0622      	lsls	r2, r4, #24
 800118c:	d430      	bmi.n	80011f0 <serve_interrupt+0x120>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800118e:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001192:	d00b      	beq.n	80011ac <serve_interrupt+0xdc>
 8001194:	0663      	lsls	r3, r4, #25
 8001196:	d509      	bpl.n	80011ac <serve_interrupt+0xdc>
 8001198:	2320      	movs	r3, #32
 800119a:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 800119e:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d03f      	beq.n	8001226 <serve_interrupt+0x156>
 80011a6:	2300      	movs	r3, #0
 80011a8:	f383 8811 	msr	BASEPRI, r3
}
 80011ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chEvtBroadcastFlagsI(esp, flags);
 80011b0:	2104      	movs	r1, #4
 80011b2:	4638      	mov	r0, r7
 80011b4:	f7ff ff44 	bl	8001040 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 80011b8:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 80011bc:	4293      	cmp	r3, r2
 80011be:	d1c7      	bne.n	8001150 <serve_interrupt+0x80>
 80011c0:	696a      	ldr	r2, [r5, #20]
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	d0c4      	beq.n	8001150 <serve_interrupt+0x80>
 80011c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ca:	4638      	mov	r0, r7
 80011cc:	f7ff ff38 	bl	8001040 <chEvtBroadcastFlagsI>
 80011d0:	e797      	b.n	8001102 <serve_interrupt+0x32>
 80011d2:	2320      	movs	r3, #32
 80011d4:	f383 8811 	msr	BASEPRI, r3
 80011d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011dc:	3004      	adds	r0, #4
 80011de:	f7ff ff2f 	bl	8001040 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 80011e2:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80011e6:	6033      	str	r3, [r6, #0]
 80011e8:	2300      	movs	r3, #0
 80011ea:	f383 8811 	msr	BASEPRI, r3
 80011ee:	e77a      	b.n	80010e6 <serve_interrupt+0x16>
 80011f0:	2320      	movs	r3, #32
 80011f2:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 80011f6:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d020      	beq.n	8001240 <serve_interrupt+0x170>
    uint8_t b;

    oqp->q_counter++;
 80011fe:	6baa      	ldr	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
 8001200:	6c29      	ldr	r1, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8001202:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 8001204:	3201      	adds	r2, #1
 8001206:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8001208:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 800120a:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 800120c:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 800120e:	d301      	bcc.n	8001214 <serve_interrupt+0x144>
      oqp->q_rdptr = oqp->q_buffer;
 8001210:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001212:	64ab      	str	r3, [r5, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 8001214:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8001218:	f7ff ff02 	bl	8001020 <chThdDequeueNextI.constprop.0>
      u->DR = b;
 800121c:	6077      	str	r7, [r6, #4]
 800121e:	2300      	movs	r3, #0
 8001220:	f383 8811 	msr	BASEPRI, r3
 8001224:	e7b3      	b.n	800118e <serve_interrupt+0xbe>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8001226:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0bc      	beq.n	80011a6 <serve_interrupt+0xd6>
  chEvtBroadcastFlagsI(esp, flags);
 800122c:	1d28      	adds	r0, r5, #4
 800122e:	2110      	movs	r1, #16
 8001230:	f7ff ff06 	bl	8001040 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001234:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8001238:	ea09 0303 	and.w	r3, r9, r3
 800123c:	60f3      	str	r3, [r6, #12]
 800123e:	e7b2      	b.n	80011a6 <serve_interrupt+0xd6>
  if (!oqIsEmptyI(oqp)) {
 8001240:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001242:	2a00      	cmp	r2, #0
 8001244:	d0db      	beq.n	80011fe <serve_interrupt+0x12e>
 8001246:	2108      	movs	r1, #8
 8001248:	1d28      	adds	r0, r5, #4
 800124a:	f7ff fef9 	bl	8001040 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 800124e:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8001252:	ea09 0303 	and.w	r3, r9, r3
 8001256:	60f3      	str	r3, [r6, #12]
 8001258:	e7e1      	b.n	800121e <serve_interrupt+0x14e>
 800125a:	bf00      	nop
 800125c:	0000      	movs	r0, r0
	...

08001260 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001260:	f011 0f0c 	tst.w	r1, #12
 8001264:	d100      	bne.n	8001268 <spi_lld_serve_tx_interrupt+0x8>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 8001266:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800126a:	4b02      	ldr	r3, [pc, #8]	; (8001274 <spi_lld_serve_tx_interrupt+0x14>)
 800126c:	4a02      	ldr	r2, [pc, #8]	; (8001278 <spi_lld_serve_tx_interrupt+0x18>)
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
 8001270:	e7fe      	b.n	8001270 <spi_lld_serve_tx_interrupt+0x10>
 8001272:	bf00      	nop
 8001274:	200018d0 	.word	0x200018d0
 8001278:	08009ba0 	.word	0x08009ba0
 800127c:	00000000 	.word	0x00000000

08001280 <spi_lld_serve_rx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001280:	f011 0f0c 	tst.w	r1, #12
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8001284:	b538      	push	{r3, r4, r5, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001286:	d14f      	bne.n	8001328 <spi_lld_serve_rx_interrupt+0xa8>
  if (spip->config->circular) {
 8001288:	460d      	mov	r5, r1
 800128a:	6841      	ldr	r1, [r0, #4]
 800128c:	780b      	ldrb	r3, [r1, #0]
 800128e:	4604      	mov	r4, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d133      	bne.n	80012fc <spi_lld_serve_rx_interrupt+0x7c>
    dmaStreamDisable(spip->dmatx);
 8001294:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001296:	682a      	ldr	r2, [r5, #0]
 8001298:	6813      	ldr	r3, [r2, #0]
 800129a:	f023 031f 	bic.w	r3, r3, #31
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	6813      	ldr	r3, [r2, #0]
 80012a2:	07d8      	lsls	r0, r3, #31
 80012a4:	d4fc      	bmi.n	80012a0 <spi_lld_serve_rx_interrupt+0x20>
 80012a6:	7a6a      	ldrb	r2, [r5, #9]
    dmaStreamDisable(spip->dmarx);
 80012a8:	6a20      	ldr	r0, [r4, #32]
    dmaStreamDisable(spip->dmatx);
 80012aa:	686d      	ldr	r5, [r5, #4]
 80012ac:	233d      	movs	r3, #61	; 0x3d
 80012ae:	4093      	lsls	r3, r2
    dmaStreamDisable(spip->dmarx);
 80012b0:	6802      	ldr	r2, [r0, #0]
    dmaStreamDisable(spip->dmatx);
 80012b2:	602b      	str	r3, [r5, #0]
    dmaStreamDisable(spip->dmarx);
 80012b4:	6813      	ldr	r3, [r2, #0]
 80012b6:	f023 031f 	bic.w	r3, r3, #31
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	6813      	ldr	r3, [r2, #0]
 80012be:	07db      	lsls	r3, r3, #31
 80012c0:	d4fc      	bmi.n	80012bc <spi_lld_serve_rx_interrupt+0x3c>
 80012c2:	7a45      	ldrb	r5, [r0, #9]
    _spi_isr_code(spip);
 80012c4:	684a      	ldr	r2, [r1, #4]
    dmaStreamDisable(spip->dmarx);
 80012c6:	6841      	ldr	r1, [r0, #4]
 80012c8:	233d      	movs	r3, #61	; 0x3d
 80012ca:	40ab      	lsls	r3, r5
 80012cc:	600b      	str	r3, [r1, #0]
    _spi_isr_code(spip);
 80012ce:	2a00      	cmp	r2, #0
 80012d0:	d02f      	beq.n	8001332 <spi_lld_serve_rx_interrupt+0xb2>
 80012d2:	2304      	movs	r3, #4
 80012d4:	7023      	strb	r3, [r4, #0]
 80012d6:	4620      	mov	r0, r4
 80012d8:	4790      	blx	r2
 80012da:	7823      	ldrb	r3, [r4, #0]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d028      	beq.n	8001332 <spi_lld_serve_rx_interrupt+0xb2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80012e0:	2320      	movs	r3, #32
 80012e2:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80012e6:	68a0      	ldr	r0, [r4, #8]
 80012e8:	b120      	cbz	r0, 80012f4 <spi_lld_serve_rx_interrupt+0x74>
    *trp = NULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60a3      	str	r3, [r4, #8]
    tp->u.rdymsg = msg;
 80012ee:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80012f0:	f7ff fe66 	bl	8000fc0 <chSchReadyI>
 80012f4:	2300      	movs	r3, #0
 80012f6:	f383 8811 	msr	BASEPRI, r3
}
 80012fa:	bd38      	pop	{r3, r4, r5, pc}
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 80012fc:	06eb      	lsls	r3, r5, #27
 80012fe:	d503      	bpl.n	8001308 <spi_lld_serve_rx_interrupt+0x88>
      _spi_isr_half_code(spip);
 8001300:	684b      	ldr	r3, [r1, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f9      	beq.n	80012fa <spi_lld_serve_rx_interrupt+0x7a>
 8001306:	4798      	blx	r3
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8001308:	06ad      	lsls	r5, r5, #26
 800130a:	d5f6      	bpl.n	80012fa <spi_lld_serve_rx_interrupt+0x7a>
      _spi_isr_full_code(spip);
 800130c:	6863      	ldr	r3, [r4, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f2      	beq.n	80012fa <spi_lld_serve_rx_interrupt+0x7a>
 8001314:	2204      	movs	r2, #4
 8001316:	7022      	strb	r2, [r4, #0]
 8001318:	4620      	mov	r0, r4
 800131a:	4798      	blx	r3
 800131c:	7823      	ldrb	r3, [r4, #0]
 800131e:	2b04      	cmp	r3, #4
 8001320:	d1eb      	bne.n	80012fa <spi_lld_serve_rx_interrupt+0x7a>
 8001322:	2303      	movs	r3, #3
 8001324:	7023      	strb	r3, [r4, #0]
}
 8001326:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <spi_lld_serve_rx_interrupt+0xc4>)
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <spi_lld_serve_rx_interrupt+0xc8>)
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
 8001330:	e7fe      	b.n	8001330 <spi_lld_serve_rx_interrupt+0xb0>
    _spi_isr_code(spip);
 8001332:	2302      	movs	r3, #2
 8001334:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001336:	2320      	movs	r3, #32
 8001338:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 800133c:	68a0      	ldr	r0, [r4, #8]
 800133e:	2800      	cmp	r0, #0
 8001340:	d1d3      	bne.n	80012ea <spi_lld_serve_rx_interrupt+0x6a>
 8001342:	e7d7      	b.n	80012f4 <spi_lld_serve_rx_interrupt+0x74>
 8001344:	200018d0 	.word	0x200018d0
 8001348:	08009ba0 	.word	0x08009ba0
 800134c:	00000000 	.word	0x00000000

08001350 <usb_lld_start_in>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001350:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8001354:	b430      	push	{r4, r5}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001356:	68dc      	ldr	r4, [r3, #12]
 8001358:	6962      	ldr	r2, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 800135a:	6813      	ldr	r3, [r2, #0]
 800135c:	60d3      	str	r3, [r2, #12]
  if (isp->txsize == 0) {
 800135e:	b9f3      	cbnz	r3, 800139e <usb_lld_start_in+0x4e>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8001360:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001362:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 8001366:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800136a:	f8c3 0910 	str.w	r0, [r3, #2320]	; 0x910
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b01      	cmp	r3, #1
 8001376:	d02a      	beq.n	80013ce <usb_lld_start_in+0x7e>
 8001378:	b208      	sxth	r0, r1
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800137a:	eb02 1040 	add.w	r0, r2, r0, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800137e:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8001380:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8001384:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001388:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800138c:	f8d2 0834 	ldr.w	r0, [r2, #2100]	; 0x834
 8001390:	fa03 f101 	lsl.w	r1, r3, r1
 8001394:	4301      	orrs	r1, r0
}
 8001396:	bc30      	pop	{r4, r5}
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8001398:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
 800139c:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 800139e:	b919      	cbnz	r1, 80013a8 <usb_lld_start_in+0x58>
 80013a0:	2b40      	cmp	r3, #64	; 0x40
      isp->txsize = EP0_MAX_INSIZE;
 80013a2:	bf84      	itt	hi
 80013a4:	2340      	movhi	r3, #64	; 0x40
 80013a6:	6013      	strhi	r3, [r2, #0]
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80013a8:	8a25      	ldrh	r5, [r4, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80013aa:	6d42      	ldr	r2, [r0, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80013ac:	1e68      	subs	r0, r5, #1
 80013ae:	4418      	add	r0, r3
 80013b0:	fbb0 f0f5 	udiv	r0, r0, r5
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80013b4:	eb02 1541 	add.w	r5, r2, r1, lsl #5
 80013b8:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 80013bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013c0:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d1d4      	bne.n	8001378 <usb_lld_start_in+0x28>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 80013ce:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 80013d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80013d6:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 80013da:	b208      	sxth	r0, r1
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 80013dc:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80013e0:	bf14      	ite	ne
 80013e2:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 80013e6:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
 80013ea:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 80013ee:	e7c4      	b.n	800137a <usb_lld_start_in+0x2a>

080013f0 <otg_epin_handler.constprop.0>:
  stm32_otg_t *otgp = usbp->otg;
 80013f0:	4a20      	ldr	r2, [pc, #128]	; (8001474 <otg_epin_handler.constprop.0+0x84>)
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 80013f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  stm32_otg_t *otgp = usbp->otg;
 80013f4:	6d56      	ldr	r6, [r2, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 80013f6:	eb06 1340 	add.w	r3, r6, r0, lsl #5
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 80013fa:	4604      	mov	r4, r0
  uint32_t epint = otgp->ie[ep].DIEPINT;
 80013fc:	f8d3 5908 	ldr.w	r5, [r3, #2312]	; 0x908
  otgp->ie[ep].DIEPINT = epint;
 8001400:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8001404:	07e8      	lsls	r0, r5, #31
 8001406:	d503      	bpl.n	8001410 <otg_epin_handler.constprop.0+0x20>
 8001408:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 800140c:	07d9      	lsls	r1, r3, #31
 800140e:	d408      	bmi.n	8001422 <otg_epin_handler.constprop.0+0x32>
  if ((epint & DIEPINT_TXFE) &&
 8001410:	062b      	lsls	r3, r5, #24
 8001412:	d505      	bpl.n	8001420 <otg_epin_handler.constprop.0+0x30>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8001414:	f8d6 2834 	ldr.w	r2, [r6, #2100]	; 0x834
 8001418:	2301      	movs	r3, #1
 800141a:	40a3      	lsls	r3, r4
  if ((epint & DIEPINT_TXFE) &&
 800141c:	4213      	tst	r3, r2
 800141e:	d115      	bne.n	800144c <otg_epin_handler.constprop.0+0x5c>
}
 8001420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001422:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8001426:	68d8      	ldr	r0, [r3, #12]
 8001428:	6943      	ldr	r3, [r0, #20]
    if (isp->txsize < isp->totsize) {
 800142a:	681f      	ldr	r7, [r3, #0]
 800142c:	68d9      	ldr	r1, [r3, #12]
 800142e:	428f      	cmp	r7, r1
 8001430:	d311      	bcc.n	8001456 <otg_epin_handler.constprop.0+0x66>
      _usb_isr_invoke_in_cb(usbp, ep);
 8001432:	8913      	ldrh	r3, [r2, #8]
 8001434:	6887      	ldr	r7, [r0, #8]
 8001436:	2101      	movs	r1, #1
 8001438:	40a1      	lsls	r1, r4
 800143a:	ea23 0301 	bic.w	r3, r3, r1
 800143e:	8113      	strh	r3, [r2, #8]
 8001440:	2f00      	cmp	r7, #0
 8001442:	d0e5      	beq.n	8001410 <otg_epin_handler.constprop.0+0x20>
 8001444:	4610      	mov	r0, r2
 8001446:	4621      	mov	r1, r4
 8001448:	47b8      	blx	r7
 800144a:	e7e1      	b.n	8001410 <otg_epin_handler.constprop.0+0x20>
    otg_txfifo_handler(usbp, ep);
 800144c:	4620      	mov	r0, r4
}
 800144e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    otg_txfifo_handler(usbp, ep);
 8001452:	f7ff ba7d 	b.w	8000950 <otg_txfifo_handler.constprop.0>
      isp->txsize = isp->totsize - isp->txsize;
 8001456:	1bc9      	subs	r1, r1, r7
      isp->txcnt  = 0;
 8001458:	2700      	movs	r7, #0
 800145a:	e9c3 1700 	strd	r1, r7, [r3]
 800145e:	2320      	movs	r3, #32
 8001460:	f383 8811 	msr	BASEPRI, r3
      usb_lld_start_in(usbp, ep);
 8001464:	4610      	mov	r0, r2
 8001466:	4621      	mov	r1, r4
 8001468:	f7ff ff72 	bl	8001350 <usb_lld_start_in>
 800146c:	f387 8811 	msr	BASEPRI, r7
 8001470:	e7ce      	b.n	8001410 <otg_epin_handler.constprop.0+0x20>
 8001472:	bf00      	nop
 8001474:	20001868 	.word	0x20001868
	...

08001480 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8001480:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8001484:	b430      	push	{r4, r5}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8001486:	68dd      	ldr	r5, [r3, #12]
 8001488:	69ab      	ldr	r3, [r5, #24]
  osp->totsize = osp->rxsize;
 800148a:	681c      	ldr	r4, [r3, #0]
 800148c:	60dc      	str	r4, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 800148e:	b919      	cbnz	r1, 8001498 <usb_lld_start_out+0x18>
 8001490:	2c40      	cmp	r4, #64	; 0x40
      osp->rxsize = EP0_MAX_OUTSIZE;
 8001492:	bf84      	itt	hi
 8001494:	2440      	movhi	r4, #64	; 0x40
 8001496:	601c      	strhi	r4, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8001498:	8a6b      	ldrh	r3, [r5, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800149a:	6d40      	ldr	r0, [r0, #84]	; 0x54
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800149c:	682d      	ldr	r5, [r5, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 800149e:	1e5a      	subs	r2, r3, #1
 80014a0:	4422      	add	r2, r4
 80014a2:	fbb2 f2f3 	udiv	r2, r2, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 80014a6:	fb02 f303 	mul.w	r3, r2, r3
 80014aa:	3303      	adds	r3, #3
 80014ac:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80014b0:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 80014b4:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80014b8:	f005 0203 	and.w	r2, r5, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80014bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80014c0:	2a01      	cmp	r2, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80014c2:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80014c6:	d00a      	beq.n	80014de <usb_lld_start_out+0x5e>
 80014c8:	b209      	sxth	r1, r1
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 80014ca:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80014ce:	bc30      	pop	{r4, r5}
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 80014d0:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 80014d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80014d8:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 80014dc:	4770      	bx	lr
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 80014de:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80014e2:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 80014e6:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 80014ea:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80014ee:	bf14      	ite	ne
 80014f0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 80014f4:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 80014f8:	b209      	sxth	r1, r1
 80014fa:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 80014fe:	e7e4      	b.n	80014ca <usb_lld_start_out+0x4a>

08001500 <otg_epout_handler.constprop.0>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8001500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8001504:	4f24      	ldr	r7, [pc, #144]	; (8001598 <otg_epout_handler.constprop.0+0x98>)
 8001506:	6d7e      	ldr	r6, [r7, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8001508:	eb06 1340 	add.w	r3, r6, r0, lsl #5
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800150c:	4604      	mov	r4, r0
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800150e:	f8d3 5b08 	ldr.w	r5, [r3, #2824]	; 0xb08
  otgp->oe[ep].DOEPINT = epint;
 8001512:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8001516:	0728      	lsls	r0, r5, #28
 8001518:	d503      	bpl.n	8001522 <otg_epout_handler.constprop.0+0x22>
 800151a:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 800151e:	0719      	lsls	r1, r3, #28
 8001520:	d431      	bmi.n	8001586 <otg_epout_handler.constprop.0+0x86>
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8001522:	07ea      	lsls	r2, r5, #31
 8001524:	d52d      	bpl.n	8001582 <otg_epout_handler.constprop.0+0x82>
 8001526:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 800152a:	07db      	lsls	r3, r3, #31
 800152c:	d529      	bpl.n	8001582 <otg_epout_handler.constprop.0+0x82>
    osp = usbp->epc[ep]->out_state;
 800152e:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8001532:	68d9      	ldr	r1, [r3, #12]
    if (ep == 0) {
 8001534:	b95c      	cbnz	r4, 800154e <otg_epout_handler.constprop.0+0x4e>
    osp = usbp->epc[ep]->out_state;
 8001536:	698a      	ldr	r2, [r1, #24]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8001538:	8a48      	ldrh	r0, [r1, #18]
 800153a:	6855      	ldr	r5, [r2, #4]
 800153c:	fbb5 f3f0 	udiv	r3, r5, r0
 8001540:	fb00 5313 	mls	r3, r0, r3, r5
 8001544:	b91b      	cbnz	r3, 800154e <otg_epout_handler.constprop.0+0x4e>
          (osp->rxsize < osp->totsize)) {
 8001546:	6810      	ldr	r0, [r2, #0]
 8001548:	68d3      	ldr	r3, [r2, #12]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 800154a:	4298      	cmp	r0, r3
 800154c:	d30d      	bcc.n	800156a <otg_epout_handler.constprop.0+0x6a>
    _usb_isr_invoke_out_cb(usbp, ep);
 800154e:	897b      	ldrh	r3, [r7, #10]
 8001550:	68cd      	ldr	r5, [r1, #12]
 8001552:	2201      	movs	r2, #1
 8001554:	40a2      	lsls	r2, r4
 8001556:	ea23 0302 	bic.w	r3, r3, r2
 800155a:	817b      	strh	r3, [r7, #10]
 800155c:	b18d      	cbz	r5, 8001582 <otg_epout_handler.constprop.0+0x82>
 800155e:	4621      	mov	r1, r4
 8001560:	462b      	mov	r3, r5
 8001562:	480d      	ldr	r0, [pc, #52]	; (8001598 <otg_epout_handler.constprop.0+0x98>)
}
 8001564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _usb_isr_invoke_out_cb(usbp, ep);
 8001568:	4718      	bx	r3
        osp->rxsize = osp->totsize - osp->rxsize;
 800156a:	1a1b      	subs	r3, r3, r0
        osp->rxcnt  = 0;
 800156c:	e9c2 3400 	strd	r3, r4, [r2]
 8001570:	2320      	movs	r3, #32
 8001572:	f383 8811 	msr	BASEPRI, r3
        usb_lld_start_out(usbp, ep);
 8001576:	4808      	ldr	r0, [pc, #32]	; (8001598 <otg_epout_handler.constprop.0+0x98>)
 8001578:	4621      	mov	r1, r4
 800157a:	f7ff ff81 	bl	8001480 <usb_lld_start_out>
 800157e:	f384 8811 	msr	BASEPRI, r4
}
 8001582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _usb_isr_invoke_setup_cb(usbp, ep);
 8001586:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 800158a:	4621      	mov	r1, r4
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	4638      	mov	r0, r7
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4798      	blx	r3
 8001594:	e7c5      	b.n	8001522 <otg_epout_handler.constprop.0+0x22>
 8001596:	bf00      	nop
 8001598:	20001868 	.word	0x20001868
 800159c:	00000000 	.word	0x00000000

080015a0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 80015a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015a4:	b083      	sub	sp, #12

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80015a6:	f002 0c03 	and.w	ip, r2, #3
                           iomode_t mode) {
 80015aa:	9201      	str	r2, [sp, #4]
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80015ac:	4666      	mov	r6, ip
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 80015ae:	f3c2 05c1 	ubfx	r5, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 80015b2:	09d7      	lsrs	r7, r2, #7
  uint32_t bit     = 0;
 80015b4:	2400      	movs	r4, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 80015b6:	f04f 090f 	mov.w	r9, #15
      m1 = 1 << bit;
 80015ba:	f04f 0801 	mov.w	r8, #1
      m2 = 3 << (bit * 2);
 80015be:	f04f 0e03 	mov.w	lr, #3
 80015c2:	e012      	b.n	80015ea <_pal_lld_setgroupmode+0x4a>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80015c4:	f8d0 b000 	ldr.w	fp, [r0]
 80015c8:	ea03 030b 	and.w	r3, r3, fp
 80015cc:	4333      	orrs	r3, r6
        if (bit < 8)
 80015ce:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 80015d0:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 80015d2:	d83e      	bhi.n	8001652 <_pal_lld_setgroupmode+0xb2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80015d4:	6a03      	ldr	r3, [r0, #32]
 80015d6:	ea23 0202 	bic.w	r2, r3, r2
 80015da:	ea42 020a 	orr.w	r2, r2, sl
 80015de:	6202      	str	r2, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 80015e0:	0849      	lsrs	r1, r1, #1
 80015e2:	d033      	beq.n	800164c <_pal_lld_setgroupmode+0xac>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
 80015e4:	00ad      	lsls	r5, r5, #2
    pupdr <<= 2;
    moder <<= 2;
 80015e6:	00b6      	lsls	r6, r6, #2
    bit++;
 80015e8:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 80015ea:	07cb      	lsls	r3, r1, #31
 80015ec:	d5f8      	bpl.n	80015e0 <_pal_lld_setgroupmode+0x40>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80015ee:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 80015f0:	fa08 f204 	lsl.w	r2, r8, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80015f4:	ea23 0302 	bic.w	r3, r3, r2
 80015f8:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80015fa:	6882      	ldr	r2, [r0, #8]
      m2 = 3 << (bit * 2);
 80015fc:	0063      	lsls	r3, r4, #1
 80015fe:	fa0e f303 	lsl.w	r3, lr, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001602:	ea22 0203 	bic.w	r2, r2, r3
 8001606:	432a      	orrs	r2, r5
 8001608:	6082      	str	r2, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800160a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 800160e:	f004 0207 	and.w	r2, r4, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001612:	ea2a 0a03 	bic.w	sl, sl, r3
      altrmask = altr << ((bit & 7) * 4);
 8001616:	0092      	lsls	r2, r2, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8001618:	f1bc 0f02 	cmp.w	ip, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800161c:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001620:	ea6f 0303 	mvn.w	r3, r3
      altrmask = altr << ((bit & 7) * 4);
 8001624:	fa07 fa02 	lsl.w	sl, r7, r2
      m4 = 15 << ((bit & 7) * 4);
 8001628:	fa09 f202 	lsl.w	r2, r9, r2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 800162c:	d1ca      	bne.n	80015c4 <_pal_lld_setgroupmode+0x24>
        if (bit < 8)
 800162e:	2c07      	cmp	r4, #7
 8001630:	d816      	bhi.n	8001660 <_pal_lld_setgroupmode+0xc0>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001632:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8001636:	ea2b 0202 	bic.w	r2, fp, r2
 800163a:	ea42 020a 	orr.w	r2, r2, sl
 800163e:	6202      	str	r2, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8001640:	6802      	ldr	r2, [r0, #0]
 8001642:	4013      	ands	r3, r2
 8001644:	4333      	orrs	r3, r6
    if (!mask)
 8001646:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8001648:	6003      	str	r3, [r0, #0]
    if (!mask)
 800164a:	d1cb      	bne.n	80015e4 <_pal_lld_setgroupmode+0x44>
  }
}
 800164c:	b003      	add	sp, #12
 800164e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001652:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001654:	ea23 0202 	bic.w	r2, r3, r2
 8001658:	ea42 020a 	orr.w	r2, r2, sl
 800165c:	6242      	str	r2, [r0, #36]	; 0x24
 800165e:	e7bf      	b.n	80015e0 <_pal_lld_setgroupmode+0x40>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001660:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 8001664:	ea2b 0202 	bic.w	r2, fp, r2
 8001668:	ea42 020a 	orr.w	r2, r2, sl
 800166c:	6242      	str	r2, [r0, #36]	; 0x24
 800166e:	e7e7      	b.n	8001640 <_pal_lld_setgroupmode+0xa0>

08001670 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8001670:	b538      	push	{r3, r4, r5, lr}
 8001672:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001676:	4604      	mov	r4, r0
 8001678:	2b15      	cmp	r3, #21
 800167a:	d816      	bhi.n	80016aa <_usb_ep0out+0x3a>
 800167c:	e8df f003 	tbb	[pc, r3]
 8001680:	15151516 	.word	0x15151516
 8001684:	15161515 	.word	0x15161515
 8001688:	16161615 	.word	0x16161615
 800168c:	15151515 	.word	0x15151515
 8001690:	15151515 	.word	0x15151515
 8001694:	2c0b      	.short	0x2c0b
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8001696:	68c3      	ldr	r3, [r0, #12]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	b92b      	cbnz	r3, 80016aa <_usb_ep0out+0x3a>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800169e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80016a0:	b103      	cbz	r3, 80016a4 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 80016a2:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 80016aa:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 80016ac:	6d43      	ldr	r3, [r0, #84]	; 0x54
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80016ae:	6841      	ldr	r1, [r0, #4]
 80016b0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80016b4:	680d      	ldr	r5, [r1, #0]
 80016b6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80016ba:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 80016be:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80016c2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80016c6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80016ca:	b10d      	cbz	r5, 80016d0 <_usb_ep0out+0x60>
 80016cc:	2106      	movs	r1, #6
 80016ce:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 80016d0:	2306      	movs	r3, #6
 80016d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80016d6:	bd38      	pop	{r3, r4, r5, pc}
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 80016d8:	230b      	movs	r3, #11
 80016da:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 80016de:	2320      	movs	r3, #32
 80016e0:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 80016e4:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80016e6:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 80016e8:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 80016ea:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80016ec:	f042 0201 	orr.w	r2, r2, #1
 80016f0:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 80016f2:	4629      	mov	r1, r5
  isp->txcnt  = 0;
 80016f4:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 80016f8:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 80016fa:	f7ff fe29 	bl	8001350 <usb_lld_start_in>
 80016fe:	f385 8811 	msr	BASEPRI, r5
}
 8001702:	bd38      	pop	{r3, r4, r5, pc}
	...

08001710 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8001710:	b538      	push	{r3, r4, r5, lr}
 8001712:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001716:	4604      	mov	r4, r0
 8001718:	2b15      	cmp	r3, #21
 800171a:	d821      	bhi.n	8001760 <_usb_ep0in+0x50>
 800171c:	e8df f003 	tbb	[pc, r3]
 8001720:	2020200b 	.word	0x2020200b
 8001724:	200b2020 	.word	0x200b2020
 8001728:	48312120 	.word	0x48312120
 800172c:	20202020 	.word	0x20202020
 8001730:	20202020 	.word	0x20202020
 8001734:	0b0b      	.short	0x0b0b
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8001736:	6d43      	ldr	r3, [r0, #84]	; 0x54
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001738:	6841      	ldr	r1, [r0, #4]
 800173a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800173e:	680d      	ldr	r5, [r1, #0]
 8001740:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001744:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8001748:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800174c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001750:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8001754:	b10d      	cbz	r5, 800175a <_usb_ep0in+0x4a>
 8001756:	2106      	movs	r1, #6
 8001758:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 800175a:	2306      	movs	r3, #6
 800175c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001760:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 8001762:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 8001766:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
    if ((usbp->ep0n < max) &&
 800176a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    max = (size_t)get_hword(&usbp->setup[6]);
 800176c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if ((usbp->ep0n < max) &&
 8001770:	4299      	cmp	r1, r3
 8001772:	d206      	bcs.n	8001782 <_usb_ep0in+0x72>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8001774:	68c3      	ldr	r3, [r0, #12]
 8001776:	8a1b      	ldrh	r3, [r3, #16]
 8001778:	fbb1 f5f3 	udiv	r5, r1, r3
 800177c:	fb03 1515 	mls	r5, r3, r5, r1
    if ((usbp->ep0n < max) &&
 8001780:	b1ed      	cbz	r5, 80017be <_usb_ep0in+0xae>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001782:	2314      	movs	r3, #20
 8001784:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001788:	2320      	movs	r3, #32
 800178a:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 800178e:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001790:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001792:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 8001794:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800179c:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 800179e:	e9c3 5500 	strd	r5, r5, [r3]
  osp->rxbuf  = buf;
 80017a2:	609d      	str	r5, [r3, #8]
  usb_lld_start_out(usbp, ep);
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7ff fe6b 	bl	8001480 <usb_lld_start_out>
 80017aa:	f385 8811 	msr	BASEPRI, r5
}
 80017ae:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 80017b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80017b2:	b103      	cbz	r3, 80017b6 <_usb_ep0in+0xa6>
      usbp->ep0endcb(usbp);
 80017b4:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80017bc:	bd38      	pop	{r3, r4, r5, pc}
 80017be:	2320      	movs	r3, #32
 80017c0:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 80017c4:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80017c6:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 80017c8:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80017ca:	f042 0201 	orr.w	r2, r2, #1
 80017ce:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 80017d0:	4629      	mov	r1, r5
  isp->txcnt  = 0;
 80017d2:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 80017d6:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 80017d8:	f7ff fdba 	bl	8001350 <usb_lld_start_in>
 80017dc:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 80017e0:	230a      	movs	r3, #10
 80017e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80017e6:	bd38      	pop	{r3, r4, r5, pc}
	...

080017f0 <usbStartTransmitI>:
                       const uint8_t *buf, size_t n) {
 80017f0:	b4f0      	push	{r4, r5, r6, r7}
  isp = usbp->epc[ep]->in_state;
 80017f2:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80017f6:	8907      	ldrh	r7, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 80017f8:	f8d5 c00c 	ldr.w	ip, [r5, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80017fc:	2501      	movs	r5, #1
  isp = usbp->epc[ep]->in_state;
 80017fe:	f8dc 6014 	ldr.w	r6, [ip, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001802:	408d      	lsls	r5, r1
 8001804:	433d      	orrs	r5, r7
  isp->txcnt  = 0;
 8001806:	2700      	movs	r7, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001808:	8105      	strh	r5, [r0, #8]
  isp->txcnt  = 0;
 800180a:	e9c6 3700 	strd	r3, r7, [r6]
  isp->txbuf  = buf;
 800180e:	60b2      	str	r2, [r6, #8]
}
 8001810:	bcf0      	pop	{r4, r5, r6, r7}
  usb_lld_start_in(usbp, ep);
 8001812:	f7ff bd9d 	b.w	8001350 <usb_lld_start_in>
 8001816:	bf00      	nop
	...

08001820 <usbDisableEndpointsI>:
  otg_ram_reset(usbp);
 8001820:	6d81      	ldr	r1, [r0, #88]	; 0x58
  usbp->transmitting &= 1U;
 8001822:	6883      	ldr	r3, [r0, #8]
void usbDisableEndpointsI(USBDriver *usbp) {
 8001824:	b4f0      	push	{r4, r5, r6, r7}
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8001826:	680c      	ldr	r4, [r1, #0]
 8001828:	65c4      	str	r4, [r0, #92]	; 0x5c
    usbp->epc[i] = NULL;
 800182a:	2200      	movs	r2, #0
  usbp->transmitting &= 1U;
 800182c:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001830:	688f      	ldr	r7, [r1, #8]
  otg_disable_ep(usbp);
 8001832:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001834:	6083      	str	r3, [r0, #8]
    usbp->epc[i] = NULL;
 8001836:	e9c0 2204 	strd	r2, r2, [r0, #16]
 800183a:	6182      	str	r2, [r0, #24]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800183c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001840:	e000      	b.n	8001844 <usbDisableEndpointsI+0x24>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001842:	4632      	mov	r2, r6
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8001844:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 8001848:	460b      	mov	r3, r1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 800184a:	f8d1 0900 	ldr.w	r0, [r1, #2304]	; 0x900
 800184e:	2800      	cmp	r0, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001850:	f102 0601 	add.w	r6, r2, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8001854:	da05      	bge.n	8001862 <usbDisableEndpointsI+0x42>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8001856:	f8d1 0900 	ldr.w	r0, [r1, #2304]	; 0x900
 800185a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800185e:	f8c1 0900 	str.w	r0, [r1, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8001862:	f8d1 0b00 	ldr.w	r0, [r1, #2816]	; 0xb00
 8001866:	2800      	cmp	r0, #0
 8001868:	da05      	bge.n	8001876 <usbDisableEndpointsI+0x56>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 800186a:	f8d1 0b00 	ldr.w	r0, [r1, #2816]	; 0xb00
 800186e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8001872:	f8c1 0b00 	str.w	r0, [r1, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001876:	42ba      	cmp	r2, r7
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8001878:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800187c:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001880:	d1df      	bne.n	8001842 <usbDisableEndpointsI+0x22>
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8001882:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001886:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
}
 800188a:	bcf0      	pop	{r4, r5, r6, r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop

08001890 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
	...

080018a0 <_ctl.lto_priv.0>:
}
 80018a0:	2000      	movs	r0, #0
 80018a2:	4770      	bx	lr
	...

080018b0 <_ctl.lto_priv.1>:
 80018b0:	2000      	movs	r0, #0
 80018b2:	4770      	bx	lr
	...

080018c0 <sdu_start_receive>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 80018c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80018c2:	f8d0 148c 	ldr.w	r1, [r0, #1164]	; 0x48c
 80018c6:	680a      	ldr	r2, [r1, #0]
 80018c8:	7813      	ldrb	r3, [r2, #0]
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d102      	bne.n	80018d4 <sdu_start_receive+0x14>
 80018ce:	7a03      	ldrb	r3, [r0, #8]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d001      	beq.n	80018d8 <sdu_start_receive+0x18>
    return true;
 80018d4:	2001      	movs	r0, #1
}
 80018d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80018d8:	790c      	ldrb	r4, [r1, #4]
 80018da:	8955      	ldrh	r5, [r2, #10]
 80018dc:	2301      	movs	r3, #1
 80018de:	fa03 f404 	lsl.w	r4, r3, r4
 80018e2:	4225      	tst	r5, r4
 80018e4:	d1f6      	bne.n	80018d4 <sdu_start_receive+0x14>
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 80018e6:	e9d0 4607 	ldrd	r4, r6, [r0, #28]
 80018ea:	42b4      	cmp	r4, r6
 80018ec:	d014      	beq.n	8001918 <sdu_start_receive+0x58>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 80018ee:	7949      	ldrb	r1, [r1, #5]
  osp = usbp->epc[ep]->out_state;
 80018f0:	eb02 0381 	add.w	r3, r2, r1, lsl #2
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80018f4:	2001      	movs	r0, #1
  osp = usbp->epc[ep]->out_state;
 80018f6:	68db      	ldr	r3, [r3, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80018f8:	4088      	lsls	r0, r1
  osp = usbp->epc[ep]->out_state;
 80018fa:	699e      	ldr	r6, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80018fc:	4305      	orrs	r5, r0
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 80018fe:	1d23      	adds	r3, r4, #4
  osp->rxsize = n;
 8001900:	f44f 7780 	mov.w	r7, #256	; 0x100
  osp->rxcnt  = 0;
 8001904:	2400      	movs	r4, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001906:	8155      	strh	r5, [r2, #10]
  usb_lld_start_out(usbp, ep);
 8001908:	4610      	mov	r0, r2
  osp->rxcnt  = 0;
 800190a:	e9c6 7400 	strd	r7, r4, [r6]
  osp->rxbuf  = buf;
 800190e:	60b3      	str	r3, [r6, #8]
  usb_lld_start_out(usbp, ep);
 8001910:	f7ff fdb6 	bl	8001480 <usb_lld_start_out>
  return false;
 8001914:	4620      	mov	r0, r4
}
 8001916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ibqIsFullI(ibqp)) {
 8001918:	6980      	ldr	r0, [r0, #24]
 800191a:	2800      	cmp	r0, #0
 800191c:	d0e7      	beq.n	80018ee <sdu_start_receive+0x2e>
 800191e:	e7d9      	b.n	80018d4 <sdu_start_receive+0x14>

08001920 <ibnotify>:
  (void) sdu_start_receive(sdup);
 8001920:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001922:	f7ff bfcd 	b.w	80018c0 <sdu_start_receive>
 8001926:	bf00      	nop
	...

08001930 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001930:	3109      	adds	r1, #9
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8001932:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001934:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 8001938:	b194      	cbz	r4, 8001960 <sduDataReceived+0x30>
 800193a:	2320      	movs	r3, #32
 800193c:	f383 8811 	msr	BASEPRI, r3
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8001940:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001944:	6813      	ldr	r3, [r2, #0]
 8001946:	7952      	ldrb	r2, [r2, #5]
 8001948:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	685d      	ldr	r5, [r3, #4]
  if (size > (size_t)0) {
 8001952:	b935      	cbnz	r5, 8001962 <sduDataReceived+0x32>
  (void) sdu_start_receive(sdup);
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff ffb3 	bl	80018c0 <sdu_start_receive>
 800195a:	2300      	movs	r3, #0
 800195c:	f383 8811 	msr	BASEPRI, r3
}
 8001960:	bd38      	pop	{r3, r4, r5, pc}
 8001962:	2104      	movs	r1, #4
 8001964:	1860      	adds	r0, r4, r1
 8001966:	f7ff fb6b 	bl	8001040 <chEvtBroadcastFlagsI>

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 800196a:	69e3      	ldr	r3, [r4, #28]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 800196c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  *((size_t *)ibqp->bwrptr) = size;
 800196e:	601d      	str	r5, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 8001970:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  ibqp->bcounter++;
 8001972:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 8001974:	4403      	add	r3, r0
  if (ibqp->bwrptr >= ibqp->btop) {
 8001976:	428b      	cmp	r3, r1
  ibqp->bwrptr += ibqp->bsize;
 8001978:	61e3      	str	r3, [r4, #28]
  ibqp->bcounter++;
 800197a:	f102 0201 	add.w	r2, r2, #1
    ibqp->bwrptr = ibqp->buffers;
 800197e:	bf28      	it	cs
 8001980:	6b23      	ldrcs	r3, [r4, #48]	; 0x30
  ibqp->bcounter++;
 8001982:	61a2      	str	r2, [r4, #24]
    ibqPostFullBufferI(&sdup->ibqueue, size);
 8001984:	f104 000c 	add.w	r0, r4, #12
    ibqp->bwrptr = ibqp->buffers;
 8001988:	bf28      	it	cs
 800198a:	61e3      	strcs	r3, [r4, #28]
  chThdDequeueNextI(tqp, msg);
 800198c:	f7ff fb48 	bl	8001020 <chThdDequeueNextI.constprop.0>
 8001990:	e7e0      	b.n	8001954 <sduDataReceived+0x24>
 8001992:	bf00      	nop
	...

080019a0 <obqGetFullBufferI>:
 * @retval NULL         if the queue is empty.
 *
 * @iclass
 */
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {
 80019a0:	4603      	mov	r3, r0

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 80019a2:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
 80019a6:	4282      	cmp	r2, r0
 80019a8:	d003      	beq.n	80019b2 <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 80019aa:	f850 3b04 	ldr.w	r3, [r0], #4
 80019ae:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 80019b0:	4770      	bx	lr
  if (obqIsEmptyI(obqp)) {
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f8      	beq.n	80019aa <obqGetFullBufferI+0xa>
    return NULL;
 80019b8:	2000      	movs	r0, #0
 80019ba:	4770      	bx	lr
 80019bc:	0000      	movs	r0, r0
	...

080019c0 <obnotify>:
static void obnotify(io_buffers_queue_t *bqp) {
 80019c0:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 80019c2:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80019c4:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 80019c8:	6813      	ldr	r3, [r2, #0]
 80019ca:	7819      	ldrb	r1, [r3, #0]
 80019cc:	2904      	cmp	r1, #4
static void obnotify(io_buffers_queue_t *bqp) {
 80019ce:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80019d0:	d102      	bne.n	80019d8 <obnotify+0x18>
 80019d2:	7a21      	ldrb	r1, [r4, #8]
 80019d4:	2902      	cmp	r1, #2
 80019d6:	d001      	beq.n	80019dc <obnotify+0x1c>
}
 80019d8:	b002      	add	sp, #8
 80019da:	bd10      	pop	{r4, pc}
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80019dc:	7911      	ldrb	r1, [r2, #4]
 80019de:	891a      	ldrh	r2, [r3, #8]
 80019e0:	2301      	movs	r3, #1
 80019e2:	408b      	lsls	r3, r1
 80019e4:	4213      	tst	r3, r2
 80019e6:	d1f7      	bne.n	80019d8 <obnotify+0x18>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80019e8:	a901      	add	r1, sp, #4
 80019ea:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80019ee:	f7ff ffd7 	bl	80019a0 <obqGetFullBufferI>
 80019f2:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 80019f4:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 80019f8:	9b01      	ldr	r3, [sp, #4]
 80019fa:	7901      	ldrb	r1, [r0, #4]
 80019fc:	6800      	ldr	r0, [r0, #0]
 80019fe:	f7ff fef7 	bl	80017f0 <usbStartTransmitI>
 8001a02:	e7e9      	b.n	80019d8 <obnotify+0x18>
	...

08001a10 <sof_handler>:

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8001a10:	b510      	push	{r4, lr}
 8001a12:	2320      	movs	r3, #32
 8001a14:	b082      	sub	sp, #8
 8001a16:	f383 8811 	msr	BASEPRI, r3
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001a1a:	4c1e      	ldr	r4, [pc, #120]	; (8001a94 <sof_handler+0x84>)
 8001a1c:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001a20:	6813      	ldr	r3, [r2, #0]
 8001a22:	7819      	ldrb	r1, [r3, #0]
 8001a24:	2904      	cmp	r1, #4
 8001a26:	d102      	bne.n	8001a2e <sof_handler+0x1e>
 8001a28:	7a21      	ldrb	r1, [r4, #8]
 8001a2a:	2902      	cmp	r1, #2
 8001a2c:	d004      	beq.n	8001a38 <sof_handler+0x28>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&OSTRICHPORT);
  osalSysUnlockFromISR();
}
 8001a34:	b002      	add	sp, #8
 8001a36:	bd10      	pop	{r4, pc}
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001a38:	7911      	ldrb	r1, [r2, #4]
 8001a3a:	891a      	ldrh	r2, [r3, #8]
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	408b      	lsls	r3, r1
 8001a40:	4213      	tst	r3, r2
 8001a42:	d1f4      	bne.n	8001a2e <sof_handler+0x1e>

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8001a44:	e9d4 3215 	ldrd	r3, r2, [r4, #84]	; 0x54
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d1f0      	bne.n	8001a2e <sof_handler+0x1e>
 8001a4c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001a4e:	2a00      	cmp	r2, #0
 8001a50:	d0ed      	beq.n	8001a2e <sof_handler+0x1e>
 8001a52:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	d0ea      	beq.n	8001a2e <sof_handler+0x1e>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8001a58:	3a04      	subs	r2, #4

    if (size > 0U) {
 8001a5a:	1ad2      	subs	r2, r2, r3
 8001a5c:	d0e7      	beq.n	8001a2e <sof_handler+0x1e>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
 8001a60:	e9d4 1017 	ldrd	r1, r0, [r4, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 8001a64:	4403      	add	r3, r0
      if (obqp->bwrptr >= obqp->btop) {
 8001a66:	428b      	cmp	r3, r1
      obqp->bcounter--;
 8001a68:	6d22      	ldr	r2, [r4, #80]	; 0x50
      obqp->bwrptr += obqp->bsize;
 8001a6a:	6563      	str	r3, [r4, #84]	; 0x54
        obqp->bwrptr = obqp->buffers;
 8001a6c:	bf24      	itt	cs
 8001a6e:	6ea3      	ldrcs	r3, [r4, #104]	; 0x68
 8001a70:	6563      	strcs	r3, [r4, #84]	; 0x54
      obqp->bcounter--;
 8001a72:	3a01      	subs	r2, #1
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8001a74:	2300      	movs	r3, #0
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001a76:	a901      	add	r1, sp, #4
 8001a78:	4807      	ldr	r0, [pc, #28]	; (8001a98 <sof_handler+0x88>)
      obqp->bcounter--;
 8001a7a:	6522      	str	r2, [r4, #80]	; 0x50
      obqp->ptr = NULL;
 8001a7c:	66e3      	str	r3, [r4, #108]	; 0x6c
 8001a7e:	f7ff ff8f 	bl	80019a0 <obqGetFullBufferI>
 8001a82:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001a84:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 8001a88:	9b01      	ldr	r3, [sp, #4]
 8001a8a:	7901      	ldrb	r1, [r0, #4]
 8001a8c:	6800      	ldr	r0, [r0, #0]
 8001a8e:	f7ff feaf 	bl	80017f0 <usbStartTransmitI>
 8001a92:	e7cc      	b.n	8001a2e <sof_handler+0x1e>
 8001a94:	200013a8 	.word	0x200013a8
 8001a98:	200013ec 	.word	0x200013ec
 8001a9c:	00000000 	.word	0x00000000

08001aa0 <sduDataTransmitted>:
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001aa4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001aa8:	b082      	sub	sp, #8
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001aaa:	699e      	ldr	r6, [r3, #24]
  if (sdup == NULL) {
 8001aac:	b1f6      	cbz	r6, 8001aec <sduDataTransmitted+0x4c>
 8001aae:	4604      	mov	r4, r0
 8001ab0:	460d      	mov	r5, r1
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8001ab8:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 8001abc:	1d30      	adds	r0, r6, #4
 8001abe:	2108      	movs	r1, #8
 8001ac0:	f7ff fabe 	bl	8001040 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	b993      	cbnz	r3, 8001af2 <sduDataTransmitted+0x52>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001acc:	f106 0844 	add.w	r8, r6, #68	; 0x44
 8001ad0:	4640      	mov	r0, r8
 8001ad2:	a901      	add	r1, sp, #4
 8001ad4:	f7ff ff64 	bl	80019a0 <obqGetFullBufferI>
  if (buf != NULL) {
 8001ad8:	4602      	mov	r2, r0
 8001ada:	b320      	cbz	r0, 8001b26 <sduDataTransmitted+0x86>
    usbStartTransmitI(usbp, ep, buf, n);
 8001adc:	9b01      	ldr	r3, [sp, #4]
 8001ade:	4629      	mov	r1, r5
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f7ff fe85 	bl	80017f0 <usbStartTransmitI>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f383 8811 	msr	BASEPRI, r3
}
 8001aec:	b002      	add	sp, #8
 8001aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (obqp->brdptr >= obqp->btop) {
 8001af2:	e9d6 2017 	ldrd	r2, r0, [r6, #92]	; 0x5c
  obqp->brdptr += obqp->bsize;
 8001af6:	6db3      	ldr	r3, [r6, #88]	; 0x58
  obqp->bcounter++;
 8001af8:	6d31      	ldr	r1, [r6, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 8001afa:	4403      	add	r3, r0
  if (obqp->brdptr >= obqp->btop) {
 8001afc:	4293      	cmp	r3, r2
  obqp->brdptr += obqp->bsize;
 8001afe:	65b3      	str	r3, [r6, #88]	; 0x58
  obqp->bcounter++;
 8001b00:	f101 0101 	add.w	r1, r1, #1
    obqp->brdptr = obqp->buffers;
 8001b04:	bf28      	it	cs
 8001b06:	6eb3      	ldrcs	r3, [r6, #104]	; 0x68
  obqp->bcounter++;
 8001b08:	6531      	str	r1, [r6, #80]	; 0x50
    obqReleaseEmptyBufferI(&sdup->obqueue);
 8001b0a:	f106 0844 	add.w	r8, r6, #68	; 0x44
    obqp->brdptr = obqp->buffers;
 8001b0e:	bf28      	it	cs
 8001b10:	65b3      	strcs	r3, [r6, #88]	; 0x58
  chThdDequeueNextI(tqp, msg);
 8001b12:	4640      	mov	r0, r8
 8001b14:	f7ff fa84 	bl	8001020 <chThdDequeueNextI.constprop.0>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001b18:	4640      	mov	r0, r8
 8001b1a:	a901      	add	r1, sp, #4
 8001b1c:	f7ff ff40 	bl	80019a0 <obqGetFullBufferI>
  if (buf != NULL) {
 8001b20:	4602      	mov	r2, r0
 8001b22:	2800      	cmp	r0, #0
 8001b24:	d1da      	bne.n	8001adc <sduDataTransmitted+0x3c>
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	2a00      	cmp	r2, #0
 8001b2e:	d0da      	beq.n	8001ae6 <sduDataTransmitted+0x46>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8001b30:	8a1b      	ldrh	r3, [r3, #16]
 8001b32:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001b34:	4013      	ands	r3, r2
 8001b36:	d1d6      	bne.n	8001ae6 <sduDataTransmitted+0x46>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f7ff fe56 	bl	80017f0 <usbStartTransmitI>
 8001b44:	e7cf      	b.n	8001ae6 <sduDataTransmitted+0x46>
 8001b46:	bf00      	nop
	...

08001b50 <chSchWakeupS.constprop.0>:
  thread_t *otp = currp;
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <chSchWakeupS.constprop.0+0x54>)
 8001b52:	6959      	ldr	r1, [r3, #20]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001b54:	b430      	push	{r4, r5}
  if (ntp->prio <= otp->prio) {
 8001b56:	688d      	ldr	r5, [r1, #8]
 8001b58:	6884      	ldr	r4, [r0, #8]
  ntp->u.rdymsg = msg;
 8001b5a:	2200      	movs	r2, #0
  if (ntp->prio <= otp->prio) {
 8001b5c:	42ac      	cmp	r4, r5
  ntp->u.rdymsg = msg;
 8001b5e:	6242      	str	r2, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8001b60:	d80c      	bhi.n	8001b7c <chSchWakeupS.constprop.0+0x2c>
  tp->state = CH_STATE_READY;
 8001b62:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8001b66:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	4294      	cmp	r4, r2
 8001b6c:	d9fb      	bls.n	8001b66 <chSchWakeupS.constprop.0+0x16>
  tp->queue.prev             = cp->queue.prev;
 8001b6e:	685a      	ldr	r2, [r3, #4]
}
 8001b70:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 8001b72:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001b76:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001b78:	6058      	str	r0, [r3, #4]
}
 8001b7a:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 8001b7c:	f881 2020 	strb.w	r2, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8001b80:	461a      	mov	r2, r3
    cp = cp->queue.next;
 8001b82:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio > tp->prio);
 8001b84:	6894      	ldr	r4, [r2, #8]
 8001b86:	42a5      	cmp	r5, r4
 8001b88:	d3fb      	bcc.n	8001b82 <chSchWakeupS.constprop.0+0x32>
  tp->queue.prev             = cp->queue.prev;
 8001b8a:	6854      	ldr	r4, [r2, #4]
 8001b8c:	604c      	str	r4, [r1, #4]
    ntp->state = CH_STATE_CURRENT;
 8001b8e:	2501      	movs	r5, #1
  tp->queue.next             = cp;
 8001b90:	600a      	str	r2, [r1, #0]
  tp->queue.prev->queue.next = tp;
 8001b92:	6021      	str	r1, [r4, #0]
  cp->queue.prev             = tp;
 8001b94:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8001b96:	f880 5020 	strb.w	r5, [r0, #32]
}
 8001b9a:	bc30      	pop	{r4, r5}
    currp = ntp;
 8001b9c:	6158      	str	r0, [r3, #20]
    chSysSwitch(ntp, otp);
 8001b9e:	f7fe bb9f 	b.w	80002e0 <_port_switch>
 8001ba2:	bf00      	nop
 8001ba4:	200018d0 	.word	0x200018d0
	...

08001bb0 <chSchGoSleepS>:
  thread_t *otp = currp;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <chSchGoSleepS+0x24>)
 8001bb2:	6959      	ldr	r1, [r3, #20]
  thread_t *tp = tqp->next;
 8001bb4:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8001bb6:	b410      	push	{r4}
  otp->state = newstate;
 8001bb8:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 8001bbc:	6810      	ldr	r0, [r2, #0]
 8001bbe:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8001bc0:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8001bc2:	6043      	str	r3, [r0, #4]
 8001bc4:	f882 4020 	strb.w	r4, [r2, #32]
}
 8001bc8:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001bca:	615a      	str	r2, [r3, #20]
  chSysSwitch(currp, otp);
 8001bcc:	4610      	mov	r0, r2
 8001bce:	f7fe bb87 	b.w	80002e0 <_port_switch>
 8001bd2:	bf00      	nop
 8001bd4:	200018d0 	.word	0x200018d0
	...

08001be0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001be0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 8001be2:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001be4:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8001be6:	d049      	beq.n	8001c7c <chSchGoSleepTimeoutS+0x9c>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8001be8:	4c3f      	ldr	r4, [pc, #252]	; (8001ce8 <chSchGoSleepTimeoutS+0x108>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8001bea:	4f40      	ldr	r7, [pc, #256]	; (8001cec <chSchGoSleepTimeoutS+0x10c>)
  vtp->par = par;
 8001bec:	6963      	ldr	r3, [r4, #20]
 8001bee:	9305      	str	r3, [sp, #20]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001bf0:	4626      	mov	r6, r4
 8001bf2:	2902      	cmp	r1, #2
 8001bf4:	f856 3f18 	ldr.w	r3, [r6, #24]!
 8001bf8:	4605      	mov	r5, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001bfa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001bfe:	bf38      	it	cc
 8001c00:	2102      	movcc	r1, #2
 8001c02:	42b3      	cmp	r3, r6
 8001c04:	6a42      	ldr	r2, [r0, #36]	; 0x24
  vtp->func = vtfunc;
 8001c06:	9704      	str	r7, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001c08:	d05b      	beq.n	8001cc2 <chSchGoSleepTimeoutS+0xe2>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8001c0a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8001c0c:	1bd2      	subs	r2, r2, r7
 8001c0e:	1889      	adds	r1, r1, r2

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001c10:	d32e      	bcc.n	8001c70 <chSchGoSleepTimeoutS+0x90>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8001c12:	6898      	ldr	r0, [r3, #8]
      p = p->next;
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
      delta -= p->delta;
 8001c18:	1a09      	subs	r1, r1, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8001c1a:	4291      	cmp	r1, r2
 8001c1c:	d904      	bls.n	8001c28 <chSchGoSleepTimeoutS+0x48>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 8001c1e:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 8001c20:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	428a      	cmp	r2, r1
 8001c26:	d3fa      	bcc.n	8001c1e <chSchGoSleepTimeoutS+0x3e>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 8001c2c:	af01      	add	r7, sp, #4
  vtp->next = p;
 8001c2e:	9301      	str	r3, [sp, #4]
  vtp->prev->next = vtp;
 8001c30:	6017      	str	r7, [r2, #0]
  p->prev = vtp;
 8001c32:	605f      	str	r7, [r3, #4]
  vtp->delta = delta;
 8001c34:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	1a51      	subs	r1, r2, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8001c3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 8001c3e:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001c40:	6222      	str	r2, [r4, #32]
    chSchGoSleepS(newstate);
 8001c42:	4628      	mov	r0, r5
 8001c44:	f7ff ffb4 	bl	8001bb0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001c48:	9b04      	ldr	r3, [sp, #16]
 8001c4a:	b16b      	cbz	r3, 8001c68 <chSchGoSleepTimeoutS+0x88>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8001c4c:	69a3      	ldr	r3, [r4, #24]
 8001c4e:	42bb      	cmp	r3, r7
 8001c50:	d01b      	beq.n	8001c8a <chSchGoSleepTimeoutS+0xaa>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8001c52:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8001c56:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8001c58:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001c5a:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
 8001c5c:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001c5e:	d003      	beq.n	8001c68 <chSchGoSleepTimeoutS+0x88>
      vtp->next->delta += vtp->delta;
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	9903      	ldr	r1, [sp, #12]
 8001c64:	440a      	add	r2, r1
 8001c66:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 8001c68:	6963      	ldr	r3, [r4, #20]
}
 8001c6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001c6c:	b007      	add	sp, #28
 8001c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	4291      	cmp	r1, r2
 8001c74:	d2d1      	bcs.n	8001c1a <chSchGoSleepTimeoutS+0x3a>
  return systime + (systime_t)interval;
 8001c76:	440f      	add	r7, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001c78:	6347      	str	r7, [r0, #52]	; 0x34
 8001c7a:	e7ce      	b.n	8001c1a <chSchGoSleepTimeoutS+0x3a>
    chSchGoSleepS(newstate);
 8001c7c:	4c1a      	ldr	r4, [pc, #104]	; (8001ce8 <chSchGoSleepTimeoutS+0x108>)
 8001c7e:	f7ff ff97 	bl	8001bb0 <chSchGoSleepS>
  return currp->u.rdymsg;
 8001c82:	6963      	ldr	r3, [r4, #20]
}
 8001c84:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001c86:	b007      	add	sp, #28
 8001c88:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8001c8a:	9b01      	ldr	r3, [sp, #4]
 8001c8c:	61a3      	str	r3, [r4, #24]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 8001c8e:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001c90:	42b3      	cmp	r3, r6
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001c92:	605e      	str	r6, [r3, #4]
  vtp->func = NULL;
 8001c94:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001c96:	d022      	beq.n	8001cde <chSchGoSleepTimeoutS+0xfe>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8001c9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  ch.vtlist.next->delta += vtp->delta;
 8001c9e:	4402      	add	r2, r0
  return (systime_t)STM32_ST_TIM->CNT;
 8001ca0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001ca8:	1a58      	subs	r0, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8001caa:	4282      	cmp	r2, r0
 8001cac:	d9dc      	bls.n	8001c68 <chSchGoSleepTimeoutS+0x88>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8001cae:	1acb      	subs	r3, r1, r3
 8001cb0:	4413      	add	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001cb2:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001cb4:	bf98      	it	ls
 8001cb6:	1c82      	addls	r2, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001cb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8001cbc:	440a      	add	r2, r1
 8001cbe:	635a      	str	r2, [r3, #52]	; 0x34
 8001cc0:	e7d2      	b.n	8001c68 <chSchGoSleepTimeoutS+0x88>
 8001cc2:	188b      	adds	r3, r1, r2
      ch.vtlist.next = vtp;
 8001cc4:	af01      	add	r7, sp, #4
      ch.vtlist.lasttime = now;
 8001cc6:	6262      	str	r2, [r4, #36]	; 0x24
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8001cc8:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
 8001ccc:	e9c4 7706 	strd	r7, r7, [r4, #24]
      vtp->delta = delay;
 8001cd0:	9103      	str	r1, [sp, #12]
  STM32_ST_TIM->SR     = 0;
 8001cd2:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001cd4:	6343      	str	r3, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001cd6:	2302      	movs	r3, #2
  STM32_ST_TIM->SR     = 0;
 8001cd8:	6102      	str	r2, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001cda:	60c3      	str	r3, [r0, #12]
 8001cdc:	e7b1      	b.n	8001c42 <chSchGoSleepTimeoutS+0x62>
  STM32_ST_TIM->DIER = 0U;
 8001cde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ce2:	60da      	str	r2, [r3, #12]
    return;
 8001ce4:	e7c0      	b.n	8001c68 <chSchGoSleepTimeoutS+0x88>
 8001ce6:	bf00      	nop
 8001ce8:	200018d0 	.word	0x200018d0
 8001cec:	08000f51 	.word	0x08000f51

08001cf0 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8001cf0:	b161      	cbz	r1, 8001d0c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8001cf2:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8001cf4:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8001cf6:	6952      	ldr	r2, [r2, #20]
  tp->queue.prev             = tqp->prev;
 8001cf8:	6844      	ldr	r4, [r0, #4]
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001d00:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8001d02:	6022      	str	r2, [r4, #0]
}
 8001d04:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8001d06:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001d08:	f7ff bf6a 	b.w	8001be0 <chSchGoSleepTimeoutS>
}
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200018d0 	.word	0x200018d0
	...

08001d20 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d22:	4604      	mov	r4, r0
 8001d24:	460f      	mov	r7, r1
 8001d26:	4616      	mov	r6, r2
 8001d28:	2320      	movs	r3, #32
 8001d2a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8001d2e:	e003      	b.n	8001d38 <oqPutTimeout+0x18>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8001d30:	f7ff ffde 	bl	8001cf0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001d34:	2800      	cmp	r0, #0
 8001d36:	db18      	blt.n	8001d6a <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8001d38:	68a5      	ldr	r5, [r4, #8]
 8001d3a:	4631      	mov	r1, r6
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	2d00      	cmp	r5, #0
 8001d40:	d0f6      	beq.n	8001d30 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8001d42:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001d44:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001d46:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8001d48:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8001d4a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8001d4c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001d4e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001d50:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8001d54:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001d56:	bf24      	itt	cs
 8001d58:	68e3      	ldrcs	r3, [r4, #12]
 8001d5a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8001d5c:	69e3      	ldr	r3, [r4, #28]
 8001d5e:	b103      	cbz	r3, 8001d62 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8001d60:	4798      	blx	r3
 8001d62:	2000      	movs	r0, #0
 8001d64:	f380 8811 	msr	BASEPRI, r0
}
 8001d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d6a:	f385 8811 	msr	BASEPRI, r5
 8001d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d70 <_putt.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001d70:	3030      	adds	r0, #48	; 0x30
 8001d72:	f7ff bfd5 	b.w	8001d20 <oqPutTimeout>
 8001d76:	bf00      	nop
	...

08001d80 <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001d80:	3030      	adds	r0, #48	; 0x30
 8001d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d86:	f7ff bfcb 	b.w	8001d20 <oqPutTimeout>
 8001d8a:	bf00      	nop
 8001d8c:	0000      	movs	r0, r0
	...

08001d90 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8001d90:	b570      	push	{r4, r5, r6, lr}
 8001d92:	2320      	movs	r3, #32
 8001d94:	4605      	mov	r5, r0
 8001d96:	460e      	mov	r6, r1
 8001d98:	f383 8811 	msr	BASEPRI, r3
 8001d9c:	e003      	b.n	8001da6 <iqGetTimeout+0x16>
 8001d9e:	f7ff ffa7 	bl	8001cf0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001da2:	2800      	cmp	r0, #0
 8001da4:	db1a      	blt.n	8001ddc <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8001da6:	68ac      	ldr	r4, [r5, #8]
 8001da8:	4631      	mov	r1, r6
 8001daa:	4628      	mov	r0, r5
 8001dac:	2c00      	cmp	r4, #0
 8001dae:	d0f6      	beq.n	8001d9e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8001db0:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 8001db2:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001db4:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 8001db6:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8001db8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001dba:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8001dbc:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 8001dbe:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001dc0:	bf28      	it	cs
 8001dc2:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 8001dc4:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8001dc6:	bf28      	it	cs
 8001dc8:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 8001dca:	69eb      	ldr	r3, [r5, #28]
 8001dcc:	b10b      	cbz	r3, 8001dd2 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8001dce:	4628      	mov	r0, r5
 8001dd0:	4798      	blx	r3
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8001dd8:	4620      	mov	r0, r4
}
 8001dda:	bd70      	pop	{r4, r5, r6, pc}
 8001ddc:	f384 8811 	msr	BASEPRI, r4
 8001de0:	bd70      	pop	{r4, r5, r6, pc}
 8001de2:	bf00      	nop
	...

08001df0 <_gett.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001df0:	300c      	adds	r0, #12
 8001df2:	f7ff bfcd 	b.w	8001d90 <iqGetTimeout>
 8001df6:	bf00      	nop
	...

08001e00 <_get.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001e00:	300c      	adds	r0, #12
 8001e02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e06:	f7ff bfc3 	b.w	8001d90 <iqGetTimeout>
 8001e0a:	bf00      	nop
 8001e0c:	0000      	movs	r0, r0
	...

08001e10 <obqGetEmptyBufferTimeoutS>:
                                sysinterval_t timeout) {
 8001e10:	b538      	push	{r3, r4, r5, lr}
 8001e12:	4604      	mov	r4, r0
 8001e14:	460d      	mov	r5, r1
 8001e16:	e005      	b.n	8001e24 <obqGetEmptyBufferTimeoutS+0x14>
    if (obqp->suspended) {
 8001e18:	7a23      	ldrb	r3, [r4, #8]
 8001e1a:	b983      	cbnz	r3, 8001e3e <obqGetEmptyBufferTimeoutS+0x2e>
 8001e1c:	f7ff ff68 	bl	8001cf0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001e20:	2800      	cmp	r0, #0
 8001e22:	db0b      	blt.n	8001e3c <obqGetEmptyBufferTimeoutS+0x2c>
  while (obqIsFullI(obqp)) {
 8001e24:	68e3      	ldr	r3, [r4, #12]
 8001e26:	4629      	mov	r1, r5
 8001e28:	4620      	mov	r0, r4
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f4      	beq.n	8001e18 <obqGetEmptyBufferTimeoutS+0x8>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001e2e:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001e30:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001e32:	1d1a      	adds	r2, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001e34:	440b      	add	r3, r1
 8001e36:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 8001e3a:	2000      	movs	r0, #0
}
 8001e3c:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 8001e3e:	f06f 0001 	mvn.w	r0, #1
}
 8001e42:	bd38      	pop	{r3, r4, r5, pc}
	...

08001e50 <obqPutTimeout>:
                    sysinterval_t timeout) {
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	2320      	movs	r3, #32
 8001e54:	460d      	mov	r5, r1
 8001e56:	4604      	mov	r4, r0
 8001e58:	f383 8811 	msr	BASEPRI, r3
  if (obqp->ptr == NULL) {
 8001e5c:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8001e5e:	b1fe      	cbz	r6, 8001ea0 <obqPutTimeout+0x50>
  *obqp->ptr = b;
 8001e60:	7035      	strb	r5, [r6, #0]
  if (obqp->ptr >= obqp->top) {
 8001e62:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 8001e66:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 8001e68:	4293      	cmp	r3, r2
  obqp->ptr++;
 8001e6a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 8001e6c:	d314      	bcc.n	8001e98 <obqPutTimeout+0x48>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001e6e:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 8001e70:	6923      	ldr	r3, [r4, #16]
  if (obqp->bwrptr >= obqp->btop) {
 8001e72:	69a1      	ldr	r1, [r4, #24]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001e74:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8001e76:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 8001e78:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 8001e7a:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 8001e7c:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 8001e7e:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 8001e80:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 8001e82:	bf24      	itt	cs
 8001e84:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8001e86:	6123      	strcs	r3, [r4, #16]
  obqp->bcounter--;
 8001e88:	3a01      	subs	r2, #1
  if (obqp->notify != NULL) {
 8001e8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 8001e8c:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 8001e8e:	2200      	movs	r2, #0
 8001e90:	62a2      	str	r2, [r4, #40]	; 0x28
  if (obqp->notify != NULL) {
 8001e92:	b10b      	cbz	r3, 8001e98 <obqPutTimeout+0x48>
    obqp->notify(obqp);
 8001e94:	4620      	mov	r0, r4
 8001e96:	4798      	blx	r3
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f380 8811 	msr	BASEPRI, r0
}
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	f7ff ffb5 	bl	8001e10 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8001ea6:	b908      	cbnz	r0, 8001eac <obqPutTimeout+0x5c>
 8001ea8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001eaa:	e7d9      	b.n	8001e60 <obqPutTimeout+0x10>
 8001eac:	f386 8811 	msr	BASEPRI, r6
}
 8001eb0:	bd70      	pop	{r4, r5, r6, pc}
 8001eb2:	bf00      	nop
	...

08001ec0 <_putt.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 8001ec0:	3044      	adds	r0, #68	; 0x44
 8001ec2:	f7ff bfc5 	b.w	8001e50 <obqPutTimeout>
 8001ec6:	bf00      	nop
	...

08001ed0 <_put.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8001ed0:	3044      	adds	r0, #68	; 0x44
 8001ed2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ed6:	f7ff bfbb 	b.w	8001e50 <obqPutTimeout>
 8001eda:	bf00      	nop
 8001edc:	0000      	movs	r0, r0
	...

08001ee0 <ibqGetFullBufferTimeoutS>:
                                 sysinterval_t timeout) {
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	460d      	mov	r5, r1
 8001ee6:	e005      	b.n	8001ef4 <ibqGetFullBufferTimeoutS+0x14>
    if (ibqp->suspended) {
 8001ee8:	7a23      	ldrb	r3, [r4, #8]
 8001eea:	b983      	cbnz	r3, 8001f0e <ibqGetFullBufferTimeoutS+0x2e>
 8001eec:	f7ff ff00 	bl	8001cf0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	db0b      	blt.n	8001f0c <ibqGetFullBufferTimeoutS+0x2c>
  while (ibqIsEmptyI(ibqp)) {
 8001ef4:	68e3      	ldr	r3, [r4, #12]
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	4620      	mov	r0, r4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f4      	beq.n	8001ee8 <ibqGetFullBufferTimeoutS+0x8>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001efe:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001f00:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001f02:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001f04:	441a      	add	r2, r3
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001f06:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001f0a:	2000      	movs	r0, #0
}
 8001f0c:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 8001f0e:	f06f 0001 	mvn.w	r0, #1
}
 8001f12:	bd38      	pop	{r3, r4, r5, pc}
	...

08001f20 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	2320      	movs	r3, #32
 8001f24:	4604      	mov	r4, r0
 8001f26:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr == NULL) {
 8001f2a:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8001f2c:	b1e5      	cbz	r5, 8001f68 <ibqGetTimeout+0x48>
  msg = (msg_t)*ibqp->ptr;
 8001f2e:	f815 6b01 	ldrb.w	r6, [r5], #1
  if (ibqp->ptr >= ibqp->top) {
 8001f32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  ibqp->ptr++;
 8001f34:	62a5      	str	r5, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 8001f36:	4295      	cmp	r5, r2
 8001f38:	d311      	bcc.n	8001f5e <ibqGetTimeout+0x3e>
  if (ibqp->brdptr >= ibqp->btop) {
 8001f3a:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 8001f3e:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8001f40:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8001f42:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 8001f44:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 8001f46:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 8001f48:	bf24      	itt	cs
 8001f4a:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8001f4c:	6163      	strcs	r3, [r4, #20]
  ibqp->bcounter--;
 8001f4e:	3a01      	subs	r2, #1
  if (ibqp->notify != NULL) {
 8001f50:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 8001f52:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 8001f54:	2200      	movs	r2, #0
 8001f56:	62a2      	str	r2, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
 8001f58:	b10b      	cbz	r3, 8001f5e <ibqGetTimeout+0x3e>
    ibqp->notify(ibqp);
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4798      	blx	r3
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f383 8811 	msr	BASEPRI, r3
}
 8001f64:	4630      	mov	r0, r6
 8001f66:	bd70      	pop	{r4, r5, r6, pc}
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8001f68:	f7ff ffba 	bl	8001ee0 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 8001f6c:	4606      	mov	r6, r0
 8001f6e:	b908      	cbnz	r0, 8001f74 <ibqGetTimeout+0x54>
 8001f70:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001f72:	e7dc      	b.n	8001f2e <ibqGetTimeout+0xe>
 8001f74:	f385 8811 	msr	BASEPRI, r5
      return msg;
 8001f78:	e7f4      	b.n	8001f64 <ibqGetTimeout+0x44>
 8001f7a:	bf00      	nop
 8001f7c:	0000      	movs	r0, r0
	...

08001f80 <_gett.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8001f80:	300c      	adds	r0, #12
 8001f82:	f7ff bfcd 	b.w	8001f20 <ibqGetTimeout>
 8001f86:	bf00      	nop
	...

08001f90 <_get.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8001f90:	300c      	adds	r0, #12
 8001f92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f96:	f7ff bfc3 	b.w	8001f20 <ibqGetTimeout>
 8001f9a:	bf00      	nop
 8001f9c:	0000      	movs	r0, r0
	...

08001fa0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8001fa0:	b508      	push	{r3, lr}
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	2320      	movs	r3, #32
 8001fa6:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8001faa:	2008      	movs	r0, #8
 8001fac:	f7ff fe18 	bl	8001be0 <chSchGoSleepTimeoutS>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f383 8811 	msr	BASEPRI, r3
}
 8001fb6:	bd08      	pop	{r3, pc}
	...

08001fc0 <read_byte>:
  __NOP();
  latch_data_in();
  CNTOE_INACTIVE;
}

static uint8_t read_byte(void){
 8001fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  CPR_ACTIVE;
 8001fc2:	4b28      	ldr	r3, [pc, #160]	; (8002064 <read_byte+0xa4>)
 8001fc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
static uint8_t read_byte(void){
 8001fc8:	b083      	sub	sp, #12
  CPR_ACTIVE;
 8001fca:	835a      	strh	r2, [r3, #26]
  __NOP();
 8001fcc:	bf00      	nop
  if (BUS_in_use == 0){
 8001fce:	4926      	ldr	r1, [pc, #152]	; (8002068 <read_byte+0xa8>)
  CPR_INACTIVE;
 8001fd0:	831a      	strh	r2, [r3, #24]
  if (BUS_in_use == 0){
 8001fd2:	780a      	ldrb	r2, [r1, #0]
 8001fd4:	b132      	cbz	r2, 8001fe4 <read_byte+0x24>
  while (palReadLine(BUSFREE) == PAL_LOW);
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	0592      	lsls	r2, r2, #22
 8001fda:	d5fc      	bpl.n	8001fd6 <read_byte+0x16>
  while (palReadLine(BUSFREE) == PAL_HIGH);
 8001fdc:	4a21      	ldr	r2, [pc, #132]	; (8002064 <read_byte+0xa4>)
 8001fde:	6913      	ldr	r3, [r2, #16]
 8001fe0:	059b      	lsls	r3, r3, #22
 8001fe2:	d4fc      	bmi.n	8001fde <read_byte+0x1e>
  uint8_t ret;
  latch_address();
//  DEBUG_LOW;
  wait_for_busfree(); // this adds about 130ns after falling edge of BUSFREE
//  DEBUG_HI;
  CNTOE_ACTIVE;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <read_byte+0xa4>)
 8001fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fea:	835a      	strh	r2, [r3, #26]
  __NOP();
 8001fec:	bf00      	nop
  __NOP();
 8001fee:	bf00      	nop
  RAMOE_ACTIVE;
 8001ff0:	491e      	ldr	r1, [pc, #120]	; (800206c <read_byte+0xac>)
 8001ff2:	2010      	movs	r0, #16
 8001ff4:	8348      	strh	r0, [r1, #26]
  __NOP();
 8001ff6:	bf00      	nop
  PLD_LOAD;
 8001ff8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001ffc:	835c      	strh	r4, [r3, #26]
  __NOP();
 8001ffe:	bf00      	nop
 8002000:	2520      	movs	r5, #32
  PLD_IDLE;
 8002002:	831c      	strh	r4, [r3, #24]
  RAMOE_INACTIVE;
 8002004:	8308      	strh	r0, [r1, #24]
  CNTOE_INACTIVE;
 8002006:	831a      	strh	r2, [r3, #24]
 8002008:	f385 8811 	msr	BASEPRI, r5
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartReceiveI(spip, n, rxbuf);
 800200c:	4b18      	ldr	r3, [pc, #96]	; (8002070 <read_byte+0xb0>)

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800200e:	4f19      	ldr	r7, [pc, #100]	; (8002074 <read_byte+0xb4>)
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8002010:	6a9c      	ldr	r4, [r3, #40]	; 0x28
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8002012:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8002014:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 8002018:	2003      	movs	r0, #3
 800201a:	7018      	strb	r0, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800201c:	6809      	ldr	r1, [r1, #0]
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800201e:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002020:	f10d 0507 	add.w	r5, sp, #7
 8002024:	60cd      	str	r5, [r1, #12]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8002026:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  dmaStreamSetTransactionSize(spip->dmarx, n);
 800202a:	2501      	movs	r5, #1
 800202c:	604d      	str	r5, [r1, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 800202e:	600c      	str	r4, [r1, #0]
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8002030:	60d7      	str	r7, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8002032:	6055      	str	r5, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8002034:	6016      	str	r6, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 8002036:	680c      	ldr	r4, [r1, #0]
  return ch.rlist.current;
 8002038:	4d0f      	ldr	r5, [pc, #60]	; (8002078 <read_byte+0xb8>)
 800203a:	f044 0401 	orr.w	r4, r4, #1
 800203e:	600c      	str	r4, [r1, #0]
  dmaStreamEnable(spip->dmatx);
 8002040:	6811      	ldr	r1, [r2, #0]
 8002042:	696c      	ldr	r4, [r5, #20]
 8002044:	f041 0101 	orr.w	r1, r1, #1
 8002048:	6011      	str	r1, [r2, #0]
  *trp = tp;
 800204a:	f843 4f08 	str.w	r4, [r3, #8]!
  tp->u.wttrp = trp;
 800204e:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8002050:	f7ff fdae 	bl	8001bb0 <chSchGoSleepS>
 8002054:	2300      	movs	r3, #0
 8002056:	f383 8811 	msr	BASEPRI, r3
  spiReceive(SPI_DRIVER, 1, &ret);
  return ret;
}
 800205a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800205e:	b003      	add	sp, #12
 8002060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002062:	bf00      	nop
 8002064:	40020400 	.word	0x40020400
 8002068:	20000c48 	.word	0x20000c48
 800206c:	40020000 	.word	0x40020000
 8002070:	20001838 	.word	0x20001838
 8002074:	0800a4c8 	.word	0x0800a4c8
 8002078:	200018d0 	.word	0x200018d0
 800207c:	00000000 	.word	0x00000000

08002080 <read_single_byte.constprop.0>:
  MRC_ACTIVE;  // Reset '590
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <read_single_byte.constprop.0+0x40>)
 8002082:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  write_byte(data);
  TRESET_INACTIVE;
  BUS_in_use = 1;
}

uint8_t read_single_byte(int32_t address, uint8_t reset){
 8002086:	b510      	push	{r4, lr}
  MRC_ACTIVE;  // Reset '590
 8002088:	835a      	strh	r2, [r3, #26]
  __NOP();
 800208a:	bf00      	nop
  for (i=0; i<address; i++){
 800208c:	2800      	cmp	r0, #0
  MRC_INACTIVE;
 800208e:	831a      	strh	r2, [r3, #24]
  for (i=0; i<address; i++){
 8002090:	dd09      	ble.n	80020a6 <read_single_byte.constprop.0+0x26>
  CNT_ACTIVE;
 8002092:	490c      	ldr	r1, [pc, #48]	; (80020c4 <read_single_byte.constprop.0+0x44>)
  for (i=0; i<address; i++){
 8002094:	2300      	movs	r3, #0
  CNT_ACTIVE;
 8002096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800209a:	830a      	strh	r2, [r1, #24]
  __NOP();
 800209c:	bf00      	nop
  for (i=0; i<address; i++){
 800209e:	3301      	adds	r3, #1
 80020a0:	4283      	cmp	r3, r0
  CNT_INACTIVE;
 80020a2:	834a      	strh	r2, [r1, #26]
  for (i=0; i<address; i++){
 80020a4:	d1f9      	bne.n	800209a <read_single_byte.constprop.0+0x1a>
  uint8_t data = 0;
  setup_address(address);
  check_BUS();
 80020a6:	f7fe fcd3 	bl	8000a50 <check_BUS>
  if (reset){
    TRESET_ACTIVE;
    BUS_in_use = 0;
  }
  data = read_byte();
 80020aa:	f7ff ff89 	bl	8001fc0 <read_byte>
  TRESET_INACTIVE;
 80020ae:	4904      	ldr	r1, [pc, #16]	; (80020c0 <read_single_byte.constprop.0+0x40>)
  BUS_in_use = 1;
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <read_single_byte.constprop.0+0x48>)
  TRESET_INACTIVE;
 80020b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  BUS_in_use = 1;
 80020b6:	2201      	movs	r2, #1
  TRESET_INACTIVE;
 80020b8:	834c      	strh	r4, [r1, #26]
  BUS_in_use = 1;
 80020ba:	701a      	strb	r2, [r3, #0]
  return data;
}
 80020bc:	bd10      	pop	{r4, pc}
 80020be:	bf00      	nop
 80020c0:	40020400 	.word	0x40020400
 80020c4:	40020000 	.word	0x40020000
 80020c8:	20000c48 	.word	0x20000c48
 80020cc:	00000000 	.word	0x00000000

080020d0 <read_block.constprop.0>:
void write_next_byte(uint8_t data){
  increment_address();
  write_byte(data);
}

void read_block(int32_t address, int32_t len, uint8_t * data, uint8_t reset){
 80020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MRC_ACTIVE;  // Reset '590
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <read_block.constprop.0+0x5c>)
 80020d4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
void read_block(int32_t address, int32_t len, uint8_t * data, uint8_t reset){
 80020d8:	460f      	mov	r7, r1
 80020da:	4614      	mov	r4, r2
  MRC_ACTIVE;  // Reset '590
 80020dc:	835d      	strh	r5, [r3, #26]
  __NOP();
 80020de:	bf00      	nop
  for (i=0; i<address; i++){
 80020e0:	2800      	cmp	r0, #0
  MRC_INACTIVE;
 80020e2:	831d      	strh	r5, [r3, #24]
  for (i=0; i<address; i++){
 80020e4:	dd09      	ble.n	80020fa <read_block.constprop.0+0x2a>
  CNT_ACTIVE;
 80020e6:	4d12      	ldr	r5, [pc, #72]	; (8002130 <read_block.constprop.0+0x60>)
  for (i=0; i<address; i++){
 80020e8:	2300      	movs	r3, #0
  CNT_ACTIVE;
 80020ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ee:	832a      	strh	r2, [r5, #24]
  __NOP();
 80020f0:	bf00      	nop
  for (i=0; i<address; i++){
 80020f2:	3301      	adds	r3, #1
 80020f4:	4283      	cmp	r3, r0
  CNT_INACTIVE;
 80020f6:	836a      	strh	r2, [r5, #26]
  for (i=0; i<address; i++){
 80020f8:	d1f9      	bne.n	80020ee <read_block.constprop.0+0x1e>
  int32_t l = len;
  setup_address(address);
  check_BUS();
 80020fa:	f7fe fca9 	bl	8000a50 <check_BUS>
  if (reset){
    TRESET_ACTIVE;
    BUS_in_use = 0;
  }
  while(l--){
 80020fe:	b167      	cbz	r7, 800211a <read_block.constprop.0+0x4a>
  CNT_ACTIVE;
 8002100:	4e0b      	ldr	r6, [pc, #44]	; (8002130 <read_block.constprop.0+0x60>)
 8002102:	4427      	add	r7, r4
 8002104:	f44f 7580 	mov.w	r5, #256	; 0x100
    *data++ = read_byte();
 8002108:	f7ff ff5a 	bl	8001fc0 <read_byte>
 800210c:	f804 0b01 	strb.w	r0, [r4], #1
  CNT_ACTIVE;
 8002110:	8335      	strh	r5, [r6, #24]
  __NOP();
 8002112:	bf00      	nop
  while(l--){
 8002114:	42bc      	cmp	r4, r7
  CNT_INACTIVE;
 8002116:	8375      	strh	r5, [r6, #26]
  while(l--){
 8002118:	d1f6      	bne.n	8002108 <read_block.constprop.0+0x38>
    increment_address();
  }
  TRESET_INACTIVE;
 800211a:	4904      	ldr	r1, [pc, #16]	; (800212c <read_block.constprop.0+0x5c>)
  BUS_in_use = 0;
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <read_block.constprop.0+0x64>)
  TRESET_INACTIVE;
 800211e:	f44f 6080 	mov.w	r0, #1024	; 0x400
  BUS_in_use = 0;
 8002122:	2200      	movs	r2, #0
  TRESET_INACTIVE;
 8002124:	8348      	strh	r0, [r1, #26]
  BUS_in_use = 0;
 8002126:	701a      	strb	r2, [r3, #0]
}
 8002128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800212a:	bf00      	nop
 800212c:	40020400 	.word	0x40020400
 8002130:	40020000 	.word	0x40020000
 8002134:	20000c48 	.word	0x20000c48
	...

08002140 <spiSend.constprop.0>:
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002142:	4605      	mov	r5, r0
 8002144:	2320      	movs	r3, #32
 8002146:	f383 8811 	msr	BASEPRI, r3
  spiStartSendI(spip, n, txbuf);
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <spiSend.constprop.0+0x54>)
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800214c:	4e12      	ldr	r6, [pc, #72]	; (8002198 <spiSend.constprop.0+0x58>)
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800214e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8002150:	6a9f      	ldr	r7, [r3, #40]	; 0x28
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002152:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 8002156:	2003      	movs	r0, #3
 8002158:	7018      	strb	r0, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800215a:	6809      	ldr	r1, [r1, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800215c:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800215e:	60ce      	str	r6, [r1, #12]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002160:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002164:	2601      	movs	r6, #1
 8002166:	604e      	str	r6, [r1, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8002168:	600f      	str	r7, [r1, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800216a:	60d5      	str	r5, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800216c:	6056      	str	r6, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800216e:	6014      	str	r4, [r2, #0]
  dmaStreamEnable(spip->dmarx);
 8002170:	680c      	ldr	r4, [r1, #0]
 8002172:	4d0a      	ldr	r5, [pc, #40]	; (800219c <spiSend.constprop.0+0x5c>)
 8002174:	4334      	orrs	r4, r6
 8002176:	600c      	str	r4, [r1, #0]
  dmaStreamEnable(spip->dmatx);
 8002178:	6811      	ldr	r1, [r2, #0]
 800217a:	696c      	ldr	r4, [r5, #20]
 800217c:	4331      	orrs	r1, r6
 800217e:	6011      	str	r1, [r2, #0]
  *trp = tp;
 8002180:	f843 4f08 	str.w	r4, [r3, #8]!
  tp->u.wttrp = trp;
 8002184:	6263      	str	r3, [r4, #36]	; 0x24
 8002186:	f7ff fd13 	bl	8001bb0 <chSchGoSleepS>
 800218a:	2300      	movs	r3, #0
 800218c:	f383 8811 	msr	BASEPRI, r3
}
 8002190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002192:	bf00      	nop
 8002194:	20001838 	.word	0x20001838
 8002198:	20001b24 	.word	0x20001b24
 800219c:	200018d0 	.word	0x200018d0

080021a0 <write_byte>:
static void write_byte(uint8_t data){
 80021a0:	b500      	push	{lr}
 80021a2:	b083      	sub	sp, #12
 80021a4:	4603      	mov	r3, r0
  spiSend(SPI_DRIVER, 1, buf);
 80021a6:	a801      	add	r0, sp, #4
  buf[0] = data;
 80021a8:	f88d 3004 	strb.w	r3, [sp, #4]
  spiSend(SPI_DRIVER, 1, buf);
 80021ac:	f7ff ffc8 	bl	8002140 <spiSend.constprop.0>
  CPR_ACTIVE;
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <write_byte+0x4c>)
 80021b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021b6:	835a      	strh	r2, [r3, #26]
  __NOP();
 80021b8:	bf00      	nop
  if (BUS_in_use == 0){
 80021ba:	490d      	ldr	r1, [pc, #52]	; (80021f0 <write_byte+0x50>)
  CPR_INACTIVE;
 80021bc:	831a      	strh	r2, [r3, #24]
  if (BUS_in_use == 0){
 80021be:	780a      	ldrb	r2, [r1, #0]
 80021c0:	b132      	cbz	r2, 80021d0 <write_byte+0x30>
  while (palReadLine(BUSFREE) == PAL_LOW);
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	0592      	lsls	r2, r2, #22
 80021c6:	d5fc      	bpl.n	80021c2 <write_byte+0x22>
  while (palReadLine(BUSFREE) == PAL_HIGH);
 80021c8:	4a08      	ldr	r2, [pc, #32]	; (80021ec <write_byte+0x4c>)
 80021ca:	6913      	ldr	r3, [r2, #16]
 80021cc:	059b      	lsls	r3, r3, #22
 80021ce:	d4fc      	bmi.n	80021ca <write_byte+0x2a>
  CNTOE_ACTIVE;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <write_byte+0x4c>)
 80021d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d6:	835a      	strh	r2, [r3, #26]
  __NOP();
 80021d8:	bf00      	nop
  WE_ACTIVE;
 80021da:	4906      	ldr	r1, [pc, #24]	; (80021f4 <write_byte+0x54>)
 80021dc:	2001      	movs	r0, #1
 80021de:	8348      	strh	r0, [r1, #26]
  __NOP();
 80021e0:	bf00      	nop
  WE_INACTIVE;
 80021e2:	8308      	strh	r0, [r1, #24]
  CNTOE_INACTIVE;
 80021e4:	831a      	strh	r2, [r3, #24]
}
 80021e6:	b003      	add	sp, #12
 80021e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80021ec:	40020400 	.word	0x40020400
 80021f0:	20000c48 	.word	0x20000c48
 80021f4:	40020000 	.word	0x40020000
	...

08002200 <write_block.constprop.0>:

void write_block(int32_t address, int32_t len, uint8_t * data, uint8_t reset){
 8002200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002202:	4606      	mov	r6, r0
  int32_t l = len;
  select_chip(15);
 8002204:	200f      	movs	r0, #15
void write_block(int32_t address, int32_t len, uint8_t * data, uint8_t reset){
 8002206:	4614      	mov	r4, r2
 8002208:	460f      	mov	r7, r1
  select_chip(15);
 800220a:	f7fe fc61 	bl	8000ad0 <select_chip>
  MRC_ACTIVE;  // Reset '590
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <write_block.constprop.0+0x64>)
 8002210:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002214:	835a      	strh	r2, [r3, #26]
  __NOP();
 8002216:	bf00      	nop
  for (i=0; i<address; i++){
 8002218:	2e00      	cmp	r6, #0
  MRC_INACTIVE;
 800221a:	831a      	strh	r2, [r3, #24]
  for (i=0; i<address; i++){
 800221c:	dd09      	ble.n	8002232 <write_block.constprop.0+0x32>
  CNT_ACTIVE;
 800221e:	4d12      	ldr	r5, [pc, #72]	; (8002268 <write_block.constprop.0+0x68>)
  for (i=0; i<address; i++){
 8002220:	2300      	movs	r3, #0
  CNT_ACTIVE;
 8002222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002226:	832a      	strh	r2, [r5, #24]
  __NOP();
 8002228:	bf00      	nop
  for (i=0; i<address; i++){
 800222a:	3301      	adds	r3, #1
 800222c:	42b3      	cmp	r3, r6
  CNT_INACTIVE;
 800222e:	836a      	strh	r2, [r5, #26]
  for (i=0; i<address; i++){
 8002230:	d1f9      	bne.n	8002226 <write_block.constprop.0+0x26>
  setup_address(address);
  check_BUS();
 8002232:	f7fe fc0d 	bl	8000a50 <check_BUS>
  if (reset){
    TRESET_ACTIVE;
    BUS_in_use = 0;
  }
  while(l--){
 8002236:	b167      	cbz	r7, 8002252 <write_block.constprop.0+0x52>
  CNT_ACTIVE;
 8002238:	4e0b      	ldr	r6, [pc, #44]	; (8002268 <write_block.constprop.0+0x68>)
 800223a:	4427      	add	r7, r4
 800223c:	f44f 7580 	mov.w	r5, #256	; 0x100
    write_byte(*data++);
 8002240:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002244:	f7ff ffac 	bl	80021a0 <write_byte>
  CNT_ACTIVE;
 8002248:	8335      	strh	r5, [r6, #24]
  __NOP();
 800224a:	bf00      	nop
  while(l--){
 800224c:	42bc      	cmp	r4, r7
  CNT_INACTIVE;
 800224e:	8375      	strh	r5, [r6, #26]
  while(l--){
 8002250:	d1f6      	bne.n	8002240 <write_block.constprop.0+0x40>
    increment_address();
  }
  TRESET_INACTIVE;
 8002252:	4904      	ldr	r1, [pc, #16]	; (8002264 <write_block.constprop.0+0x64>)
  BUS_in_use = 1;
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <write_block.constprop.0+0x6c>)
  TRESET_INACTIVE;
 8002256:	f44f 6080 	mov.w	r0, #1024	; 0x400
  BUS_in_use = 1;
 800225a:	2201      	movs	r2, #1
  TRESET_INACTIVE;
 800225c:	8348      	strh	r0, [r1, #26]
  BUS_in_use = 1;
 800225e:	701a      	strb	r2, [r3, #0]
}
 8002260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002262:	bf00      	nop
 8002264:	40020400 	.word	0x40020400
 8002268:	40020000 	.word	0x40020000
 800226c:	20000c48 	.word	0x20000c48

08002270 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8002270:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8002272:	4b2e      	ldr	r3, [pc, #184]	; (800232c <chMtxLockS+0xbc>)
void chMtxLockS(mutex_t *mp) {
 8002274:	4604      	mov	r4, r0

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8002276:	6880      	ldr	r0, [r0, #8]
  thread_t *ctp = currp;
 8002278:	695d      	ldr	r5, [r3, #20]
  if (mp->owner != NULL) {
 800227a:	b330      	cbz	r0, 80022ca <chMtxLockS+0x5a>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 800227c:	68aa      	ldr	r2, [r5, #8]
 800227e:	6883      	ldr	r3, [r0, #8]
 8002280:	4293      	cmp	r3, r2
 8002282:	d207      	bcs.n	8002294 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8002284:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 8002288:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 800228a:	2b06      	cmp	r3, #6
 800228c:	d035      	beq.n	80022fa <chMtxLockS+0x8a>
 800228e:	2b07      	cmp	r3, #7
 8002290:	d020      	beq.n	80022d4 <chMtxLockS+0x64>
 8002292:	b19b      	cbz	r3, 80022bc <chMtxLockS+0x4c>
  thread_t *cp = (thread_t *)tqp;
 8002294:	4623      	mov	r3, r4
 8002296:	e003      	b.n	80022a0 <chMtxLockS+0x30>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002298:	6899      	ldr	r1, [r3, #8]
 800229a:	68aa      	ldr	r2, [r5, #8]
 800229c:	4291      	cmp	r1, r2
 800229e:	d302      	bcc.n	80022a6 <chMtxLockS+0x36>
    cp = cp->queue.next;
 80022a0:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80022a2:	429c      	cmp	r4, r3
 80022a4:	d1f8      	bne.n	8002298 <chMtxLockS+0x28>
  tp->queue.prev             = cp->queue.prev;
 80022a6:	685a      	ldr	r2, [r3, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80022a8:	2006      	movs	r0, #6
 80022aa:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 80022ae:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 80022b0:	605d      	str	r5, [r3, #4]
      ctp->u.wtmtxp = mp;
 80022b2:	626c      	str	r4, [r5, #36]	; 0x24
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
    ctp->mtxlist = mp;
  }
}
 80022b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 80022b8:	f7ff bc7a 	b.w	8001bb0 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 80022bc:	e9d0 3200 	ldrd	r3, r2, [r0]
 80022c0:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80022c2:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 80022c4:	f7fe fe7c 	bl	8000fc0 <chSchReadyI>
          break;
 80022c8:	e7e4      	b.n	8002294 <chMtxLockS+0x24>
    mp->next = ctp->mtxlist;
 80022ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80022cc:	e9c4 5302 	strd	r5, r3, [r4, #8]
    ctp->mtxlist = mp;
 80022d0:	63ac      	str	r4, [r5, #56]	; 0x38
}
 80022d2:	bd70      	pop	{r4, r5, r6, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 80022d4:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80022d8:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80022da:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80022dc:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 80022de:	4633      	mov	r3, r6
 80022e0:	e002      	b.n	80022e8 <chMtxLockS+0x78>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80022e2:	6899      	ldr	r1, [r3, #8]
 80022e4:	428a      	cmp	r2, r1
 80022e6:	d802      	bhi.n	80022ee <chMtxLockS+0x7e>
    cp = cp->queue.next;
 80022e8:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80022ea:	429e      	cmp	r6, r3
 80022ec:	d1f9      	bne.n	80022e2 <chMtxLockS+0x72>
  tp->queue.prev             = cp->queue.prev;
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80022f4:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80022f6:	6058      	str	r0, [r3, #4]
 80022f8:	e7cc      	b.n	8002294 <chMtxLockS+0x24>
  tp->queue.prev->queue.next = tp->queue.next;
 80022fa:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80022fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002300:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8002302:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 8002304:	4633      	mov	r3, r6
 8002306:	e002      	b.n	800230e <chMtxLockS+0x9e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002308:	6899      	ldr	r1, [r3, #8]
 800230a:	428a      	cmp	r2, r1
 800230c:	d802      	bhi.n	8002314 <chMtxLockS+0xa4>
    cp = cp->queue.next;
 800230e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002310:	429e      	cmp	r6, r3
 8002312:	d1f9      	bne.n	8002308 <chMtxLockS+0x98>
  tp->queue.prev             = cp->queue.prev;
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800231a:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800231c:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 800231e:	68b0      	ldr	r0, [r6, #8]
      while (tp->prio < ctp->prio) {
 8002320:	68aa      	ldr	r2, [r5, #8]
 8002322:	6883      	ldr	r3, [r0, #8]
 8002324:	4293      	cmp	r3, r2
 8002326:	d3ad      	bcc.n	8002284 <chMtxLockS+0x14>
 8002328:	e7b4      	b.n	8002294 <chMtxLockS+0x24>
 800232a:	bf00      	nop
 800232c:	200018d0 	.word	0x200018d0

08002330 <chThdExitS>:
void chThdExitS(msg_t msg) {
 8002330:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <chThdExitS+0x44>)
 8002334:	695c      	ldr	r4, [r3, #20]
  return (bool)(tlp->next != (thread_t *)tlp);
 8002336:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8002338:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 800233a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800233e:	42ab      	cmp	r3, r5
 8002340:	d007      	beq.n	8002352 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe fe3a 	bl	8000fc0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800234c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800234e:	42ab      	cmp	r3, r5
 8002350:	d1f7      	bne.n	8002342 <chThdExitS+0x12>
  if ((tp->refs == (trefs_t)0) &&
 8002352:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002356:	b93b      	cbnz	r3, 8002368 <chThdExitS+0x38>
 8002358:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800235c:	079b      	lsls	r3, r3, #30
 800235e:	d103      	bne.n	8002368 <chThdExitS+0x38>
    REG_REMOVE(tp);
 8002360:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 8002364:	60d3      	str	r3, [r2, #12]
 8002366:	611a      	str	r2, [r3, #16]
}
 8002368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800236c:	200f      	movs	r0, #15
 800236e:	f7ff bc1f 	b.w	8001bb0 <chSchGoSleepS>
 8002372:	bf00      	nop
 8002374:	200018d0 	.word	0x200018d0
	...

08002380 <chscanf.constprop.0>:
 *                      a failure (either matching or input) occurs before any
 *                      parameters are assigned, the function will return 0.
 *
 * @api
 */
int chscanf(BaseBufferedStream *chp, const char *fmt, ...)
 8002380:	b40e      	push	{r1, r2, r3}
 8002382:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c = streamGet(chp);
 8002386:	6803      	ldr	r3, [r0, #0]
int chscanf(BaseBufferedStream *chp, const char *fmt, ...)
 8002388:	b088      	sub	sp, #32
 800238a:	4682      	mov	sl, r0
  c = streamGet(chp);
 800238c:	691b      	ldr	r3, [r3, #16]
{
  va_list ap;
  int     retval;

  va_start(ap, fmt);
 800238e:	ad12      	add	r5, sp, #72	; 0x48
 8002390:	9507      	str	r5, [sp, #28]
  c = streamGet(chp);
 8002392:	4798      	blx	r3
  streamPut(chp, (uint8_t)c); //ROB
 8002394:	f8da 1000 	ldr.w	r1, [sl]
  c = streamGet(chp);
 8002398:	4681      	mov	r9, r0
  streamPut(chp, (uint8_t)c); //ROB
 800239a:	68cc      	ldr	r4, [r1, #12]
 800239c:	b2c1      	uxtb	r1, r0
 800239e:	4650      	mov	r0, sl
 80023a0:	47a0      	blx	r4
  while (c != STM_RESET && f != 0) {
 80023a2:	f119 0f02 	cmn.w	r9, #2
 80023a6:	f000 81ff 	beq.w	80027a8 <chscanf.constprop.0+0x428>
 80023aa:	46a8      	mov	r8, r5
  f = *fmt++;
 80023ac:	4cab      	ldr	r4, [pc, #684]	; (800265c <chscanf.constprop.0+0x2dc>)
 80023ae:	4dac      	ldr	r5, [pc, #688]	; (8002660 <chscanf.constprop.0+0x2e0>)
 80023b0:	4657      	mov	r7, sl
  int   n = 0;
 80023b2:	f04f 0b00 	mov.w	fp, #0
  f = *fmt++;
 80023b6:	2125      	movs	r1, #37	; 0x25
 80023b8:	46c2      	mov	sl, r8
    if (isspace(f)) {
 80023ba:	5c6b      	ldrb	r3, [r5, r1]
 80023bc:	f013 0008 	ands.w	r0, r3, #8
 80023c0:	f040 80d4 	bne.w	800256c <chscanf.constprop.0+0x1ec>
    if (f != '%') {
 80023c4:	2925      	cmp	r1, #37	; 0x25
 80023c6:	d011      	beq.n	80023ec <chscanf.constprop.0+0x6c>
      if (f != c) {
 80023c8:	4549      	cmp	r1, r9
 80023ca:	f000 8081 	beq.w	80024d0 <chscanf.constprop.0+0x150>
 80023ce:	46ba      	mov	sl, r7
 80023d0:	fa5f f989 	uxtb.w	r9, r9
  streamUnget(chp, c);
 80023d4:	f8da 3000 	ldr.w	r3, [sl]
 80023d8:	4649      	mov	r1, r9
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	4650      	mov	r0, sl
 80023de:	4798      	blx	r3
  retval = chvscanf(chp, fmt, ap);
  va_end(ap);

  return retval;
}
 80023e0:	4658      	mov	r0, fp
 80023e2:	b008      	add	sp, #32
 80023e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e8:	b003      	add	sp, #12
 80023ea:	4770      	bx	lr
    f = *fmt++;
 80023ec:	7823      	ldrb	r3, [r4, #0]
    if (f == '%') {
 80023ee:	2b25      	cmp	r3, #37	; 0x25
 80023f0:	d10a      	bne.n	8002408 <chscanf.constprop.0+0x88>
      if (f != c) {
 80023f2:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
 80023f6:	d1ea      	bne.n	80023ce <chscanf.constprop.0+0x4e>
        c = streamGet(chp);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4638      	mov	r0, r7
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	4798      	blx	r3
        f = *fmt++;
 8002400:	1ca6      	adds	r6, r4, #2
 8002402:	7861      	ldrb	r1, [r4, #1]
        c = streamGet(chp);
 8002404:	4681      	mov	r9, r0
 8002406:	e06b      	b.n	80024e0 <chscanf.constprop.0+0x160>
    if (f == '*') {
 8002408:	2b2a      	cmp	r3, #42	; 0x2a
 800240a:	f000 81c4 	beq.w	8002796 <chscanf.constprop.0+0x416>
      buf = va_arg(ap, void*);
 800240e:	f85a 2b04 	ldr.w	r2, [sl], #4
 8002412:	9201      	str	r2, [sp, #4]
    f = *fmt++;
 8002414:	1c66      	adds	r6, r4, #1
    while (isdigit(f)) {
 8002416:	5ce9      	ldrb	r1, [r5, r3]
 8002418:	074c      	lsls	r4, r1, #29
 800241a:	f140 81ca 	bpl.w	80027b2 <chscanf.constprop.0+0x432>
    width = 0;
 800241e:	2400      	movs	r4, #0
      width = (width * 10) + (f - '0');
 8002420:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
      f     = *fmt++;
 8002424:	f816 3b01 	ldrb.w	r3, [r6], #1
    while (isdigit(f)) {
 8002428:	5ce9      	ldrb	r1, [r5, r3]
      width = (width * 10) + (f - '0');
 800242a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    while (isdigit(f)) {
 800242e:	0748      	lsls	r0, r1, #29
      width = (width * 10) + (f - '0');
 8002430:	eb02 0444 	add.w	r4, r2, r4, lsl #1
    while (isdigit(f)) {
 8002434:	d4f4      	bmi.n	8002420 <chscanf.constprop.0+0xa0>
      width = -1;
 8002436:	2c00      	cmp	r4, #0
 8002438:	bf08      	it	eq
 800243a:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
    if (f == 'l' || f == 'L') {
 800243e:	f003 00df 	and.w	r0, r3, #223	; 0xdf
 8002442:	284c      	cmp	r0, #76	; 0x4c
 8002444:	f000 80a2 	beq.w	800258c <chscanf.constprop.0+0x20c>
      is_long = isupper(f);
 8002448:	f001 0103 	and.w	r1, r1, #3
 800244c:	f1a1 0201 	sub.w	r2, r1, #1
 8002450:	fab2 f282 	clz	r2, r2
 8002454:	0952      	lsrs	r2, r2, #5
 8002456:	e9cd 6202 	strd	r6, r2, [sp, #8]
 800245a:	3b44      	subs	r3, #68	; 0x44
 800245c:	2b34      	cmp	r3, #52	; 0x34
 800245e:	f200 809c 	bhi.w	800259a <chscanf.constprop.0+0x21a>
 8002462:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002466:	0164      	.short	0x0164
 8002468:	009a009a 	.word	0x009a009a
 800246c:	009a009a 	.word	0x009a009a
 8002470:	009a0139 	.word	0x009a0139
 8002474:	009a009a 	.word	0x009a009a
 8002478:	009a009a 	.word	0x009a009a
 800247c:	00a1011e 	.word	0x00a1011e
 8002480:	009a009a 	.word	0x009a009a
 8002484:	009a009a 	.word	0x009a009a
 8002488:	009a0103 	.word	0x009a0103
 800248c:	00a1009a 	.word	0x00a1009a
 8002490:	009a009a 	.word	0x009a009a
 8002494:	009a009a 	.word	0x009a009a
 8002498:	009a009a 	.word	0x009a009a
 800249c:	009a009a 	.word	0x009a009a
 80024a0:	009a009a 	.word	0x009a009a
 80024a4:	0164017d 	.word	0x0164017d
 80024a8:	009a009a 	.word	0x009a009a
 80024ac:	009a009a 	.word	0x009a009a
 80024b0:	009a0139 	.word	0x009a0139
 80024b4:	009a009a 	.word	0x009a009a
 80024b8:	009a009a 	.word	0x009a009a
 80024bc:	00a1011e 	.word	0x00a1011e
 80024c0:	009a009a 	.word	0x009a009a
 80024c4:	009a004e 	.word	0x009a004e
 80024c8:	009a0103 	.word	0x009a0103
 80024cc:	00a1009a 	.word	0x00a1009a
        c = streamGet(chp);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4638      	mov	r0, r7
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	4798      	blx	r3
        f = *fmt++;
 80024d8:	4626      	mov	r6, r4
        c = streamGet(chp);
 80024da:	4681      	mov	r9, r0
        f = *fmt++;
 80024dc:	f816 1b01 	ldrb.w	r1, [r6], #1
  while (c != STM_RESET && f != 0) {
 80024e0:	f119 0f02 	cmn.w	r9, #2
 80024e4:	f000 80be 	beq.w	8002664 <chscanf.constprop.0+0x2e4>
 80024e8:	2900      	cmp	r1, #0
 80024ea:	f43f af70 	beq.w	80023ce <chscanf.constprop.0+0x4e>
 80024ee:	4634      	mov	r4, r6
 80024f0:	e763      	b.n	80023ba <chscanf.constprop.0+0x3a>
        c = streamGet(chp);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	4798      	blx	r3
        if (c == STM_RESET) {
 80024f8:	f110 0f02 	cmn.w	r0, #2
        c = streamGet(chp);
 80024fc:	4681      	mov	r9, r0
        if (c == STM_RESET) {
 80024fe:	f43f af6f 	beq.w	80023e0 <chscanf.constprop.0+0x60>
      while (isspace(c)) {
 8002502:	f815 3009 	ldrb.w	r3, [r5, r9]
 8002506:	f013 0308 	ands.w	r3, r3, #8
        c = streamGet(chp);
 800250a:	4638      	mov	r0, r7
      while (isspace(c)) {
 800250c:	d1f1      	bne.n	80024f2 <chscanf.constprop.0+0x172>
      for (i = 0; i < width; ++i) {
 800250e:	2c00      	cmp	r4, #0
 8002510:	bfc8      	it	gt
 8002512:	461e      	movgt	r6, r3
 8002514:	f340 8196 	ble.w	8002844 <chscanf.constprop.0+0x4c4>
        if (buf) {
 8002518:	9b01      	ldr	r3, [sp, #4]
        c = streamGet(chp);
 800251a:	4638      	mov	r0, r7
        if (buf) {
 800251c:	b10b      	cbz	r3, 8002522 <chscanf.constprop.0+0x1a2>
          ((char*)buf)[i] = c;
 800251e:	f803 9006 	strb.w	r9, [r3, r6]
        c = streamGet(chp);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	4798      	blx	r3
 8002528:	4681      	mov	r9, r0
        if (c == STM_RESET) {
 800252a:	f119 0f02 	cmn.w	r9, #2
        streamPut(chp, (uint8_t)c); //ROB
 800252e:	b2c1      	uxtb	r1, r0
      for (i = 0; i < width; ++i) {
 8002530:	f106 0601 	add.w	r6, r6, #1
        streamPut(chp, (uint8_t)c); //ROB
 8002534:	4638      	mov	r0, r7
        if (c == STM_RESET) {
 8002536:	f43f af53 	beq.w	80023e0 <chscanf.constprop.0+0x60>
        streamPut(chp, (uint8_t)c); //ROB
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4798      	blx	r3
      for (i = 0; i < width; ++i) {
 8002540:	42b4      	cmp	r4, r6
 8002542:	f000 8182 	beq.w	800284a <chscanf.constprop.0+0x4ca>
        if (isspace(c)) {
 8002546:	f815 3009 	ldrb.w	r3, [r5, r9]
 800254a:	0718      	lsls	r0, r3, #28
 800254c:	d5e4      	bpl.n	8002518 <chscanf.constprop.0+0x198>
          if (buf) {
 800254e:	9b01      	ldr	r3, [sp, #4]
 8002550:	b133      	cbz	r3, 8002560 <chscanf.constprop.0+0x1e0>
            ((char*)buf)[i] = 0;
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	559a      	strb	r2, [r3, r6]
          ((char*)buf)[width] = 0;
 8002558:	9b01      	ldr	r3, [sp, #4]
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	551a      	strb	r2, [r3, r4]
      f = *fmt++;
 8002560:	9e02      	ldr	r6, [sp, #8]
      ++n;
 8002562:	f10b 0b01 	add.w	fp, fp, #1
      f = *fmt++;
 8002566:	f816 1b01 	ldrb.w	r1, [r6], #1
 800256a:	e7bd      	b.n	80024e8 <chscanf.constprop.0+0x168>
      while (isspace(c)) {
 800256c:	f815 3009 	ldrb.w	r3, [r5, r9]
 8002570:	071b      	lsls	r3, r3, #28
 8002572:	d507      	bpl.n	8002584 <chscanf.constprop.0+0x204>
        c = streamGet(chp);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4638      	mov	r0, r7
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	4798      	blx	r3
      while (isspace(c)) {
 800257c:	5c2b      	ldrb	r3, [r5, r0]
 800257e:	071e      	lsls	r6, r3, #28
 8002580:	d4f8      	bmi.n	8002574 <chscanf.constprop.0+0x1f4>
 8002582:	4681      	mov	r9, r0
      f = *fmt++;
 8002584:	4626      	mov	r6, r4
 8002586:	f816 1b01 	ldrb.w	r1, [r6], #1
 800258a:	e7a9      	b.n	80024e0 <chscanf.constprop.0+0x160>
      f       = *fmt++;
 800258c:	4632      	mov	r2, r6
      is_long = true;
 800258e:	2301      	movs	r3, #1
 8002590:	9303      	str	r3, [sp, #12]
      f       = *fmt++;
 8002592:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002596:	9202      	str	r2, [sp, #8]
 8002598:	e75f      	b.n	800245a <chscanf.constprop.0+0xda>
      streamUnget(chp, c);
 800259a:	6838      	ldr	r0, [r7, #0]
 800259c:	fa5f f189 	uxtb.w	r1, r9
 80025a0:	6943      	ldr	r3, [r0, #20]
 80025a2:	4638      	mov	r0, r7
 80025a4:	4798      	blx	r3
 80025a6:	e71b      	b.n	80023e0 <chscanf.constprop.0+0x60>
      while (isspace(c)) {
 80025a8:	f815 3009 	ldrb.w	r3, [r5, r9]
 80025ac:	0718      	lsls	r0, r3, #28
 80025ae:	d507      	bpl.n	80025c0 <chscanf.constprop.0+0x240>
        c = streamGet(chp);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4638      	mov	r0, r7
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	4798      	blx	r3
      while (isspace(c)) {
 80025b8:	5c2b      	ldrb	r3, [r5, r0]
 80025ba:	0719      	lsls	r1, r3, #28
 80025bc:	d4f8      	bmi.n	80025b0 <chscanf.constprop.0+0x230>
 80025be:	4681      	mov	r9, r0
      if (c == '+') {
 80025c0:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80025c4:	f000 8108 	beq.w	80027d8 <chscanf.constprop.0+0x458>
      } else if (c == '-') {
 80025c8:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 80025cc:	f000 8167 	beq.w	800289e <chscanf.constprop.0+0x51e>
    is_positive = true;
 80025d0:	2301      	movs	r3, #1
 80025d2:	9304      	str	r3, [sp, #16]
      if (c == '0') {
 80025d4:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80025d8:	d10d      	bne.n	80025f6 <chscanf.constprop.0+0x276>
        if (--width == 0) {
 80025da:	1e66      	subs	r6, r4, #1
 80025dc:	f000 818c 	beq.w	80028f8 <chscanf.constprop.0+0x578>
        c = streamGet(chp);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4638      	mov	r0, r7
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	4798      	blx	r3
        if (c == 'x' || c == 'X') {
 80025e8:	f020 0320 	bic.w	r3, r0, #32
 80025ec:	2b58      	cmp	r3, #88	; 0x58
        c = streamGet(chp);
 80025ee:	4681      	mov	r9, r0
        if (c == 'x' || c == 'X') {
 80025f0:	f000 8130 	beq.w	8002854 <chscanf.constprop.0+0x4d4>
 80025f4:	4634      	mov	r4, r6
      is_signed = false;
 80025f6:	2300      	movs	r3, #0
 80025f8:	9305      	str	r3, [sp, #20]
      base      = 16;
 80025fa:	f04f 0810 	mov.w	r8, #16
    if (sym_to_val(c, base) == -1) {
 80025fe:	fa5f f989 	uxtb.w	r9, r9
 8002602:	4641      	mov	r1, r8
 8002604:	4648      	mov	r0, r9
 8002606:	f7fe fbc3 	bl	8000d90 <sym_to_val>
 800260a:	1c41      	adds	r1, r0, #1
 800260c:	4603      	mov	r3, r0
 800260e:	f000 8171 	beq.w	80028f4 <chscanf.constprop.0+0x574>
 8002612:	3c02      	subs	r4, #2
    vall = 0UL;
 8002614:	2600      	movs	r6, #0
      c    = streamGet(chp);
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	4638      	mov	r0, r7
 800261a:	6912      	ldr	r2, [r2, #16]
      vall = (vall * base) + digit;
 800261c:	fb06 3608 	mla	r6, r6, r8, r3
      c    = streamGet(chp);
 8002620:	4790      	blx	r2
    while (width--) {
 8002622:	1c63      	adds	r3, r4, #1
      c    = streamGet(chp);
 8002624:	4681      	mov	r9, r0
      digit = sym_to_val(c, base);
 8002626:	4641      	mov	r1, r8
 8002628:	b2c0      	uxtb	r0, r0
 800262a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    while (width--) {
 800262e:	d004      	beq.n	800263a <chscanf.constprop.0+0x2ba>
      digit = sym_to_val(c, base);
 8002630:	f7fe fbae 	bl	8000d90 <sym_to_val>
      if (digit == -1) {
 8002634:	1c42      	adds	r2, r0, #1
      digit = sym_to_val(c, base);
 8002636:	4603      	mov	r3, r0
      if (digit == -1) {
 8002638:	d1ed      	bne.n	8002616 <chscanf.constprop.0+0x296>
    if (!is_positive) {
 800263a:	9b04      	ldr	r3, [sp, #16]
 800263c:	b903      	cbnz	r3, 8002640 <chscanf.constprop.0+0x2c0>
      vall = -1 * vall;
 800263e:	4276      	negs	r6, r6
    if (buf) {
 8002640:	9b01      	ldr	r3, [sp, #4]
 8002642:	b12b      	cbz	r3, 8002650 <chscanf.constprop.0+0x2d0>
      if (is_long && is_signed) {
 8002644:	9a03      	ldr	r2, [sp, #12]
 8002646:	2a00      	cmp	r2, #0
 8002648:	f040 80a9 	bne.w	800279e <chscanf.constprop.0+0x41e>
        *((unsigned int*)buf) = vall;
 800264c:	9b01      	ldr	r3, [sp, #4]
 800264e:	601e      	str	r6, [r3, #0]
    f = *fmt++;
 8002650:	9e02      	ldr	r6, [sp, #8]
    ++n;
 8002652:	f10b 0b01 	add.w	fp, fp, #1
    f = *fmt++;
 8002656:	f816 1b01 	ldrb.w	r1, [r6], #1
 800265a:	e741      	b.n	80024e0 <chscanf.constprop.0+0x160>
 800265c:	08009bad 	.word	0x08009bad
 8002660:	0800a76d 	.word	0x0800a76d
 8002664:	46ba      	mov	sl, r7
  while (c != STM_RESET && f != 0) {
 8002666:	f04f 09fe 	mov.w	r9, #254	; 0xfe
 800266a:	e6b3      	b.n	80023d4 <chscanf.constprop.0+0x54>
      while (isspace(c)) {
 800266c:	f815 3009 	ldrb.w	r3, [r5, r9]
 8002670:	071e      	lsls	r6, r3, #28
 8002672:	d507      	bpl.n	8002684 <chscanf.constprop.0+0x304>
        c = streamGet(chp);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4638      	mov	r0, r7
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	4798      	blx	r3
      while (isspace(c)) {
 800267c:	5c2b      	ldrb	r3, [r5, r0]
 800267e:	071a      	lsls	r2, r3, #28
 8002680:	d4f8      	bmi.n	8002674 <chscanf.constprop.0+0x2f4>
 8002682:	4681      	mov	r9, r0
      if (c == '+') {
 8002684:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 8002688:	f000 8122 	beq.w	80028d0 <chscanf.constprop.0+0x550>
      } else if (c == '-') {
 800268c:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 8002690:	f000 80bc 	beq.w	800280c <chscanf.constprop.0+0x48c>
      is_signed = false;
 8002694:	2601      	movs	r6, #1
 8002696:	2300      	movs	r3, #0
 8002698:	e9cd 6304 	strd	r6, r3, [sp, #16]
    base        = 10;
 800269c:	f04f 080a 	mov.w	r8, #10
 80026a0:	e7ad      	b.n	80025fe <chscanf.constprop.0+0x27e>
      while (isspace(c)) {
 80026a2:	f815 3009 	ldrb.w	r3, [r5, r9]
 80026a6:	0719      	lsls	r1, r3, #28
 80026a8:	d507      	bpl.n	80026ba <chscanf.constprop.0+0x33a>
        c = streamGet(chp);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	4638      	mov	r0, r7
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4798      	blx	r3
      while (isspace(c)) {
 80026b2:	5c2b      	ldrb	r3, [r5, r0]
 80026b4:	071b      	lsls	r3, r3, #28
 80026b6:	d4f8      	bmi.n	80026aa <chscanf.constprop.0+0x32a>
 80026b8:	4681      	mov	r9, r0
      if (c == '+') {
 80026ba:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80026be:	f000 8110 	beq.w	80028e2 <chscanf.constprop.0+0x562>
      } else if (c == '-') {
 80026c2:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 80026c6:	f000 80af 	beq.w	8002828 <chscanf.constprop.0+0x4a8>
      is_signed = false;
 80026ca:	2001      	movs	r0, #1
 80026cc:	2300      	movs	r3, #0
 80026ce:	e9cd 0304 	strd	r0, r3, [sp, #16]
      base      = 8;
 80026d2:	f04f 0808 	mov.w	r8, #8
 80026d6:	e792      	b.n	80025fe <chscanf.constprop.0+0x27e>
      while (isspace(c)) {
 80026d8:	f815 3009 	ldrb.w	r3, [r5, r9]
 80026dc:	071a      	lsls	r2, r3, #28
 80026de:	d507      	bpl.n	80026f0 <chscanf.constprop.0+0x370>
        c = streamGet(chp);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4638      	mov	r0, r7
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	4798      	blx	r3
      while (isspace(c)) {
 80026e8:	5c2b      	ldrb	r3, [r5, r0]
 80026ea:	071b      	lsls	r3, r3, #28
 80026ec:	d4f8      	bmi.n	80026e0 <chscanf.constprop.0+0x360>
 80026ee:	4681      	mov	r9, r0
      if (c == '+') {
 80026f0:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80026f4:	d065      	beq.n	80027c2 <chscanf.constprop.0+0x442>
      } else if (c == '-') {
 80026f6:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 80026fa:	f000 80c5 	beq.w	8002888 <chscanf.constprop.0+0x508>
    is_positive = true;
 80026fe:	2301      	movs	r3, #1
 8002700:	9304      	str	r3, [sp, #16]
      if (c == '0') {
 8002702:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8002706:	d157      	bne.n	80027b8 <chscanf.constprop.0+0x438>
        if (--width == 0) {
 8002708:	1e66      	subs	r6, r4, #1
 800270a:	f000 80f5 	beq.w	80028f8 <chscanf.constprop.0+0x578>
        c = streamGet(chp);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	4638      	mov	r0, r7
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	4798      	blx	r3
        if (c == 'x' || c == 'X') {
 8002716:	f020 0320 	bic.w	r3, r0, #32
 800271a:	2b58      	cmp	r3, #88	; 0x58
        c = streamGet(chp);
 800271c:	4681      	mov	r9, r0
        if (c == 'x' || c == 'X') {
 800271e:	f000 80a6 	beq.w	800286e <chscanf.constprop.0+0x4ee>
    is_signed   = true;
 8002722:	2301      	movs	r3, #1
        if (c == 'x' || c == 'X') {
 8002724:	4634      	mov	r4, r6
    is_signed   = true;
 8002726:	9305      	str	r3, [sp, #20]
          base = 8;
 8002728:	f04f 0808 	mov.w	r8, #8
 800272c:	e767      	b.n	80025fe <chscanf.constprop.0+0x27e>
      while (isspace(c)) {
 800272e:	f815 3009 	ldrb.w	r3, [r5, r9]
 8002732:	071b      	lsls	r3, r3, #28
 8002734:	d507      	bpl.n	8002746 <chscanf.constprop.0+0x3c6>
        c = streamGet(chp);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	4638      	mov	r0, r7
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	4798      	blx	r3
      while (isspace(c)) {
 800273e:	5c2b      	ldrb	r3, [r5, r0]
 8002740:	071e      	lsls	r6, r3, #28
 8002742:	d4f8      	bmi.n	8002736 <chscanf.constprop.0+0x3b6>
 8002744:	4681      	mov	r9, r0
      if (c == '+') {
 8002746:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 800274a:	f000 80b3 	beq.w	80028b4 <chscanf.constprop.0+0x534>
      } else if (c == '-') {
 800274e:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 8002752:	d04c      	beq.n	80027ee <chscanf.constprop.0+0x46e>
    is_positive = true;
 8002754:	2301      	movs	r3, #1
    is_signed   = true;
 8002756:	e9cd 3304 	strd	r3, r3, [sp, #16]
    base        = 10;
 800275a:	f04f 080a 	mov.w	r8, #10
 800275e:	e74e      	b.n	80025fe <chscanf.constprop.0+0x27e>
      for (i = 0; i < width; ++i) {
 8002760:	2c00      	cmp	r4, #0
 8002762:	f77f aefd 	ble.w	8002560 <chscanf.constprop.0+0x1e0>
 8002766:	9b01      	ldr	r3, [sp, #4]
 8002768:	46b8      	mov	r8, r7
 800276a:	441c      	add	r4, r3
 800276c:	461e      	mov	r6, r3
 800276e:	461f      	mov	r7, r3
        c = streamGet(chp);
 8002770:	4640      	mov	r0, r8
        if (buf) {
 8002772:	b10f      	cbz	r7, 8002778 <chscanf.constprop.0+0x3f8>
          ((char*)buf)[i] = c;
 8002774:	f886 9000 	strb.w	r9, [r6]
        c = streamGet(chp);
 8002778:	f8d8 3000 	ldr.w	r3, [r8]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	4798      	blx	r3
        if (c == STM_RESET) {
 8002780:	f110 0f02 	cmn.w	r0, #2
        c = streamGet(chp);
 8002784:	4681      	mov	r9, r0
 8002786:	f106 0601 	add.w	r6, r6, #1
        if (c == STM_RESET) {
 800278a:	f43f ae29 	beq.w	80023e0 <chscanf.constprop.0+0x60>
      for (i = 0; i < width; ++i) {
 800278e:	42b4      	cmp	r4, r6
 8002790:	d1ee      	bne.n	8002770 <chscanf.constprop.0+0x3f0>
 8002792:	4647      	mov	r7, r8
 8002794:	e6e4      	b.n	8002560 <chscanf.constprop.0+0x1e0>
      f   = *fmt++;
 8002796:	7863      	ldrb	r3, [r4, #1]
      buf = NULL;
 8002798:	9001      	str	r0, [sp, #4]
      f   = *fmt++;
 800279a:	1ca6      	adds	r6, r4, #2
 800279c:	e63b      	b.n	8002416 <chscanf.constprop.0+0x96>
      if (is_long && is_signed) {
 800279e:	9a05      	ldr	r2, [sp, #20]
 80027a0:	2a00      	cmp	r2, #0
 80027a2:	f43f af53 	beq.w	800264c <chscanf.constprop.0+0x2cc>
 80027a6:	e752      	b.n	800264e <chscanf.constprop.0+0x2ce>
  while (c != STM_RESET && f != 0) {
 80027a8:	f04f 09fe 	mov.w	r9, #254	; 0xfe
  int   n = 0;
 80027ac:	f04f 0b00 	mov.w	fp, #0
 80027b0:	e610      	b.n	80023d4 <chscanf.constprop.0+0x54>
      width = -1;
 80027b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80027b6:	e642      	b.n	800243e <chscanf.constprop.0+0xbe>
    is_signed   = true;
 80027b8:	2301      	movs	r3, #1
 80027ba:	9305      	str	r3, [sp, #20]
    base        = 10;
 80027bc:	f04f 080a 	mov.w	r8, #10
 80027c0:	e71d      	b.n	80025fe <chscanf.constprop.0+0x27e>
        if (--width == 0) {
 80027c2:	3c01      	subs	r4, #1
 80027c4:	f43f ae0c 	beq.w	80023e0 <chscanf.constprop.0+0x60>
        c = streamGet(chp);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4638      	mov	r0, r7
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	4798      	blx	r3
    is_positive = true;
 80027d0:	2301      	movs	r3, #1
        c = streamGet(chp);
 80027d2:	4681      	mov	r9, r0
    is_positive = true;
 80027d4:	9304      	str	r3, [sp, #16]
 80027d6:	e794      	b.n	8002702 <chscanf.constprop.0+0x382>
        if (--width == 0) {
 80027d8:	3c01      	subs	r4, #1
 80027da:	f43f ae01 	beq.w	80023e0 <chscanf.constprop.0+0x60>
        c = streamGet(chp);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	4638      	mov	r0, r7
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	4798      	blx	r3
    is_positive = true;
 80027e6:	2301      	movs	r3, #1
        c = streamGet(chp);
 80027e8:	4681      	mov	r9, r0
    is_positive = true;
 80027ea:	9304      	str	r3, [sp, #16]
 80027ec:	e6f2      	b.n	80025d4 <chscanf.constprop.0+0x254>
        if (--width == 0) {
 80027ee:	3c01      	subs	r4, #1
 80027f0:	f43f adf6 	beq.w	80023e0 <chscanf.constprop.0+0x60>
        c           = streamGet(chp);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4638      	mov	r0, r7
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	4798      	blx	r3
    is_signed   = true;
 80027fc:	2301      	movs	r3, #1
        c           = streamGet(chp);
 80027fe:	4681      	mov	r9, r0
    is_signed   = true;
 8002800:	2000      	movs	r0, #0
 8002802:	e9cd 0304 	strd	r0, r3, [sp, #16]
    base        = 10;
 8002806:	f04f 080a 	mov.w	r8, #10
 800280a:	e6f8      	b.n	80025fe <chscanf.constprop.0+0x27e>
        if (--width == 0) {
 800280c:	3c01      	subs	r4, #1
 800280e:	f43f ade7 	beq.w	80023e0 <chscanf.constprop.0+0x60>
        c           = streamGet(chp);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	4638      	mov	r0, r7
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	4798      	blx	r3
        is_positive = false;
 800281a:	2300      	movs	r3, #0
 800281c:	9304      	str	r3, [sp, #16]
        c           = streamGet(chp);
 800281e:	4681      	mov	r9, r0
      is_signed = false;
 8002820:	9305      	str	r3, [sp, #20]
    base        = 10;
 8002822:	f04f 080a 	mov.w	r8, #10
 8002826:	e6ea      	b.n	80025fe <chscanf.constprop.0+0x27e>
        if (--width == 0) {
 8002828:	3c01      	subs	r4, #1
 800282a:	f43f add9 	beq.w	80023e0 <chscanf.constprop.0+0x60>
        c           = streamGet(chp);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	4638      	mov	r0, r7
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	4798      	blx	r3
        is_positive = false;
 8002836:	2300      	movs	r3, #0
 8002838:	9304      	str	r3, [sp, #16]
        c           = streamGet(chp);
 800283a:	4681      	mov	r9, r0
      is_signed = false;
 800283c:	9305      	str	r3, [sp, #20]
      base      = 8;
 800283e:	f04f 0808 	mov.w	r8, #8
 8002842:	e6dc      	b.n	80025fe <chscanf.constprop.0+0x27e>
      if (width != -1) {
 8002844:	1c61      	adds	r1, r4, #1
 8002846:	f43f ae8b 	beq.w	8002560 <chscanf.constprop.0+0x1e0>
        if (buf) {
 800284a:	9b01      	ldr	r3, [sp, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f47f ae83 	bne.w	8002558 <chscanf.constprop.0+0x1d8>
 8002852:	e685      	b.n	8002560 <chscanf.constprop.0+0x1e0>
          if (--width == 0) {
 8002854:	3c02      	subs	r4, #2
 8002856:	f43f adc3 	beq.w	80023e0 <chscanf.constprop.0+0x60>
          c = streamGet(chp);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	4638      	mov	r0, r7
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	4798      	blx	r3
      is_signed = false;
 8002862:	2300      	movs	r3, #0
          c = streamGet(chp);
 8002864:	4681      	mov	r9, r0
      is_signed = false;
 8002866:	9305      	str	r3, [sp, #20]
      base      = 16;
 8002868:	f04f 0810 	mov.w	r8, #16
 800286c:	e6c7      	b.n	80025fe <chscanf.constprop.0+0x27e>
          if (--width == 0) {
 800286e:	3c02      	subs	r4, #2
 8002870:	f43f adb6 	beq.w	80023e0 <chscanf.constprop.0+0x60>
          c = streamGet(chp);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	4638      	mov	r0, r7
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	4798      	blx	r3
    is_signed   = true;
 800287c:	2301      	movs	r3, #1
          c = streamGet(chp);
 800287e:	4681      	mov	r9, r0
    is_signed   = true;
 8002880:	9305      	str	r3, [sp, #20]
          base = 16;
 8002882:	f04f 0810 	mov.w	r8, #16
 8002886:	e6ba      	b.n	80025fe <chscanf.constprop.0+0x27e>
        if (--width == 0) {
 8002888:	3c01      	subs	r4, #1
 800288a:	f43f ada9 	beq.w	80023e0 <chscanf.constprop.0+0x60>
        c           = streamGet(chp);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	4638      	mov	r0, r7
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	4798      	blx	r3
        is_positive = false;
 8002896:	2300      	movs	r3, #0
        c           = streamGet(chp);
 8002898:	4681      	mov	r9, r0
        is_positive = false;
 800289a:	9304      	str	r3, [sp, #16]
 800289c:	e731      	b.n	8002702 <chscanf.constprop.0+0x382>
        if (--width == 0) {
 800289e:	3c01      	subs	r4, #1
 80028a0:	f43f ad9e 	beq.w	80023e0 <chscanf.constprop.0+0x60>
        c           = streamGet(chp);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	4638      	mov	r0, r7
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	4798      	blx	r3
        is_positive = false;
 80028ac:	2300      	movs	r3, #0
        c           = streamGet(chp);
 80028ae:	4681      	mov	r9, r0
        is_positive = false;
 80028b0:	9304      	str	r3, [sp, #16]
 80028b2:	e68f      	b.n	80025d4 <chscanf.constprop.0+0x254>
        if (--width == 0) {
 80028b4:	3c01      	subs	r4, #1
 80028b6:	f43f ad93 	beq.w	80023e0 <chscanf.constprop.0+0x60>
        c = streamGet(chp);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	4638      	mov	r0, r7
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	4798      	blx	r3
    is_positive = true;
 80028c2:	2301      	movs	r3, #1
 80028c4:	9304      	str	r3, [sp, #16]
        c = streamGet(chp);
 80028c6:	4681      	mov	r9, r0
    is_signed   = true;
 80028c8:	9305      	str	r3, [sp, #20]
    base        = 10;
 80028ca:	f04f 080a 	mov.w	r8, #10
 80028ce:	e696      	b.n	80025fe <chscanf.constprop.0+0x27e>
        if (--width == 0) {
 80028d0:	3c01      	subs	r4, #1
 80028d2:	f43f ad85 	beq.w	80023e0 <chscanf.constprop.0+0x60>
        c = streamGet(chp);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	4638      	mov	r0, r7
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	4798      	blx	r3
 80028de:	4681      	mov	r9, r0
 80028e0:	e6d8      	b.n	8002694 <chscanf.constprop.0+0x314>
        if (--width == 0) {
 80028e2:	3c01      	subs	r4, #1
 80028e4:	f43f ad7c 	beq.w	80023e0 <chscanf.constprop.0+0x60>
        c = streamGet(chp);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4638      	mov	r0, r7
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	4798      	blx	r3
 80028f0:	4681      	mov	r9, r0
 80028f2:	e6ea      	b.n	80026ca <chscanf.constprop.0+0x34a>
 80028f4:	46ba      	mov	sl, r7
 80028f6:	e56d      	b.n	80023d4 <chscanf.constprop.0+0x54>
          return ++n;
 80028f8:	f10b 0b01 	add.w	fp, fp, #1
 80028fc:	e570      	b.n	80023e0 <chscanf.constprop.0+0x60>
 80028fe:	bf00      	nop

08002900 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002900:	b40e      	push	{r1, r2, r3}
 8002902:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	ab0f      	add	r3, sp, #60	; 0x3c
 800290a:	f853 4b04 	ldr.w	r4, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800290e:	9302      	str	r3, [sp, #8]
    c = *fmt++;
 8002910:	4625      	mov	r5, r4
 8002912:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 8002916:	2900      	cmp	r1, #0
 8002918:	f000 823b 	beq.w	8002d92 <chprintf+0x492>
 800291c:	4607      	mov	r7, r0
 800291e:	4699      	mov	r9, r3
  int n = 0;
 8002920:	f04f 0800 	mov.w	r8, #0
 8002924:	e00c      	b.n	8002940 <chprintf+0x40>
      streamPut(chp, (uint8_t)c);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	4638      	mov	r0, r7
 800292a:	68db      	ldr	r3, [r3, #12]
      n++;
 800292c:	f108 0801 	add.w	r8, r8, #1
 8002930:	462c      	mov	r4, r5
      streamPut(chp, (uint8_t)c);
 8002932:	4798      	blx	r3
    c = *fmt++;
 8002934:	4625      	mov	r5, r4
 8002936:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 800293a:	2900      	cmp	r1, #0
 800293c:	f000 80be 	beq.w	8002abc <chprintf+0x1bc>
    if (c != '%') {
 8002940:	2925      	cmp	r1, #37	; 0x25
 8002942:	d1f0      	bne.n	8002926 <chprintf+0x26>
    if (*fmt == '-') {
 8002944:	7863      	ldrb	r3, [r4, #1]
 8002946:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8002948:	bf04      	itt	eq
 800294a:	1ca5      	addeq	r5, r4, #2
      left_align = true;
 800294c:	2001      	moveq	r0, #1
    if (*fmt == '+') {
 800294e:	782b      	ldrb	r3, [r5, #0]
    left_align = false;
 8002950:	bf18      	it	ne
 8002952:	2000      	movne	r0, #0
    if (*fmt == '+') {
 8002954:	2b2b      	cmp	r3, #43	; 0x2b
 8002956:	bf03      	ittte	eq
 8002958:	786b      	ldrbeq	r3, [r5, #1]
      do_sign = true;
 800295a:	f04f 0e01 	moveq.w	lr, #1
      fmt++;
 800295e:	4475      	addeq	r5, lr
    do_sign = false;
 8002960:	f04f 0e00 	movne.w	lr, #0
    if (*fmt == '0') {
 8002964:	2b30      	cmp	r3, #48	; 0x30
      filler = '0';
 8002966:	bf05      	ittet	eq
 8002968:	461e      	moveq	r6, r3
      fmt++;
 800296a:	786b      	ldrbeq	r3, [r5, #1]
    filler = ' ';
 800296c:	2620      	movne	r6, #32
      fmt++;
 800296e:	3501      	addeq	r5, #1
    if ( *fmt == '*') {
 8002970:	2b2a      	cmp	r3, #42	; 0x2a
 8002972:	f040 80ac 	bne.w	8002ace <chprintf+0x1ce>
      width = va_arg(ap, int);
 8002976:	f859 1b04 	ldr.w	r1, [r9], #4
      c = *fmt++;
 800297a:	786b      	ldrb	r3, [r5, #1]
 800297c:	1cac      	adds	r4, r5, #2
    if (c == '.') {
 800297e:	2b2e      	cmp	r3, #46	; 0x2e
 8002980:	f000 8130 	beq.w	8002be4 <chprintf+0x2e4>
    precision = 0;
 8002984:	2200      	movs	r2, #0
    if (c == 'l' || c == 'L') {
 8002986:	f003 05df 	and.w	r5, r3, #223	; 0xdf
 800298a:	2d4c      	cmp	r5, #76	; 0x4c
 800298c:	f000 80b2 	beq.w	8002af4 <chprintf+0x1f4>
      is_long = (c >= 'A') && (c <= 'Z');
 8002990:	f1a3 0c44 	sub.w	ip, r3, #68	; 0x44
    switch (c) {
 8002994:	f1bc 0f34 	cmp.w	ip, #52	; 0x34
 8002998:	f200 8198 	bhi.w	8002ccc <chprintf+0x3cc>
 800299c:	e8df f01c 	tbh	[pc, ip, lsl #1]
 80029a0:	0196015e 	.word	0x0196015e
 80029a4:	01960196 	.word	0x01960196
 80029a8:	015e0196 	.word	0x015e0196
 80029ac:	01960196 	.word	0x01960196
 80029b0:	01960196 	.word	0x01960196
 80029b4:	019a0196 	.word	0x019a0196
 80029b8:	01960035 	.word	0x01960035
 80029bc:	01960196 	.word	0x01960196
 80029c0:	00940196 	.word	0x00940196
 80029c4:	01960196 	.word	0x01960196
 80029c8:	01960035 	.word	0x01960035
 80029cc:	01960196 	.word	0x01960196
 80029d0:	01960196 	.word	0x01960196
 80029d4:	01960196 	.word	0x01960196
 80029d8:	01960196 	.word	0x01960196
 80029dc:	014d0196 	.word	0x014d0196
 80029e0:	0196015e 	.word	0x0196015e
 80029e4:	01960196 	.word	0x01960196
 80029e8:	015e0196 	.word	0x015e0196
 80029ec:	01960196 	.word	0x01960196
 80029f0:	01960196 	.word	0x01960196
 80029f4:	019a0196 	.word	0x019a0196
 80029f8:	01960035 	.word	0x01960035
 80029fc:	012d0196 	.word	0x012d0196
 8002a00:	00940196 	.word	0x00940196
 8002a04:	01960196 	.word	0x01960196
 8002a08:	0035      	.short	0x0035
      if (c == 0) {
 8002a0a:	f04f 0e10 	mov.w	lr, #16
        l = va_arg(ap, unsigned int);
 8002a0e:	f859 5b04 	ldr.w	r5, [r9], #4
  q = p + MAX_FILLER;
 8002a12:	f10d 0317 	add.w	r3, sp, #23
 8002a16:	e000      	b.n	8002a1a <chprintf+0x11a>
  } while ((ll /= radix) != 0);
 8002a18:	4663      	mov	r3, ip
    i = (int)(l % radix);
 8002a1a:	46aa      	mov	sl, r5
 8002a1c:	fbb5 f5fe 	udiv	r5, r5, lr
 8002a20:	fb0e ab15 	mls	fp, lr, r5, sl
    i += '0';
 8002a24:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    if (i > '9') {
 8002a28:	2a39      	cmp	r2, #57	; 0x39
      i += 'A' - '0' - 10;
 8002a2a:	bfc8      	it	gt
 8002a2c:	f10b 0237 	addgt.w	r2, fp, #55	; 0x37
    *--q = i;
 8002a30:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8002a32:	45f2      	cmp	sl, lr
    *--q = i;
 8002a34:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8002a38:	f803 2c01 	strb.w	r2, [r3, #-1]
  } while ((ll /= radix) != 0);
 8002a3c:	d2ec      	bcs.n	8002a18 <chprintf+0x118>
  i = (int)(p + MAX_FILLER - q);
 8002a3e:	f10d 0a0c 	add.w	sl, sp, #12
 8002a42:	f10d 0517 	add.w	r5, sp, #23
 8002a46:	eba5 050c 	sub.w	r5, r5, ip
 8002a4a:	46d6      	mov	lr, sl
 8002a4c:	f10d 0c17 	add.w	ip, sp, #23
 8002a50:	e001      	b.n	8002a56 <chprintf+0x156>
 8002a52:	f813 2b01 	ldrb.w	r2, [r3], #1
    *p++ = *q++;
 8002a56:	f80e 2b01 	strb.w	r2, [lr], #1
  while (--i);
 8002a5a:	4563      	cmp	r3, ip
 8002a5c:	d1f9      	bne.n	8002a52 <chprintf+0x152>
 8002a5e:	1b49      	subs	r1, r1, r5
 8002a60:	3d01      	subs	r5, #1
    if ((width -= i) < 0) {
 8002a62:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8002a66:	b920      	cbnz	r0, 8002a72 <chprintf+0x172>
    if (width < 0) {
 8002a68:	2900      	cmp	r1, #0
      width = -width;
 8002a6a:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8002a6e:	f300 8145 	bgt.w	8002cfc <chprintf+0x3fc>
    while (--i >= 0) {
 8002a72:	2d00      	cmp	r5, #0
 8002a74:	db0f      	blt.n	8002a96 <chprintf+0x196>
 8002a76:	1c6b      	adds	r3, r5, #1
 8002a78:	4453      	add	r3, sl
 8002a7a:	9401      	str	r4, [sp, #4]
 8002a7c:	461c      	mov	r4, r3
      streamPut(chp, (uint8_t)*s++);
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8002a84:	68d2      	ldr	r2, [r2, #12]
 8002a86:	4638      	mov	r0, r7
 8002a88:	4790      	blx	r2
    while (--i >= 0) {
 8002a8a:	45a2      	cmp	sl, r4
 8002a8c:	d1f7      	bne.n	8002a7e <chprintf+0x17e>
 8002a8e:	f108 0801 	add.w	r8, r8, #1
 8002a92:	9c01      	ldr	r4, [sp, #4]
 8002a94:	44a8      	add	r8, r5
    while (width) {
 8002a96:	f1bb 0f00 	cmp.w	fp, #0
 8002a9a:	f43f af4b 	beq.w	8002934 <chprintf+0x34>
 8002a9e:	465d      	mov	r5, fp
      streamPut(chp, (uint8_t)filler);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	4631      	mov	r1, r6
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	4638      	mov	r0, r7
 8002aa8:	4798      	blx	r3
    while (width) {
 8002aaa:	3d01      	subs	r5, #1
 8002aac:	d1f8      	bne.n	8002aa0 <chprintf+0x1a0>
    c = *fmt++;
 8002aae:	4625      	mov	r5, r4
 8002ab0:	44d8      	add	r8, fp
 8002ab2:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 8002ab6:	2900      	cmp	r1, #0
 8002ab8:	f47f af42 	bne.w	8002940 <chprintf+0x40>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8002abc:	4640      	mov	r0, r8
 8002abe:	b006      	add	sp, #24
 8002ac0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac4:	b003      	add	sp, #12
 8002ac6:	4770      	bx	lr
      if (c == 0) {
 8002ac8:	f04f 0e0a 	mov.w	lr, #10
 8002acc:	e79f      	b.n	8002a0e <chprintf+0x10e>
        c = *fmt++;
 8002ace:	1c6c      	adds	r4, r5, #1
        if (c == 0) {
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f3      	beq.n	8002abc <chprintf+0x1bc>
      width = 0;
 8002ad4:	2100      	movs	r1, #0
        if (c >= '0' && c <= '9') {
 8002ad6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	2a09      	cmp	r2, #9
          width = width * 10 + c;
 8002ade:	eb01 0581 	add.w	r5, r1, r1, lsl #2
        if (c >= '0' && c <= '9') {
 8002ae2:	f63f af4c 	bhi.w	800297e <chprintf+0x7e>
        c = *fmt++;
 8002ae6:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 8002aea:	eb02 0145 	add.w	r1, r2, r5, lsl #1
        if (c == 0) {
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f1      	bne.n	8002ad6 <chprintf+0x1d6>
 8002af2:	e7e3      	b.n	8002abc <chprintf+0x1bc>
      c = *fmt++;
 8002af4:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == 0) {
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0df      	beq.n	8002abc <chprintf+0x1bc>
    switch (c) {
 8002afc:	f1a3 0544 	sub.w	r5, r3, #68	; 0x44
 8002b00:	2d34      	cmp	r5, #52	; 0x34
 8002b02:	f200 80e3 	bhi.w	8002ccc <chprintf+0x3cc>
 8002b06:	f20f 0c08 	addw	ip, pc, #8
 8002b0a:	f85c f025 	ldr.w	pc, [ip, r5, lsl #2]
 8002b0e:	bf00      	nop
 8002b10:	08002c5d 	.word	0x08002c5d
 8002b14:	08002ccd 	.word	0x08002ccd
 8002b18:	08002ccd 	.word	0x08002ccd
 8002b1c:	08002ccd 	.word	0x08002ccd
 8002b20:	08002ccd 	.word	0x08002ccd
 8002b24:	08002c5d 	.word	0x08002c5d
 8002b28:	08002ccd 	.word	0x08002ccd
 8002b2c:	08002ccd 	.word	0x08002ccd
 8002b30:	08002ccd 	.word	0x08002ccd
 8002b34:	08002ccd 	.word	0x08002ccd
 8002b38:	08002ccd 	.word	0x08002ccd
 8002b3c:	08002cd5 	.word	0x08002cd5
 8002b40:	08002a0b 	.word	0x08002a0b
 8002b44:	08002ccd 	.word	0x08002ccd
 8002b48:	08002ccd 	.word	0x08002ccd
 8002b4c:	08002ccd 	.word	0x08002ccd
 8002b50:	08002ccd 	.word	0x08002ccd
 8002b54:	08002ac9 	.word	0x08002ac9
 8002b58:	08002ccd 	.word	0x08002ccd
 8002b5c:	08002ccd 	.word	0x08002ccd
 8002b60:	08002a0b 	.word	0x08002a0b
 8002b64:	08002ccd 	.word	0x08002ccd
 8002b68:	08002ccd 	.word	0x08002ccd
 8002b6c:	08002ccd 	.word	0x08002ccd
 8002b70:	08002ccd 	.word	0x08002ccd
 8002b74:	08002ccd 	.word	0x08002ccd
 8002b78:	08002ccd 	.word	0x08002ccd
 8002b7c:	08002ccd 	.word	0x08002ccd
 8002b80:	08002ccd 	.word	0x08002ccd
 8002b84:	08002ccd 	.word	0x08002ccd
 8002b88:	08002ccd 	.word	0x08002ccd
 8002b8c:	08002c3b 	.word	0x08002c3b
 8002b90:	08002c5d 	.word	0x08002c5d
 8002b94:	08002ccd 	.word	0x08002ccd
 8002b98:	08002ccd 	.word	0x08002ccd
 8002b9c:	08002ccd 	.word	0x08002ccd
 8002ba0:	08002ccd 	.word	0x08002ccd
 8002ba4:	08002c5d 	.word	0x08002c5d
 8002ba8:	08002ccd 	.word	0x08002ccd
 8002bac:	08002ccd 	.word	0x08002ccd
 8002bb0:	08002ccd 	.word	0x08002ccd
 8002bb4:	08002ccd 	.word	0x08002ccd
 8002bb8:	08002ccd 	.word	0x08002ccd
 8002bbc:	08002cd5 	.word	0x08002cd5
 8002bc0:	08002a0b 	.word	0x08002a0b
 8002bc4:	08002ccd 	.word	0x08002ccd
 8002bc8:	08002ccd 	.word	0x08002ccd
 8002bcc:	08002bfb 	.word	0x08002bfb
 8002bd0:	08002ccd 	.word	0x08002ccd
 8002bd4:	08002ac9 	.word	0x08002ac9
 8002bd8:	08002ccd 	.word	0x08002ccd
 8002bdc:	08002ccd 	.word	0x08002ccd
 8002be0:	08002a0b 	.word	0x08002a0b
      c = *fmt++;
 8002be4:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f43f af68 	beq.w	8002abc <chprintf+0x1bc>
      if (c == '*') {
 8002bec:	2b2a      	cmp	r3, #42	; 0x2a
 8002bee:	d174      	bne.n	8002cda <chprintf+0x3da>
        c = *fmt++;
 8002bf0:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 8002bf2:	f859 2b04 	ldr.w	r2, [r9], #4
        c = *fmt++;
 8002bf6:	3402      	adds	r4, #2
 8002bf8:	e6c5      	b.n	8002986 <chprintf+0x86>
      if ((s = va_arg(ap, char *)) == 0) {
 8002bfa:	f859 ab04 	ldr.w	sl, [r9], #4
 8002bfe:	f1ba 0f00 	cmp.w	sl, #0
 8002c02:	f000 80bc 	beq.w	8002d7e <chprintf+0x47e>
 8002c06:	f89a 3000 	ldrb.w	r3, [sl]
      if (precision == 0) {
 8002c0a:	2a00      	cmp	r2, #0
 8002c0c:	f040 80aa 	bne.w	8002d64 <chprintf+0x464>
      for (p = s; *p && (--precision >= 0); p++)
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80ab 	beq.w	8002d6c <chprintf+0x46c>
 8002c16:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8002c1a:	4655      	mov	r5, sl
 8002c1c:	e001      	b.n	8002c22 <chprintf+0x322>
 8002c1e:	42d3      	cmn	r3, r2
 8002c20:	d405      	bmi.n	8002c2e <chprintf+0x32e>
 8002c22:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002c26:	ebaa 0305 	sub.w	r3, sl, r5
 8002c2a:	2e00      	cmp	r6, #0
 8002c2c:	d1f7      	bne.n	8002c1e <chprintf+0x31e>
 8002c2e:	eba5 050a 	sub.w	r5, r5, sl
 8002c32:	1b49      	subs	r1, r1, r5
      filler = ' ';
 8002c34:	2620      	movs	r6, #32
 8002c36:	3d01      	subs	r5, #1
 8002c38:	e713      	b.n	8002a62 <chprintf+0x162>
      *p++ = va_arg(ap, int);
 8002c3a:	f859 3b04 	ldr.w	r3, [r9], #4
 8002c3e:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8002c42:	3901      	subs	r1, #1
      filler = ' ';
 8002c44:	2620      	movs	r6, #32
    if ((width -= i) < 0) {
 8002c46:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8002c4a:	b918      	cbnz	r0, 8002c54 <chprintf+0x354>
    if (width < 0) {
 8002c4c:	2900      	cmp	r1, #0
      width = -width;
 8002c4e:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8002c52:	dc72      	bgt.n	8002d3a <chprintf+0x43a>
    if (left_align == false) {
 8002c54:	2500      	movs	r5, #0
 8002c56:	f10d 0a0c 	add.w	sl, sp, #12
 8002c5a:	e70c      	b.n	8002a76 <chprintf+0x176>
        l = va_arg(ap, int);
 8002c5c:	f859 cb04 	ldr.w	ip, [r9], #4
      if (l < 0) {
 8002c60:	f1bc 0f00 	cmp.w	ip, #0
 8002c64:	db5f      	blt.n	8002d26 <chprintf+0x426>
        if (do_sign) {
 8002c66:	f1be 0f00 	cmp.w	lr, #0
 8002c6a:	f000 808e 	beq.w	8002d8a <chprintf+0x48a>
          *p++ = '+';
 8002c6e:	232b      	movs	r3, #43	; 0x2b
 8002c70:	f88d 300c 	strb.w	r3, [sp, #12]
 8002c74:	f10d 050d 	add.w	r5, sp, #13
 8002c78:	f10d 0a0c 	add.w	sl, sp, #12
  q = p + MAX_FILLER;
 8002c7c:	f105 030b 	add.w	r3, r5, #11
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	461a      	mov	r2, r3
    i = (int)(l % radix);
 8002c84:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <chprintf+0x4a4>)
 8002c86:	fba3 e30c 	umull	lr, r3, r3, ip
 8002c8a:	08db      	lsrs	r3, r3, #3
 8002c8c:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8002c90:	469e      	mov	lr, r3
 8002c92:	ebac 034b 	sub.w	r3, ip, fp, lsl #1
    i += '0';
 8002c96:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 8002c98:	46e3      	mov	fp, ip
    *--q = i;
 8002c9a:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8002c9c:	f1bb 0f09 	cmp.w	fp, #9
    *--q = i;
 8002ca0:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 8002ca4:	46f4      	mov	ip, lr
  } while ((ll /= radix) != 0);
 8002ca6:	dced      	bgt.n	8002c84 <chprintf+0x384>
 8002ca8:	469e      	mov	lr, r3
  i = (int)(p + MAX_FILLER - q);
 8002caa:	9b01      	ldr	r3, [sp, #4]
 8002cac:	eba3 0c02 	sub.w	ip, r3, r2
 8002cb0:	44ac      	add	ip, r5
 8002cb2:	4673      	mov	r3, lr
 8002cb4:	e001      	b.n	8002cba <chprintf+0x3ba>
 8002cb6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 8002cba:	f805 3b01 	strb.w	r3, [r5], #1
  while (--i);
 8002cbe:	4565      	cmp	r5, ip
 8002cc0:	d1f9      	bne.n	8002cb6 <chprintf+0x3b6>
 8002cc2:	eba5 050a 	sub.w	r5, r5, sl
 8002cc6:	1b49      	subs	r1, r1, r5
 8002cc8:	3d01      	subs	r5, #1
 8002cca:	e6ca      	b.n	8002a62 <chprintf+0x162>
      *p++ = c;
 8002ccc:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8002cd0:	3901      	subs	r1, #1
 8002cd2:	e7b8      	b.n	8002c46 <chprintf+0x346>
      if (c == 0) {
 8002cd4:	f04f 0e08 	mov.w	lr, #8
 8002cd8:	e699      	b.n	8002a0e <chprintf+0x10e>
      c = *fmt++;
 8002cda:	3401      	adds	r4, #1
    precision = 0;
 8002cdc:	2200      	movs	r2, #0
        while (c >= '0' && c <= '9') {
 8002cde:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8002ce2:	b2ed      	uxtb	r5, r5
 8002ce4:	2d09      	cmp	r5, #9
          precision = precision * 10 + c;
 8002ce6:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
        while (c >= '0' && c <= '9') {
 8002cea:	f63f ae4c 	bhi.w	8002986 <chprintf+0x86>
          c = *fmt++;
 8002cee:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 8002cf2:	eb05 024c 	add.w	r2, r5, ip, lsl #1
          if (c == 0) {
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f1      	bne.n	8002cde <chprintf+0x3de>
 8002cfa:	e6df      	b.n	8002abc <chprintf+0x1bc>
      width = -width;
 8002cfc:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8002d00:	f89a 1000 	ldrb.w	r1, [sl]
 8002d04:	292d      	cmp	r1, #45	; 0x2d
 8002d06:	d021      	beq.n	8002d4c <chprintf+0x44c>
        streamPut(chp, (uint8_t)filler);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4631      	mov	r1, r6
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	4638      	mov	r0, r7
 8002d10:	4798      	blx	r3
      } while (++width != 0);
 8002d12:	f11b 0b01 	adds.w	fp, fp, #1
 8002d16:	d1f7      	bne.n	8002d08 <chprintf+0x408>
 8002d18:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 8002d1a:	2d00      	cmp	r5, #0
 8002d1c:	eba8 0803 	sub.w	r8, r8, r3
 8002d20:	f6bf aea9 	bge.w	8002a76 <chprintf+0x176>
 8002d24:	e606      	b.n	8002934 <chprintf+0x34>
        *p++ = '-';
 8002d26:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002d28:	f1cc 0c00 	rsb	ip, ip, #0
        *p++ = '-';
 8002d2c:	f88d 300c 	strb.w	r3, [sp, #12]
 8002d30:	f10d 050d 	add.w	r5, sp, #13
 8002d34:	f10d 0a0c 	add.w	sl, sp, #12
 8002d38:	e7a0      	b.n	8002c7c <chprintf+0x37c>
      if (*s == '-' && filler == '0') {
 8002d3a:	f89d 100c 	ldrb.w	r1, [sp, #12]
      width = -width;
 8002d3e:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8002d42:	292d      	cmp	r1, #45	; 0x2d
    if (width < 0) {
 8002d44:	f10d 0a0c 	add.w	sl, sp, #12
 8002d48:	4605      	mov	r5, r0
      if (*s == '-' && filler == '0') {
 8002d4a:	d1dd      	bne.n	8002d08 <chprintf+0x408>
 8002d4c:	2e30      	cmp	r6, #48	; 0x30
 8002d4e:	d1db      	bne.n	8002d08 <chprintf+0x408>
        streamPut(chp, (uint8_t)*s++);
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	4638      	mov	r0, r7
 8002d54:	68d2      	ldr	r2, [r2, #12]
 8002d56:	4790      	blx	r2
 8002d58:	f10a 0a01 	add.w	sl, sl, #1
        n++;
 8002d5c:	f108 0801 	add.w	r8, r8, #1
        i--;
 8002d60:	3d01      	subs	r5, #1
 8002d62:	e7d1      	b.n	8002d08 <chprintf+0x408>
      for (p = s; *p && (--precision >= 0); p++)
 8002d64:	b113      	cbz	r3, 8002d6c <chprintf+0x46c>
 8002d66:	3a01      	subs	r2, #1
 8002d68:	f57f af57 	bpl.w	8002c1a <chprintf+0x31a>
    if ((width -= i) < 0) {
 8002d6c:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8002d70:	b918      	cbnz	r0, 8002d7a <chprintf+0x47a>
    if (width < 0) {
 8002d72:	2900      	cmp	r1, #0
      width = -width;
 8002d74:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8002d78:	dc0d      	bgt.n	8002d96 <chprintf+0x496>
    if (left_align == false) {
 8002d7a:	2620      	movs	r6, #32
 8002d7c:	e68b      	b.n	8002a96 <chprintf+0x196>
        s = "(null)";
 8002d7e:	f8df a028 	ldr.w	sl, [pc, #40]	; 8002da8 <chprintf+0x4a8>
      if (precision == 0) {
 8002d82:	2a00      	cmp	r2, #0
 8002d84:	f43f af47 	beq.w	8002c16 <chprintf+0x316>
 8002d88:	e7ed      	b.n	8002d66 <chprintf+0x466>
    p = tmpbuf;
 8002d8a:	f10d 0a0c 	add.w	sl, sp, #12
 8002d8e:	4655      	mov	r5, sl
 8002d90:	e774      	b.n	8002c7c <chprintf+0x37c>
  int n = 0;
 8002d92:	4688      	mov	r8, r1
  return formatted_bytes;
 8002d94:	e692      	b.n	8002abc <chprintf+0x1bc>
      width = -width;
 8002d96:	f8cd b004 	str.w	fp, [sp, #4]
    if (width < 0) {
 8002d9a:	2620      	movs	r6, #32
 8002d9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002da0:	e7ae      	b.n	8002d00 <chprintf+0x400>
 8002da2:	bf00      	nop
 8002da4:	cccccccd 	.word	0xcccccccd
 8002da8:	08009bb4 	.word	0x08009bb4
 8002dac:	00000000 	.word	0x00000000

08002db0 <debug_print_state>:
#include "SPI.h"

extern BaseSequentialStream *const ost;
extern BaseSequentialStream *const dbg;

void debug_print_state(char * text, uint8_t val){
 8002db0:	b508      	push	{r3, lr}
 8002db2:	4602      	mov	r2, r0
 8002db4:	2925      	cmp	r1, #37	; 0x25
 8002db6:	f200 81f1 	bhi.w	800319c <debug_print_state+0x3ec>
 8002dba:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002dbe:	01e5      	.short	0x01e5
 8002dc0:	018401db 	.word	0x018401db
 8002dc4:	0170017a 	.word	0x0170017a
 8002dc8:	015c0166 	.word	0x015c0166
 8002dcc:	01480152 	.word	0x01480152
 8002dd0:	0134013e 	.word	0x0134013e
 8002dd4:	0120012a 	.word	0x0120012a
 8002dd8:	010c0116 	.word	0x010c0116
 8002ddc:	00f80102 	.word	0x00f80102
 8002de0:	00e400ee 	.word	0x00e400ee
 8002de4:	00d000da 	.word	0x00d000da
 8002de8:	00bc00c6 	.word	0x00bc00c6
 8002dec:	00a800b2 	.word	0x00a800b2
 8002df0:	0094009e 	.word	0x0094009e
 8002df4:	0080008a 	.word	0x0080008a
 8002df8:	006c0076 	.word	0x006c0076
 8002dfc:	00580062 	.word	0x00580062
 8002e00:	0044004e 	.word	0x0044004e
 8002e04:	0030003a 	.word	0x0030003a
 8002e08:	0026      	.short	0x0026
    case CONFIG_Cn:
      chprintf(dbg, "%s", text);
      chprintf(dbg, "CONFIG_Cn\r\n");
      break;
    case CONFIG_CnCs:
      chprintf(dbg, "%s", text);
 8002e0a:	49b4      	ldr	r1, [pc, #720]	; (80030dc <debug_print_state+0x32c>)
 8002e0c:	48b4      	ldr	r0, [pc, #720]	; (80030e0 <debug_print_state+0x330>)
 8002e0e:	f7ff fd77 	bl	8002900 <chprintf>
      chprintf(dbg, "%s", text);
      chprintf(dbg, "UNHANDLED\r\n");
      break;
    }
  }
}
 8002e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "CONFIG_CnCs\r\n");
 8002e16:	49b3      	ldr	r1, [pc, #716]	; (80030e4 <debug_print_state+0x334>)
 8002e18:	48b1      	ldr	r0, [pc, #708]	; (80030e0 <debug_print_state+0x330>)
 8002e1a:	f7ff bd71 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002e1e:	49af      	ldr	r1, [pc, #700]	; (80030dc <debug_print_state+0x32c>)
 8002e20:	48af      	ldr	r0, [pc, #700]	; (80030e0 <debug_print_state+0x330>)
 8002e22:	f7ff fd6d 	bl	8002900 <chprintf>
}
 8002e26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "CONFIG_Cn\r\n");
 8002e2a:	49af      	ldr	r1, [pc, #700]	; (80030e8 <debug_print_state+0x338>)
 8002e2c:	48ac      	ldr	r0, [pc, #688]	; (80030e0 <debug_print_state+0x330>)
 8002e2e:	f7ff bd67 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002e32:	49aa      	ldr	r1, [pc, #680]	; (80030dc <debug_print_state+0x32c>)
 8002e34:	48aa      	ldr	r0, [pc, #680]	; (80030e0 <debug_print_state+0x330>)
 8002e36:	f7ff fd63 	bl	8002900 <chprintf>
}
 8002e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "CONFIG_C\r\n");
 8002e3e:	49ab      	ldr	r1, [pc, #684]	; (80030ec <debug_print_state+0x33c>)
 8002e40:	48a7      	ldr	r0, [pc, #668]	; (80030e0 <debug_print_state+0x330>)
 8002e42:	f7ff bd5d 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002e46:	49a5      	ldr	r1, [pc, #660]	; (80030dc <debug_print_state+0x32c>)
 8002e48:	48a5      	ldr	r0, [pc, #660]	; (80030e0 <debug_print_state+0x330>)
 8002e4a:	f7ff fd59 	bl	8002900 <chprintf>
}
 8002e4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BULK_ZWnBMBCs\r\n");
 8002e52:	49a7      	ldr	r1, [pc, #668]	; (80030f0 <debug_print_state+0x340>)
 8002e54:	48a2      	ldr	r0, [pc, #648]	; (80030e0 <debug_print_state+0x330>)
 8002e56:	f7ff bd53 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002e5a:	49a0      	ldr	r1, [pc, #640]	; (80030dc <debug_print_state+0x32c>)
 8002e5c:	48a0      	ldr	r0, [pc, #640]	; (80030e0 <debug_print_state+0x330>)
 8002e5e:	f7ff fd4f 	bl	8002900 <chprintf>
}
 8002e62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BULK_ZWnBMB\r\n");
 8002e66:	49a3      	ldr	r1, [pc, #652]	; (80030f4 <debug_print_state+0x344>)
 8002e68:	489d      	ldr	r0, [pc, #628]	; (80030e0 <debug_print_state+0x330>)
 8002e6a:	f7ff bd49 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002e6e:	499b      	ldr	r1, [pc, #620]	; (80030dc <debug_print_state+0x32c>)
 8002e70:	489b      	ldr	r0, [pc, #620]	; (80030e0 <debug_print_state+0x330>)
 8002e72:	f7ff fd45 	bl	8002900 <chprintf>
}
 8002e76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BULK_ZWnBM\r\n");
 8002e7a:	499f      	ldr	r1, [pc, #636]	; (80030f8 <debug_print_state+0x348>)
 8002e7c:	4898      	ldr	r0, [pc, #608]	; (80030e0 <debug_print_state+0x330>)
 8002e7e:	f7ff bd3f 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002e82:	4996      	ldr	r1, [pc, #600]	; (80030dc <debug_print_state+0x32c>)
 8002e84:	4896      	ldr	r0, [pc, #600]	; (80030e0 <debug_print_state+0x330>)
 8002e86:	f7ff fd3b 	bl	8002900 <chprintf>
}
 8002e8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BULK_ZWnB\r\n");
 8002e8e:	499b      	ldr	r1, [pc, #620]	; (80030fc <debug_print_state+0x34c>)
 8002e90:	4893      	ldr	r0, [pc, #588]	; (80030e0 <debug_print_state+0x330>)
 8002e92:	f7ff bd35 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002e96:	4991      	ldr	r1, [pc, #580]	; (80030dc <debug_print_state+0x32c>)
 8002e98:	4891      	ldr	r0, [pc, #580]	; (80030e0 <debug_print_state+0x330>)
 8002e9a:	f7ff fd31 	bl	8002900 <chprintf>
}
 8002e9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BULK_ZWn\r\n");
 8002ea2:	4997      	ldr	r1, [pc, #604]	; (8003100 <debug_print_state+0x350>)
 8002ea4:	488e      	ldr	r0, [pc, #568]	; (80030e0 <debug_print_state+0x330>)
 8002ea6:	f7ff bd2b 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002eaa:	498c      	ldr	r1, [pc, #560]	; (80030dc <debug_print_state+0x32c>)
 8002eac:	488c      	ldr	r0, [pc, #560]	; (80030e0 <debug_print_state+0x330>)
 8002eae:	f7ff fd27 	bl	8002900 <chprintf>
}
 8002eb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BULK_ZRnBMCs\r\n");
 8002eb6:	4993      	ldr	r1, [pc, #588]	; (8003104 <debug_print_state+0x354>)
 8002eb8:	4889      	ldr	r0, [pc, #548]	; (80030e0 <debug_print_state+0x330>)
 8002eba:	f7ff bd21 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002ebe:	4987      	ldr	r1, [pc, #540]	; (80030dc <debug_print_state+0x32c>)
 8002ec0:	4887      	ldr	r0, [pc, #540]	; (80030e0 <debug_print_state+0x330>)
 8002ec2:	f7ff fd1d 	bl	8002900 <chprintf>
}
 8002ec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BULK_ZRnBM\r\n");
 8002eca:	498f      	ldr	r1, [pc, #572]	; (8003108 <debug_print_state+0x358>)
 8002ecc:	4884      	ldr	r0, [pc, #528]	; (80030e0 <debug_print_state+0x330>)
 8002ece:	f7ff bd17 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002ed2:	4982      	ldr	r1, [pc, #520]	; (80030dc <debug_print_state+0x32c>)
 8002ed4:	4882      	ldr	r0, [pc, #520]	; (80030e0 <debug_print_state+0x330>)
 8002ed6:	f7ff fd13 	bl	8002900 <chprintf>
}
 8002eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BULK_ZRnB\r\n");
 8002ede:	498b      	ldr	r1, [pc, #556]	; (800310c <debug_print_state+0x35c>)
 8002ee0:	487f      	ldr	r0, [pc, #508]	; (80030e0 <debug_print_state+0x330>)
 8002ee2:	f7ff bd0d 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002ee6:	497d      	ldr	r1, [pc, #500]	; (80030dc <debug_print_state+0x32c>)
 8002ee8:	487d      	ldr	r0, [pc, #500]	; (80030e0 <debug_print_state+0x330>)
 8002eea:	f7ff fd09 	bl	8002900 <chprintf>
}
 8002eee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BULK_ZRn\r\n");
 8002ef2:	4987      	ldr	r1, [pc, #540]	; (8003110 <debug_print_state+0x360>)
 8002ef4:	487a      	ldr	r0, [pc, #488]	; (80030e0 <debug_print_state+0x330>)
 8002ef6:	f7ff bd03 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002efa:	4978      	ldr	r1, [pc, #480]	; (80030dc <debug_print_state+0x32c>)
 8002efc:	4878      	ldr	r0, [pc, #480]	; (80030e0 <debug_print_state+0x330>)
 8002efe:	f7ff fcff 	bl	8002900 <chprintf>
}
 8002f02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BULK\r\n");
 8002f06:	4983      	ldr	r1, [pc, #524]	; (8003114 <debug_print_state+0x364>)
 8002f08:	4875      	ldr	r0, [pc, #468]	; (80030e0 <debug_print_state+0x330>)
 8002f0a:	f7ff bcf9 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002f0e:	4973      	ldr	r1, [pc, #460]	; (80030dc <debug_print_state+0x32c>)
 8002f10:	4873      	ldr	r0, [pc, #460]	; (80030e0 <debug_print_state+0x330>)
 8002f12:	f7ff fcf5 	bl	8002900 <chprintf>
}
 8002f16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "READ_nMLCs\r\n");
 8002f1a:	497f      	ldr	r1, [pc, #508]	; (8003118 <debug_print_state+0x368>)
 8002f1c:	4870      	ldr	r0, [pc, #448]	; (80030e0 <debug_print_state+0x330>)
 8002f1e:	f7ff bcef 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002f22:	496e      	ldr	r1, [pc, #440]	; (80030dc <debug_print_state+0x32c>)
 8002f24:	486e      	ldr	r0, [pc, #440]	; (80030e0 <debug_print_state+0x330>)
 8002f26:	f7ff fceb 	bl	8002900 <chprintf>
}
 8002f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "READ_nML\r\n");
 8002f2e:	497b      	ldr	r1, [pc, #492]	; (800311c <debug_print_state+0x36c>)
 8002f30:	486b      	ldr	r0, [pc, #428]	; (80030e0 <debug_print_state+0x330>)
 8002f32:	f7ff bce5 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002f36:	4969      	ldr	r1, [pc, #420]	; (80030dc <debug_print_state+0x32c>)
 8002f38:	4869      	ldr	r0, [pc, #420]	; (80030e0 <debug_print_state+0x330>)
 8002f3a:	f7ff fce1 	bl	8002900 <chprintf>
}
 8002f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "READ_nM\r\n");
 8002f42:	4977      	ldr	r1, [pc, #476]	; (8003120 <debug_print_state+0x370>)
 8002f44:	4866      	ldr	r0, [pc, #408]	; (80030e0 <debug_print_state+0x330>)
 8002f46:	f7ff bcdb 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002f4a:	4964      	ldr	r1, [pc, #400]	; (80030dc <debug_print_state+0x32c>)
 8002f4c:	4864      	ldr	r0, [pc, #400]	; (80030e0 <debug_print_state+0x330>)
 8002f4e:	f7ff fcd7 	bl	8002900 <chprintf>
}
 8002f52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "READ\r\n");
 8002f56:	4973      	ldr	r1, [pc, #460]	; (8003124 <debug_print_state+0x374>)
 8002f58:	4861      	ldr	r0, [pc, #388]	; (80030e0 <debug_print_state+0x330>)
 8002f5a:	f7ff bcd1 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002f5e:	495f      	ldr	r1, [pc, #380]	; (80030dc <debug_print_state+0x32c>)
 8002f60:	485f      	ldr	r0, [pc, #380]	; (80030e0 <debug_print_state+0x330>)
 8002f62:	f7ff fccd 	bl	8002900 <chprintf>
}
 8002f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "WRITE_nMLCs\r\n");
 8002f6a:	496f      	ldr	r1, [pc, #444]	; (8003128 <debug_print_state+0x378>)
 8002f6c:	485c      	ldr	r0, [pc, #368]	; (80030e0 <debug_print_state+0x330>)
 8002f6e:	f7ff bcc7 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002f72:	495a      	ldr	r1, [pc, #360]	; (80030dc <debug_print_state+0x32c>)
 8002f74:	485a      	ldr	r0, [pc, #360]	; (80030e0 <debug_print_state+0x330>)
 8002f76:	f7ff fcc3 	bl	8002900 <chprintf>
}
 8002f7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "WRITE_nMLB\r\n");
 8002f7e:	496b      	ldr	r1, [pc, #428]	; (800312c <debug_print_state+0x37c>)
 8002f80:	4857      	ldr	r0, [pc, #348]	; (80030e0 <debug_print_state+0x330>)
 8002f82:	f7ff bcbd 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002f86:	4955      	ldr	r1, [pc, #340]	; (80030dc <debug_print_state+0x32c>)
 8002f88:	4855      	ldr	r0, [pc, #340]	; (80030e0 <debug_print_state+0x330>)
 8002f8a:	f7ff fcb9 	bl	8002900 <chprintf>
}
 8002f8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "WRITE_nML\r\n");
 8002f92:	4967      	ldr	r1, [pc, #412]	; (8003130 <debug_print_state+0x380>)
 8002f94:	4852      	ldr	r0, [pc, #328]	; (80030e0 <debug_print_state+0x330>)
 8002f96:	f7ff bcb3 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002f9a:	4950      	ldr	r1, [pc, #320]	; (80030dc <debug_print_state+0x32c>)
 8002f9c:	4850      	ldr	r0, [pc, #320]	; (80030e0 <debug_print_state+0x330>)
 8002f9e:	f7ff fcaf 	bl	8002900 <chprintf>
}
 8002fa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "WRITE_nM\r\n");
 8002fa6:	4963      	ldr	r1, [pc, #396]	; (8003134 <debug_print_state+0x384>)
 8002fa8:	484d      	ldr	r0, [pc, #308]	; (80030e0 <debug_print_state+0x330>)
 8002faa:	f7ff bca9 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002fae:	494b      	ldr	r1, [pc, #300]	; (80030dc <debug_print_state+0x32c>)
 8002fb0:	484b      	ldr	r0, [pc, #300]	; (80030e0 <debug_print_state+0x330>)
 8002fb2:	f7ff fca5 	bl	8002900 <chprintf>
}
 8002fb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "WRITE\r\n");
 8002fba:	495f      	ldr	r1, [pc, #380]	; (8003138 <debug_print_state+0x388>)
 8002fbc:	4848      	ldr	r0, [pc, #288]	; (80030e0 <debug_print_state+0x330>)
 8002fbe:	f7ff bc9f 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002fc2:	4946      	ldr	r1, [pc, #280]	; (80030dc <debug_print_state+0x32c>)
 8002fc4:	4846      	ldr	r0, [pc, #280]	; (80030e0 <debug_print_state+0x330>)
 8002fc6:	f7ff fc9b 	bl	8002900 <chprintf>
}
 8002fca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "SERIAL_NS\r\n");
 8002fce:	495b      	ldr	r1, [pc, #364]	; (800313c <debug_print_state+0x38c>)
 8002fd0:	4843      	ldr	r0, [pc, #268]	; (80030e0 <debug_print_state+0x330>)
 8002fd2:	f7ff bc95 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002fd6:	4941      	ldr	r1, [pc, #260]	; (80030dc <debug_print_state+0x32c>)
 8002fd8:	4841      	ldr	r0, [pc, #260]	; (80030e0 <debug_print_state+0x330>)
 8002fda:	f7ff fc91 	bl	8002900 <chprintf>
}
 8002fde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "SERIAL\r\n");
 8002fe2:	4957      	ldr	r1, [pc, #348]	; (8003140 <debug_print_state+0x390>)
 8002fe4:	483e      	ldr	r0, [pc, #248]	; (80030e0 <debug_print_state+0x330>)
 8002fe6:	f7ff bc8b 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002fea:	493c      	ldr	r1, [pc, #240]	; (80030dc <debug_print_state+0x32c>)
 8002fec:	483c      	ldr	r0, [pc, #240]	; (80030e0 <debug_print_state+0x330>)
 8002fee:	f7ff fc87 	bl	8002900 <chprintf>
}
 8002ff2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BAUD_Sn\r\n");
 8002ff6:	4953      	ldr	r1, [pc, #332]	; (8003144 <debug_print_state+0x394>)
 8002ff8:	4839      	ldr	r0, [pc, #228]	; (80030e0 <debug_print_state+0x330>)
 8002ffa:	f7ff bc81 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8002ffe:	4937      	ldr	r1, [pc, #220]	; (80030dc <debug_print_state+0x32c>)
 8003000:	4837      	ldr	r0, [pc, #220]	; (80030e0 <debug_print_state+0x330>)
 8003002:	f7ff fc7d 	bl	8002900 <chprintf>
}
 8003006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BAUD\r\n");
 800300a:	494f      	ldr	r1, [pc, #316]	; (8003148 <debug_print_state+0x398>)
 800300c:	4834      	ldr	r0, [pc, #208]	; (80030e0 <debug_print_state+0x330>)
 800300e:	f7ff bc77 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8003012:	4932      	ldr	r1, [pc, #200]	; (80030dc <debug_print_state+0x32c>)
 8003014:	4832      	ldr	r0, [pc, #200]	; (80030e0 <debug_print_state+0x330>)
 8003016:	f7ff fc73 	bl	8002900 <chprintf>
}
 800301a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BANK_BEn\r\n");
 800301e:	494b      	ldr	r1, [pc, #300]	; (800314c <debug_print_state+0x39c>)
 8003020:	482f      	ldr	r0, [pc, #188]	; (80030e0 <debug_print_state+0x330>)
 8003022:	f7ff bc6d 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8003026:	492d      	ldr	r1, [pc, #180]	; (80030dc <debug_print_state+0x32c>)
 8003028:	482d      	ldr	r0, [pc, #180]	; (80030e0 <debug_print_state+0x330>)
 800302a:	f7ff fc69 	bl	8002900 <chprintf>
}
 800302e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BANK_BSn\r\n");
 8003032:	4947      	ldr	r1, [pc, #284]	; (8003150 <debug_print_state+0x3a0>)
 8003034:	482a      	ldr	r0, [pc, #168]	; (80030e0 <debug_print_state+0x330>)
 8003036:	f7ff bc63 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 800303a:	4928      	ldr	r1, [pc, #160]	; (80030dc <debug_print_state+0x32c>)
 800303c:	4828      	ldr	r0, [pc, #160]	; (80030e0 <debug_print_state+0x330>)
 800303e:	f7ff fc5f 	bl	8002900 <chprintf>
}
 8003042:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BANK_BRn\r\n");
 8003046:	4943      	ldr	r1, [pc, #268]	; (8003154 <debug_print_state+0x3a4>)
 8003048:	4825      	ldr	r0, [pc, #148]	; (80030e0 <debug_print_state+0x330>)
 800304a:	f7ff bc59 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 800304e:	4923      	ldr	r1, [pc, #140]	; (80030dc <debug_print_state+0x32c>)
 8003050:	4823      	ldr	r0, [pc, #140]	; (80030e0 <debug_print_state+0x330>)
 8003052:	f7ff fc55 	bl	8002900 <chprintf>
}
 8003056:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BANK_BEE\r\n");
 800305a:	493f      	ldr	r1, [pc, #252]	; (8003158 <debug_print_state+0x3a8>)
 800305c:	4820      	ldr	r0, [pc, #128]	; (80030e0 <debug_print_state+0x330>)
 800305e:	f7ff bc4f 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8003062:	491e      	ldr	r1, [pc, #120]	; (80030dc <debug_print_state+0x32c>)
 8003064:	481e      	ldr	r0, [pc, #120]	; (80030e0 <debug_print_state+0x330>)
 8003066:	f7ff fc4b 	bl	8002900 <chprintf>
}
 800306a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BANK_BE");
 800306e:	493b      	ldr	r1, [pc, #236]	; (800315c <debug_print_state+0x3ac>)
 8003070:	481b      	ldr	r0, [pc, #108]	; (80030e0 <debug_print_state+0x330>)
 8003072:	f7ff bc45 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8003076:	4919      	ldr	r1, [pc, #100]	; (80030dc <debug_print_state+0x32c>)
 8003078:	4819      	ldr	r0, [pc, #100]	; (80030e0 <debug_print_state+0x330>)
 800307a:	f7ff fc41 	bl	8002900 <chprintf>
}
 800307e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BANK_BS\r\n");
 8003082:	4937      	ldr	r1, [pc, #220]	; (8003160 <debug_print_state+0x3b0>)
 8003084:	4816      	ldr	r0, [pc, #88]	; (80030e0 <debug_print_state+0x330>)
 8003086:	f7ff bc3b 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 800308a:	4914      	ldr	r1, [pc, #80]	; (80030dc <debug_print_state+0x32c>)
 800308c:	4814      	ldr	r0, [pc, #80]	; (80030e0 <debug_print_state+0x330>)
 800308e:	f7ff fc37 	bl	8002900 <chprintf>
}
 8003092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BANK_BES\r\n");
 8003096:	4933      	ldr	r1, [pc, #204]	; (8003164 <debug_print_state+0x3b4>)
 8003098:	4811      	ldr	r0, [pc, #68]	; (80030e0 <debug_print_state+0x330>)
 800309a:	f7ff bc31 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 800309e:	490f      	ldr	r1, [pc, #60]	; (80030dc <debug_print_state+0x32c>)
 80030a0:	480f      	ldr	r0, [pc, #60]	; (80030e0 <debug_print_state+0x330>)
 80030a2:	f7ff fc2d 	bl	8002900 <chprintf>
}
 80030a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BANK_BRR\r\n");
 80030aa:	492f      	ldr	r1, [pc, #188]	; (8003168 <debug_print_state+0x3b8>)
 80030ac:	480c      	ldr	r0, [pc, #48]	; (80030e0 <debug_print_state+0x330>)
 80030ae:	f7ff bc27 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 80030b2:	490a      	ldr	r1, [pc, #40]	; (80030dc <debug_print_state+0x32c>)
 80030b4:	480a      	ldr	r0, [pc, #40]	; (80030e0 <debug_print_state+0x330>)
 80030b6:	f7ff fc23 	bl	8002900 <chprintf>
}
 80030ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BANK_BR\r\n");
 80030be:	492b      	ldr	r1, [pc, #172]	; (800316c <debug_print_state+0x3bc>)
 80030c0:	4807      	ldr	r0, [pc, #28]	; (80030e0 <debug_print_state+0x330>)
 80030c2:	f7ff bc1d 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 80030c6:	4905      	ldr	r1, [pc, #20]	; (80030dc <debug_print_state+0x32c>)
 80030c8:	4805      	ldr	r0, [pc, #20]	; (80030e0 <debug_print_state+0x330>)
 80030ca:	f7ff fc19 	bl	8002900 <chprintf>
}
 80030ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "BANK\r\n");
 80030d2:	4927      	ldr	r1, [pc, #156]	; (8003170 <debug_print_state+0x3c0>)
 80030d4:	4802      	ldr	r0, [pc, #8]	; (80030e0 <debug_print_state+0x330>)
 80030d6:	f7ff bc13 	b.w	8002900 <chprintf>
 80030da:	bf00      	nop
 80030dc:	08009bbc 	.word	0x08009bbc
 80030e0:	20000ef0 	.word	0x20000ef0
 80030e4:	08009d80 	.word	0x08009d80
 80030e8:	08009d74 	.word	0x08009d74
 80030ec:	08009d68 	.word	0x08009d68
 80030f0:	08009d58 	.word	0x08009d58
 80030f4:	08009d48 	.word	0x08009d48
 80030f8:	08009d38 	.word	0x08009d38
 80030fc:	08009d2c 	.word	0x08009d2c
 8003100:	08009d20 	.word	0x08009d20
 8003104:	08009d10 	.word	0x08009d10
 8003108:	08009d00 	.word	0x08009d00
 800310c:	08009cf4 	.word	0x08009cf4
 8003110:	08009ce8 	.word	0x08009ce8
 8003114:	08009ce0 	.word	0x08009ce0
 8003118:	08009cd0 	.word	0x08009cd0
 800311c:	08009cc4 	.word	0x08009cc4
 8003120:	08009cb8 	.word	0x08009cb8
 8003124:	08009cb0 	.word	0x08009cb0
 8003128:	08009ca0 	.word	0x08009ca0
 800312c:	08009c90 	.word	0x08009c90
 8003130:	08009c84 	.word	0x08009c84
 8003134:	08009c78 	.word	0x08009c78
 8003138:	08009c70 	.word	0x08009c70
 800313c:	08009c64 	.word	0x08009c64
 8003140:	08009c58 	.word	0x08009c58
 8003144:	08009c4c 	.word	0x08009c4c
 8003148:	08009c44 	.word	0x08009c44
 800314c:	08009c38 	.word	0x08009c38
 8003150:	08009c2c 	.word	0x08009c2c
 8003154:	08009c20 	.word	0x08009c20
 8003158:	08009c14 	.word	0x08009c14
 800315c:	08009c0c 	.word	0x08009c0c
 8003160:	08009c00 	.word	0x08009c00
 8003164:	08009bf4 	.word	0x08009bf4
 8003168:	08009be8 	.word	0x08009be8
 800316c:	08009bdc 	.word	0x08009bdc
 8003170:	08009bd4 	.word	0x08009bd4
      chprintf(dbg, "%s", text);
 8003174:	490e      	ldr	r1, [pc, #56]	; (80031b0 <debug_print_state+0x400>)
 8003176:	480f      	ldr	r0, [pc, #60]	; (80031b4 <debug_print_state+0x404>)
 8003178:	f7ff fbc2 	bl	8002900 <chprintf>
}
 800317c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "VERSION\r\n");
 8003180:	490d      	ldr	r1, [pc, #52]	; (80031b8 <debug_print_state+0x408>)
 8003182:	480c      	ldr	r0, [pc, #48]	; (80031b4 <debug_print_state+0x404>)
 8003184:	f7ff bbbc 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 8003188:	4909      	ldr	r1, [pc, #36]	; (80031b0 <debug_print_state+0x400>)
 800318a:	480a      	ldr	r0, [pc, #40]	; (80031b4 <debug_print_state+0x404>)
 800318c:	f7ff fbb8 	bl	8002900 <chprintf>
}
 8003190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "IDLE\r\n");
 8003194:	4909      	ldr	r1, [pc, #36]	; (80031bc <debug_print_state+0x40c>)
 8003196:	4807      	ldr	r0, [pc, #28]	; (80031b4 <debug_print_state+0x404>)
 8003198:	f7ff bbb2 	b.w	8002900 <chprintf>
      chprintf(dbg, "%s", text);
 800319c:	4904      	ldr	r1, [pc, #16]	; (80031b0 <debug_print_state+0x400>)
 800319e:	4805      	ldr	r0, [pc, #20]	; (80031b4 <debug_print_state+0x404>)
 80031a0:	f7ff fbae 	bl	8002900 <chprintf>
}
 80031a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      chprintf(dbg, "UNHANDLED\r\n");
 80031a8:	4905      	ldr	r1, [pc, #20]	; (80031c0 <debug_print_state+0x410>)
 80031aa:	4802      	ldr	r0, [pc, #8]	; (80031b4 <debug_print_state+0x404>)
 80031ac:	f7ff bba8 	b.w	8002900 <chprintf>
 80031b0:	08009bbc 	.word	0x08009bbc
 80031b4:	20000ef0 	.word	0x20000ef0
 80031b8:	08009bc8 	.word	0x08009bc8
 80031bc:	08009bc0 	.word	0x08009bc0
 80031c0:	08009d90 	.word	0x08009d90
	...

080031d0 <CharacterInputThread>:
  }
}

//extern uint8_t buffer[256];
static THD_WORKING_AREA(waCharacterInputThread, 512);
static THD_FUNCTION(CharacterInputThread, arg) {
 80031d0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  uint8_t c;
  uint8_t tbuf[256];
  uint8_t serial[]={10,1,2,3,4,5,6,7,8};
 80031d4:	4ba8      	ldr	r3, [pc, #672]	; (8003478 <CharacterInputThread+0x2a8>)
 80031d6:	4ea9      	ldr	r6, [pc, #676]	; (800347c <CharacterInputThread+0x2ac>)
 80031d8:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 80034a0 <CharacterInputThread+0x2d0>
  WE_ACTIVE;
 80031dc:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 80034a4 <CharacterInputThread+0x2d4>
 80031e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
static THD_FUNCTION(CharacterInputThread, arg) {
 80031e4:	b0d5      	sub	sp, #340	; 0x154
  uint8_t serial[]={10,1,2,3,4,5,6,7,8};
 80031e6:	ab11      	add	r3, sp, #68	; 0x44
 80031e8:	c303      	stmia	r3!, {r0, r1}
static THD_FUNCTION(CharacterInputThread, arg) {
 80031ea:	2700      	movs	r7, #0
 80031ec:	970a      	str	r7, [sp, #40]	; 0x28
  uint8_t serial[]={10,1,2,3,4,5,6,7,8};
 80031ee:	701a      	strb	r2, [r3, #0]
#ifdef OSTRICHUSB
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
#else
    if (1){
#endif
      c=streamGet(&OSTRICHPORT);
 80031f0:	46b3      	mov	fp, r6
 80031f2:	46a0      	mov	r8, r4
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80031f4:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d166      	bne.n	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8003200:	6833      	ldr	r3, [r6, #0]
 8003202:	4658      	mov	r0, fp
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	4798      	blx	r3
 8003208:	2320      	movs	r3, #32
 800320a:	b2c4      	uxtb	r4, r0
 800320c:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 8003210:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003214:	2300      	movs	r3, #0
 8003216:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003218:	f383 8811 	msr	BASEPRI, r3
      start = chVTGetSystemTime();

      if (start > end){
 800321c:	4590      	cmp	r8, r2
 800321e:	f0c0 8189 	bcc.w	8003534 <CharacterInputThread+0x364>
 8003222:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8003226:	f108 0808 	add.w	r8, r8, #8
        state = IDLE;
      }
      end = chTimeAddX(start, TIME_MS2I(500));
      //sdAsynchronousRead(&OSTRICHPORT, (uint8_t *)&c, 1);
      if (state == IDLE){
 800322a:	2f00      	cmp	r7, #0
 800322c:	f040 81ba 	bne.w	80035a4 <CharacterInputThread+0x3d4>
        debug_print_state("------------ State0: ------------ ", state);
 8003230:	4f93      	ldr	r7, [pc, #588]	; (8003480 <CharacterInputThread+0x2b0>)
 8003232:	2500      	movs	r5, #0
 8003234:	2100      	movs	r1, #0
 8003236:	4638      	mov	r0, r7
 8003238:	f7ff fdba 	bl	8002db0 <debug_print_state>
      }

      switch (state){
      case IDLE:
        cs = c;
 800323c:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 8003240:	f889 4000 	strb.w	r4, [r9]
        //end = chTimeAddX(chVTGetSystemTimeX(), TIME_MS2I(5));
        //chprintf(dbg, "Checksum 0 is %x\r\n", cs);
        switch (c){
 8003244:	2b18      	cmp	r3, #24
 8003246:	d81a      	bhi.n	800327e <CharacterInputThread+0xae>
 8003248:	e8df f013 	tbh	[pc, r3, lsl #1]
 800324c:	0186019f 	.word	0x0186019f
 8003250:	00190019 	.word	0x00190019
 8003254:	00190019 	.word	0x00190019
 8003258:	00190019 	.word	0x00190019
 800325c:	00190019 	.word	0x00190019
 8003260:	00190019 	.word	0x00190019
 8003264:	00190053 	.word	0x00190053
 8003268:	00190019 	.word	0x00190019
 800326c:	01790046 	.word	0x01790046
 8003270:	00190019 	.word	0x00190019
 8003274:	0192012e 	.word	0x0192012e
 8003278:	00190019 	.word	0x00190019
 800327c:	0035      	.short	0x0035
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800327e:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b04      	cmp	r3, #4
      c=streamGet(&OSTRICHPORT);
 8003288:	4658      	mov	r0, fp
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800328a:	f041 83e6 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 800328e:	6833      	ldr	r3, [r6, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	4798      	blx	r3
 8003294:	2320      	movs	r3, #32
 8003296:	b2c4      	uxtb	r4, r0
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a2:	f385 8811 	msr	BASEPRI, r5
      if (start > end){
 80032a6:	4590      	cmp	r8, r2
 80032a8:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 80032ac:	f0c0 8142 	bcc.w	8003534 <CharacterInputThread+0x364>
 80032b0:	f108 0808 	add.w	r8, r8, #8
      if (state == IDLE){
 80032b4:	e7be      	b.n	8003234 <CharacterInputThread+0x64>
          state = READ;
          debug_print_state("Header Start: ", state);
          break;
        case 'Z':
          state = BULK;
          debug_print_state("Header Start: ", state);
 80032b6:	4873      	ldr	r0, [pc, #460]	; (8003484 <CharacterInputThread+0x2b4>)
 80032b8:	2119      	movs	r1, #25
 80032ba:	f7ff fd79 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80032be:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	f000 8596 	beq.w	8003df8 <CharacterInputThread+0xc28>
          state = BULK;
 80032cc:	2719      	movs	r7, #25
        state = IDLE;
        break;
      }
    }
    else{
      chThdSleepMilliseconds(100);
 80032ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032d2:	f7fe fe65 	bl	8001fa0 <chThdSleep>
 80032d6:	e78d      	b.n	80031f4 <CharacterInputThread+0x24>
          debug_print_state("Header Start: ", state);
 80032d8:	486a      	ldr	r0, [pc, #424]	; (8003484 <CharacterInputThread+0x2b4>)
 80032da:	2115      	movs	r1, #21
 80032dc:	f7ff fd68 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80032e0:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	f000 84d0 	beq.w	8003c8e <CharacterInputThread+0xabe>
          state = READ;
 80032ee:	2715      	movs	r7, #21
 80032f0:	e7ed      	b.n	80032ce <CharacterInputThread+0xfe>
          debug_print_state("Header Start: ", state);
 80032f2:	4864      	ldr	r0, [pc, #400]	; (8003484 <CharacterInputThread+0x2b4>)
 80032f4:	210e      	movs	r1, #14
 80032f6:	f7ff fd5b 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80032fa:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b04      	cmp	r3, #4
 8003304:	f041 8590 	bne.w	8004e28 <CharacterInputThread+0x1c58>
      c=streamGet(&OSTRICHPORT);
 8003308:	6833      	ldr	r3, [r6, #0]
 800330a:	4658      	mov	r0, fp
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	4798      	blx	r3
 8003310:	2320      	movs	r3, #32
 8003312:	b2c4      	uxtb	r4, r0
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800331c:	2300      	movs	r3, #0
 800331e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003320:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003324:	4590      	cmp	r8, r2
 8003326:	f0c0 8105 	bcc.w	8003534 <CharacterInputThread+0x364>
 800332a:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 800332e:	f108 0808 	add.w	r8, r8, #8
        cs += c;
 8003332:	f899 3000 	ldrb.w	r3, [r9]
        if (c == 'S'){                   // N S
 8003336:	2c53      	cmp	r4, #83	; 0x53
        cs += c;
 8003338:	4423      	add	r3, r4
 800333a:	f04f 0720 	mov.w	r7, #32
 800333e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
      c=streamGet(&OSTRICHPORT);
 8003342:	4658      	mov	r0, fp
        cs += c;
 8003344:	f889 3000 	strb.w	r3, [r9]
        if (c == 'S'){                   // N S
 8003348:	d01f      	beq.n	800338a <CharacterInputThread+0x1ba>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800334a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b04      	cmp	r3, #4
 8003354:	f041 8568 	bne.w	8004e28 <CharacterInputThread+0x1c58>
      c=streamGet(&OSTRICHPORT);
 8003358:	6833      	ldr	r3, [r6, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	4798      	blx	r3
 800335e:	b2c4      	uxtb	r4, r0
 8003360:	f387 8811 	msr	BASEPRI, r7
 8003364:	2300      	movs	r3, #0
 8003366:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003368:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800336c:	4542      	cmp	r2, r8
 800336e:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8003372:	f200 80df 	bhi.w	8003534 <CharacterInputThread+0x364>
        cs += c;
 8003376:	f899 3000 	ldrb.w	r3, [r9]
        if (c == 'S'){                   // N S
 800337a:	2c53      	cmp	r4, #83	; 0x53
        cs += c;
 800337c:	4423      	add	r3, r4
 800337e:	f108 0808 	add.w	r8, r8, #8
      c=streamGet(&OSTRICHPORT);
 8003382:	4658      	mov	r0, fp
        cs += c;
 8003384:	f889 3000 	strb.w	r3, [r9]
        if (c == 'S'){                   // N S
 8003388:	d1df      	bne.n	800334a <CharacterInputThread+0x17a>
          debug_print_state("Got Header: ", state);
 800338a:	483f      	ldr	r0, [pc, #252]	; (8003488 <CharacterInputThread+0x2b8>)
 800338c:	210f      	movs	r1, #15
 800338e:	f7ff fd0f 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003392:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b04      	cmp	r3, #4
 800339c:	f002 83f7 	beq.w	8005b8e <CharacterInputThread+0x29be>
      chThdSleepMilliseconds(100);
 80033a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033a4:	f7fe fdfc 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80033a8:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	f002 83ec 	beq.w	8005b8e <CharacterInputThread+0x29be>
      chThdSleepMilliseconds(100);
 80033b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033ba:	f7fe fdf1 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80033be:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	f043 8019 	bne.w	80063fe <CharacterInputThread+0x322e>
      c=streamGet(&OSTRICHPORT);
 80033cc:	6833      	ldr	r3, [r6, #0]
 80033ce:	4658      	mov	r0, fp
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	4798      	blx	r3
 80033d4:	2320      	movs	r3, #32
 80033d6:	b2c4      	uxtb	r4, r0
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033e0:	2300      	movs	r3, #0
 80033e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033e4:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80033e8:	4590      	cmp	r8, r2
 80033ea:	f0c0 80a3 	bcc.w	8003534 <CharacterInputThread+0x364>
 80033ee:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 80033f2:	f108 0808 	add.w	r8, r8, #8
        debug_print_state("Got Checksum: ", state);
 80033f6:	4825      	ldr	r0, [pc, #148]	; (800348c <CharacterInputThread+0x2bc>)
 80033f8:	2100      	movs	r1, #0
 80033fa:	f7ff fcd9 	bl	8002db0 <debug_print_state>
    chprintf(dbg, "%s %04x\r\n", text, val);
 80033fe:	f899 3000 	ldrb.w	r3, [r9]
 8003402:	4a23      	ldr	r2, [pc, #140]	; (8003490 <CharacterInputThread+0x2c0>)
 8003404:	4923      	ldr	r1, [pc, #140]	; (8003494 <CharacterInputThread+0x2c4>)
 8003406:	4824      	ldr	r0, [pc, #144]	; (8003498 <CharacterInputThread+0x2c8>)
 8003408:	f7ff fa7a 	bl	8002900 <chprintf>
        if (c == cs){                   // N S + CS
 800340c:	f899 3000 	ldrb.w	r3, [r9]
 8003410:	42a3      	cmp	r3, r4
 8003412:	f001 87fc 	beq.w	800540e <CharacterInputThread+0x223e>
          chprintf(dbg, "Checksum ERROR\r\n");
 8003416:	4921      	ldr	r1, [pc, #132]	; (800349c <CharacterInputThread+0x2cc>)
 8003418:	481f      	ldr	r0, [pc, #124]	; (8003498 <CharacterInputThread+0x2c8>)
 800341a:	f7ff fa71 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800341e:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b04      	cmp	r3, #4
 8003428:	f001 854e 	beq.w	8004ec8 <CharacterInputThread+0x1cf8>
      chThdSleepMilliseconds(100);
 800342c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003430:	f7fe fdb6 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003434:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b04      	cmp	r3, #4
 800343e:	f002 82ed 	beq.w	8005a1c <CharacterInputThread+0x284c>
      chThdSleepMilliseconds(100);
 8003442:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003446:	f7fe fdab 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800344a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b04      	cmp	r3, #4
 8003454:	f041 8301 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8003458:	6833      	ldr	r3, [r6, #0]
 800345a:	4658      	mov	r0, fp
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	4798      	blx	r3
 8003460:	2320      	movs	r3, #32
 8003462:	b2c4      	uxtb	r4, r0
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800346c:	2300      	movs	r3, #0
 800346e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003470:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003474:	e05e      	b.n	8003534 <CharacterInputThread+0x364>
 8003476:	bf00      	nop
 8003478:	0800a02c 	.word	0x0800a02c
 800347c:	200013a8 	.word	0x200013a8
 8003480:	08009d9c 	.word	0x08009d9c
 8003484:	08009dc0 	.word	0x08009dc0
 8003488:	08009ed8 	.word	0x08009ed8
 800348c:	08009ddc 	.word	0x08009ddc
 8003490:	08009de0 	.word	0x08009de0
 8003494:	08009dec 	.word	0x08009dec
 8003498:	20000ef0 	.word	0x20000ef0
 800349c:	08009e30 	.word	0x08009e30
 80034a0:	20001a82 	.word	0x20001a82
 80034a4:	40020000 	.word	0x40020000
          debug_print_state("Header Start: ", state);
 80034a8:	48a8      	ldr	r0, [pc, #672]	; (800374c <CharacterInputThread+0x57c>)
 80034aa:	2101      	movs	r1, #1
 80034ac:	f7ff fc80 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80034b0:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	f002 86da 	beq.w	8006272 <CharacterInputThread+0x30a2>
      chThdSleepMilliseconds(100);
 80034be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034c2:	f7fe fd6d 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80034c6:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	f042 8798 	bne.w	8006404 <CharacterInputThread+0x3234>
      c=streamGet(&OSTRICHPORT);
 80034d4:	6833      	ldr	r3, [r6, #0]
 80034d6:	4658      	mov	r0, fp
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	4798      	blx	r3
 80034dc:	2320      	movs	r3, #32
 80034de:	b2c4      	uxtb	r4, r0
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034e8:	2300      	movs	r3, #0
 80034ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ec:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80034f0:	4590      	cmp	r8, r2
 80034f2:	d31f      	bcc.n	8003534 <CharacterInputThread+0x364>
 80034f4:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 80034f8:	f108 0808 	add.w	r8, r8, #8
        debug_print_state("Got Header: ", state);
 80034fc:	4894      	ldr	r0, [pc, #592]	; (8003750 <CharacterInputThread+0x580>)
 80034fe:	2100      	movs	r1, #0
 8003500:	f7ff fc56 	bl	8002db0 <debug_print_state>
        if (c == 'V'){
 8003504:	2c56      	cmp	r4, #86	; 0x56
 8003506:	f002 81de 	beq.w	80058c6 <CharacterInputThread+0x26f6>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800350a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b04      	cmp	r3, #4
 8003514:	f041 82a1 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8003518:	6833      	ldr	r3, [r6, #0]
 800351a:	4658      	mov	r0, fp
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	4798      	blx	r3
 8003520:	2320      	movs	r3, #32
 8003522:	b2c4      	uxtb	r4, r0
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800352c:	2300      	movs	r3, #0
 800352e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8003538:	f108 0808 	add.w	r8, r8, #8
      if (state == IDLE){
 800353c:	e678      	b.n	8003230 <CharacterInputThread+0x60>
          debug_print_state("Header Start: ", state);
 800353e:	4883      	ldr	r0, [pc, #524]	; (800374c <CharacterInputThread+0x57c>)
 8003540:	210c      	movs	r1, #12
 8003542:	f7ff fc35 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003546:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b04      	cmp	r3, #4
 8003550:	f001 81b2 	beq.w	80048b8 <CharacterInputThread+0x16e8>
          state = BAUD;
 8003554:	270c      	movs	r7, #12
 8003556:	e6ba      	b.n	80032ce <CharacterInputThread+0xfe>
          debug_print_state("Header Start: ", state);
 8003558:	487c      	ldr	r0, [pc, #496]	; (800374c <CharacterInputThread+0x57c>)
 800355a:	2123      	movs	r1, #35	; 0x23
 800355c:	f7ff fc28 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003560:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b04      	cmp	r3, #4
 800356a:	d06b      	beq.n	8003644 <CharacterInputThread+0x474>
          state = CONFIG_C;
 800356c:	2723      	movs	r7, #35	; 0x23
 800356e:	e6ae      	b.n	80032ce <CharacterInputThread+0xfe>
          debug_print_state("Header Start: ", state);
 8003570:	4876      	ldr	r0, [pc, #472]	; (800374c <CharacterInputThread+0x57c>)
 8003572:	2110      	movs	r1, #16
 8003574:	f7ff fc1c 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003578:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b04      	cmp	r3, #4
 8003582:	f000 8474 	beq.w	8003e6e <CharacterInputThread+0xc9e>
          state = WRITE;
 8003586:	2710      	movs	r7, #16
 8003588:	e6a1      	b.n	80032ce <CharacterInputThread+0xfe>
          debug_print_state("Header Start: ", state);
 800358a:	4870      	ldr	r0, [pc, #448]	; (800374c <CharacterInputThread+0x57c>)
 800358c:	2102      	movs	r1, #2
 800358e:	f7ff fc0f 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003592:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b04      	cmp	r3, #4
 800359c:	f001 8065 	beq.w	800466a <CharacterInputThread+0x149a>
          state = BANK;
 80035a0:	2702      	movs	r7, #2
 80035a2:	e694      	b.n	80032ce <CharacterInputThread+0xfe>
      switch (state){
 80035a4:	1ebb      	subs	r3, r7, #2
 80035a6:	2b24      	cmp	r3, #36	; 0x24
 80035a8:	d8a8      	bhi.n	80034fc <CharacterInputThread+0x32c>
 80035aa:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <CharacterInputThread+0x3e0>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	08004695 	.word	0x08004695
 80035b4:	080041e5 	.word	0x080041e5
 80035b8:	0800411f 	.word	0x0800411f
 80035bc:	0800478b 	.word	0x0800478b
 80035c0:	0800407b 	.word	0x0800407b
 80035c4:	080045ad 	.word	0x080045ad
 80035c8:	080044fd 	.word	0x080044fd
 80035cc:	0800442f 	.word	0x0800442f
 80035d0:	08004343 	.word	0x08004343
 80035d4:	0800495f 	.word	0x0800495f
 80035d8:	080048e3 	.word	0x080048e3
 80035dc:	08003ef9 	.word	0x08003ef9
 80035e0:	08003333 	.word	0x08003333
 80035e4:	080033f7 	.word	0x080033f7
 80035e8:	08003e99 	.word	0x08003e99
 80035ec:	08004641 	.word	0x08004641
 80035f0:	08003fa5 	.word	0x08003fa5
 80035f4:	08003ff5 	.word	0x08003ff5
 80035f8:	08003bb1 	.word	0x08003bb1
 80035fc:	08003cb9 	.word	0x08003cb9
 8003600:	08003d11 	.word	0x08003d11
 8003604:	08003abf 	.word	0x08003abf
 8003608:	080039ef 	.word	0x080039ef
 800360c:	08003e23 	.word	0x08003e23
 8003610:	08003d65 	.word	0x08003d65
 8003614:	08004849 	.word	0x08004849
 8003618:	08003b15 	.word	0x08003b15
 800361c:	08004281 	.word	0x08004281
 8003620:	08003c2f 	.word	0x08003c2f
 8003624:	08003971 	.word	0x08003971
 8003628:	0800384f 	.word	0x0800384f
 800362c:	080038e9 	.word	0x080038e9
 8003630:	0800378f 	.word	0x0800378f
 8003634:	0800366f 	.word	0x0800366f
 8003638:	080036ef 	.word	0x080036ef
 800363c:	080049e9 	.word	0x080049e9
 8003640:	08004701 	.word	0x08004701
      c=streamGet(&OSTRICHPORT);
 8003644:	6833      	ldr	r3, [r6, #0]
 8003646:	4658      	mov	r0, fp
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	4798      	blx	r3
 800364c:	2320      	movs	r3, #32
 800364e:	b2c4      	uxtb	r4, r0
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003658:	2300      	movs	r3, #0
 800365a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800365c:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003660:	4590      	cmp	r8, r2
 8003662:	f4ff af67 	bcc.w	8003534 <CharacterInputThread+0x364>
 8003666:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 800366a:	f108 0808 	add.w	r8, r8, #8
        cs += c;
 800366e:	f899 5000 	ldrb.w	r5, [r9]
        count = (uint16_t)c;
 8003672:	4b38      	ldr	r3, [pc, #224]	; (8003754 <CharacterInputThread+0x584>)
    chprintf(dbg, "%s %04x\r\n", text, val);
 8003674:	4a38      	ldr	r2, [pc, #224]	; (8003758 <CharacterInputThread+0x588>)
        count = (uint16_t)c;
 8003676:	801c      	strh	r4, [r3, #0]
    chprintf(dbg, "%s %04x\r\n", text, val);
 8003678:	4938      	ldr	r1, [pc, #224]	; (800375c <CharacterInputThread+0x58c>)
 800367a:	4839      	ldr	r0, [pc, #228]	; (8003760 <CharacterInputThread+0x590>)
 800367c:	4623      	mov	r3, r4
        cs += c;
 800367e:	4425      	add	r5, r4
 8003680:	f889 5000 	strb.w	r5, [r9]
    chprintf(dbg, "%s %04x\r\n", text, val);
 8003684:	f7ff f93c 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003688:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b04      	cmp	r3, #4
 8003692:	f001 81e9 	beq.w	8004a68 <CharacterInputThread+0x1898>
      chThdSleepMilliseconds(100);
 8003696:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800369a:	f7fe fc81 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800369e:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	f001 81de 	beq.w	8004a68 <CharacterInputThread+0x1898>
      chThdSleepMilliseconds(100);
 80036ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036b0:	f7fe fc76 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80036b4:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b04      	cmp	r3, #4
 80036be:	f042 8485 	bne.w	8005fcc <CharacterInputThread+0x2dfc>
      c=streamGet(&OSTRICHPORT);
 80036c2:	6833      	ldr	r3, [r6, #0]
 80036c4:	4658      	mov	r0, fp
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	4798      	blx	r3
 80036ca:	2320      	movs	r3, #32
 80036cc:	b2c4      	uxtb	r4, r0
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036d6:	2300      	movs	r3, #0
 80036d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036da:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80036de:	4590      	cmp	r8, r2
        cntdwn = 0;
 80036e0:	930a      	str	r3, [sp, #40]	; 0x28
      if (start > end){
 80036e2:	f4ff af27 	bcc.w	8003534 <CharacterInputThread+0x364>
 80036e6:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 80036ea:	f108 0808 	add.w	r8, r8, #8
 80036ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036f0:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
        tbuf[cntdwn++] = c;
 80036f4:	a814      	add	r0, sp, #80	; 0x50
        if (cntdwn == count){
 80036f6:	4917      	ldr	r1, [pc, #92]	; (8003754 <CharacterInputThread+0x584>)
        cs += c;
 80036f8:	f899 2000 	ldrb.w	r2, [r9]
        tbuf[cntdwn++] = c;
 80036fc:	54c4      	strb	r4, [r0, r3]
        if (cntdwn == count){
 80036fe:	8809      	ldrh	r1, [r1, #0]
        tbuf[cntdwn++] = c;
 8003700:	3301      	adds	r3, #1
 8003702:	b29d      	uxth	r5, r3
        if (cntdwn == count){
 8003704:	42a9      	cmp	r1, r5
        cs += c;
 8003706:	eb04 0302 	add.w	r3, r4, r2
      c=streamGet(&OSTRICHPORT);
 800370a:	4658      	mov	r0, fp
        cs += c;
 800370c:	f889 3000 	strb.w	r3, [r9]
        if (cntdwn == count){
 8003710:	f002 8128 	beq.w	8005964 <CharacterInputThread+0x2794>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003714:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b04      	cmp	r3, #4
 800371e:	f041 83a9 	bne.w	8004e74 <CharacterInputThread+0x1ca4>
      c=streamGet(&OSTRICHPORT);
 8003722:	6833      	ldr	r3, [r6, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	4798      	blx	r3
 8003728:	2320      	movs	r3, #32
 800372a:	b2c4      	uxtb	r4, r0
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	2300      	movs	r3, #0
 8003732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003734:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003738:	4590      	cmp	r8, r2
 800373a:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 800373e:	f0c2 80f5 	bcc.w	800592c <CharacterInputThread+0x275c>
 8003742:	f108 0808 	add.w	r8, r8, #8
 8003746:	462b      	mov	r3, r5
 8003748:	e7d4      	b.n	80036f4 <CharacterInputThread+0x524>
 800374a:	bf00      	nop
 800374c:	08009dc0 	.word	0x08009dc0
 8003750:	08009ed8 	.word	0x08009ed8
 8003754:	20001a80 	.word	0x20001a80
 8003758:	08009f2c 	.word	0x08009f2c
 800375c:	08009dec 	.word	0x08009dec
 8003760:	20000ef0 	.word	0x20000ef0
      c=streamGet(&OSTRICHPORT);
 8003764:	6833      	ldr	r3, [r6, #0]
 8003766:	4658      	mov	r0, fp
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	4798      	blx	r3
 800376c:	2320      	movs	r3, #32
 800376e:	b2c4      	uxtb	r4, r0
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003778:	2300      	movs	r3, #0
 800377a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800377c:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003780:	4542      	cmp	r2, r8
 8003782:	f63f aed7 	bhi.w	8003534 <CharacterInputThread+0x364>
 8003786:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 800378a:	f108 0808 	add.w	r8, r8, #8
            debug_print_state("Got Checksum: ", state);
 800378e:	48b8      	ldr	r0, [pc, #736]	; (8003a70 <CharacterInputThread+0x8a0>)
 8003790:	2100      	movs	r1, #0
 8003792:	f7ff fb0d 	bl	8002db0 <debug_print_state>
    chprintf(dbg, "%s %04x\r\n", text, val);
 8003796:	f899 3000 	ldrb.w	r3, [r9]
 800379a:	4ab6      	ldr	r2, [pc, #728]	; (8003a74 <CharacterInputThread+0x8a4>)
 800379c:	49b6      	ldr	r1, [pc, #728]	; (8003a78 <CharacterInputThread+0x8a8>)
 800379e:	48b7      	ldr	r0, [pc, #732]	; (8003a7c <CharacterInputThread+0x8ac>)
 80037a0:	f7ff f8ae 	bl	8002900 <chprintf>
            if (c == cs){
 80037a4:	f899 3000 	ldrb.w	r3, [r9]
 80037a8:	42a3      	cmp	r3, r4
 80037aa:	f001 85bf 	beq.w	800532c <CharacterInputThread+0x215c>
              chprintf(dbg, "Checksum ERROR\r\n");
 80037ae:	49b4      	ldr	r1, [pc, #720]	; (8003a80 <CharacterInputThread+0x8b0>)
 80037b0:	48b2      	ldr	r0, [pc, #712]	; (8003a7c <CharacterInputThread+0x8ac>)
 80037b2:	f7ff f8a5 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80037b6:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b04      	cmp	r3, #4
 80037c0:	f001 858f 	beq.w	80052e2 <CharacterInputThread+0x2112>
      chThdSleepMilliseconds(100);
 80037c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037c8:	f7fe fbea 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80037cc:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	f002 81ca 	beq.w	8005b6e <CharacterInputThread+0x299e>
      chThdSleepMilliseconds(100);
 80037da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037de:	f7fe fbdf 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80037e2:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	f002 8475 	beq.w	80060da <CharacterInputThread+0x2f0a>
      chThdSleepMilliseconds(100);
 80037f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037f4:	f7fe fbd4 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80037f8:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b04      	cmp	r3, #4
 8003802:	f041 812a 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8003806:	6833      	ldr	r3, [r6, #0]
 8003808:	4658      	mov	r0, fp
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	4798      	blx	r3
 800380e:	2320      	movs	r3, #32
 8003810:	b2c4      	uxtb	r4, r0
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800381a:	2300      	movs	r3, #0
 800381c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800381e:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003822:	e687      	b.n	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8003824:	6833      	ldr	r3, [r6, #0]
 8003826:	4658      	mov	r0, fp
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	4798      	blx	r3
 800382c:	2320      	movs	r3, #32
 800382e:	b2c4      	uxtb	r4, r0
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003838:	2300      	movs	r3, #0
 800383a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800383c:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003840:	4542      	cmp	r2, r8
 8003842:	f63f ae77 	bhi.w	8003534 <CharacterInputThread+0x364>
 8003846:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 800384a:	f108 0808 	add.w	r8, r8, #8
            cs += c;
 800384e:	f899 3000 	ldrb.w	r3, [r9]
            debug_print_state("State2: ", state);
 8003852:	488c      	ldr	r0, [pc, #560]	; (8003a84 <CharacterInputThread+0x8b4>)
            cs += c;
 8003854:	4423      	add	r3, r4
            debug_print_state("State2: ", state);
 8003856:	2121      	movs	r1, #33	; 0x21
            cs += c;
 8003858:	f889 3000 	strb.w	r3, [r9]
            debug_print_state("State2: ", state);
 800385c:	f7ff faa8 	bl	8002db0 <debug_print_state>
            address += 0x10000*bank;
 8003860:	4b89      	ldr	r3, [pc, #548]	; (8003a88 <CharacterInputThread+0x8b8>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003862:	f8d6 248c 	ldr.w	r2, [r6, #1164]	; 0x48c
            address += 0x10000*bank;
 8003866:	781b      	ldrb	r3, [r3, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003868:	6812      	ldr	r2, [r2, #0]
            address += 0x10000*bank;
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003870:	7812      	ldrb	r2, [r2, #0]
            address += 0x10000*bank;
 8003872:	9309      	str	r3, [sp, #36]	; 0x24
            zoff = 0;
 8003874:	4b85      	ldr	r3, [pc, #532]	; (8003a8c <CharacterInputThread+0x8bc>)
 8003876:	2500      	movs	r5, #0
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003878:	2a04      	cmp	r2, #4
            zoff = 0;
 800387a:	801d      	strh	r5, [r3, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800387c:	f001 8108 	beq.w	8004a90 <CharacterInputThread+0x18c0>
      chThdSleepMilliseconds(100);
 8003880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003884:	f7fe fb8c 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003888:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b04      	cmp	r3, #4
 8003892:	f001 80fd 	beq.w	8004a90 <CharacterInputThread+0x18c0>
      chThdSleepMilliseconds(100);
 8003896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800389a:	f7fe fb81 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800389e:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d00a      	beq.n	80038c0 <CharacterInputThread+0x6f0>
      chThdSleepMilliseconds(100);
 80038aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038ae:	f7fe fb77 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80038b2:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	f041 82b7 	bne.w	8004e2e <CharacterInputThread+0x1c5e>
      c=streamGet(&OSTRICHPORT);
 80038c0:	6833      	ldr	r3, [r6, #0]
 80038c2:	4658      	mov	r0, fp
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	4798      	blx	r3
 80038c8:	2320      	movs	r3, #32
 80038ca:	b2c4      	uxtb	r4, r0
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d6:	f385 8811 	msr	BASEPRI, r5
      if (start > end){
 80038da:	4590      	cmp	r8, r2
 80038dc:	f4ff ae2a 	bcc.w	8003534 <CharacterInputThread+0x364>
 80038e0:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 80038e4:	f108 0808 	add.w	r8, r8, #8
 80038e8:	2720      	movs	r7, #32
 80038ea:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
            tbuf[zoff++] = c;
 80038ee:	4b67      	ldr	r3, [pc, #412]	; (8003a8c <CharacterInputThread+0x8bc>)
            if (zoff == count){
 80038f0:	4967      	ldr	r1, [pc, #412]	; (8003a90 <CharacterInputThread+0x8c0>)
            tbuf[zoff++] = c;
 80038f2:	881b      	ldrh	r3, [r3, #0]
            cs += c;
 80038f4:	f899 2000 	ldrb.w	r2, [r9]
            if (zoff == count){
 80038f8:	8809      	ldrh	r1, [r1, #0]
            tbuf[zoff++] = c;
 80038fa:	a814      	add	r0, sp, #80	; 0x50
            cs += c;
 80038fc:	4422      	add	r2, r4
            tbuf[zoff++] = c;
 80038fe:	54c4      	strb	r4, [r0, r3]
 8003900:	3301      	adds	r3, #1
 8003902:	b29b      	uxth	r3, r3
 8003904:	4c61      	ldr	r4, [pc, #388]	; (8003a8c <CharacterInputThread+0x8bc>)
            cs += c;
 8003906:	f889 2000 	strb.w	r2, [r9]
            if (zoff == count){
 800390a:	4299      	cmp	r1, r3
      c=streamGet(&OSTRICHPORT);
 800390c:	4658      	mov	r0, fp
            tbuf[zoff++] = c;
 800390e:	8023      	strh	r3, [r4, #0]
            if (zoff == count){
 8003910:	f001 87aa 	beq.w	8005868 <CharacterInputThread+0x2698>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003914:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b04      	cmp	r3, #4
 800391e:	f041 8286 	bne.w	8004e2e <CharacterInputThread+0x1c5e>
      c=streamGet(&OSTRICHPORT);
 8003922:	6833      	ldr	r3, [r6, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	4798      	blx	r3
 8003928:	b2c4      	uxtb	r4, r0
 800392a:	f387 8811 	msr	BASEPRI, r7
 800392e:	2300      	movs	r3, #0
 8003930:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003932:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003936:	4590      	cmp	r8, r2
 8003938:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 800393c:	f4ff adfa 	bcc.w	8003534 <CharacterInputThread+0x364>
 8003940:	f108 0808 	add.w	r8, r8, #8
      if (state == IDLE){
 8003944:	e7d3      	b.n	80038ee <CharacterInputThread+0x71e>
      c=streamGet(&OSTRICHPORT);
 8003946:	6833      	ldr	r3, [r6, #0]
 8003948:	4658      	mov	r0, fp
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	4798      	blx	r3
 800394e:	2320      	movs	r3, #32
 8003950:	b2c4      	uxtb	r4, r0
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800395a:	2300      	movs	r3, #0
 800395c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800395e:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003962:	4542      	cmp	r2, r8
 8003964:	f63f ade6 	bhi.w	8003534 <CharacterInputThread+0x364>
 8003968:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 800396c:	f108 0808 	add.w	r8, r8, #8
            cs += c;
 8003970:	f899 3000 	ldrb.w	r3, [r9]
            debug_print_state("State2: ", state);
 8003974:	4843      	ldr	r0, [pc, #268]	; (8003a84 <CharacterInputThread+0x8b4>)
            cs += c;
 8003976:	4423      	add	r3, r4
            debug_print_state("State2: ", state);
 8003978:	2120      	movs	r1, #32
            cs += c;
 800397a:	f889 3000 	strb.w	r3, [r9]
            debug_print_state("State2: ", state);
 800397e:	f7ff fa17 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003982:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
            bank = c;
 8003986:	4a40      	ldr	r2, [pc, #256]	; (8003a88 <CharacterInputThread+0x8b8>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003988:	681b      	ldr	r3, [r3, #0]
            bank = c;
 800398a:	7014      	strb	r4, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b04      	cmp	r3, #4
 8003990:	f43f af48 	beq.w	8003824 <CharacterInputThread+0x654>
      chThdSleepMilliseconds(100);
 8003994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003998:	f7fe fb02 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800399c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	f001 827c 	beq.w	8004ea2 <CharacterInputThread+0x1cd2>
      chThdSleepMilliseconds(100);
 80039aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039ae:	f7fe faf7 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80039b2:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	f001 8271 	beq.w	8004ea2 <CharacterInputThread+0x1cd2>
            state = BULK_ZWnBM;
 80039c0:	2720      	movs	r7, #32
 80039c2:	e484      	b.n	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 80039c4:	6833      	ldr	r3, [r6, #0]
 80039c6:	4658      	mov	r0, fp
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	4798      	blx	r3
 80039cc:	2320      	movs	r3, #32
 80039ce:	b2c4      	uxtb	r4, r0
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039d8:	2300      	movs	r3, #0
 80039da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039dc:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80039e0:	4542      	cmp	r2, r8
 80039e2:	f63f ada7 	bhi.w	8003534 <CharacterInputThread+0x364>
 80039e6:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 80039ea:	f108 0808 	add.w	r8, r8, #8
          debug_print_state("Got Checksum: ", state);
 80039ee:	4820      	ldr	r0, [pc, #128]	; (8003a70 <CharacterInputThread+0x8a0>)
 80039f0:	2100      	movs	r1, #0
 80039f2:	f7ff f9dd 	bl	8002db0 <debug_print_state>
    chprintf(dbg, "%s %04x\r\n", text, val);
 80039f6:	f899 3000 	ldrb.w	r3, [r9]
 80039fa:	4a1e      	ldr	r2, [pc, #120]	; (8003a74 <CharacterInputThread+0x8a4>)
 80039fc:	491e      	ldr	r1, [pc, #120]	; (8003a78 <CharacterInputThread+0x8a8>)
 80039fe:	481f      	ldr	r0, [pc, #124]	; (8003a7c <CharacterInputThread+0x8ac>)
 8003a00:	f7fe ff7e 	bl	8002900 <chprintf>
          if (c == cs){
 8003a04:	f899 3000 	ldrb.w	r3, [r9]
 8003a08:	42a3      	cmp	r3, r4
 8003a0a:	f002 80d3 	beq.w	8005bb4 <CharacterInputThread+0x29e4>
            chprintf(dbg, "Checksum ERROR\r\n");
 8003a0e:	491c      	ldr	r1, [pc, #112]	; (8003a80 <CharacterInputThread+0x8b0>)
 8003a10:	481a      	ldr	r0, [pc, #104]	; (8003a7c <CharacterInputThread+0x8ac>)
 8003a12:	f7fe ff75 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a16:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	f001 8208 	beq.w	8004e34 <CharacterInputThread+0x1c64>
      chThdSleepMilliseconds(100);
 8003a24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a28:	f7fe faba 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a2c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	f001 86f4 	beq.w	8005822 <CharacterInputThread+0x2652>
      chThdSleepMilliseconds(100);
 8003a3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a3e:	f7fe faaf 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a42:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	f041 8005 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8003a50:	6833      	ldr	r3, [r6, #0]
 8003a52:	4658      	mov	r0, fp
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	4798      	blx	r3
 8003a58:	2320      	movs	r3, #32
 8003a5a:	b2c4      	uxtb	r4, r0
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a64:	2300      	movs	r3, #0
 8003a66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a68:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003a6c:	e562      	b.n	8003534 <CharacterInputThread+0x364>
 8003a6e:	bf00      	nop
 8003a70:	08009ddc 	.word	0x08009ddc
 8003a74:	08009de0 	.word	0x08009de0
 8003a78:	08009dec 	.word	0x08009dec
 8003a7c:	20000ef0 	.word	0x20000ef0
 8003a80:	08009e30 	.word	0x08009e30
 8003a84:	08009dd0 	.word	0x08009dd0
 8003a88:	200018c8 	.word	0x200018c8
 8003a8c:	20002048 	.word	0x20002048
 8003a90:	20001a80 	.word	0x20001a80
      c=streamGet(&OSTRICHPORT);
 8003a94:	6833      	ldr	r3, [r6, #0]
 8003a96:	4658      	mov	r0, fp
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	4798      	blx	r3
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	b2c4      	uxtb	r4, r0
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aac:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003ab0:	4542      	cmp	r2, r8
 8003ab2:	f63f ad3f 	bhi.w	8003534 <CharacterInputThread+0x364>
 8003ab6:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8003aba:	f108 0808 	add.w	r8, r8, #8
          cs += c;
 8003abe:	f899 3000 	ldrb.w	r3, [r9]
          debug_print_state("State2: ", state);
 8003ac2:	48c6      	ldr	r0, [pc, #792]	; (8003ddc <CharacterInputThread+0xc0c>)
          cs += c;
 8003ac4:	4423      	add	r3, r4
          debug_print_state("State2: ", state);
 8003ac6:	2118      	movs	r1, #24
          cs += c;
 8003ac8:	f889 3000 	strb.w	r3, [r9]
          debug_print_state("State2: ", state);
 8003acc:	f7ff f970 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003ad0:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
          address += c;
 8003ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
          address += c;
 8003ada:	4422      	add	r2, r4
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003adc:	2b04      	cmp	r3, #4
          address += c;
 8003ade:	9209      	str	r2, [sp, #36]	; 0x24
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003ae0:	f43f af70 	beq.w	80039c4 <CharacterInputThread+0x7f4>
          state = READ_nMLCs;
 8003ae4:	2718      	movs	r7, #24
 8003ae6:	f7ff bbf2 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8003aea:	6833      	ldr	r3, [r6, #0]
 8003aec:	4658      	mov	r0, fp
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	4798      	blx	r3
 8003af2:	2320      	movs	r3, #32
 8003af4:	b2c4      	uxtb	r4, r0
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003afe:	2300      	movs	r3, #0
 8003b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b02:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003b06:	4542      	cmp	r2, r8
 8003b08:	f63f ad14 	bhi.w	8003534 <CharacterInputThread+0x364>
 8003b0c:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8003b10:	f108 0808 	add.w	r8, r8, #8
            cs += c;
 8003b14:	f899 3000 	ldrb.w	r3, [r9]
            debug_print_state("State2: ", state);
 8003b18:	48b0      	ldr	r0, [pc, #704]	; (8003ddc <CharacterInputThread+0xc0c>)
            cs += c;
 8003b1a:	4423      	add	r3, r4
            debug_print_state("State2: ", state);
 8003b1c:	211d      	movs	r1, #29
            cs += c;
 8003b1e:	f889 3000 	strb.w	r3, [r9]
            debug_print_state("State2: ", state);
 8003b22:	f7ff f945 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b26:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
            address += (int32_t)c * 256;
 8003b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
            address += (int32_t)c * 256;
 8003b30:	eb02 2204 	add.w	r2, r2, r4, lsl #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b34:	2b04      	cmp	r3, #4
            address += (int32_t)c * 256;
 8003b36:	9209      	str	r2, [sp, #36]	; 0x24
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b38:	f000 838d 	beq.w	8004256 <CharacterInputThread+0x1086>
      chThdSleepMilliseconds(100);
 8003b3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b40:	f7fe fa2e 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b44:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	f000 8382 	beq.w	8004256 <CharacterInputThread+0x1086>
      chThdSleepMilliseconds(100);
 8003b52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b56:	f7fe fa23 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b5a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	f001 876a 	beq.w	8005a3c <CharacterInputThread+0x286c>
      chThdSleepMilliseconds(100);
 8003b68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b6c:	f7fe fa18 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b70:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	f001 875f 	beq.w	8005a3c <CharacterInputThread+0x286c>
            state = BULK_ZRnBMCs;
 8003b7e:	271d      	movs	r7, #29
 8003b80:	f7ff bba5 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8003b84:	6833      	ldr	r3, [r6, #0]
 8003b86:	4658      	mov	r0, fp
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	4798      	blx	r3
 8003b8c:	2320      	movs	r3, #32
 8003b8e:	b2c4      	uxtb	r4, r0
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b98:	2300      	movs	r3, #0
 8003b9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b9c:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003ba0:	4542      	cmp	r2, r8
 8003ba2:	f202 8363 	bhi.w	800626c <CharacterInputThread+0x309c>
 8003ba6:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8003baa:	f108 0808 	add.w	r8, r8, #8
          tbuf[cntdwn++] = c;
 8003bae:	950a      	str	r5, [sp, #40]	; 0x28
          debug_print_state("Got Checksum: ", state);
 8003bb0:	488b      	ldr	r0, [pc, #556]	; (8003de0 <CharacterInputThread+0xc10>)
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	f7ff f8fc 	bl	8002db0 <debug_print_state>
    chprintf(dbg, "%s %04x\r\n", text, val);
 8003bb8:	f899 3000 	ldrb.w	r3, [r9]
 8003bbc:	4a89      	ldr	r2, [pc, #548]	; (8003de4 <CharacterInputThread+0xc14>)
 8003bbe:	498a      	ldr	r1, [pc, #552]	; (8003de8 <CharacterInputThread+0xc18>)
 8003bc0:	488a      	ldr	r0, [pc, #552]	; (8003dec <CharacterInputThread+0xc1c>)
 8003bc2:	f7fe fe9d 	bl	8002900 <chprintf>
          if (c == cs){
 8003bc6:	f899 3000 	ldrb.w	r3, [r9]
 8003bca:	42a3      	cmp	r3, r4
 8003bcc:	f001 81bb 	beq.w	8004f46 <CharacterInputThread+0x1d76>
            chprintf(dbg, "Checksum ERROR\r\n");
 8003bd0:	4987      	ldr	r1, [pc, #540]	; (8003df0 <CharacterInputThread+0xc20>)
 8003bd2:	4886      	ldr	r0, [pc, #536]	; (8003dec <CharacterInputThread+0xc1c>)
 8003bd4:	f7fe fe94 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003bd8:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	f040 873a 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8003be6:	6833      	ldr	r3, [r6, #0]
 8003be8:	4658      	mov	r0, fp
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	4798      	blx	r3
 8003bee:	2320      	movs	r3, #32
 8003bf0:	b2c4      	uxtb	r4, r0
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bfe:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003c02:	e497      	b.n	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8003c04:	6833      	ldr	r3, [r6, #0]
 8003c06:	4658      	mov	r0, fp
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	4798      	blx	r3
 8003c0c:	2320      	movs	r3, #32
 8003c0e:	b2c4      	uxtb	r4, r0
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c18:	2300      	movs	r3, #0
 8003c1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c1c:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003c20:	4542      	cmp	r2, r8
 8003c22:	f63f ac87 	bhi.w	8003534 <CharacterInputThread+0x364>
 8003c26:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8003c2a:	f108 0808 	add.w	r8, r8, #8
            cs += c;
 8003c2e:	f899 3000 	ldrb.w	r3, [r9]
            debug_print_state("State2: ", state);
 8003c32:	486a      	ldr	r0, [pc, #424]	; (8003ddc <CharacterInputThread+0xc0c>)
            cs += c;
 8003c34:	4423      	add	r3, r4
            debug_print_state("State2: ", state);
 8003c36:	211f      	movs	r1, #31
            cs += c;
 8003c38:	f889 3000 	strb.w	r3, [r9]
            debug_print_state("State2: ", state);
 8003c3c:	f7ff f8b8 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003c40:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
            if (c == 0){
 8003c44:	2c00      	cmp	r4, #0
 8003c46:	f040 8765 	bne.w	8004b14 <CharacterInputThread+0x1944>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003c4a:	681b      	ldr	r3, [r3, #0]
              count = 256;
 8003c4c:	4969      	ldr	r1, [pc, #420]	; (8003df4 <CharacterInputThread+0xc24>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003c4e:	781b      	ldrb	r3, [r3, #0]
              count = 256;
 8003c50:	f44f 7280 	mov.w	r2, #256	; 0x100
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003c54:	2b04      	cmp	r3, #4
              count = 256;
 8003c56:	800a      	strh	r2, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003c58:	f43f ae75 	beq.w	8003946 <CharacterInputThread+0x776>
      chThdSleepMilliseconds(100);
 8003c5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c60:	f7fe f99e 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003c64:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	f43f ae6a 	beq.w	8003946 <CharacterInputThread+0x776>
      chThdSleepMilliseconds(100);
 8003c72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c76:	f7fe f993 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003c7a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	f43f ae5f 	beq.w	8003946 <CharacterInputThread+0x776>
            state = BULK_ZWnB;
 8003c88:	271f      	movs	r7, #31
 8003c8a:	f7ff bb20 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8003c8e:	6833      	ldr	r3, [r6, #0]
 8003c90:	4658      	mov	r0, fp
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	4798      	blx	r3
 8003c96:	2320      	movs	r3, #32
 8003c98:	b2c4      	uxtb	r4, r0
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ca6:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003caa:	4590      	cmp	r8, r2
 8003cac:	f4ff ac42 	bcc.w	8003534 <CharacterInputThread+0x364>
 8003cb0:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8003cb4:	f108 0808 	add.w	r8, r8, #8
          cs += c;
 8003cb8:	f899 3000 	ldrb.w	r3, [r9]
          debug_print_state("State2: ", state);
 8003cbc:	4847      	ldr	r0, [pc, #284]	; (8003ddc <CharacterInputThread+0xc0c>)
          cs += c;
 8003cbe:	4423      	add	r3, r4
          debug_print_state("State2: ", state);
 8003cc0:	2116      	movs	r1, #22
          cs += c;
 8003cc2:	f889 3000 	strb.w	r3, [r9]
          debug_print_state("State2: ", state);
 8003cc6:	f7ff f873 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003cca:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
          if (c == 0){
 8003cce:	2c00      	cmp	r4, #0
 8003cd0:	f040 870a 	bne.w	8004ae8 <CharacterInputThread+0x1918>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003cd4:	681b      	ldr	r3, [r3, #0]
            count = 256;
 8003cd6:	4947      	ldr	r1, [pc, #284]	; (8003df4 <CharacterInputThread+0xc24>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003cd8:	781b      	ldrb	r3, [r3, #0]
            count = 256;
 8003cda:	f44f 7280 	mov.w	r2, #256	; 0x100
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003cde:	2b04      	cmp	r3, #4
            count = 256;
 8003ce0:	800a      	strh	r2, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003ce2:	f040 8708 	bne.w	8004af6 <CharacterInputThread+0x1926>
      c=streamGet(&OSTRICHPORT);
 8003ce6:	6833      	ldr	r3, [r6, #0]
 8003ce8:	4658      	mov	r0, fp
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	4798      	blx	r3
 8003cee:	2320      	movs	r3, #32
 8003cf0:	b2c4      	uxtb	r4, r0
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cfe:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003d02:	4542      	cmp	r2, r8
 8003d04:	f63f ac16 	bhi.w	8003534 <CharacterInputThread+0x364>
 8003d08:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8003d0c:	f108 0808 	add.w	r8, r8, #8
          cs += c;
 8003d10:	f899 3000 	ldrb.w	r3, [r9]
          debug_print_state("State2: ", state);
 8003d14:	4831      	ldr	r0, [pc, #196]	; (8003ddc <CharacterInputThread+0xc0c>)
          cs += c;
 8003d16:	4423      	add	r3, r4
          debug_print_state("State2: ", state);
 8003d18:	2117      	movs	r1, #23
          cs += c;
 8003d1a:	f889 3000 	strb.w	r3, [r9]
          debug_print_state("State2: ", state);
 8003d1e:	f7ff f847 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d22:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	781b      	ldrb	r3, [r3, #0]
          address *= 256;
 8003d2a:	0222      	lsls	r2, r4, #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d2c:	2b04      	cmp	r3, #4
          address *= 256;
 8003d2e:	9209      	str	r2, [sp, #36]	; 0x24
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d30:	f43f aeb0 	beq.w	8003a94 <CharacterInputThread+0x8c4>
          state = READ_nML;
 8003d34:	2717      	movs	r7, #23
 8003d36:	f7ff baca 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8003d3a:	6833      	ldr	r3, [r6, #0]
 8003d3c:	4658      	mov	r0, fp
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	4798      	blx	r3
 8003d42:	2320      	movs	r3, #32
 8003d44:	b2c4      	uxtb	r4, r0
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d4e:	2300      	movs	r3, #0
 8003d50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d52:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003d56:	4542      	cmp	r2, r8
 8003d58:	f63f abec 	bhi.w	8003534 <CharacterInputThread+0x364>
 8003d5c:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8003d60:	f108 0808 	add.w	r8, r8, #8
            cs += c;
 8003d64:	f899 3000 	ldrb.w	r3, [r9]
            debug_print_state("State2: ", state);
 8003d68:	481c      	ldr	r0, [pc, #112]	; (8003ddc <CharacterInputThread+0xc0c>)
            cs += c;
 8003d6a:	4423      	add	r3, r4
            debug_print_state("State2: ", state);
 8003d6c:	211b      	movs	r1, #27
            cs += c;
 8003d6e:	f889 3000 	strb.w	r3, [r9]
            debug_print_state("State2: ", state);
 8003d72:	f7ff f81d 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d76:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
            if (c == 0){
 8003d7a:	2c00      	cmp	r4, #0
 8003d7c:	f040 8548 	bne.w	8004810 <CharacterInputThread+0x1640>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d80:	681b      	ldr	r3, [r3, #0]
              count = 256;
 8003d82:	491c      	ldr	r1, [pc, #112]	; (8003df4 <CharacterInputThread+0xc24>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d84:	781b      	ldrb	r3, [r3, #0]
              count = 256;
 8003d86:	f44f 7280 	mov.w	r2, #256	; 0x100
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d8a:	2b04      	cmp	r3, #4
              count = 256;
 8003d8c:	800a      	strh	r2, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d8e:	f000 8546 	beq.w	800481e <CharacterInputThread+0x164e>
      chThdSleepMilliseconds(100);
 8003d92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d96:	f7fe f903 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d9a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	f000 853b 	beq.w	800481e <CharacterInputThread+0x164e>
      chThdSleepMilliseconds(100);
 8003da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dac:	f7fe f8f8 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003db0:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	f001 861c 	beq.w	80059f6 <CharacterInputThread+0x2826>
      chThdSleepMilliseconds(100);
 8003dbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dc2:	f7fe f8ed 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003dc6:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	f001 8611 	beq.w	80059f6 <CharacterInputThread+0x2826>
            state = BULK_ZRnB;
 8003dd4:	271b      	movs	r7, #27
 8003dd6:	f7ff ba7a 	b.w	80032ce <CharacterInputThread+0xfe>
 8003dda:	bf00      	nop
 8003ddc:	08009dd0 	.word	0x08009dd0
 8003de0:	08009ddc 	.word	0x08009ddc
 8003de4:	08009de0 	.word	0x08009de0
 8003de8:	08009dec 	.word	0x08009dec
 8003dec:	20000ef0 	.word	0x20000ef0
 8003df0:	08009e30 	.word	0x08009e30
 8003df4:	20001a80 	.word	0x20001a80
      c=streamGet(&OSTRICHPORT);
 8003df8:	6833      	ldr	r3, [r6, #0]
 8003dfa:	4658      	mov	r0, fp
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	4798      	blx	r3
 8003e00:	2320      	movs	r3, #32
 8003e02:	b2c4      	uxtb	r4, r0
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e10:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003e14:	4590      	cmp	r8, r2
 8003e16:	f4ff ab8d 	bcc.w	8003534 <CharacterInputThread+0x364>
 8003e1a:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8003e1e:	f108 0808 	add.w	r8, r8, #8
            cs += c;
 8003e22:	f899 3000 	ldrb.w	r3, [r9]
 8003e26:	2c52      	cmp	r4, #82	; 0x52
 8003e28:	4423      	add	r3, r4
 8003e2a:	f889 3000 	strb.w	r3, [r9]
            switch (c){
 8003e2e:	f001 82e0 	beq.w	80053f2 <CharacterInputThread+0x2222>
 8003e32:	2c57      	cmp	r4, #87	; 0x57
 8003e34:	f001 82cf 	beq.w	80053d6 <CharacterInputThread+0x2206>
              debug_print_state("State3: ", state);
 8003e38:	48a5      	ldr	r0, [pc, #660]	; (80040d0 <CharacterInputThread+0xf00>)
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	f7fe ffb8 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003e40:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	f040 8606 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8003e4e:	6833      	ldr	r3, [r6, #0]
 8003e50:	4658      	mov	r0, fp
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	4798      	blx	r3
 8003e56:	2320      	movs	r3, #32
 8003e58:	b2c4      	uxtb	r4, r0
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e62:	2300      	movs	r3, #0
 8003e64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e66:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003e6a:	f7ff bb63 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8003e6e:	6833      	ldr	r3, [r6, #0]
 8003e70:	4658      	mov	r0, fp
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	4798      	blx	r3
 8003e76:	2320      	movs	r3, #32
 8003e78:	b2c4      	uxtb	r4, r0
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e82:	2300      	movs	r3, #0
 8003e84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e86:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003e8a:	4590      	cmp	r8, r2
 8003e8c:	f4ff ab52 	bcc.w	8003534 <CharacterInputThread+0x364>
 8003e90:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8003e94:	f108 0808 	add.w	r8, r8, #8
          cs += c;
 8003e98:	f899 3000 	ldrb.w	r3, [r9]
          debug_print_state("State2: ", state);
 8003e9c:	488d      	ldr	r0, [pc, #564]	; (80040d4 <CharacterInputThread+0xf04>)
          cs += c;
 8003e9e:	4423      	add	r3, r4
          debug_print_state("State2: ", state);
 8003ea0:	2111      	movs	r1, #17
          cs += c;
 8003ea2:	f889 3000 	strb.w	r3, [r9]
          debug_print_state("State2: ", state);
 8003ea6:	f7fe ff83 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003eaa:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
          if (c == 0){
 8003eae:	2c00      	cmp	r4, #0
 8003eb0:	f040 8624 	bne.w	8004afc <CharacterInputThread+0x192c>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003eb4:	681b      	ldr	r3, [r3, #0]
            count = 256;
 8003eb6:	4988      	ldr	r1, [pc, #544]	; (80040d8 <CharacterInputThread+0xf08>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003eb8:	781b      	ldrb	r3, [r3, #0]
            count = 256;
 8003eba:	f44f 7280 	mov.w	r2, #256	; 0x100
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003ebe:	2b04      	cmp	r3, #4
            count = 256;
 8003ec0:	800a      	strh	r2, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003ec2:	f000 83a7 	beq.w	8004614 <CharacterInputThread+0x1444>
          cntdwn = 0;
 8003ec6:	940a      	str	r4, [sp, #40]	; 0x28
          state = WRITE_nM;
 8003ec8:	2711      	movs	r7, #17
 8003eca:	f7ff ba00 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8003ece:	6833      	ldr	r3, [r6, #0]
 8003ed0:	4658      	mov	r0, fp
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	4798      	blx	r3
 8003ed6:	2320      	movs	r3, #32
 8003ed8:	b2c4      	uxtb	r4, r0
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ee6:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003eea:	4542      	cmp	r2, r8
 8003eec:	f63f ab22 	bhi.w	8003534 <CharacterInputThread+0x364>
 8003ef0:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8003ef4:	f108 0808 	add.w	r8, r8, #8
        debug_print_state("Got Checksum: ", state);
 8003ef8:	4878      	ldr	r0, [pc, #480]	; (80040dc <CharacterInputThread+0xf0c>)
 8003efa:	2100      	movs	r1, #0
 8003efc:	f7fe ff58 	bl	8002db0 <debug_print_state>
    chprintf(dbg, "%s %04x\r\n", text, val);
 8003f00:	f899 3000 	ldrb.w	r3, [r9]
 8003f04:	4a76      	ldr	r2, [pc, #472]	; (80040e0 <CharacterInputThread+0xf10>)
 8003f06:	4977      	ldr	r1, [pc, #476]	; (80040e4 <CharacterInputThread+0xf14>)
 8003f08:	4877      	ldr	r0, [pc, #476]	; (80040e8 <CharacterInputThread+0xf18>)
 8003f0a:	f7fe fcf9 	bl	8002900 <chprintf>
        if (cs == c){
 8003f0e:	f899 3000 	ldrb.w	r3, [r9]
 8003f12:	42a3      	cmp	r3, r4
 8003f14:	f001 8058 	beq.w	8004fc8 <CharacterInputThread+0x1df8>
          chprintf(dbg, "Checksum ERROR\r\n");
 8003f18:	4974      	ldr	r1, [pc, #464]	; (80040ec <CharacterInputThread+0xf1c>)
 8003f1a:	4873      	ldr	r0, [pc, #460]	; (80040e8 <CharacterInputThread+0xf18>)
 8003f1c:	f7fe fcf0 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003f20:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	f001 803d 	beq.w	8004fa8 <CharacterInputThread+0x1dd8>
      chThdSleepMilliseconds(100);
 8003f2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f32:	f7fe f835 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003f36:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	f001 8605 	beq.w	8005b4e <CharacterInputThread+0x297e>
      chThdSleepMilliseconds(100);
 8003f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f48:	f7fe f82a 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003f4c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	f040 8580 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8003f5a:	6833      	ldr	r3, [r6, #0]
 8003f5c:	4658      	mov	r0, fp
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	4798      	blx	r3
 8003f62:	2320      	movs	r3, #32
 8003f64:	b2c4      	uxtb	r4, r0
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f6e:	2300      	movs	r3, #0
 8003f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f72:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003f76:	f7ff badd 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8003f7a:	6833      	ldr	r3, [r6, #0]
 8003f7c:	4658      	mov	r0, fp
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	4798      	blx	r3
 8003f82:	2320      	movs	r3, #32
 8003f84:	b2c4      	uxtb	r4, r0
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f8e:	2300      	movs	r3, #0
 8003f90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f92:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003f96:	4542      	cmp	r2, r8
 8003f98:	f63f aacc 	bhi.w	8003534 <CharacterInputThread+0x364>
 8003f9c:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8003fa0:	f108 0808 	add.w	r8, r8, #8
          cs += c;
 8003fa4:	f899 3000 	ldrb.w	r3, [r9]
          debug_print_state("State2: ", state);
 8003fa8:	484a      	ldr	r0, [pc, #296]	; (80040d4 <CharacterInputThread+0xf04>)
          cs += c;
 8003faa:	4423      	add	r3, r4
          debug_print_state("State2: ", state);
 8003fac:	2113      	movs	r1, #19
          cs += c;
 8003fae:	f889 3000 	strb.w	r3, [r9]
          debug_print_state("State2: ", state);
 8003fb2:	f7fe fefd 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003fb6:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
          address += c;
 8003fba:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
          address += c;
 8003fc0:	4422      	add	r2, r4
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003fc2:	2b04      	cmp	r3, #4
          address += c;
 8003fc4:	9209      	str	r2, [sp, #36]	; 0x24
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003fc6:	f040 854c 	bne.w	8004a62 <CharacterInputThread+0x1892>
      c=streamGet(&OSTRICHPORT);
 8003fca:	6833      	ldr	r3, [r6, #0]
 8003fcc:	4658      	mov	r0, fp
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	4798      	blx	r3
 8003fd2:	2320      	movs	r3, #32
 8003fd4:	b2c4      	uxtb	r4, r0
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fde:	2300      	movs	r3, #0
 8003fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fe2:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8003fe6:	4542      	cmp	r2, r8
 8003fe8:	f63f aaa4 	bhi.w	8003534 <CharacterInputThread+0x364>
 8003fec:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8003ff0:	f108 0808 	add.w	r8, r8, #8
 8003ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ff6:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
          tbuf[cntdwn++] = c;
 8003ffa:	a814      	add	r0, sp, #80	; 0x50
          if (cntdwn == count){
 8003ffc:	4936      	ldr	r1, [pc, #216]	; (80040d8 <CharacterInputThread+0xf08>)
          cs += c;
 8003ffe:	f899 2000 	ldrb.w	r2, [r9]
          tbuf[cntdwn++] = c;
 8004002:	54c4      	strb	r4, [r0, r3]
          if (cntdwn == count){
 8004004:	8809      	ldrh	r1, [r1, #0]
          tbuf[cntdwn++] = c;
 8004006:	3301      	adds	r3, #1
 8004008:	b29d      	uxth	r5, r3
          if (cntdwn == count){
 800400a:	42a9      	cmp	r1, r5
          cs += c;
 800400c:	eb04 0302 	add.w	r3, r4, r2
      c=streamGet(&OSTRICHPORT);
 8004010:	4658      	mov	r0, fp
          cs += c;
 8004012:	f889 3000 	strb.w	r3, [r9]
          if (cntdwn == count){
 8004016:	f001 848c 	beq.w	8005932 <CharacterInputThread+0x2762>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800401a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b04      	cmp	r3, #4
 8004024:	f040 851c 	bne.w	8004a60 <CharacterInputThread+0x1890>
      c=streamGet(&OSTRICHPORT);
 8004028:	6833      	ldr	r3, [r6, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	4798      	blx	r3
 800402e:	2320      	movs	r3, #32
 8004030:	b2c4      	uxtb	r4, r0
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	2300      	movs	r3, #0
 8004038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800403e:	4542      	cmp	r2, r8
 8004040:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8004044:	f201 840d 	bhi.w	8005862 <CharacterInputThread+0x2692>
 8004048:	f108 0808 	add.w	r8, r8, #8
 800404c:	462b      	mov	r3, r5
 800404e:	e7d4      	b.n	8003ffa <CharacterInputThread+0xe2a>
      c=streamGet(&OSTRICHPORT);
 8004050:	6833      	ldr	r3, [r6, #0]
 8004052:	4658      	mov	r0, fp
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	4798      	blx	r3
 8004058:	2320      	movs	r3, #32
 800405a:	b2c4      	uxtb	r4, r0
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004064:	2300      	movs	r3, #0
 8004066:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004068:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800406c:	4542      	cmp	r2, r8
 800406e:	f63f aa61 	bhi.w	8003534 <CharacterInputThread+0x364>
 8004072:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8004076:	f108 0808 	add.w	r8, r8, #8
        cs += c;
 800407a:	f899 3000 	ldrb.w	r3, [r9]
        debug_print_state("State2: ", state);
 800407e:	4815      	ldr	r0, [pc, #84]	; (80040d4 <CharacterInputThread+0xf04>)
        cs += c;
 8004080:	4423      	add	r3, r4
        debug_print_state("State2: ", state);
 8004082:	210a      	movs	r1, #10
        cs += c;
 8004084:	f889 3000 	strb.w	r3, [r9]
        debug_print_state("State2: ", state);
 8004088:	f7fe fe92 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800408c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
        temp = c;                     // Bank Number
 8004090:	4a17      	ldr	r2, [pc, #92]	; (80040f0 <CharacterInputThread+0xf20>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004092:	681b      	ldr	r3, [r3, #0]
        temp = c;                     // Bank Number
 8004094:	7014      	strb	r4, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b04      	cmp	r3, #4
 800409a:	f000 813d 	beq.w	8004318 <CharacterInputThread+0x1148>
      chThdSleepMilliseconds(100);
 800409e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040a2:	f7fd ff7d 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80040a6:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	f000 86e4 	beq.w	8004e7c <CharacterInputThread+0x1cac>
      chThdSleepMilliseconds(100);
 80040b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040b8:	f7fd ff72 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80040bc:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	f000 86d9 	beq.w	8004e7c <CharacterInputThread+0x1cac>
        state = BANK_BSn;
 80040ca:	270a      	movs	r7, #10
 80040cc:	f7ff b8ff 	b.w	80032ce <CharacterInputThread+0xfe>
 80040d0:	08009e44 	.word	0x08009e44
 80040d4:	08009dd0 	.word	0x08009dd0
 80040d8:	20001a80 	.word	0x20001a80
 80040dc:	08009ddc 	.word	0x08009ddc
 80040e0:	08009de0 	.word	0x08009de0
 80040e4:	08009dec 	.word	0x08009dec
 80040e8:	20000ef0 	.word	0x20000ef0
 80040ec:	08009e30 	.word	0x08009e30
 80040f0:	20001d78 	.word	0x20001d78
      c=streamGet(&OSTRICHPORT);
 80040f4:	6833      	ldr	r3, [r6, #0]
 80040f6:	4658      	mov	r0, fp
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	4798      	blx	r3
 80040fc:	2320      	movs	r3, #32
 80040fe:	b2c4      	uxtb	r4, r0
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004108:	2300      	movs	r3, #0
 800410a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800410c:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004110:	4542      	cmp	r2, r8
 8004112:	f63f aa0f 	bhi.w	8003534 <CharacterInputThread+0x364>
 8004116:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 800411a:	f108 0808 	add.w	r8, r8, #8
        debug_print_state("Got Checksum: ", state);
 800411e:	48ad      	ldr	r0, [pc, #692]	; (80043d4 <CharacterInputThread+0x1204>)
 8004120:	2100      	movs	r1, #0
 8004122:	f7fe fe45 	bl	8002db0 <debug_print_state>
    chprintf(dbg, "%s %04x\r\n", text, val);
 8004126:	f899 3000 	ldrb.w	r3, [r9]
 800412a:	4aab      	ldr	r2, [pc, #684]	; (80043d8 <CharacterInputThread+0x1208>)
 800412c:	49ab      	ldr	r1, [pc, #684]	; (80043dc <CharacterInputThread+0x120c>)
 800412e:	48ac      	ldr	r0, [pc, #688]	; (80043e0 <CharacterInputThread+0x1210>)
 8004130:	f7fe fbe6 	bl	8002900 <chprintf>
        if (c == cs){                   // B R R + CS
 8004134:	f899 3000 	ldrb.w	r3, [r9]
 8004138:	42a3      	cmp	r3, r4
 800413a:	f040 85de 	bne.w	8004cfa <CharacterInputThread+0x1b2a>
          streamPut(ost, bankrw);
 800413e:	6833      	ldr	r3, [r6, #0]
 8004140:	4aa8      	ldr	r2, [pc, #672]	; (80043e4 <CharacterInputThread+0x1214>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	7811      	ldrb	r1, [r2, #0]
 8004146:	4658      	mov	r0, fp
 8004148:	4798      	blx	r3
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800414a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b04      	cmp	r3, #4
 8004154:	f001 81a5 	beq.w	80054a2 <CharacterInputThread+0x22d2>
      chThdSleepMilliseconds(100);
 8004158:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800415c:	f7fd ff20 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004160:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b04      	cmp	r3, #4
 800416a:	f001 8692 	beq.w	8005e92 <CharacterInputThread+0x2cc2>
      chThdSleepMilliseconds(100);
 800416e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004172:	f7fd ff15 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004176:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b04      	cmp	r3, #4
 8004180:	f001 87e1 	beq.w	8006146 <CharacterInputThread+0x2f76>
      chThdSleepMilliseconds(100);
 8004184:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004188:	f7fd ff0a 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800418c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b04      	cmp	r3, #4
 8004196:	f040 8460 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 800419a:	6833      	ldr	r3, [r6, #0]
 800419c:	4658      	mov	r0, fp
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	4798      	blx	r3
 80041a2:	2320      	movs	r3, #32
 80041a4:	b2c4      	uxtb	r4, r0
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041ae:	2300      	movs	r3, #0
 80041b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041b2:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80041b6:	f7ff b9bd 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80041ba:	6833      	ldr	r3, [r6, #0]
 80041bc:	4658      	mov	r0, fp
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	4798      	blx	r3
 80041c2:	2320      	movs	r3, #32
 80041c4:	b2c4      	uxtb	r4, r0
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041ce:	2300      	movs	r3, #0
 80041d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041d2:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80041d6:	4542      	cmp	r2, r8
 80041d8:	f63f a9ac 	bhi.w	8003534 <CharacterInputThread+0x364>
 80041dc:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 80041e0:	f108 0808 	add.w	r8, r8, #8
        cs += c;
 80041e4:	f899 3000 	ldrb.w	r3, [r9]
        if (c == 'R'){                   // B R R
 80041e8:	2c52      	cmp	r4, #82	; 0x52
        cs += c;
 80041ea:	4423      	add	r3, r4
 80041ec:	f889 3000 	strb.w	r3, [r9]
        if (c == 'R'){                   // B R R
 80041f0:	f000 867a 	beq.w	8004ee8 <CharacterInputThread+0x1d18>
          debug_print_state("Got Number: ", state);
 80041f4:	487c      	ldr	r0, [pc, #496]	; (80043e8 <CharacterInputThread+0x1218>)
 80041f6:	2109      	movs	r1, #9
 80041f8:	f7fe fdda 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80041fc:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
          btemp = c;                     // Bank Number
 8004200:	4a7a      	ldr	r2, [pc, #488]	; (80043ec <CharacterInputThread+0x121c>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004202:	681b      	ldr	r3, [r3, #0]
          btemp = c;                     // Bank Number
 8004204:	7014      	strb	r4, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b04      	cmp	r3, #4
 800420a:	f000 80fb 	beq.w	8004404 <CharacterInputThread+0x1234>
      chThdSleepMilliseconds(100);
 800420e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004212:	f7fd fec5 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004216:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b04      	cmp	r3, #4
 8004220:	f000 80f0 	beq.w	8004404 <CharacterInputThread+0x1234>
      chThdSleepMilliseconds(100);
 8004224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004228:	f7fd feba 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800422c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b04      	cmp	r3, #4
 8004236:	f001 86b6 	beq.w	8005fa6 <CharacterInputThread+0x2dd6>
      chThdSleepMilliseconds(100);
 800423a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800423e:	f7fd feaf 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004242:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b04      	cmp	r3, #4
 800424c:	f001 86ab 	beq.w	8005fa6 <CharacterInputThread+0x2dd6>
          state = BANK_BRn;
 8004250:	2709      	movs	r7, #9
 8004252:	f7ff b83c 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8004256:	6833      	ldr	r3, [r6, #0]
 8004258:	4658      	mov	r0, fp
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	4798      	blx	r3
 800425e:	2320      	movs	r3, #32
 8004260:	b2c4      	uxtb	r4, r0
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800426a:	2300      	movs	r3, #0
 800426c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800426e:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004272:	4542      	cmp	r2, r8
 8004274:	f63f a95e 	bhi.w	8003534 <CharacterInputThread+0x364>
 8004278:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 800427c:	f108 0808 	add.w	r8, r8, #8
            debug_print_state("Got Checksum: ", state);
 8004280:	4854      	ldr	r0, [pc, #336]	; (80043d4 <CharacterInputThread+0x1204>)
 8004282:	2100      	movs	r1, #0
 8004284:	f7fe fd94 	bl	8002db0 <debug_print_state>
    chprintf(dbg, "%s %04x\r\n", text, val);
 8004288:	f899 3000 	ldrb.w	r3, [r9]
 800428c:	4a52      	ldr	r2, [pc, #328]	; (80043d8 <CharacterInputThread+0x1208>)
 800428e:	4953      	ldr	r1, [pc, #332]	; (80043dc <CharacterInputThread+0x120c>)
 8004290:	4853      	ldr	r0, [pc, #332]	; (80043e0 <CharacterInputThread+0x1210>)
 8004292:	f7fe fb35 	bl	8002900 <chprintf>
            if (c == cs){
 8004296:	f899 3000 	ldrb.w	r3, [r9]
 800429a:	42a3      	cmp	r3, r4
 800429c:	f001 84e6 	beq.w	8005c6c <CharacterInputThread+0x2a9c>
              chprintf(dbg, "Checksum ERROR\r\n");
 80042a0:	4953      	ldr	r1, [pc, #332]	; (80043f0 <CharacterInputThread+0x1220>)
 80042a2:	484f      	ldr	r0, [pc, #316]	; (80043e0 <CharacterInputThread+0x1210>)
 80042a4:	f7fe fb2c 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80042a8:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	f000 85cf 	beq.w	8004e54 <CharacterInputThread+0x1c84>
      chThdSleepMilliseconds(100);
 80042b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042ba:	f7fd fe71 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80042be:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	f001 82bb 	beq.w	8005842 <CharacterInputThread+0x2672>
      chThdSleepMilliseconds(100);
 80042cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042d0:	f7fd fe66 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80042d4:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b04      	cmp	r3, #4
 80042de:	f001 868a 	beq.w	8005ff6 <CharacterInputThread+0x2e26>
      chThdSleepMilliseconds(100);
 80042e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042e6:	f7fd fe5b 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80042ea:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	f040 83b1 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 80042f8:	6833      	ldr	r3, [r6, #0]
 80042fa:	4658      	mov	r0, fp
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	4798      	blx	r3
 8004300:	2320      	movs	r3, #32
 8004302:	b2c4      	uxtb	r4, r0
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800430c:	2300      	movs	r3, #0
 800430e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004310:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004314:	f7ff b90e 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8004318:	6833      	ldr	r3, [r6, #0]
 800431a:	4658      	mov	r0, fp
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	4798      	blx	r3
 8004320:	2320      	movs	r3, #32
 8004322:	b2c4      	uxtb	r4, r0
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800432c:	2300      	movs	r3, #0
 800432e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004330:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004334:	4542      	cmp	r2, r8
 8004336:	f63f a8fd 	bhi.w	8003534 <CharacterInputThread+0x364>
 800433a:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 800433e:	f108 0808 	add.w	r8, r8, #8
        debug_print_state("State2: ", state);
 8004342:	482c      	ldr	r0, [pc, #176]	; (80043f4 <CharacterInputThread+0x1224>)
 8004344:	2100      	movs	r1, #0
 8004346:	f7fe fd33 	bl	8002db0 <debug_print_state>
    chprintf(dbg, "%s %04x\r\n", text, val);
 800434a:	f899 3000 	ldrb.w	r3, [r9]
 800434e:	4a22      	ldr	r2, [pc, #136]	; (80043d8 <CharacterInputThread+0x1208>)
 8004350:	4922      	ldr	r1, [pc, #136]	; (80043dc <CharacterInputThread+0x120c>)
 8004352:	4823      	ldr	r0, [pc, #140]	; (80043e0 <CharacterInputThread+0x1210>)
 8004354:	f7fe fad4 	bl	8002900 <chprintf>
        if (c == cs){                   // B S + n + CS
 8004358:	f899 3000 	ldrb.w	r3, [r9]
 800435c:	42a3      	cmp	r3, r4
 800435e:	f040 8439 	bne.w	8004bd4 <CharacterInputThread+0x1a04>
          if (temp <= 8){
 8004362:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <CharacterInputThread+0x1228>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b08      	cmp	r3, #8
 8004368:	f201 80bb 	bhi.w	80054e2 <CharacterInputThread+0x2312>
            bankemp = temp;
 800436c:	4a23      	ldr	r2, [pc, #140]	; (80043fc <CharacterInputThread+0x122c>)
            chprintf(ost, "O");
 800436e:	4924      	ldr	r1, [pc, #144]	; (8004400 <CharacterInputThread+0x1230>)
            bankemp = temp;
 8004370:	7013      	strb	r3, [r2, #0]
            chprintf(ost, "O");
 8004372:	4658      	mov	r0, fp
 8004374:	f7fe fac4 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004378:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b04      	cmp	r3, #4
 8004382:	f001 8546 	beq.w	8005e12 <CharacterInputThread+0x2c42>
      chThdSleepMilliseconds(100);
 8004386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800438a:	f7fd fe09 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800438e:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b04      	cmp	r3, #4
 8004398:	f001 8738 	beq.w	800620c <CharacterInputThread+0x303c>
      chThdSleepMilliseconds(100);
 800439c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043a0:	f7fd fdfe 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80043a4:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	f040 8354 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 80043b2:	6833      	ldr	r3, [r6, #0]
 80043b4:	4658      	mov	r0, fp
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	4798      	blx	r3
 80043ba:	2320      	movs	r3, #32
 80043bc:	b2c4      	uxtb	r4, r0
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80043c6:	2300      	movs	r3, #0
 80043c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ca:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80043ce:	f7ff b8b1 	b.w	8003534 <CharacterInputThread+0x364>
 80043d2:	bf00      	nop
 80043d4:	08009ddc 	.word	0x08009ddc
 80043d8:	08009de0 	.word	0x08009de0
 80043dc:	08009dec 	.word	0x08009dec
 80043e0:	20000ef0 	.word	0x20000ef0
 80043e4:	200018cb 	.word	0x200018cb
 80043e8:	08009ee8 	.word	0x08009ee8
 80043ec:	200018cc 	.word	0x200018cc
 80043f0:	08009e30 	.word	0x08009e30
 80043f4:	08009dd0 	.word	0x08009dd0
 80043f8:	20001d78 	.word	0x20001d78
 80043fc:	200018c9 	.word	0x200018c9
 8004400:	08009e2c 	.word	0x08009e2c
      c=streamGet(&OSTRICHPORT);
 8004404:	6833      	ldr	r3, [r6, #0]
 8004406:	4658      	mov	r0, fp
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	4798      	blx	r3
 800440c:	2320      	movs	r3, #32
 800440e:	b2c4      	uxtb	r4, r0
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004418:	2300      	movs	r3, #0
 800441a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800441c:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004420:	4542      	cmp	r2, r8
 8004422:	f63f a887 	bhi.w	8003534 <CharacterInputThread+0x364>
 8004426:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 800442a:	f108 0808 	add.w	r8, r8, #8
        debug_print_state("Got Checksum: ", state);
 800442e:	48c0      	ldr	r0, [pc, #768]	; (8004730 <CharacterInputThread+0x1560>)
 8004430:	2100      	movs	r1, #0
 8004432:	f7fe fcbd 	bl	8002db0 <debug_print_state>
        if (c == cs){                   // B R + n + CS
 8004436:	f899 3000 	ldrb.w	r3, [r9]
 800443a:	42a3      	cmp	r3, r4
 800443c:	f040 842c 	bne.w	8004c98 <CharacterInputThread+0x1ac8>
          if (btemp <= 8){
 8004440:	4bbc      	ldr	r3, [pc, #752]	; (8004734 <CharacterInputThread+0x1564>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b08      	cmp	r3, #8
 8004446:	f201 80ae 	bhi.w	80055a6 <CharacterInputThread+0x23d6>
            bankrw = btemp;
 800444a:	4abb      	ldr	r2, [pc, #748]	; (8004738 <CharacterInputThread+0x1568>)
            chprintf(ost, "O");
 800444c:	49bb      	ldr	r1, [pc, #748]	; (800473c <CharacterInputThread+0x156c>)
            bankrw = btemp;
 800444e:	7013      	strb	r3, [r2, #0]
 8004450:	4614      	mov	r4, r2
            chprintf(ost, "O");
 8004452:	4658      	mov	r0, fp
 8004454:	f7fe fa54 	bl	8002900 <chprintf>
              chprintf(dbg, "Changed RW Bank to %i\r\n", bankrw);
 8004458:	7822      	ldrb	r2, [r4, #0]
 800445a:	49b9      	ldr	r1, [pc, #740]	; (8004740 <CharacterInputThread+0x1570>)
 800445c:	48b9      	ldr	r0, [pc, #740]	; (8004744 <CharacterInputThread+0x1574>)
 800445e:	f7fe fa4f 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004462:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b04      	cmp	r3, #4
 800446c:	f001 84e1 	beq.w	8005e32 <CharacterInputThread+0x2c62>
      chThdSleepMilliseconds(100);
 8004470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004474:	f7fd fd94 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004478:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b04      	cmp	r3, #4
 8004482:	f001 86d3 	beq.w	800622c <CharacterInputThread+0x305c>
      chThdSleepMilliseconds(100);
 8004486:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800448a:	f7fd fd89 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800448e:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b04      	cmp	r3, #4
 8004498:	f001 879d 	beq.w	80063d6 <CharacterInputThread+0x3206>
      chThdSleepMilliseconds(100);
 800449c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044a0:	f7fd fd7e 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80044a4:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	f040 82d4 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 80044b2:	6833      	ldr	r3, [r6, #0]
 80044b4:	4658      	mov	r0, fp
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	4798      	blx	r3
 80044ba:	2320      	movs	r3, #32
 80044bc:	b2c4      	uxtb	r4, r0
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044c6:	2300      	movs	r3, #0
 80044c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044ca:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80044ce:	f7ff b831 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80044d2:	6833      	ldr	r3, [r6, #0]
 80044d4:	4658      	mov	r0, fp
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	4798      	blx	r3
 80044da:	2320      	movs	r3, #32
 80044dc:	b2c4      	uxtb	r4, r0
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044e6:	2300      	movs	r3, #0
 80044e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044ea:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80044ee:	4542      	cmp	r2, r8
 80044f0:	f63f a820 	bhi.w	8003534 <CharacterInputThread+0x364>
 80044f4:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 80044f8:	f108 0808 	add.w	r8, r8, #8
        debug_print_state("State3: ", state);
 80044fc:	4892      	ldr	r0, [pc, #584]	; (8004748 <CharacterInputThread+0x1578>)
 80044fe:	2100      	movs	r1, #0
 8004500:	f7fe fc56 	bl	8002db0 <debug_print_state>
    chprintf(dbg, "%s %04x\r\n", text, val);
 8004504:	f899 3000 	ldrb.w	r3, [r9]
 8004508:	4a90      	ldr	r2, [pc, #576]	; (800474c <CharacterInputThread+0x157c>)
 800450a:	4991      	ldr	r1, [pc, #580]	; (8004750 <CharacterInputThread+0x1580>)
 800450c:	488d      	ldr	r0, [pc, #564]	; (8004744 <CharacterInputThread+0x1574>)
 800450e:	f7fe f9f7 	bl	8002900 <chprintf>
        if (c == cs){                   // B E E + CS
 8004512:	f899 3000 	ldrb.w	r3, [r9]
 8004516:	42a3      	cmp	r3, r4
 8004518:	f040 842b 	bne.w	8004d72 <CharacterInputThread+0x1ba2>
          streamPut(ost, bankemv);
 800451c:	6833      	ldr	r3, [r6, #0]
 800451e:	4a8d      	ldr	r2, [pc, #564]	; (8004754 <CharacterInputThread+0x1584>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	7811      	ldrb	r1, [r2, #0]
 8004524:	4658      	mov	r0, fp
 8004526:	4798      	blx	r3
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004528:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b04      	cmp	r3, #4
 8004532:	f001 8069 	beq.w	8005608 <CharacterInputThread+0x2438>
      chThdSleepMilliseconds(100);
 8004536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800453a:	f7fd fd31 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800453e:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b04      	cmp	r3, #4
 8004548:	f001 84d3 	beq.w	8005ef2 <CharacterInputThread+0x2d22>
      chThdSleepMilliseconds(100);
 800454c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004550:	f7fd fd26 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004554:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b04      	cmp	r3, #4
 800455e:	f040 827c 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8004562:	6833      	ldr	r3, [r6, #0]
 8004564:	4658      	mov	r0, fp
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	4798      	blx	r3
 800456a:	2320      	movs	r3, #32
 800456c:	b2c4      	uxtb	r4, r0
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004576:	2300      	movs	r3, #0
 8004578:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800457a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800457e:	f7fe bfd9 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8004582:	6833      	ldr	r3, [r6, #0]
 8004584:	4658      	mov	r0, fp
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	4798      	blx	r3
 800458a:	2320      	movs	r3, #32
 800458c:	b2c4      	uxtb	r4, r0
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004596:	2300      	movs	r3, #0
 8004598:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800459a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800459e:	4542      	cmp	r2, r8
 80045a0:	f63e afc8 	bhi.w	8003534 <CharacterInputThread+0x364>
 80045a4:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 80045a8:	f108 0808 	add.w	r8, r8, #8
        cs += c;
 80045ac:	f899 3000 	ldrb.w	r3, [r9]
        if ((c == 'E') || (c == 'R')){                   // B E E or B E R
 80045b0:	2c45      	cmp	r4, #69	; 0x45
        cs += c;
 80045b2:	4423      	add	r3, r4
 80045b4:	f889 3000 	strb.w	r3, [r9]
        if ((c == 'E') || (c == 'R')){                   // B E E or B E R
 80045b8:	f000 8412 	beq.w	8004de0 <CharacterInputThread+0x1c10>
 80045bc:	2c52      	cmp	r4, #82	; 0x52
 80045be:	f000 840f 	beq.w	8004de0 <CharacterInputThread+0x1c10>
        else if (c == 'S'){                                       // B E S
 80045c2:	2c53      	cmp	r4, #83	; 0x53
 80045c4:	f001 8260 	beq.w	8005a88 <CharacterInputThread+0x28b8>
          debug_print_state("State2: ", state);
 80045c8:	4863      	ldr	r0, [pc, #396]	; (8004758 <CharacterInputThread+0x1588>)
 80045ca:	210b      	movs	r1, #11
 80045cc:	f7fe fbf0 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80045d0:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
          temp = c;                     // Bank Number
 80045d4:	4a61      	ldr	r2, [pc, #388]	; (800475c <CharacterInputThread+0x158c>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80045d6:	681b      	ldr	r3, [r3, #0]
          temp = c;                     // Bank Number
 80045d8:	7014      	strb	r4, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b04      	cmp	r3, #4
 80045de:	f000 81a9 	beq.w	8004934 <CharacterInputThread+0x1764>
      chThdSleepMilliseconds(100);
 80045e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045e6:	f7fd fcdb 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80045ea:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	f001 83ca 	beq.w	8005d8c <CharacterInputThread+0x2bbc>
      chThdSleepMilliseconds(100);
 80045f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045fc:	f7fd fcd0 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004600:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b04      	cmp	r3, #4
 800460a:	f001 83bf 	beq.w	8005d8c <CharacterInputThread+0x2bbc>
          state = BANK_BEn;
 800460e:	270b      	movs	r7, #11
 8004610:	f7fe be5d 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8004614:	6833      	ldr	r3, [r6, #0]
 8004616:	4658      	mov	r0, fp
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	4798      	blx	r3
 800461c:	2320      	movs	r3, #32
 800461e:	b2c4      	uxtb	r4, r0
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004628:	2300      	movs	r3, #0
 800462a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800462c:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004630:	4542      	cmp	r2, r8
          cntdwn = 0;
 8004632:	930a      	str	r3, [sp, #40]	; 0x28
      if (start > end){
 8004634:	f63e af7e 	bhi.w	8003534 <CharacterInputThread+0x364>
 8004638:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 800463c:	f108 0808 	add.w	r8, r8, #8
          cs += c;
 8004640:	f899 3000 	ldrb.w	r3, [r9]
          debug_print_state("State2: ", state);
 8004644:	4844      	ldr	r0, [pc, #272]	; (8004758 <CharacterInputThread+0x1588>)
          cs += c;
 8004646:	4423      	add	r3, r4
          debug_print_state("State2: ", state);
 8004648:	2112      	movs	r1, #18
          cs += c;
 800464a:	f889 3000 	strb.w	r3, [r9]
          debug_print_state("State2: ", state);
 800464e:	f7fe fbaf 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004652:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
          address *= 256;
 800465a:	0222      	lsls	r2, r4, #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800465c:	2b04      	cmp	r3, #4
          address *= 256;
 800465e:	9209      	str	r2, [sp, #36]	; 0x24
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004660:	f43f ac8b 	beq.w	8003f7a <CharacterInputThread+0xdaa>
          state = WRITE_nML;
 8004664:	2712      	movs	r7, #18
 8004666:	f7fe be32 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 800466a:	6833      	ldr	r3, [r6, #0]
 800466c:	4658      	mov	r0, fp
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	4798      	blx	r3
 8004672:	2320      	movs	r3, #32
 8004674:	b2c4      	uxtb	r4, r0
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800467e:	2300      	movs	r3, #0
 8004680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004682:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004686:	4590      	cmp	r8, r2
 8004688:	f4fe af54 	bcc.w	8003534 <CharacterInputThread+0x364>
 800468c:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8004690:	f108 0808 	add.w	r8, r8, #8
        cs += c;
 8004694:	f899 3000 	ldrb.w	r3, [r9]
 8004698:	2c52      	cmp	r4, #82	; 0x52
 800469a:	4423      	add	r3, r4
 800469c:	f889 3000 	strb.w	r3, [r9]
        switch (c){
 80046a0:	f001 8040 	beq.w	8005724 <CharacterInputThread+0x2554>
 80046a4:	2c53      	cmp	r4, #83	; 0x53
 80046a6:	f001 800e 	beq.w	80056c6 <CharacterInputThread+0x24f6>
 80046aa:	2c45      	cmp	r4, #69	; 0x45
 80046ac:	f000 87dc 	beq.w	8005668 <CharacterInputThread+0x2498>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80046b0:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	f001 8451 	beq.w	8005f60 <CharacterInputThread+0x2d90>
      chThdSleepMilliseconds(100);
 80046be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046c2:	f7fd fc6d 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80046c6:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	f041 8536 	bne.w	8006140 <CharacterInputThread+0x2f70>
      c=streamGet(&OSTRICHPORT);
 80046d4:	6833      	ldr	r3, [r6, #0]
 80046d6:	4658      	mov	r0, fp
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	4798      	blx	r3
 80046dc:	2320      	movs	r3, #32
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80046e6:	2300      	movs	r3, #0
 80046e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046ea:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80046ee:	4542      	cmp	r2, r8
 80046f0:	d902      	bls.n	80046f8 <CharacterInputThread+0x1528>
      c=streamGet(&OSTRICHPORT);
 80046f2:	b2c4      	uxtb	r4, r0
 80046f4:	f7fe bf1e 	b.w	8003534 <CharacterInputThread+0x364>
 80046f8:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 80046fc:	f108 0808 	add.w	r8, r8, #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004700:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b04      	cmp	r3, #4
 800470a:	f040 81a6 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 800470e:	6833      	ldr	r3, [r6, #0]
 8004710:	4658      	mov	r0, fp
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	4798      	blx	r3
 8004716:	2320      	movs	r3, #32
 8004718:	b2c4      	uxtb	r4, r0
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004722:	2300      	movs	r3, #0
 8004724:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004726:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800472a:	f7fe bf03 	b.w	8003534 <CharacterInputThread+0x364>
 800472e:	bf00      	nop
 8004730:	08009ddc 	.word	0x08009ddc
 8004734:	200018cc 	.word	0x200018cc
 8004738:	200018cb 	.word	0x200018cb
 800473c:	08009e2c 	.word	0x08009e2c
 8004740:	08009ef8 	.word	0x08009ef8
 8004744:	20000ef0 	.word	0x20000ef0
 8004748:	08009e44 	.word	0x08009e44
 800474c:	08009de0 	.word	0x08009de0
 8004750:	08009dec 	.word	0x08009dec
 8004754:	200018ca 	.word	0x200018ca
 8004758:	08009dd0 	.word	0x08009dd0
 800475c:	20001d78 	.word	0x20001d78
      c=streamGet(&OSTRICHPORT);
 8004760:	6833      	ldr	r3, [r6, #0]
 8004762:	4658      	mov	r0, fp
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	4798      	blx	r3
 8004768:	2320      	movs	r3, #32
 800476a:	b2c4      	uxtb	r4, r0
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004774:	2300      	movs	r3, #0
 8004776:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004778:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800477c:	4542      	cmp	r2, r8
 800477e:	f63e aed9 	bhi.w	8003534 <CharacterInputThread+0x364>
 8004782:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8004786:	f108 0808 	add.w	r8, r8, #8
        debug_print_state("State2: ", state);
 800478a:	48ca      	ldr	r0, [pc, #808]	; (8004ab4 <CharacterInputThread+0x18e4>)
 800478c:	2100      	movs	r1, #0
 800478e:	f7fe fb0f 	bl	8002db0 <debug_print_state>
    chprintf(dbg, "%s %04x\r\n", text, val);
 8004792:	f899 3000 	ldrb.w	r3, [r9]
 8004796:	4ac8      	ldr	r2, [pc, #800]	; (8004ab8 <CharacterInputThread+0x18e8>)
 8004798:	49c8      	ldr	r1, [pc, #800]	; (8004abc <CharacterInputThread+0x18ec>)
 800479a:	48c9      	ldr	r0, [pc, #804]	; (8004ac0 <CharacterInputThread+0x18f0>)
 800479c:	f7fe f8b0 	bl	8002900 <chprintf>
        if (c == cs){                   // B E S + CS
 80047a0:	f899 3000 	ldrb.w	r3, [r9]
 80047a4:	42a3      	cmp	r3, r4
 80047a6:	f040 81e4 	bne.w	8004b72 <CharacterInputThread+0x19a2>
          streamPut(ost, bankemp);
 80047aa:	6833      	ldr	r3, [r6, #0]
 80047ac:	4ac5      	ldr	r2, [pc, #788]	; (8004ac4 <CharacterInputThread+0x18f4>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	7811      	ldrb	r1, [r2, #0]
 80047b2:	4658      	mov	r0, fp
 80047b4:	4798      	blx	r3
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80047b6:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b04      	cmp	r3, #4
 80047c0:	f000 867f 	beq.w	80054c2 <CharacterInputThread+0x22f2>
      chThdSleepMilliseconds(100);
 80047c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047c8:	f7fd fbea 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80047cc:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	f001 839c 	beq.w	8005f12 <CharacterInputThread+0x2d42>
      chThdSleepMilliseconds(100);
 80047da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047de:	f7fd fbdf 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80047e2:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	f040 8135 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 80047f0:	6833      	ldr	r3, [r6, #0]
 80047f2:	4658      	mov	r0, fp
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	4798      	blx	r3
 80047f8:	2320      	movs	r3, #32
 80047fa:	b2c4      	uxtb	r4, r0
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004804:	2300      	movs	r3, #0
 8004806:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004808:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800480c:	f7fe be92 	b.w	8003534 <CharacterInputThread+0x364>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004810:	681b      	ldr	r3, [r3, #0]
              count = (uint16_t)c;
 8004812:	4aad      	ldr	r2, [pc, #692]	; (8004ac8 <CharacterInputThread+0x18f8>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004814:	781b      	ldrb	r3, [r3, #0]
              count = (uint16_t)c;
 8004816:	8014      	strh	r4, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004818:	2b04      	cmp	r3, #4
 800481a:	f47f aaba 	bne.w	8003d92 <CharacterInputThread+0xbc2>
      c=streamGet(&OSTRICHPORT);
 800481e:	6833      	ldr	r3, [r6, #0]
 8004820:	4658      	mov	r0, fp
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	4798      	blx	r3
 8004826:	2320      	movs	r3, #32
 8004828:	b2c4      	uxtb	r4, r0
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004832:	2300      	movs	r3, #0
 8004834:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004836:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800483a:	4542      	cmp	r2, r8
 800483c:	f63e ae7a 	bhi.w	8003534 <CharacterInputThread+0x364>
 8004840:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 8004844:	f108 0808 	add.w	r8, r8, #8
            cs += c;
 8004848:	f899 3000 	ldrb.w	r3, [r9]
            debug_print_state("State2: ", state);
 800484c:	4899      	ldr	r0, [pc, #612]	; (8004ab4 <CharacterInputThread+0x18e4>)
            cs += c;
 800484e:	4423      	add	r3, r4
            debug_print_state("State2: ", state);
 8004850:	211c      	movs	r1, #28
            cs += c;
 8004852:	f889 3000 	strb.w	r3, [r9]
            debug_print_state("State2: ", state);
 8004856:	f7fe faab 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800485a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
            bank = c;
 800485e:	4a9b      	ldr	r2, [pc, #620]	; (8004acc <CharacterInputThread+0x18fc>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004860:	681b      	ldr	r3, [r3, #0]
            bank = c;
 8004862:	7014      	strb	r4, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004864:	781b      	ldrb	r3, [r3, #0]
            address = (int32_t)c * 65536;
 8004866:	0422      	lsls	r2, r4, #16
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004868:	2b04      	cmp	r3, #4
            address = (int32_t)c * 65536;
 800486a:	9209      	str	r2, [sp, #36]	; 0x24
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800486c:	f43f a93d 	beq.w	8003aea <CharacterInputThread+0x91a>
      chThdSleepMilliseconds(100);
 8004870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004874:	f7fd fb94 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004878:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b04      	cmp	r3, #4
 8004882:	f43f a932 	beq.w	8003aea <CharacterInputThread+0x91a>
      chThdSleepMilliseconds(100);
 8004886:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800488a:	f7fd fb89 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800488e:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b04      	cmp	r3, #4
 8004898:	f001 809a 	beq.w	80059d0 <CharacterInputThread+0x2800>
      chThdSleepMilliseconds(100);
 800489c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048a0:	f7fd fb7e 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80048a4:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	f001 808f 	beq.w	80059d0 <CharacterInputThread+0x2800>
            state = BULK_ZRnBM;
 80048b2:	271c      	movs	r7, #28
 80048b4:	f7fe bd0b 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 80048b8:	6833      	ldr	r3, [r6, #0]
 80048ba:	4658      	mov	r0, fp
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	4798      	blx	r3
 80048c0:	2320      	movs	r3, #32
 80048c2:	b2c4      	uxtb	r4, r0
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80048cc:	2300      	movs	r3, #0
 80048ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048d0:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80048d4:	4590      	cmp	r8, r2
 80048d6:	f4fe ae2d 	bcc.w	8003534 <CharacterInputThread+0x364>
 80048da:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 80048de:	f108 0808 	add.w	r8, r8, #8
        cs += c;
 80048e2:	f899 3000 	ldrb.w	r3, [r9]
        debug_print_state("Got Header: ", state);
 80048e6:	487a      	ldr	r0, [pc, #488]	; (8004ad0 <CharacterInputThread+0x1900>)
        cs += c;
 80048e8:	441c      	add	r4, r3
        debug_print_state("Got Header: ", state);
 80048ea:	210d      	movs	r1, #13
        cs += c;
 80048ec:	f889 4000 	strb.w	r4, [r9]
        debug_print_state("Got Header: ", state);
 80048f0:	f7fe fa5e 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80048f4:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	f43f aae6 	beq.w	8003ece <CharacterInputThread+0xcfe>
      chThdSleepMilliseconds(100);
 8004902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004906:	f7fd fb4b 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800490a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b04      	cmp	r3, #4
 8004914:	f43f aadb 	beq.w	8003ece <CharacterInputThread+0xcfe>
      chThdSleepMilliseconds(100);
 8004918:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800491c:	f7fd fb40 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004920:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b04      	cmp	r3, #4
 800492a:	f43f aad0 	beq.w	8003ece <CharacterInputThread+0xcfe>
        state = BAUD_Sn;
 800492e:	270d      	movs	r7, #13
 8004930:	f7fe bccd 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8004934:	6833      	ldr	r3, [r6, #0]
 8004936:	4658      	mov	r0, fp
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	4798      	blx	r3
 800493c:	2320      	movs	r3, #32
 800493e:	b2c4      	uxtb	r4, r0
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004948:	2300      	movs	r3, #0
 800494a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800494c:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004950:	4542      	cmp	r2, r8
 8004952:	f63e adef 	bhi.w	8003534 <CharacterInputThread+0x364>
 8004956:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 800495a:	f108 0808 	add.w	r8, r8, #8
        debug_print_state("State2: ", state);
 800495e:	4855      	ldr	r0, [pc, #340]	; (8004ab4 <CharacterInputThread+0x18e4>)
 8004960:	2100      	movs	r1, #0
 8004962:	f7fe fa25 	bl	8002db0 <debug_print_state>
        if (c == cs){                   // B E + n + CS
 8004966:	f899 3000 	ldrb.w	r3, [r9]
 800496a:	42a3      	cmp	r3, r4
 800496c:	f040 8163 	bne.w	8004c36 <CharacterInputThread+0x1a66>
          if (temp <= 8){
 8004970:	4b58      	ldr	r3, [pc, #352]	; (8004ad4 <CharacterInputThread+0x1904>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b08      	cmp	r3, #8
 8004976:	f200 85e5 	bhi.w	8005544 <CharacterInputThread+0x2374>
            bankemv = temp;
 800497a:	4a57      	ldr	r2, [pc, #348]	; (8004ad8 <CharacterInputThread+0x1908>)
            chprintf(ost, "O");
 800497c:	4957      	ldr	r1, [pc, #348]	; (8004adc <CharacterInputThread+0x190c>)
            bankemv = temp;
 800497e:	7013      	strb	r3, [r2, #0]
            chprintf(ost, "O");
 8004980:	4658      	mov	r0, fp
 8004982:	f7fd ffbd 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004986:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b04      	cmp	r3, #4
 8004990:	f001 820f 	beq.w	8005db2 <CharacterInputThread+0x2be2>
      chThdSleepMilliseconds(100);
 8004994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004998:	f7fd fb02 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800499c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	f001 8451 	beq.w	800624c <CharacterInputThread+0x307c>
      chThdSleepMilliseconds(100);
 80049aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049ae:	f7fd faf7 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80049b2:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d14d      	bne.n	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 80049be:	6833      	ldr	r3, [r6, #0]
 80049c0:	4658      	mov	r0, fp
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	4798      	blx	r3
 80049c6:	2320      	movs	r3, #32
 80049c8:	b2c4      	uxtb	r4, r0
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80049d2:	2300      	movs	r3, #0
 80049d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049d6:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80049da:	f7fe bdab 	b.w	8003534 <CharacterInputThread+0x364>
 80049de:	f502 589c 	add.w	r8, r2, #4992	; 0x1380
 80049e2:	f108 0808 	add.w	r8, r8, #8
        tbuf[cntdwn++] = c;
 80049e6:	950a      	str	r5, [sp, #40]	; 0x28
        debug_print_state("State3: ", state);
 80049e8:	483d      	ldr	r0, [pc, #244]	; (8004ae0 <CharacterInputThread+0x1910>)
 80049ea:	2125      	movs	r1, #37	; 0x25
 80049ec:	f7fe f9e0 	bl	8002db0 <debug_print_state>
        if (c == cs){
 80049f0:	f899 3000 	ldrb.w	r3, [r9]
 80049f4:	42a3      	cmp	r3, r4
 80049f6:	f000 8337 	beq.w	8005068 <CharacterInputThread+0x1e98>
          chprintf(dbg, "Checksum ERROR\r\n");
 80049fa:	493a      	ldr	r1, [pc, #232]	; (8004ae4 <CharacterInputThread+0x1914>)
 80049fc:	4830      	ldr	r0, [pc, #192]	; (8004ac0 <CharacterInputThread+0x18f0>)
 80049fe:	f7fd ff7f 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004a02:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	f000 830d 	beq.w	800502a <CharacterInputThread+0x1e5a>
      chThdSleepMilliseconds(100);
 8004a10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a14:	f7fd fac4 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004a18:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	f001 8084 	beq.w	8005b2e <CharacterInputThread+0x295e>
      chThdSleepMilliseconds(100);
 8004a26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a2a:	f7fd fab9 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004a2e:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d10f      	bne.n	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8004a3a:	6833      	ldr	r3, [r6, #0]
 8004a3c:	4658      	mov	r0, fp
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	4798      	blx	r3
 8004a42:	2320      	movs	r3, #32
 8004a44:	b2c4      	uxtb	r4, r0
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a4e:	2300      	movs	r3, #0
 8004a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a52:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004a56:	f7fe bd6d 	b.w	8003534 <CharacterInputThread+0x364>
        state = IDLE;
 8004a5a:	2700      	movs	r7, #0
 8004a5c:	f7fe bc37 	b.w	80032ce <CharacterInputThread+0xfe>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004a60:	950a      	str	r5, [sp, #40]	; 0x28
 8004a62:	2713      	movs	r7, #19
 8004a64:	f7fe bc33 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8004a68:	6833      	ldr	r3, [r6, #0]
 8004a6a:	4658      	mov	r0, fp
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	4798      	blx	r3
 8004a70:	2320      	movs	r3, #32
 8004a72:	b2c4      	uxtb	r4, r0
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a80:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004a84:	4542      	cmp	r2, r8
        cntdwn = 0;
 8004a86:	930a      	str	r3, [sp, #40]	; 0x28
      if (start > end){
 8004a88:	f63e ad54 	bhi.w	8003534 <CharacterInputThread+0x364>
 8004a8c:	f7fe be2b 	b.w	80036e6 <CharacterInputThread+0x516>
      c=streamGet(&OSTRICHPORT);
 8004a90:	6833      	ldr	r3, [r6, #0]
 8004a92:	4658      	mov	r0, fp
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	4798      	blx	r3
 8004a98:	2320      	movs	r3, #32
 8004a9a:	b2c4      	uxtb	r4, r0
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aa6:	f385 8811 	msr	BASEPRI, r5
      if (start > end){
 8004aaa:	4542      	cmp	r2, r8
 8004aac:	f63e ad42 	bhi.w	8003534 <CharacterInputThread+0x364>
 8004ab0:	f7fe bf16 	b.w	80038e0 <CharacterInputThread+0x710>
 8004ab4:	08009dd0 	.word	0x08009dd0
 8004ab8:	08009de0 	.word	0x08009de0
 8004abc:	08009dec 	.word	0x08009dec
 8004ac0:	20000ef0 	.word	0x20000ef0
 8004ac4:	200018c9 	.word	0x200018c9
 8004ac8:	20001a80 	.word	0x20001a80
 8004acc:	200018c8 	.word	0x200018c8
 8004ad0:	08009ed8 	.word	0x08009ed8
 8004ad4:	20001d78 	.word	0x20001d78
 8004ad8:	200018ca 	.word	0x200018ca
 8004adc:	08009e2c 	.word	0x08009e2c
 8004ae0:	08009e44 	.word	0x08009e44
 8004ae4:	08009e30 	.word	0x08009e30
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004ae8:	681b      	ldr	r3, [r3, #0]
            count = (uint16_t)c;
 8004aea:	4aba      	ldr	r2, [pc, #744]	; (8004dd4 <CharacterInputThread+0x1c04>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004aec:	781b      	ldrb	r3, [r3, #0]
            count = (uint16_t)c;
 8004aee:	8014      	strh	r4, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	f43f a8f8 	beq.w	8003ce6 <CharacterInputThread+0xb16>
          state = READ_nM;
 8004af6:	2716      	movs	r7, #22
 8004af8:	f7fe bbe9 	b.w	80032ce <CharacterInputThread+0xfe>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004afc:	681b      	ldr	r3, [r3, #0]
            count = (uint16_t)c;
 8004afe:	4ab5      	ldr	r2, [pc, #724]	; (8004dd4 <CharacterInputThread+0x1c04>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004b00:	781b      	ldrb	r3, [r3, #0]
            count = (uint16_t)c;
 8004b02:	8014      	strh	r4, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	f43f ad85 	beq.w	8004614 <CharacterInputThread+0x1444>
          cntdwn = 0;
 8004b0a:	2300      	movs	r3, #0
          state = WRITE_nM;
 8004b0c:	2711      	movs	r7, #17
          cntdwn = 0;
 8004b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8004b10:	f7fe bbdd 	b.w	80032ce <CharacterInputThread+0xfe>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004b14:	681b      	ldr	r3, [r3, #0]
              count = (uint16_t)c;
 8004b16:	4aaf      	ldr	r2, [pc, #700]	; (8004dd4 <CharacterInputThread+0x1c04>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004b18:	781b      	ldrb	r3, [r3, #0]
              count = (uint16_t)c;
 8004b1a:	8014      	strh	r4, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	f43e af12 	beq.w	8003946 <CharacterInputThread+0x776>
      chThdSleepMilliseconds(100);
 8004b22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b26:	f7fd fa3b 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004b2a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d00a      	beq.n	8004b4c <CharacterInputThread+0x197c>
      chThdSleepMilliseconds(100);
 8004b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b3a:	f7fd fa31 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004b3e:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	f47f a89e 	bne.w	8003c88 <CharacterInputThread+0xab8>
      c=streamGet(&OSTRICHPORT);
 8004b4c:	6833      	ldr	r3, [r6, #0]
 8004b4e:	4658      	mov	r0, fp
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	4798      	blx	r3
 8004b54:	2320      	movs	r3, #32
 8004b56:	b2c4      	uxtb	r4, r0
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b60:	2300      	movs	r3, #0
 8004b62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b64:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004b68:	4590      	cmp	r8, r2
 8004b6a:	f4fe ace3 	bcc.w	8003534 <CharacterInputThread+0x364>
 8004b6e:	f7fe befb 	b.w	8003968 <CharacterInputThread+0x798>
          chprintf(dbg, "Checksum ERROR\r\n");
 8004b72:	4999      	ldr	r1, [pc, #612]	; (8004dd8 <CharacterInputThread+0x1c08>)
 8004b74:	4899      	ldr	r0, [pc, #612]	; (8004ddc <CharacterInputThread+0x1c0c>)
 8004b76:	f7fd fec3 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004b7a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	f000 85fd 	beq.w	8005782 <CharacterInputThread+0x25b2>
      chThdSleepMilliseconds(100);
 8004b88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b8c:	f7fd fa08 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004b90:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	f001 818a 	beq.w	8005eb2 <CharacterInputThread+0x2ce2>
      chThdSleepMilliseconds(100);
 8004b9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ba2:	f7fd f9fd 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004ba6:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	f47f af53 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8004bb4:	6833      	ldr	r3, [r6, #0]
 8004bb6:	4658      	mov	r0, fp
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	4798      	blx	r3
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	b2c4      	uxtb	r4, r0
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bc8:	2300      	movs	r3, #0
 8004bca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bcc:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004bd0:	f7fe bcb0 	b.w	8003534 <CharacterInputThread+0x364>
          chprintf(dbg, "Checksum ERROR\r\n");
 8004bd4:	4980      	ldr	r1, [pc, #512]	; (8004dd8 <CharacterInputThread+0x1c08>)
 8004bd6:	4881      	ldr	r0, [pc, #516]	; (8004ddc <CharacterInputThread+0x1c0c>)
 8004bd8:	f7fd fe92 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004bdc:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	f000 85dc 	beq.w	80057a2 <CharacterInputThread+0x25d2>
      chThdSleepMilliseconds(100);
 8004bea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bee:	f7fd f9d7 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004bf2:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	f001 8169 	beq.w	8005ed2 <CharacterInputThread+0x2d02>
      chThdSleepMilliseconds(100);
 8004c00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c04:	f7fd f9cc 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004c08:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	f47f af22 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8004c16:	6833      	ldr	r3, [r6, #0]
 8004c18:	4658      	mov	r0, fp
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	4798      	blx	r3
 8004c1e:	2320      	movs	r3, #32
 8004c20:	b2c4      	uxtb	r4, r0
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c2e:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004c32:	f7fe bc7f 	b.w	8003534 <CharacterInputThread+0x364>
          chprintf(dbg, "Checksum ERROR\r\n");
 8004c36:	4968      	ldr	r1, [pc, #416]	; (8004dd8 <CharacterInputThread+0x1c08>)
 8004c38:	4868      	ldr	r0, [pc, #416]	; (8004ddc <CharacterInputThread+0x1c0c>)
 8004c3a:	f7fd fe61 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004c3e:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	f000 85bb 	beq.w	80057c2 <CharacterInputThread+0x25f2>
      chThdSleepMilliseconds(100);
 8004c4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c50:	f7fd f9a6 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004c54:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	f001 80f8 	beq.w	8005e52 <CharacterInputThread+0x2c82>
      chThdSleepMilliseconds(100);
 8004c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c66:	f7fd f99b 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004c6a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	f47f aef1 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8004c78:	6833      	ldr	r3, [r6, #0]
 8004c7a:	4658      	mov	r0, fp
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	4798      	blx	r3
 8004c80:	2320      	movs	r3, #32
 8004c82:	b2c4      	uxtb	r4, r0
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c90:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004c94:	f7fe bc4e 	b.w	8003534 <CharacterInputThread+0x364>
          chprintf(dbg, "Checksum ERROR\r\n");
 8004c98:	494f      	ldr	r1, [pc, #316]	; (8004dd8 <CharacterInputThread+0x1c08>)
 8004c9a:	4850      	ldr	r0, [pc, #320]	; (8004ddc <CharacterInputThread+0x1c0c>)
 8004c9c:	f7fd fe30 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004ca0:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	f000 85aa 	beq.w	8005802 <CharacterInputThread+0x2632>
      chThdSleepMilliseconds(100);
 8004cae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cb2:	f7fd f975 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004cb6:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	f001 8161 	beq.w	8005f86 <CharacterInputThread+0x2db6>
      chThdSleepMilliseconds(100);
 8004cc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cc8:	f7fd f96a 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004ccc:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	f47f aec0 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8004cda:	6833      	ldr	r3, [r6, #0]
 8004cdc:	4658      	mov	r0, fp
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	4798      	blx	r3
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	b2c4      	uxtb	r4, r0
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cee:	2300      	movs	r3, #0
 8004cf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cf2:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004cf6:	f7fe bc1d 	b.w	8003534 <CharacterInputThread+0x364>
          chprintf(dbg, "Checksum ERROR\r\n");
 8004cfa:	4937      	ldr	r1, [pc, #220]	; (8004dd8 <CharacterInputThread+0x1c08>)
 8004cfc:	4837      	ldr	r0, [pc, #220]	; (8004ddc <CharacterInputThread+0x1c0c>)
 8004cfe:	f7fd fdff 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004d02:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	f000 8569 	beq.w	80057e2 <CharacterInputThread+0x2612>
      chThdSleepMilliseconds(100);
 8004d10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d14:	f7fd f944 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004d18:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	f001 80a6 	beq.w	8005e72 <CharacterInputThread+0x2ca2>
      chThdSleepMilliseconds(100);
 8004d26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d2a:	f7fd f939 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004d2e:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	f001 8258 	beq.w	80061ec <CharacterInputThread+0x301c>
      chThdSleepMilliseconds(100);
 8004d3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d40:	f7fd f92e 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004d44:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	f47f ae84 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8004d52:	6833      	ldr	r3, [r6, #0]
 8004d54:	4658      	mov	r0, fp
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	4798      	blx	r3
 8004d5a:	2320      	movs	r3, #32
 8004d5c:	b2c4      	uxtb	r4, r0
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d66:	2300      	movs	r3, #0
 8004d68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d6a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004d6e:	f7fe bbe1 	b.w	8003534 <CharacterInputThread+0x364>
          chprintf(dbg, "Checksum ERROR\r\n");
 8004d72:	4919      	ldr	r1, [pc, #100]	; (8004dd8 <CharacterInputThread+0x1c08>)
 8004d74:	4819      	ldr	r0, [pc, #100]	; (8004ddc <CharacterInputThread+0x1c0c>)
 8004d76:	f7fd fdc3 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004d7a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	f000 8450 	beq.w	8005628 <CharacterInputThread+0x2458>
      chThdSleepMilliseconds(100);
 8004d88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d8c:	f7fd f908 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004d90:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	f001 80ca 	beq.w	8005f32 <CharacterInputThread+0x2d62>
      chThdSleepMilliseconds(100);
 8004d9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004da2:	f7fd f8fd 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004da6:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	f47f ae53 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8004db4:	6833      	ldr	r3, [r6, #0]
 8004db6:	4658      	mov	r0, fp
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	4798      	blx	r3
 8004dbc:	2320      	movs	r3, #32
 8004dbe:	b2c4      	uxtb	r4, r0
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004dc8:	2300      	movs	r3, #0
 8004dca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dcc:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004dd0:	f7fe bbb0 	b.w	8003534 <CharacterInputThread+0x364>
 8004dd4:	20001a80 	.word	0x20001a80
 8004dd8:	08009e30 	.word	0x08009e30
 8004ddc:	20000ef0 	.word	0x20000ef0
          debug_print_state("State2: ", state);
 8004de0:	489a      	ldr	r0, [pc, #616]	; (800504c <CharacterInputThread+0x1e7c>)
 8004de2:	2108      	movs	r1, #8
 8004de4:	f7fd ffe4 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004de8:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	f43f ab6e 	beq.w	80044d2 <CharacterInputThread+0x1302>
      chThdSleepMilliseconds(100);
 8004df6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dfa:	f7fd f8d1 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004dfe:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	f000 862b 	beq.w	8005a62 <CharacterInputThread+0x2892>
      chThdSleepMilliseconds(100);
 8004e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e10:	f7fd f8c6 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004e14:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	f000 8620 	beq.w	8005a62 <CharacterInputThread+0x2892>
          state = BANK_BEE;
 8004e22:	2708      	movs	r7, #8
 8004e24:	f7fe ba53 	b.w	80032ce <CharacterInputThread+0xfe>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004e28:	270e      	movs	r7, #14
 8004e2a:	f7fe ba50 	b.w	80032ce <CharacterInputThread+0xfe>
            state = BULK_ZWnBMB;
 8004e2e:	2721      	movs	r7, #33	; 0x21
 8004e30:	f7fe ba4d 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8004e34:	6833      	ldr	r3, [r6, #0]
 8004e36:	4658      	mov	r0, fp
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	4798      	blx	r3
 8004e3c:	2320      	movs	r3, #32
 8004e3e:	b2c4      	uxtb	r4, r0
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e48:	2300      	movs	r3, #0
 8004e4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e4c:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004e50:	f7fe bb70 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8004e54:	6833      	ldr	r3, [r6, #0]
 8004e56:	4658      	mov	r0, fp
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	4798      	blx	r3
 8004e5c:	2320      	movs	r3, #32
 8004e5e:	b2c4      	uxtb	r4, r0
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e68:	2300      	movs	r3, #0
 8004e6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e6c:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004e70:	f7fe bb60 	b.w	8003534 <CharacterInputThread+0x364>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004e74:	950a      	str	r5, [sp, #40]	; 0x28
 8004e76:	2724      	movs	r7, #36	; 0x24
 8004e78:	f7fe ba29 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8004e7c:	6833      	ldr	r3, [r6, #0]
 8004e7e:	4658      	mov	r0, fp
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	4798      	blx	r3
 8004e84:	2320      	movs	r3, #32
 8004e86:	b2c4      	uxtb	r4, r0
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e90:	2300      	movs	r3, #0
 8004e92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e94:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004e98:	4590      	cmp	r8, r2
 8004e9a:	f4fe ab4b 	bcc.w	8003534 <CharacterInputThread+0x364>
 8004e9e:	f7ff ba4c 	b.w	800433a <CharacterInputThread+0x116a>
      c=streamGet(&OSTRICHPORT);
 8004ea2:	6833      	ldr	r3, [r6, #0]
 8004ea4:	4658      	mov	r0, fp
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	4798      	blx	r3
 8004eaa:	2320      	movs	r3, #32
 8004eac:	b2c4      	uxtb	r4, r0
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004eba:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004ebe:	4590      	cmp	r8, r2
 8004ec0:	f4fe ab38 	bcc.w	8003534 <CharacterInputThread+0x364>
 8004ec4:	f7fe bcbf 	b.w	8003846 <CharacterInputThread+0x676>
      c=streamGet(&OSTRICHPORT);
 8004ec8:	6833      	ldr	r3, [r6, #0]
 8004eca:	4658      	mov	r0, fp
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	4798      	blx	r3
 8004ed0:	2320      	movs	r3, #32
 8004ed2:	b2c4      	uxtb	r4, r0
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004edc:	2300      	movs	r3, #0
 8004ede:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ee0:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004ee4:	f7fe bb26 	b.w	8003534 <CharacterInputThread+0x364>
          debug_print_state("Got Header: ", state);
 8004ee8:	4859      	ldr	r0, [pc, #356]	; (8005050 <CharacterInputThread+0x1e80>)
 8004eea:	2104      	movs	r1, #4
 8004eec:	f7fd ff60 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004ef0:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	f43f a8fb 	beq.w	80040f4 <CharacterInputThread+0xf24>
      chThdSleepMilliseconds(100);
 8004efe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f02:	f7fd f84d 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004f06:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	f43f a8f0 	beq.w	80040f4 <CharacterInputThread+0xf24>
      chThdSleepMilliseconds(100);
 8004f14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f18:	f7fd f842 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004f1c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	f001 814e 	beq.w	80061c6 <CharacterInputThread+0x2ff6>
      chThdSleepMilliseconds(100);
 8004f2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f2e:	f7fd f837 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004f32:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	f001 8143 	beq.w	80061c6 <CharacterInputThread+0x2ff6>
          state = BANK_BRR;
 8004f40:	2704      	movs	r7, #4
 8004f42:	f7fe b9c4 	b.w	80032ce <CharacterInputThread+0xfe>
            address += 0x10000*bankrw;
 8004f46:	4b43      	ldr	r3, [pc, #268]	; (8005054 <CharacterInputThread+0x1e84>)
              chprintf(dbg, "Bulk Write (ML): 0x%6X, cnt: %03d, data: 0x%02X\r\n", address, count, tbuf[0]);
 8004f48:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
            address += 0x10000*bankrw;
 8004f4c:	781b      	ldrb	r3, [r3, #0]
              chprintf(dbg, "Bulk Write (ML): 0x%6X, cnt: %03d, data: 0x%02X\r\n", address, count, tbuf[0]);
 8004f4e:	9200      	str	r2, [sp, #0]
            address += 0x10000*bankrw;
 8004f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
              chprintf(dbg, "Bulk Write (ML): 0x%6X, cnt: %03d, data: 0x%02X\r\n", address, count, tbuf[0]);
 8004f52:	4c41      	ldr	r4, [pc, #260]	; (8005058 <CharacterInputThread+0x1e88>)
 8004f54:	4941      	ldr	r1, [pc, #260]	; (800505c <CharacterInputThread+0x1e8c>)
 8004f56:	4842      	ldr	r0, [pc, #264]	; (8005060 <CharacterInputThread+0x1e90>)
            address += 0x10000*bankrw;
 8004f58:	eb02 4303 	add.w	r3, r2, r3, lsl #16
              chprintf(dbg, "Bulk Write (ML): 0x%6X, cnt: %03d, data: 0x%02X\r\n", address, count, tbuf[0]);
 8004f5c:	461a      	mov	r2, r3
            address += 0x10000*bankrw;
 8004f5e:	461d      	mov	r5, r3
 8004f60:	9309      	str	r3, [sp, #36]	; 0x24
              chprintf(dbg, "Bulk Write (ML): 0x%6X, cnt: %03d, data: 0x%02X\r\n", address, count, tbuf[0]);
 8004f62:	8823      	ldrh	r3, [r4, #0]
 8004f64:	f7fd fccc 	bl	8002900 <chprintf>
            write_block(address, count, tbuf, 0);
 8004f68:	8821      	ldrh	r1, [r4, #0]
 8004f6a:	aa14      	add	r2, sp, #80	; 0x50
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f7fd f947 	bl	8002200 <write_block.constprop.0>
            chprintf(ost, "O");
 8004f72:	493c      	ldr	r1, [pc, #240]	; (8005064 <CharacterInputThread+0x1e94>)
 8004f74:	4658      	mov	r0, fp
 8004f76:	f7fd fcc3 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004f7a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	f47f ad69 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8004f88:	6833      	ldr	r3, [r6, #0]
 8004f8a:	4658      	mov	r0, fp
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	4798      	blx	r3
 8004f90:	2320      	movs	r3, #32
 8004f92:	b2c4      	uxtb	r4, r0
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fa0:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004fa4:	f7fe bac6 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8004fa8:	6833      	ldr	r3, [r6, #0]
 8004faa:	4658      	mov	r0, fp
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	4798      	blx	r3
 8004fb0:	2320      	movs	r3, #32
 8004fb2:	b2c4      	uxtb	r4, r0
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fc0:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8004fc4:	f7fe bab6 	b.w	8003534 <CharacterInputThread+0x364>
          chprintf(ost, "O");
 8004fc8:	4926      	ldr	r1, [pc, #152]	; (8005064 <CharacterInputThread+0x1e94>)
 8004fca:	4658      	mov	r0, fp
 8004fcc:	f7fd fc98 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004fd0:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	f000 8598 	beq.w	8005b0e <CharacterInputThread+0x293e>
      chThdSleepMilliseconds(100);
 8004fde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fe2:	f7fc ffdd 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004fe6:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	f001 8025 	beq.w	800603e <CharacterInputThread+0x2e6e>
      chThdSleepMilliseconds(100);
 8004ff4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ff8:	f7fc ffd2 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004ffc:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b04      	cmp	r3, #4
 8005006:	f47f ad28 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 800500a:	6833      	ldr	r3, [r6, #0]
 800500c:	4658      	mov	r0, fp
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	4798      	blx	r3
 8005012:	2320      	movs	r3, #32
 8005014:	b2c4      	uxtb	r4, r0
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800501e:	2300      	movs	r3, #0
 8005020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005022:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005026:	f7fe ba85 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 800502a:	6833      	ldr	r3, [r6, #0]
 800502c:	4658      	mov	r0, fp
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	4798      	blx	r3
 8005032:	2320      	movs	r3, #32
 8005034:	b2c4      	uxtb	r4, r0
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800503e:	2300      	movs	r3, #0
 8005040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005042:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005046:	f7fe ba75 	b.w	8003534 <CharacterInputThread+0x364>
 800504a:	bf00      	nop
 800504c:	08009dd0 	.word	0x08009dd0
 8005050:	08009ed8 	.word	0x08009ed8
 8005054:	200018cb 	.word	0x200018cb
 8005058:	20001a80 	.word	0x20001a80
 800505c:	08009df8 	.word	0x08009df8
 8005060:	20000ef0 	.word	0x20000ef0
 8005064:	08009e2c 	.word	0x08009e2c
            chprintf(dbg, "Config (C): cnt: %03d, data: %02X, %02X, %02X, %02X\r\n", count, tbuf[0], tbuf[1], tbuf[2], tbuf[3]);
 8005068:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
 800506c:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
 8005070:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800507a:	4aa2      	ldr	r2, [pc, #648]	; (8005304 <CharacterInputThread+0x2134>)
 800507c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8005080:	8812      	ldrh	r2, [r2, #0]
 8005082:	49a1      	ldr	r1, [pc, #644]	; (8005308 <CharacterInputThread+0x2138>)
 8005084:	48a1      	ldr	r0, [pc, #644]	; (800530c <CharacterInputThread+0x213c>)
 8005086:	f7fd fc3b 	bl	8002900 <chprintf>

void fill_struct(uint8_t* in, st_configdata_t* out){
  out->_8h  = 0;
  out->_8hm = *in++;
 800508a:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 800508e:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  uint8_t chip, data = 0, no_update = 0;
  uint32_t address = 0;
  st_configdata_t cfdat, nextcf;
  fill_struct(buf, &cfdat);

  TRESET_ACTIVE;
 8005092:	4c9f      	ldr	r4, [pc, #636]	; (8005310 <CharacterInputThread+0x2140>)
  out->_8lm = *in++;
 8005094:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
  out->_8l  = *in++;
 8005098:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  out->_8lm = *in++;
 800509c:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  uint8_t chip, data = 0, no_update = 0;
 80050a0:	f04f 0c00 	mov.w	ip, #0
  TRESET_ACTIVE;
 80050a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
  out->_8l  = *in++;
 80050a8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  out->mask = *in++;
 80050ac:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
  out->cs   = *in++;
 80050b0:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
  uint8_t chip, data = 0, no_update = 0;
 80050b4:	f88d c033 	strb.w	ip, [sp, #51]	; 0x33
  out->_8h  = 0;
 80050b8:	f88d c037 	strb.w	ip, [sp, #55]	; 0x37
  TRESET_ACTIVE;
 80050bc:	8320      	strh	r0, [r4, #24]
  BUS_in_use = 0;
 80050be:	4895      	ldr	r0, [pc, #596]	; (8005314 <CharacterInputThread+0x2144>)
  MRC_ACTIVE;  // Reset '590
 80050c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  BUS_in_use = 0;
 80050c4:	f880 c000 	strb.w	ip, [r0]
  MRC_ACTIVE;  // Reset '590
 80050c8:	4620      	mov	r0, r4
 80050ca:	8361      	strh	r1, [r4, #26]
  __NOP();
 80050cc:	bf00      	nop
  CPR_ACTIVE;
 80050ce:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  MRC_INACTIVE;
 80050d2:	8301      	strh	r1, [r0, #24]
  CPR_ACTIVE;
 80050d4:	8344      	strh	r4, [r0, #26]
  __NOP();
 80050d6:	bf00      	nop
  CPR_INACTIVE;
 80050d8:	990d      	ldr	r1, [sp, #52]	; 0x34
  latch_address();
  CNTOE_ACTIVE;
  if (DEBUGLEVEL >= 2){
    uint8_t* dbgptr = buf;
    do{
      chprintf(dbg, "Address: %08X cs: %02X mask: %02X\r\n", ADDRESS, CHIP, MASK);
 80050da:	4d8f      	ldr	r5, [pc, #572]	; (8005318 <CharacterInputThread+0x2148>)
  CPR_INACTIVE;
 80050dc:	8304      	strh	r4, [r0, #24]
  CNTOE_ACTIVE;
 80050de:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  out->_8h  = 0;
 80050e2:	f8cd c014 	str.w	ip, [sp, #20]
      chprintf(dbg, "Address: %08X cs: %02X mask: %02X\r\n", ADDRESS, CHIP, MASK);
 80050e6:	4f89      	ldr	r7, [pc, #548]	; (800530c <CharacterInputThread+0x213c>)
  CNTOE_ACTIVE;
 80050e8:	f8a0 e01a 	strh.w	lr, [r0, #26]
    uint8_t* dbgptr = buf;
 80050ec:	4608      	mov	r0, r1
 80050ee:	ac14      	add	r4, sp, #80	; 0x50
 80050f0:	4611      	mov	r1, r2
 80050f2:	4602      	mov	r2, r0
      chprintf(dbg, "Address: %08X cs: %02X mask: %02X\r\n", ADDRESS, CHIP, MASK);
 80050f4:	9100      	str	r1, [sp, #0]
 80050f6:	4638      	mov	r0, r7
 80050f8:	4629      	mov	r1, r5
 80050fa:	f7fd fc01 	bl	8002900 <chprintf>
  out->_8hm = *in++;
 80050fe:	7961      	ldrb	r1, [r4, #5]
  out->_8lm = *in++;
 8005100:	79a2      	ldrb	r2, [r4, #6]
  out->_8l  = *in++;
 8005102:	79e3      	ldrb	r3, [r4, #7]
  out->_8h  = 0;
 8005104:	9805      	ldr	r0, [sp, #20]
  out->_8hm = *in++;
 8005106:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
  out->_8l  = *in++;
 800510a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  out->_8h  = 0;
 800510e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  out->_8lm = *in++;
 8005112:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
      dbgptr += 5; // go to next set of values (5 byte forward)
      fill_struct(dbgptr, &cfdat);
    } while(ADDRESS != 0);
 8005116:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  out->cs   = *in++;
 8005118:	7a23      	ldrb	r3, [r4, #8]
  out->mask = *in++;
 800511a:	7a61      	ldrb	r1, [r4, #9]
    } while(ADDRESS != 0);
 800511c:	3405      	adds	r4, #5
 800511e:	2a00      	cmp	r2, #0
 8005120:	d1e8      	bne.n	80050f4 <CharacterInputThread+0x1f24>
  out->_8l  = *in++;
 8005122:	f8bd 0056 	ldrh.w	r0, [sp, #86]	; 0x56
  out->_8hm = *in++;
 8005126:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
  out->_8l  = *in++;
 800512a:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  out->mask = *in++;
 800512e:	f89d 7054 	ldrb.w	r7, [sp, #84]	; 0x54
  out->_8hm = *in++;
 8005132:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  out->_8lm = *in++;
 8005136:	4611      	mov	r1, r2
 8005138:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
  out->_8l  = *in++;
 800513c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  out->cs   = *in++;
 8005140:	f89d 5053 	ldrb.w	r5, [sp, #83]	; 0x53
  out->_8lm = *in++;
 8005144:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  out->_8l  = *in++;
 8005148:	ba40      	rev16	r0, r0
  out->_8hm = *in++;
 800514a:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
  uint32_t address = 0;
 800514e:	9105      	str	r1, [sp, #20]
    fill_struct(buf, &cfdat);
    buf += 5;
    fill_struct(buf, &nextcf);
  }
  if (DEBUGLEVEL >= 2){
    chprintf(dbg, "first event reached @: %06X Poking: %02X into %02X\r\n", ADDRESS, MASK, CHIP);
 8005150:	463b      	mov	r3, r7
  out->_8h  = 0;
 8005152:	f88d 103f 	strb.w	r1, [sp, #63]	; 0x3f
  out->_8l  = *in++;
 8005156:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
    chprintf(dbg, "first event reached @: %06X Poking: %02X into %02X\r\n", ADDRESS, MASK, CHIP);
 800515a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800515c:	496f      	ldr	r1, [pc, #444]	; (800531c <CharacterInputThread+0x214c>)
 800515e:	486b      	ldr	r0, [pc, #428]	; (800530c <CharacterInputThread+0x213c>)
 8005160:	9500      	str	r5, [sp, #0]
  out->_8hm = *in++;
 8005162:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  out->mask = *in++;
 8005166:	9707      	str	r7, [sp, #28]
    chprintf(dbg, "first event reached @: %06X Poking: %02X into %02X\r\n", ADDRESS, MASK, CHIP);
 8005168:	f7fd fbca 	bl	8002900 <chprintf>
    buf += 5;
 800516c:	f10d 0355 	add.w	r3, sp, #85	; 0x55
  uint8_t chip, data = 0, no_update = 0;
 8005170:	9c05      	ldr	r4, [sp, #20]
    buf += 5;
 8005172:	9308      	str	r3, [sp, #32]
 8005174:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
          if (chip == CHIP){ // check if we have to change the value
            data = MASK;
//            select_chip(chip);
            spiSend(SPI_DRIVER, 1, &data);
            latch_data_in();
            if ((address >= 0x9FF0) && (DEBUGLEVEL >= 2) && (address <= 0xA008)){
 8005178:	9b05      	ldr	r3, [sp, #20]
 800517a:	f5a3 431f 	sub.w	r3, r3, #40704	; 0x9f00
 800517e:	3bf0      	subs	r3, #240	; 0xf0
 8005180:	9306      	str	r3, [sp, #24]
    buf += 5;
 8005182:	f04f 0800 	mov.w	r8, #0
          select_chip(chip);
 8005186:	fa5f f788 	uxtb.w	r7, r8
 800518a:	4638      	mov	r0, r7
 800518c:	f7fb fca0 	bl	8000ad0 <select_chip>
          if (chip == CHIP){ // check if we have to change the value
 8005190:	42bd      	cmp	r5, r7
              chprintf(dbg, "1address: %06X chip: %02X data: %02X nupd: %d\r\n", address, chip, data, no_update);
            }
          }
          else{
            if (data != 0xFF){
              data = 0xFF; //always assume NOT selected
 8005192:	f04f 02ff 	mov.w	r2, #255	; 0xff
              spiSend(SPI_DRIVER, 1, &data);
 8005196:	f10d 0033 	add.w	r0, sp, #51	; 0x33
          if (chip == CHIP){ // check if we have to change the value
 800519a:	d038      	beq.n	800520e <CharacterInputThread+0x203e>
            if (data != 0xFF){
 800519c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80051a0:	2bff      	cmp	r3, #255	; 0xff
 80051a2:	d003      	beq.n	80051ac <CharacterInputThread+0x1fdc>
              data = 0xFF; //always assume NOT selected
 80051a4:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
              spiSend(SPI_DRIVER, 1, &data);
 80051a8:	f7fc ffca 	bl	8002140 <spiSend.constprop.0>
            }
            if (no_update == 0){
 80051ac:	b92c      	cbnz	r4, 80051ba <CharacterInputThread+0x1fea>
  WE_ACTIVE;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f8aa 301a 	strh.w	r3, [sl, #26]
  __NOP();
 80051b4:	bf00      	nop
  WE_INACTIVE;
 80051b6:	f8aa 3018 	strh.w	r3, [sl, #24]
        for (chip = 0; chip < 15; chip++){ // write 15 RAMs chips, each one byte
 80051ba:	f108 0801 	add.w	r8, r8, #1
 80051be:	f1b8 0f0f 	cmp.w	r8, #15
 80051c2:	d1e0      	bne.n	8005186 <CharacterInputThread+0x1fb6>
//                chprintf(dbg, "4address: %06X chip: %02X data: %02X nupd: %d\r\n", address, chip, data, no_update);
//              }
            }
          }
        } //--------------------------- Write chips
        if ((address + 8) <= NEXTADDRESS){
 80051c4:	9a05      	ldr	r2, [sp, #20]
 80051c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051c8:	3208      	adds	r2, #8
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d938      	bls.n	8005240 <CharacterInputThread+0x2070>
          latch_address();
          address += 8; // CPU address is mapping ram address / 8!
          no_update = 0;
        }
        else{// we have a small window of less than 8 addresses
          no_update = 1;
 80051ce:	2401      	movs	r4, #1
        }
//        if ((address >= 0xA000) && (DEBUGLEVEL >= 2) && (address <= 0xA010)){
//          chprintf(dbg, "3address: %06X chip: %02X data: %02X nupd: %d\r\n", address, CHIP, data, no_update);
//        }
      } while (address < NEXTADDRESS); // go until next event is reached
 80051d0:	9905      	ldr	r1, [sp, #20]
 80051d2:	4299      	cmp	r1, r3
 80051d4:	d3d0      	bcc.n	8005178 <CharacterInputThread+0x1fa8>
  out->mask = *in++;
 80051d6:	9808      	ldr	r0, [sp, #32]
 80051d8:	7903      	ldrb	r3, [r0, #4]
  out->_8hm = *in++;
 80051da:	7942      	ldrb	r2, [r0, #5]
  out->_8lm = *in++;
 80051dc:	7981      	ldrb	r1, [r0, #6]
  out->cs   = *in++;
 80051de:	78c5      	ldrb	r5, [r0, #3]
  out->_8l  = *in++;
 80051e0:	79c0      	ldrb	r0, [r0, #7]
  out->_8hm = *in++;
 80051e2:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
  out->_8h  = 0;
 80051e6:	2700      	movs	r7, #0
  out->_8lm = *in++;
 80051e8:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
  out->_8l  = *in++;
 80051ec:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
      fill_struct(buf, &cfdat);
      buf += 5;
      fill_struct(buf, &nextcf);
      if (DEBUGLEVEL >= 2){
        chprintf(dbg, "Next event reached @: %06X Poking: %02X into %02X\r\n", address, MASK, CHIP);
 80051f0:	9a05      	ldr	r2, [sp, #20]
 80051f2:	494b      	ldr	r1, [pc, #300]	; (8005320 <CharacterInputThread+0x2150>)
 80051f4:	4845      	ldr	r0, [pc, #276]	; (800530c <CharacterInputThread+0x213c>)
 80051f6:	9500      	str	r5, [sp, #0]
  out->mask = *in++;
 80051f8:	9307      	str	r3, [sp, #28]
  out->_8h  = 0;
 80051fa:	f88d 703f 	strb.w	r7, [sp, #63]	; 0x3f
        chprintf(dbg, "Next event reached @: %06X Poking: %02X into %02X\r\n", address, MASK, CHIP);
 80051fe:	f7fd fb7f 	bl	8002900 <chprintf>
      buf += 5;
 8005202:	9808      	ldr	r0, [sp, #32]
      }
    } while (NEXTADDRESS); // a zero at an address (other than position 0) means stop.
 8005204:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
      buf += 5;
 8005206:	1d43      	adds	r3, r0, #5
    } while (NEXTADDRESS); // a zero at an address (other than position 0) means stop.
 8005208:	b37f      	cbz	r7, 800526a <CharacterInputThread+0x209a>
      buf += 5;
 800520a:	9308      	str	r3, [sp, #32]
 800520c:	e7b4      	b.n	8005178 <CharacterInputThread+0x1fa8>
            data = MASK;
 800520e:	9b07      	ldr	r3, [sp, #28]
 8005210:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
            spiSend(SPI_DRIVER, 1, &data);
 8005214:	f7fc ff94 	bl	8002140 <spiSend.constprop.0>
  WE_ACTIVE;
 8005218:	2301      	movs	r3, #1
 800521a:	f8aa 301a 	strh.w	r3, [sl, #26]
  __NOP();
 800521e:	bf00      	nop
  WE_INACTIVE;
 8005220:	f8aa 3018 	strh.w	r3, [sl, #24]
            if ((address >= 0x9FF0) && (DEBUGLEVEL >= 2) && (address <= 0xA008)){
 8005224:	9b06      	ldr	r3, [sp, #24]
 8005226:	2b18      	cmp	r3, #24
 8005228:	d8c7      	bhi.n	80051ba <CharacterInputThread+0x1fea>
              chprintf(dbg, "1address: %06X chip: %02X data: %02X nupd: %d\r\n", address, chip, data, no_update);
 800522a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800522e:	9a05      	ldr	r2, [sp, #20]
 8005230:	493c      	ldr	r1, [pc, #240]	; (8005324 <CharacterInputThread+0x2154>)
 8005232:	4836      	ldr	r0, [pc, #216]	; (800530c <CharacterInputThread+0x213c>)
 8005234:	e9cd 3400 	strd	r3, r4, [sp]
 8005238:	4643      	mov	r3, r8
 800523a:	f7fd fb61 	bl	8002900 <chprintf>
 800523e:	e7bc      	b.n	80051ba <CharacterInputThread+0x1fea>
        if ((address + 8) <= NEXTADDRESS){
 8005240:	2408      	movs	r4, #8
  CNT_ACTIVE;
 8005242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005246:	f8aa 3018 	strh.w	r3, [sl, #24]
  __NOP();
 800524a:	bf00      	nop
  CNT_INACTIVE;
 800524c:	3c01      	subs	r4, #1
  for (i=0; i<8; i++){
 800524e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  CNT_INACTIVE;
 8005252:	f8aa 301a 	strh.w	r3, [sl, #26]
  for (i=0; i<8; i++){
 8005256:	d1f6      	bne.n	8005246 <CharacterInputThread+0x2076>
  CPR_ACTIVE;
 8005258:	492d      	ldr	r1, [pc, #180]	; (8005310 <CharacterInputThread+0x2140>)
 800525a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800525e:	834b      	strh	r3, [r1, #26]
  __NOP();
 8005260:	bf00      	nop
  CPR_INACTIVE;
 8005262:	830b      	strh	r3, [r1, #24]
          no_update = 0;
 8005264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  CPR_INACTIVE;
 8005266:	9205      	str	r2, [sp, #20]
 8005268:	e7b2      	b.n	80051d0 <CharacterInputThread+0x2000>
  CNTOE_INACTIVE;
 800526a:	4929      	ldr	r1, [pc, #164]	; (8005310 <CharacterInputThread+0x2140>)
 800526c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005270:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  TRESET_INACTIVE;
 8005274:	f44f 6280 	mov.w	r2, #1024	; 0x400
  CNTOE_INACTIVE;
 8005278:	830b      	strh	r3, [r1, #24]
  TRESET_INACTIVE;
 800527a:	834a      	strh	r2, [r1, #26]
  BUS_in_use = 1;
 800527c:	4a25      	ldr	r2, [pc, #148]	; (8005314 <CharacterInputThread+0x2144>)
          chprintf(ost, "O");
 800527e:	492a      	ldr	r1, [pc, #168]	; (8005328 <CharacterInputThread+0x2158>)
 8005280:	2301      	movs	r3, #1
 8005282:	4658      	mov	r0, fp
 8005284:	7013      	strb	r3, [r2, #0]
 8005286:	f7fd fb3b 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800528a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b04      	cmp	r3, #4
 8005294:	f000 842c 	beq.w	8005af0 <CharacterInputThread+0x2920>
      chThdSleepMilliseconds(100);
 8005298:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800529c:	f7fc fe80 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80052a0:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	f000 86e8 	beq.w	800607e <CharacterInputThread+0x2eae>
      chThdSleepMilliseconds(100);
 80052ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052b2:	f7fc fe75 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80052b6:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b04      	cmp	r3, #4
 80052c0:	f47e a805 	bne.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 80052c4:	6833      	ldr	r3, [r6, #0]
 80052c6:	4658      	mov	r0, fp
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	4798      	blx	r3
 80052cc:	2320      	movs	r3, #32
 80052ce:	b2c4      	uxtb	r4, r0
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052da:	f387 8811 	msr	BASEPRI, r7
      if (start > end){
 80052de:	f7fe b929 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80052e2:	6833      	ldr	r3, [r6, #0]
 80052e4:	4658      	mov	r0, fp
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	4798      	blx	r3
 80052ea:	2320      	movs	r3, #32
 80052ec:	b2c4      	uxtb	r4, r0
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80052f6:	2300      	movs	r3, #0
 80052f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052fa:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80052fe:	f7fe b919 	b.w	8003534 <CharacterInputThread+0x364>
 8005302:	bf00      	nop
 8005304:	20001a80 	.word	0x20001a80
 8005308:	08009f34 	.word	0x08009f34
 800530c:	20000ef0 	.word	0x20000ef0
 8005310:	40020400 	.word	0x40020400
 8005314:	20000c48 	.word	0x20000c48
 8005318:	08009f6c 	.word	0x08009f6c
 800531c:	08009f90 	.word	0x08009f90
 8005320:	08009ff8 	.word	0x08009ff8
 8005324:	08009fc8 	.word	0x08009fc8
 8005328:	08009e2c 	.word	0x08009e2c
                chprintf(dbg, "Bulk Write (ZW): %6X, cnt: %03d, data: %02X %02X %02X %02X\r\n", address, count, tbuf[0], tbuf[1], tbuf[2], tbuf[3]);
 800532c:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
 8005330:	f89d 1052 	ldrb.w	r1, [sp, #82]	; 0x52
 8005334:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8005338:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800533c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800533e:	4cc2      	ldr	r4, [pc, #776]	; (8005648 <CharacterInputThread+0x2478>)
 8005340:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8005344:	e9cd 3200 	strd	r3, r2, [sp]
 8005348:	49c0      	ldr	r1, [pc, #768]	; (800564c <CharacterInputThread+0x247c>)
 800534a:	8823      	ldrh	r3, [r4, #0]
 800534c:	48c0      	ldr	r0, [pc, #768]	; (8005650 <CharacterInputThread+0x2480>)
 800534e:	462a      	mov	r2, r5
 8005350:	f7fd fad6 	bl	8002900 <chprintf>
              write_block(address, count, tbuf, 0);
 8005354:	8821      	ldrh	r1, [r4, #0]
 8005356:	aa14      	add	r2, sp, #80	; 0x50
 8005358:	4628      	mov	r0, r5
 800535a:	f7fc ff51 	bl	8002200 <write_block.constprop.0>
              chprintf(ost, "O");            }
 800535e:	49bd      	ldr	r1, [pc, #756]	; (8005654 <CharacterInputThread+0x2484>)
 8005360:	4658      	mov	r0, fp
 8005362:	f7fd facd 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005366:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b04      	cmp	r3, #4
 8005370:	f000 83ae 	beq.w	8005ad0 <CharacterInputThread+0x2900>
      chThdSleepMilliseconds(100);
 8005374:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005378:	f7fc fe12 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800537c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b04      	cmp	r3, #4
 8005386:	f000 866a 	beq.w	800605e <CharacterInputThread+0x2e8e>
      chThdSleepMilliseconds(100);
 800538a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800538e:	f7fc fe07 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005392:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b04      	cmp	r3, #4
 800539c:	f000 87ec 	beq.w	8006378 <CharacterInputThread+0x31a8>
      chThdSleepMilliseconds(100);
 80053a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80053a4:	f7fc fdfc 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80053a8:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	f47f ab52 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 80053b6:	6833      	ldr	r3, [r6, #0]
 80053b8:	4658      	mov	r0, fp
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	4798      	blx	r3
 80053be:	2320      	movs	r3, #32
 80053c0:	b2c4      	uxtb	r4, r0
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80053ca:	2300      	movs	r3, #0
 80053cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053ce:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80053d2:	f7fe b8af 	b.w	8003534 <CharacterInputThread+0x364>
              debug_print_state("State2: ", state);
 80053d6:	48a0      	ldr	r0, [pc, #640]	; (8005658 <CharacterInputThread+0x2488>)
 80053d8:	211e      	movs	r1, #30
 80053da:	f7fd fce9 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80053de:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	f43e ac0c 	beq.w	8003c04 <CharacterInputThread+0xa34>
              state = BULK_ZWn;
 80053ec:	271e      	movs	r7, #30
 80053ee:	f7fd bf6e 	b.w	80032ce <CharacterInputThread+0xfe>
              debug_print_state("State2: ", state);
 80053f2:	4899      	ldr	r0, [pc, #612]	; (8005658 <CharacterInputThread+0x2488>)
 80053f4:	211a      	movs	r1, #26
 80053f6:	f7fd fcdb 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80053fa:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b04      	cmp	r3, #4
 8005404:	f43e ac99 	beq.w	8003d3a <CharacterInputThread+0xb6a>
              state = BULK_ZRn;
 8005408:	271a      	movs	r7, #26
 800540a:	f7fd bf60 	b.w	80032ce <CharacterInputThread+0xfe>
          temp=0;
 800540e:	4a93      	ldr	r2, [pc, #588]	; (800565c <CharacterInputThread+0x248c>)
 8005410:	2300      	movs	r3, #0
 8005412:	7013      	strb	r3, [r2, #0]
          for (i=0;i<sizeof(serial);i++){
 8005414:	4a92      	ldr	r2, [pc, #584]	; (8005660 <CharacterInputThread+0x2490>)
 8005416:	8013      	strh	r3, [r2, #0]
            streamPut(ost, serial[i]);
 8005418:	6832      	ldr	r2, [r6, #0]
            temp += serial[i];
 800541a:	4c90      	ldr	r4, [pc, #576]	; (800565c <CharacterInputThread+0x248c>)
            streamPut(ost, serial[i]);
 800541c:	a911      	add	r1, sp, #68	; 0x44
 800541e:	4658      	mov	r0, fp
 8005420:	5cc9      	ldrb	r1, [r1, r3]
 8005422:	68d3      	ldr	r3, [r2, #12]
 8005424:	4798      	blx	r3
            temp += serial[i];
 8005426:	488e      	ldr	r0, [pc, #568]	; (8005660 <CharacterInputThread+0x2490>)
 8005428:	7822      	ldrb	r2, [r4, #0]
 800542a:	8803      	ldrh	r3, [r0, #0]
 800542c:	a911      	add	r1, sp, #68	; 0x44
 800542e:	5cc9      	ldrb	r1, [r1, r3]
          for (i=0;i<sizeof(serial);i++){
 8005430:	3301      	adds	r3, #1
 8005432:	b29b      	uxth	r3, r3
            temp += serial[i];
 8005434:	4411      	add	r1, r2
 8005436:	b2c9      	uxtb	r1, r1
          for (i=0;i<sizeof(serial);i++){
 8005438:	2b08      	cmp	r3, #8
 800543a:	8003      	strh	r3, [r0, #0]
            temp += serial[i];
 800543c:	7021      	strb	r1, [r4, #0]
          for (i=0;i<sizeof(serial);i++){
 800543e:	d9eb      	bls.n	8005418 <CharacterInputThread+0x2248>
          streamPut(ost, temp);
 8005440:	6833      	ldr	r3, [r6, #0]
 8005442:	4658      	mov	r0, fp
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	4798      	blx	r3
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005448:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b04      	cmp	r3, #4
 8005452:	f000 847b 	beq.w	8005d4c <CharacterInputThread+0x2b7c>
      chThdSleepMilliseconds(100);
 8005456:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800545a:	f7fc fda1 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800545e:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b04      	cmp	r3, #4
 8005468:	f000 8647 	beq.w	80060fa <CharacterInputThread+0x2f2a>
      chThdSleepMilliseconds(100);
 800546c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005470:	f7fc fd96 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005474:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b04      	cmp	r3, #4
 800547e:	f47f aaec 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8005482:	6833      	ldr	r3, [r6, #0]
 8005484:	4658      	mov	r0, fp
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	4798      	blx	r3
 800548a:	2320      	movs	r3, #32
 800548c:	b2c4      	uxtb	r4, r0
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005496:	2300      	movs	r3, #0
 8005498:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800549a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800549e:	f7fe b849 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80054a2:	6833      	ldr	r3, [r6, #0]
 80054a4:	4658      	mov	r0, fp
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	4798      	blx	r3
 80054aa:	2320      	movs	r3, #32
 80054ac:	b2c4      	uxtb	r4, r0
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80054b6:	2300      	movs	r3, #0
 80054b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054ba:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80054be:	f7fe b839 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80054c2:	6833      	ldr	r3, [r6, #0]
 80054c4:	4658      	mov	r0, fp
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	4798      	blx	r3
 80054ca:	2320      	movs	r3, #32
 80054cc:	b2c4      	uxtb	r4, r0
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80054d6:	2300      	movs	r3, #0
 80054d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054da:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80054de:	f7fe b829 	b.w	8003534 <CharacterInputThread+0x364>
            chprintf(dbg, "Bank > 8 ERROR\r\n");
 80054e2:	4960      	ldr	r1, [pc, #384]	; (8005664 <CharacterInputThread+0x2494>)
 80054e4:	485a      	ldr	r0, [pc, #360]	; (8005650 <CharacterInputThread+0x2480>)
 80054e6:	f7fd fa0b 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80054ea:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	f000 847d 	beq.w	8005df2 <CharacterInputThread+0x2c22>
      chThdSleepMilliseconds(100);
 80054f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054fc:	f7fc fd50 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005500:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b04      	cmp	r3, #4
 800550a:	f000 863c 	beq.w	8006186 <CharacterInputThread+0x2fb6>
      chThdSleepMilliseconds(100);
 800550e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005512:	f7fc fd45 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005516:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b04      	cmp	r3, #4
 8005520:	f47f aa9b 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8005524:	6833      	ldr	r3, [r6, #0]
 8005526:	4658      	mov	r0, fp
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	4798      	blx	r3
 800552c:	2320      	movs	r3, #32
 800552e:	b2c4      	uxtb	r4, r0
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005538:	2300      	movs	r3, #0
 800553a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800553c:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005540:	f7fd bff8 	b.w	8003534 <CharacterInputThread+0x364>
            chprintf(dbg, "Bank > 8 ERROR\r\n");
 8005544:	4947      	ldr	r1, [pc, #284]	; (8005664 <CharacterInputThread+0x2494>)
 8005546:	4842      	ldr	r0, [pc, #264]	; (8005650 <CharacterInputThread+0x2480>)
 8005548:	f7fd f9da 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800554c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b04      	cmp	r3, #4
 8005556:	f000 8409 	beq.w	8005d6c <CharacterInputThread+0x2b9c>
      chThdSleepMilliseconds(100);
 800555a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800555e:	f7fc fd1f 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005562:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b04      	cmp	r3, #4
 800556c:	f000 861b 	beq.w	80061a6 <CharacterInputThread+0x2fd6>
      chThdSleepMilliseconds(100);
 8005570:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005574:	f7fc fd14 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005578:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b04      	cmp	r3, #4
 8005582:	f47f aa6a 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8005586:	6833      	ldr	r3, [r6, #0]
 8005588:	4658      	mov	r0, fp
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	4798      	blx	r3
 800558e:	2320      	movs	r3, #32
 8005590:	b2c4      	uxtb	r4, r0
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800559a:	2300      	movs	r3, #0
 800559c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800559e:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80055a2:	f7fd bfc7 	b.w	8003534 <CharacterInputThread+0x364>
            chprintf(dbg, "Bank > 8 ERROR\r\n");
 80055a6:	492f      	ldr	r1, [pc, #188]	; (8005664 <CharacterInputThread+0x2494>)
 80055a8:	4829      	ldr	r0, [pc, #164]	; (8005650 <CharacterInputThread+0x2480>)
 80055aa:	f7fd f9a9 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80055ae:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	f000 840b 	beq.w	8005dd2 <CharacterInputThread+0x2c02>
      chThdSleepMilliseconds(100);
 80055bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055c0:	f7fc fcee 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80055c4:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	f000 85ca 	beq.w	8006166 <CharacterInputThread+0x2f96>
      chThdSleepMilliseconds(100);
 80055d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055d6:	f7fc fce3 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80055da:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	f47f aa39 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 80055e8:	6833      	ldr	r3, [r6, #0]
 80055ea:	4658      	mov	r0, fp
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	4798      	blx	r3
 80055f0:	2320      	movs	r3, #32
 80055f2:	b2c4      	uxtb	r4, r0
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055fc:	2300      	movs	r3, #0
 80055fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005600:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005604:	f7fd bf96 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005608:	6833      	ldr	r3, [r6, #0]
 800560a:	4658      	mov	r0, fp
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	4798      	blx	r3
 8005610:	2320      	movs	r3, #32
 8005612:	b2c4      	uxtb	r4, r0
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800561c:	2300      	movs	r3, #0
 800561e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005620:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005624:	f7fd bf86 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005628:	6833      	ldr	r3, [r6, #0]
 800562a:	4658      	mov	r0, fp
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	4798      	blx	r3
 8005630:	2320      	movs	r3, #32
 8005632:	b2c4      	uxtb	r4, r0
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800563c:	2300      	movs	r3, #0
 800563e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005640:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005644:	f7fd bf76 	b.w	8003534 <CharacterInputThread+0x364>
 8005648:	20001a80 	.word	0x20001a80
 800564c:	08009e50 	.word	0x08009e50
 8005650:	20000ef0 	.word	0x20000ef0
 8005654:	08009e2c 	.word	0x08009e2c
 8005658:	08009dd0 	.word	0x08009dd0
 800565c:	20001d78 	.word	0x20001d78
 8005660:	20001d70 	.word	0x20001d70
 8005664:	08009f10 	.word	0x08009f10
          debug_print_state("Got Header: ", state);
 8005668:	48ba      	ldr	r0, [pc, #744]	; (8005954 <CharacterInputThread+0x2784>)
 800566a:	2107      	movs	r1, #7
 800566c:	f7fd fba0 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005670:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b04      	cmp	r3, #4
 800567a:	f43e af82 	beq.w	8004582 <CharacterInputThread+0x13b2>
      chThdSleepMilliseconds(100);
 800567e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005682:	f7fc fc8d 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005686:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b04      	cmp	r3, #4
 8005690:	f43e af77 	beq.w	8004582 <CharacterInputThread+0x13b2>
      chThdSleepMilliseconds(100);
 8005694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005698:	f7fc fc82 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800569c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	f000 860b 	beq.w	80062c0 <CharacterInputThread+0x30f0>
      chThdSleepMilliseconds(100);
 80056aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056ae:	f7fc fc77 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80056b2:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	f000 8600 	beq.w	80062c0 <CharacterInputThread+0x30f0>
          state = BANK_BE;
 80056c0:	2707      	movs	r7, #7
 80056c2:	f7fd be04 	b.w	80032ce <CharacterInputThread+0xfe>
          debug_print_state("Got Header: ", state);
 80056c6:	48a3      	ldr	r0, [pc, #652]	; (8005954 <CharacterInputThread+0x2784>)
 80056c8:	2106      	movs	r1, #6
 80056ca:	f7fd fb71 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80056ce:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	f43e acba 	beq.w	8004050 <CharacterInputThread+0xe80>
      chThdSleepMilliseconds(100);
 80056dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056e0:	f7fc fc5e 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80056e4:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	f43e acaf 	beq.w	8004050 <CharacterInputThread+0xe80>
      chThdSleepMilliseconds(100);
 80056f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056f6:	f7fc fc53 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80056fa:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b04      	cmp	r3, #4
 8005704:	f000 8602 	beq.w	800630c <CharacterInputThread+0x313c>
      chThdSleepMilliseconds(100);
 8005708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800570c:	f7fc fc48 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005710:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b04      	cmp	r3, #4
 800571a:	f000 85f7 	beq.w	800630c <CharacterInputThread+0x313c>
          state = BANK_BS;
 800571e:	2706      	movs	r7, #6
 8005720:	f7fd bdd5 	b.w	80032ce <CharacterInputThread+0xfe>
          debug_print_state("Header not finished: ", state);
 8005724:	488c      	ldr	r0, [pc, #560]	; (8005958 <CharacterInputThread+0x2788>)
 8005726:	2103      	movs	r1, #3
 8005728:	f7fd fb42 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800572c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b04      	cmp	r3, #4
 8005736:	f43e ad40 	beq.w	80041ba <CharacterInputThread+0xfea>
      chThdSleepMilliseconds(100);
 800573a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800573e:	f7fc fc2f 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005742:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	2b04      	cmp	r3, #4
 800574c:	f43e ad35 	beq.w	80041ba <CharacterInputThread+0xfea>
      chThdSleepMilliseconds(100);
 8005750:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005754:	f7fc fc24 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005758:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b04      	cmp	r3, #4
 8005762:	f000 85c0 	beq.w	80062e6 <CharacterInputThread+0x3116>
      chThdSleepMilliseconds(100);
 8005766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800576a:	f7fc fc19 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800576e:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b04      	cmp	r3, #4
 8005778:	f000 85b5 	beq.w	80062e6 <CharacterInputThread+0x3116>
          state = BANK_BR;
 800577c:	2703      	movs	r7, #3
 800577e:	f7fd bda6 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8005782:	6833      	ldr	r3, [r6, #0]
 8005784:	4658      	mov	r0, fp
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	4798      	blx	r3
 800578a:	2320      	movs	r3, #32
 800578c:	b2c4      	uxtb	r4, r0
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005796:	2300      	movs	r3, #0
 8005798:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800579a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800579e:	f7fd bec9 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80057a2:	6833      	ldr	r3, [r6, #0]
 80057a4:	4658      	mov	r0, fp
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	4798      	blx	r3
 80057aa:	2320      	movs	r3, #32
 80057ac:	b2c4      	uxtb	r4, r0
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80057b6:	2300      	movs	r3, #0
 80057b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057ba:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80057be:	f7fd beb9 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80057c2:	6833      	ldr	r3, [r6, #0]
 80057c4:	4658      	mov	r0, fp
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	4798      	blx	r3
 80057ca:	2320      	movs	r3, #32
 80057cc:	b2c4      	uxtb	r4, r0
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80057d6:	2300      	movs	r3, #0
 80057d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057da:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80057de:	f7fd bea9 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80057e2:	6833      	ldr	r3, [r6, #0]
 80057e4:	4658      	mov	r0, fp
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	4798      	blx	r3
 80057ea:	2320      	movs	r3, #32
 80057ec:	b2c4      	uxtb	r4, r0
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80057f6:	2300      	movs	r3, #0
 80057f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057fa:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80057fe:	f7fd be99 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005802:	6833      	ldr	r3, [r6, #0]
 8005804:	4658      	mov	r0, fp
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	4798      	blx	r3
 800580a:	2320      	movs	r3, #32
 800580c:	b2c4      	uxtb	r4, r0
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005816:	2300      	movs	r3, #0
 8005818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800581a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800581e:	f7fd be89 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005822:	6833      	ldr	r3, [r6, #0]
 8005824:	4658      	mov	r0, fp
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	4798      	blx	r3
 800582a:	2320      	movs	r3, #32
 800582c:	b2c4      	uxtb	r4, r0
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005836:	2300      	movs	r3, #0
 8005838:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800583a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800583e:	f7fd be79 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005842:	6833      	ldr	r3, [r6, #0]
 8005844:	4658      	mov	r0, fp
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	4798      	blx	r3
 800584a:	2320      	movs	r3, #32
 800584c:	b2c4      	uxtb	r4, r0
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005856:	2300      	movs	r3, #0
 8005858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800585a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800585e:	f7fd be69 	b.w	8003534 <CharacterInputThread+0x364>
 8005862:	950a      	str	r5, [sp, #40]	; 0x28
 8005864:	f7fd be66 	b.w	8003534 <CharacterInputThread+0x364>
              debug_print_state("State2: ", state);
 8005868:	483c      	ldr	r0, [pc, #240]	; (800595c <CharacterInputThread+0x278c>)
 800586a:	2122      	movs	r1, #34	; 0x22
 800586c:	f7fd faa0 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005870:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b04      	cmp	r3, #4
 800587a:	f43d af73 	beq.w	8003764 <CharacterInputThread+0x594>
      chThdSleepMilliseconds(100);
 800587e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005882:	f7fc fb8d 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005886:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b04      	cmp	r3, #4
 8005890:	f43d af68 	beq.w	8003764 <CharacterInputThread+0x594>
      chThdSleepMilliseconds(100);
 8005894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005898:	f7fc fb82 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800589c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	f000 8554 	beq.w	8006352 <CharacterInputThread+0x3182>
      chThdSleepMilliseconds(100);
 80058aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058ae:	f7fc fb77 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80058b2:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	f000 8549 	beq.w	8006352 <CharacterInputThread+0x3182>
              state = BULK_ZWnBMBCs;
 80058c0:	2722      	movs	r7, #34	; 0x22
 80058c2:	f7fd bd04 	b.w	80032ce <CharacterInputThread+0xfe>
          chprintf(ost, "%c%cN", VMAJOR, VMINOR);
 80058c6:	2303      	movs	r3, #3
 80058c8:	4925      	ldr	r1, [pc, #148]	; (8005960 <CharacterInputThread+0x2790>)
 80058ca:	220a      	movs	r2, #10
 80058cc:	4658      	mov	r0, fp
 80058ce:	f7fd f817 	bl	8002900 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80058d2:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b04      	cmp	r3, #4
 80058dc:	f000 837b 	beq.w	8005fd6 <CharacterInputThread+0x2e06>
      chThdSleepMilliseconds(100);
 80058e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058e4:	f7fc fb5c 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80058e8:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	f000 851e 	beq.w	8006332 <CharacterInputThread+0x3162>
      chThdSleepMilliseconds(100);
 80058f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058fa:	f7fc fb51 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80058fe:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b04      	cmp	r3, #4
 8005908:	f47f a8a7 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 800590c:	6833      	ldr	r3, [r6, #0]
 800590e:	4658      	mov	r0, fp
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	4798      	blx	r3
 8005914:	2320      	movs	r3, #32
 8005916:	b2c4      	uxtb	r4, r0
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005920:	2300      	movs	r3, #0
 8005922:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005924:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005928:	f7fd be04 	b.w	8003534 <CharacterInputThread+0x364>
 800592c:	950a      	str	r5, [sp, #40]	; 0x28
 800592e:	f7fd be01 	b.w	8003534 <CharacterInputThread+0x364>
            debug_print_state("State2: ", state);
 8005932:	480a      	ldr	r0, [pc, #40]	; (800595c <CharacterInputThread+0x278c>)
 8005934:	460d      	mov	r5, r1
 8005936:	2114      	movs	r1, #20
 8005938:	f7fd fa3a 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800593c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b04      	cmp	r3, #4
 8005946:	f43e a91d 	beq.w	8003b84 <CharacterInputThread+0x9b4>
          tbuf[cntdwn++] = c;
 800594a:	950a      	str	r5, [sp, #40]	; 0x28
            state = WRITE_nMLCs;
 800594c:	2714      	movs	r7, #20
 800594e:	f7fd bcbe 	b.w	80032ce <CharacterInputThread+0xfe>
 8005952:	bf00      	nop
 8005954:	08009ed8 	.word	0x08009ed8
 8005958:	08009ec0 	.word	0x08009ec0
 800595c:	08009dd0 	.word	0x08009dd0
 8005960:	08009f24 	.word	0x08009f24
          debug_print_state("State2: ", state);
 8005964:	48bd      	ldr	r0, [pc, #756]	; (8005c5c <CharacterInputThread+0x2a8c>)
 8005966:	460d      	mov	r5, r1
 8005968:	2124      	movs	r1, #36	; 0x24
 800596a:	f7fd fa21 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800596e:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b04      	cmp	r3, #4
 8005978:	f000 834d 	beq.w	8006016 <CharacterInputThread+0x2e46>
      chThdSleepMilliseconds(100);
 800597c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005980:	f7fc fb0e 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005984:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b04      	cmp	r3, #4
 800598e:	f000 8483 	beq.w	8006298 <CharacterInputThread+0x30c8>
      chThdSleepMilliseconds(100);
 8005992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005996:	f7fc fb03 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800599a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	f040 8527 	bne.w	80063f6 <CharacterInputThread+0x3226>
      c=streamGet(&OSTRICHPORT);
 80059a8:	6833      	ldr	r3, [r6, #0]
 80059aa:	4658      	mov	r0, fp
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	4798      	blx	r3
 80059b0:	2320      	movs	r3, #32
 80059b2:	b2c4      	uxtb	r4, r0
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80059bc:	2300      	movs	r3, #0
 80059be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059c0:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80059c4:	4590      	cmp	r8, r2
 80059c6:	f4bf a80a 	bcs.w	80049de <CharacterInputThread+0x180e>
        tbuf[cntdwn++] = c;
 80059ca:	950a      	str	r5, [sp, #40]	; 0x28
 80059cc:	f7fd bdb2 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80059d0:	6833      	ldr	r3, [r6, #0]
 80059d2:	4658      	mov	r0, fp
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	4798      	blx	r3
 80059d8:	2320      	movs	r3, #32
 80059da:	b2c4      	uxtb	r4, r0
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80059e4:	2300      	movs	r3, #0
 80059e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059e8:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80059ec:	4590      	cmp	r8, r2
 80059ee:	f4fd ada1 	bcc.w	8003534 <CharacterInputThread+0x364>
 80059f2:	f7fe b88b 	b.w	8003b0c <CharacterInputThread+0x93c>
      c=streamGet(&OSTRICHPORT);
 80059f6:	6833      	ldr	r3, [r6, #0]
 80059f8:	4658      	mov	r0, fp
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	4798      	blx	r3
 80059fe:	2320      	movs	r3, #32
 8005a00:	b2c4      	uxtb	r4, r0
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a0e:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005a12:	4590      	cmp	r8, r2
 8005a14:	f4fd ad8e 	bcc.w	8003534 <CharacterInputThread+0x364>
 8005a18:	f7fe bf12 	b.w	8004840 <CharacterInputThread+0x1670>
      c=streamGet(&OSTRICHPORT);
 8005a1c:	6833      	ldr	r3, [r6, #0]
 8005a1e:	4658      	mov	r0, fp
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	4798      	blx	r3
 8005a24:	2320      	movs	r3, #32
 8005a26:	b2c4      	uxtb	r4, r0
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a30:	2300      	movs	r3, #0
 8005a32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a34:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005a38:	f7fd bd7c 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005a3c:	6833      	ldr	r3, [r6, #0]
 8005a3e:	4658      	mov	r0, fp
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	4798      	blx	r3
 8005a44:	2320      	movs	r3, #32
 8005a46:	b2c4      	uxtb	r4, r0
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a50:	2300      	movs	r3, #0
 8005a52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a54:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005a58:	4590      	cmp	r8, r2
 8005a5a:	f4fd ad6b 	bcc.w	8003534 <CharacterInputThread+0x364>
 8005a5e:	f7fe bc0b 	b.w	8004278 <CharacterInputThread+0x10a8>
      c=streamGet(&OSTRICHPORT);
 8005a62:	6833      	ldr	r3, [r6, #0]
 8005a64:	4658      	mov	r0, fp
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	4798      	blx	r3
 8005a6a:	2320      	movs	r3, #32
 8005a6c:	b2c4      	uxtb	r4, r0
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a76:	2300      	movs	r3, #0
 8005a78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a7a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005a7e:	4590      	cmp	r8, r2
 8005a80:	f4fd ad58 	bcc.w	8003534 <CharacterInputThread+0x364>
 8005a84:	f7fe bd36 	b.w	80044f4 <CharacterInputThread+0x1324>
          debug_print_state("State2: ", state);
 8005a88:	4874      	ldr	r0, [pc, #464]	; (8005c5c <CharacterInputThread+0x2a8c>)
 8005a8a:	2105      	movs	r1, #5
 8005a8c:	f7fd f990 	bl	8002db0 <debug_print_state>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005a90:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	f43e ae61 	beq.w	8004760 <CharacterInputThread+0x1590>
      chThdSleepMilliseconds(100);
 8005a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005aa2:	f7fc fa7d 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005aa6:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	f000 8333 	beq.w	800611a <CharacterInputThread+0x2f4a>
      chThdSleepMilliseconds(100);
 8005ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ab8:	f7fc fa72 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005abc:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	f000 8328 	beq.w	800611a <CharacterInputThread+0x2f4a>
          state = BANK_BES;
 8005aca:	2705      	movs	r7, #5
 8005acc:	f7fd bbff 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8005ad0:	6833      	ldr	r3, [r6, #0]
 8005ad2:	4658      	mov	r0, fp
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	4798      	blx	r3
 8005ad8:	2320      	movs	r3, #32
 8005ada:	b2c4      	uxtb	r4, r0
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ae8:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005aec:	f7fd bd22 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005af0:	6833      	ldr	r3, [r6, #0]
 8005af2:	4658      	mov	r0, fp
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	4798      	blx	r3
 8005af8:	2320      	movs	r3, #32
 8005afa:	b2c4      	uxtb	r4, r0
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b06:	f387 8811 	msr	BASEPRI, r7
      if (start > end){
 8005b0a:	f7fd bd13 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005b0e:	6833      	ldr	r3, [r6, #0]
 8005b10:	4658      	mov	r0, fp
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	4798      	blx	r3
 8005b16:	2320      	movs	r3, #32
 8005b18:	b2c4      	uxtb	r4, r0
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b22:	2300      	movs	r3, #0
 8005b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b26:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005b2a:	f7fd bd03 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005b2e:	6833      	ldr	r3, [r6, #0]
 8005b30:	4658      	mov	r0, fp
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	4798      	blx	r3
 8005b36:	2320      	movs	r3, #32
 8005b38:	b2c4      	uxtb	r4, r0
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b42:	2300      	movs	r3, #0
 8005b44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b46:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005b4a:	f7fd bcf3 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005b4e:	6833      	ldr	r3, [r6, #0]
 8005b50:	4658      	mov	r0, fp
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	4798      	blx	r3
 8005b56:	2320      	movs	r3, #32
 8005b58:	b2c4      	uxtb	r4, r0
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b62:	2300      	movs	r3, #0
 8005b64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b66:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005b6a:	f7fd bce3 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005b6e:	6833      	ldr	r3, [r6, #0]
 8005b70:	4658      	mov	r0, fp
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	4798      	blx	r3
 8005b76:	2320      	movs	r3, #32
 8005b78:	b2c4      	uxtb	r4, r0
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b82:	2300      	movs	r3, #0
 8005b84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b86:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005b8a:	f7fd bcd3 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005b8e:	6833      	ldr	r3, [r6, #0]
 8005b90:	4658      	mov	r0, fp
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	4798      	blx	r3
 8005b96:	2320      	movs	r3, #32
 8005b98:	b2c4      	uxtb	r4, r0
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ba6:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005baa:	4542      	cmp	r2, r8
 8005bac:	f63d acc2 	bhi.w	8003534 <CharacterInputThread+0x364>
 8005bb0:	f7fd bc1d 	b.w	80033ee <CharacterInputThread+0x21e>
            read_block(address+0x10000*bankrw, count, tbuf, 0);
 8005bb4:	4b2a      	ldr	r3, [pc, #168]	; (8005c60 <CharacterInputThread+0x2a90>)
 8005bb6:	4c2b      	ldr	r4, [pc, #172]	; (8005c64 <CharacterInputThread+0x2a94>)
 8005bb8:	7818      	ldrb	r0, [r3, #0]
 8005bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bbc:	8821      	ldrh	r1, [r4, #0]
 8005bbe:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 8005bc2:	aa14      	add	r2, sp, #80	; 0x50
 8005bc4:	f7fc fa84 	bl	80020d0 <read_block.constprop.0>
            for (i=0; i<count; i++){
 8005bc8:	4a27      	ldr	r2, [pc, #156]	; (8005c68 <CharacterInputThread+0x2a98>)
 8005bca:	8824      	ldrh	r4, [r4, #0]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	8013      	strh	r3, [r2, #0]
 8005bd0:	b18c      	cbz	r4, 8005bf6 <CharacterInputThread+0x2a26>
            checksum = 0;
 8005bd2:	461c      	mov	r4, r3
              checksum += tbuf[i];
 8005bd4:	aa14      	add	r2, sp, #80	; 0x50
              streamPut(ost, tbuf[i]);
 8005bd6:	4658      	mov	r0, fp
              checksum += tbuf[i];
 8005bd8:	5cd1      	ldrb	r1, [r2, r3]
              streamPut(ost, tbuf[i]);
 8005bda:	6833      	ldr	r3, [r6, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
              checksum += tbuf[i];
 8005bde:	440c      	add	r4, r1
              streamPut(ost, tbuf[i]);
 8005be0:	4798      	blx	r3
            for (i=0; i<count; i++){
 8005be2:	4921      	ldr	r1, [pc, #132]	; (8005c68 <CharacterInputThread+0x2a98>)
 8005be4:	4a1f      	ldr	r2, [pc, #124]	; (8005c64 <CharacterInputThread+0x2a94>)
 8005be6:	880b      	ldrh	r3, [r1, #0]
 8005be8:	8812      	ldrh	r2, [r2, #0]
 8005bea:	3301      	adds	r3, #1
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	429a      	cmp	r2, r3
              checksum += tbuf[i];
 8005bf0:	b2e4      	uxtb	r4, r4
            for (i=0; i<count; i++){
 8005bf2:	800b      	strh	r3, [r1, #0]
 8005bf4:	d8ee      	bhi.n	8005bd4 <CharacterInputThread+0x2a04>
            streamPut(ost, checksum);
 8005bf6:	6833      	ldr	r3, [r6, #0]
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	4658      	mov	r0, fp
 8005bfe:	4798      	blx	r3
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005c00:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	f000 8247 	beq.w	800609c <CharacterInputThread+0x2ecc>
      chThdSleepMilliseconds(100);
 8005c0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c12:	f7fc f9c5 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005c16:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	f000 83c9 	beq.w	80063b6 <CharacterInputThread+0x31e6>
      chThdSleepMilliseconds(100);
 8005c24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c28:	f7fc f9ba 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005c2c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	f47e af10 	bne.w	8004a5a <CharacterInputThread+0x188a>
      c=streamGet(&OSTRICHPORT);
 8005c3a:	6833      	ldr	r3, [r6, #0]
 8005c3c:	4658      	mov	r0, fp
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	4798      	blx	r3
 8005c42:	2320      	movs	r3, #32
 8005c44:	b2c4      	uxtb	r4, r0
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c52:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005c56:	f7fd bc6d 	b.w	8003534 <CharacterInputThread+0x364>
 8005c5a:	bf00      	nop
 8005c5c:	08009dd0 	.word	0x08009dd0
 8005c60:	200018cb 	.word	0x200018cb
 8005c64:	20001a80 	.word	0x20001a80
 8005c68:	20001d70 	.word	0x20001d70
                chprintf(dbg, "Bulk Read (ZR): Addr.: %6X, blocks: 0x%04x\r\n", address, count);
 8005c6c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005c6e:	4db9      	ldr	r5, [pc, #740]	; (8005f54 <CharacterInputThread+0x2d84>)
 8005c70:	49b9      	ldr	r1, [pc, #740]	; (8005f58 <CharacterInputThread+0x2d88>)
 8005c72:	882b      	ldrh	r3, [r5, #0]
 8005c74:	48b9      	ldr	r0, [pc, #740]	; (8005f5c <CharacterInputThread+0x2d8c>)
 8005c76:	463a      	mov	r2, r7
 8005c78:	f7fc fe42 	bl	8002900 <chprintf>
              checksum = read_single_byte(address++, 0);
 8005c7c:	4638      	mov	r0, r7
 8005c7e:	f7fc f9ff 	bl	8002080 <read_single_byte.constprop.0>
              streamPut(ost, checksum);
 8005c82:	6833      	ldr	r3, [r6, #0]
 8005c84:	4601      	mov	r1, r0
 8005c86:	68db      	ldr	r3, [r3, #12]
              checksum = read_single_byte(address++, 0);
 8005c88:	4604      	mov	r4, r0
              streamPut(ost, checksum);
 8005c8a:	4658      	mov	r0, fp
 8005c8c:	4798      	blx	r3
              count *= 256;
 8005c8e:	882b      	ldrh	r3, [r5, #0]
              checksum = read_single_byte(address++, 0);
 8005c90:	463a      	mov	r2, r7
              count *= 256;
 8005c92:	021b      	lsls	r3, r3, #8
              checksum = read_single_byte(address++, 0);
 8005c94:	3201      	adds	r2, #1
              count --;
 8005c96:	3b01      	subs	r3, #1
 8005c98:	802b      	strh	r3, [r5, #0]
  CNT_ACTIVE;
 8005c9a:	4617      	mov	r7, r2
 8005c9c:	f44f 7580 	mov.w	r5, #256	; 0x100
 8005ca0:	f8aa 5018 	strh.w	r5, [sl, #24]
  __NOP();
 8005ca4:	bf00      	nop
  CNT_INACTIVE;
 8005ca6:	f8aa 501a 	strh.w	r5, [sl, #26]
  data = read_byte();
 8005caa:	f7fc f989 	bl	8001fc0 <read_byte>
                streamPut(ost, tbuf[0]);
 8005cae:	6833      	ldr	r3, [r6, #0]
                tbuf[0] = read_next_byte();
 8005cb0:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
                streamPut(ost, tbuf[0]);
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	4601      	mov	r1, r0
                checksum += tbuf[0];
 8005cb8:	4404      	add	r4, r0
                streamPut(ost, tbuf[0]);
 8005cba:	4658      	mov	r0, fp
 8005cbc:	4798      	blx	r3
                count--;
 8005cbe:	4aa5      	ldr	r2, [pc, #660]	; (8005f54 <CharacterInputThread+0x2d84>)
 8005cc0:	8813      	ldrh	r3, [r2, #0]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29b      	uxth	r3, r3
                checksum += tbuf[0];
 8005cc6:	b2e4      	uxtb	r4, r4
                address++;
 8005cc8:	3701      	adds	r7, #1
                count--;
 8005cca:	8013      	strh	r3, [r2, #0]
              while (count){ //Blocks of 256 Bytes
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e7      	bne.n	8005ca0 <CharacterInputThread+0x2ad0>
 8005cd0:	9709      	str	r7, [sp, #36]	; 0x24
 8005cd2:	461f      	mov	r7, r3
              streamPut(ost, checksum);
 8005cd4:	6833      	ldr	r3, [r6, #0]
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	4658      	mov	r0, fp
 8005cdc:	4798      	blx	r3
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005cde:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	f000 81e8 	beq.w	80060bc <CharacterInputThread+0x2eec>
      chThdSleepMilliseconds(100);
 8005cec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005cf0:	f7fc f956 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005cf4:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	f000 834b 	beq.w	8006398 <CharacterInputThread+0x31c8>
      chThdSleepMilliseconds(100);
 8005d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d06:	f7fc f94b 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005d0a:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	f000 8379 	beq.w	800640a <CharacterInputThread+0x323a>
      chThdSleepMilliseconds(100);
 8005d18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d1c:	f7fc f940 	bl	8001fa0 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005d20:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	f47d aad0 	bne.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8005d2e:	6833      	ldr	r3, [r6, #0]
 8005d30:	4658      	mov	r0, fp
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	4798      	blx	r3
 8005d36:	2320      	movs	r3, #32
 8005d38:	b2c4      	uxtb	r4, r0
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d44:	f387 8811 	msr	BASEPRI, r7
      if (start > end){
 8005d48:	f7fd bbf4 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005d4c:	6833      	ldr	r3, [r6, #0]
 8005d4e:	4658      	mov	r0, fp
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	4798      	blx	r3
 8005d54:	2320      	movs	r3, #32
 8005d56:	b2c4      	uxtb	r4, r0
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d60:	2300      	movs	r3, #0
 8005d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d64:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005d68:	f7fd bbe4 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005d6c:	6833      	ldr	r3, [r6, #0]
 8005d6e:	4658      	mov	r0, fp
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	4798      	blx	r3
 8005d74:	2320      	movs	r3, #32
 8005d76:	b2c4      	uxtb	r4, r0
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d80:	2300      	movs	r3, #0
 8005d82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d84:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005d88:	f7fd bbd4 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005d8c:	6833      	ldr	r3, [r6, #0]
 8005d8e:	4658      	mov	r0, fp
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	4798      	blx	r3
 8005d94:	2320      	movs	r3, #32
 8005d96:	b2c4      	uxtb	r4, r0
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005da0:	2300      	movs	r3, #0
 8005da2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005da4:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005da8:	4590      	cmp	r8, r2
 8005daa:	f4fd abc3 	bcc.w	8003534 <CharacterInputThread+0x364>
 8005dae:	f7fe bdd2 	b.w	8004956 <CharacterInputThread+0x1786>
      c=streamGet(&OSTRICHPORT);
 8005db2:	6833      	ldr	r3, [r6, #0]
 8005db4:	4658      	mov	r0, fp
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	4798      	blx	r3
 8005dba:	2320      	movs	r3, #32
 8005dbc:	b2c4      	uxtb	r4, r0
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dca:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005dce:	f7fd bbb1 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005dd2:	6833      	ldr	r3, [r6, #0]
 8005dd4:	4658      	mov	r0, fp
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	4798      	blx	r3
 8005dda:	2320      	movs	r3, #32
 8005ddc:	b2c4      	uxtb	r4, r0
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005de6:	2300      	movs	r3, #0
 8005de8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dea:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005dee:	f7fd bba1 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005df2:	6833      	ldr	r3, [r6, #0]
 8005df4:	4658      	mov	r0, fp
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	4798      	blx	r3
 8005dfa:	2320      	movs	r3, #32
 8005dfc:	b2c4      	uxtb	r4, r0
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e06:	2300      	movs	r3, #0
 8005e08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e0a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005e0e:	f7fd bb91 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005e12:	6833      	ldr	r3, [r6, #0]
 8005e14:	4658      	mov	r0, fp
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	4798      	blx	r3
 8005e1a:	2320      	movs	r3, #32
 8005e1c:	b2c4      	uxtb	r4, r0
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e26:	2300      	movs	r3, #0
 8005e28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e2a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005e2e:	f7fd bb81 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005e32:	6833      	ldr	r3, [r6, #0]
 8005e34:	4658      	mov	r0, fp
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	4798      	blx	r3
 8005e3a:	2320      	movs	r3, #32
 8005e3c:	b2c4      	uxtb	r4, r0
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e46:	2300      	movs	r3, #0
 8005e48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e4a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005e4e:	f7fd bb71 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005e52:	6833      	ldr	r3, [r6, #0]
 8005e54:	4658      	mov	r0, fp
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	4798      	blx	r3
 8005e5a:	2320      	movs	r3, #32
 8005e5c:	b2c4      	uxtb	r4, r0
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e66:	2300      	movs	r3, #0
 8005e68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e6a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005e6e:	f7fd bb61 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005e72:	6833      	ldr	r3, [r6, #0]
 8005e74:	4658      	mov	r0, fp
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	4798      	blx	r3
 8005e7a:	2320      	movs	r3, #32
 8005e7c:	b2c4      	uxtb	r4, r0
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e86:	2300      	movs	r3, #0
 8005e88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e8a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005e8e:	f7fd bb51 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005e92:	6833      	ldr	r3, [r6, #0]
 8005e94:	4658      	mov	r0, fp
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	4798      	blx	r3
 8005e9a:	2320      	movs	r3, #32
 8005e9c:	b2c4      	uxtb	r4, r0
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005eaa:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005eae:	f7fd bb41 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005eb2:	6833      	ldr	r3, [r6, #0]
 8005eb4:	4658      	mov	r0, fp
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	4798      	blx	r3
 8005eba:	2320      	movs	r3, #32
 8005ebc:	b2c4      	uxtb	r4, r0
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005eca:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005ece:	f7fd bb31 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005ed2:	6833      	ldr	r3, [r6, #0]
 8005ed4:	4658      	mov	r0, fp
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	4798      	blx	r3
 8005eda:	2320      	movs	r3, #32
 8005edc:	b2c4      	uxtb	r4, r0
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005eea:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005eee:	f7fd bb21 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005ef2:	6833      	ldr	r3, [r6, #0]
 8005ef4:	4658      	mov	r0, fp
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	4798      	blx	r3
 8005efa:	2320      	movs	r3, #32
 8005efc:	b2c4      	uxtb	r4, r0
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f06:	2300      	movs	r3, #0
 8005f08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f0a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005f0e:	f7fd bb11 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005f12:	6833      	ldr	r3, [r6, #0]
 8005f14:	4658      	mov	r0, fp
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	4798      	blx	r3
 8005f1a:	2320      	movs	r3, #32
 8005f1c:	b2c4      	uxtb	r4, r0
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f26:	2300      	movs	r3, #0
 8005f28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f2a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005f2e:	f7fd bb01 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005f32:	6833      	ldr	r3, [r6, #0]
 8005f34:	4658      	mov	r0, fp
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	4798      	blx	r3
 8005f3a:	2320      	movs	r3, #32
 8005f3c:	b2c4      	uxtb	r4, r0
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f46:	2300      	movs	r3, #0
 8005f48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f4a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005f4e:	f7fd baf1 	b.w	8003534 <CharacterInputThread+0x364>
 8005f52:	bf00      	nop
 8005f54:	20001a80 	.word	0x20001a80
 8005f58:	08009e90 	.word	0x08009e90
 8005f5c:	20000ef0 	.word	0x20000ef0
      c=streamGet(&OSTRICHPORT);
 8005f60:	6833      	ldr	r3, [r6, #0]
 8005f62:	4658      	mov	r0, fp
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	4798      	blx	r3
 8005f68:	2320      	movs	r3, #32
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f72:	2300      	movs	r3, #0
 8005f74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f76:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005f7a:	4542      	cmp	r2, r8
 8005f7c:	f67e abbc 	bls.w	80046f8 <CharacterInputThread+0x1528>
      c=streamGet(&OSTRICHPORT);
 8005f80:	b2c4      	uxtb	r4, r0
 8005f82:	f7fd bad7 	b.w	8003534 <CharacterInputThread+0x364>
 8005f86:	6833      	ldr	r3, [r6, #0]
 8005f88:	4658      	mov	r0, fp
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	4798      	blx	r3
 8005f8e:	2320      	movs	r3, #32
 8005f90:	b2c4      	uxtb	r4, r0
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f9e:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005fa2:	f7fd bac7 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005fa6:	6833      	ldr	r3, [r6, #0]
 8005fa8:	4658      	mov	r0, fp
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	4798      	blx	r3
 8005fae:	2320      	movs	r3, #32
 8005fb0:	b2c4      	uxtb	r4, r0
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005fba:	2300      	movs	r3, #0
 8005fbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fbe:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005fc2:	4590      	cmp	r8, r2
 8005fc4:	f4fd aab6 	bcc.w	8003534 <CharacterInputThread+0x364>
 8005fc8:	f7fe ba2d 	b.w	8004426 <CharacterInputThread+0x1256>
        cntdwn = 0;
 8005fcc:	2300      	movs	r3, #0
        state = CONFIG_Cn;
 8005fce:	2724      	movs	r7, #36	; 0x24
        cntdwn = 0;
 8005fd0:	930a      	str	r3, [sp, #40]	; 0x28
 8005fd2:	f7fd b97c 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8005fd6:	6833      	ldr	r3, [r6, #0]
 8005fd8:	4658      	mov	r0, fp
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	4798      	blx	r3
 8005fde:	2320      	movs	r3, #32
 8005fe0:	b2c4      	uxtb	r4, r0
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005fea:	2300      	movs	r3, #0
 8005fec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fee:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8005ff2:	f7fd ba9f 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8005ff6:	6833      	ldr	r3, [r6, #0]
 8005ff8:	4658      	mov	r0, fp
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	4798      	blx	r3
 8005ffe:	2320      	movs	r3, #32
 8006000:	b2c4      	uxtb	r4, r0
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800600a:	2300      	movs	r3, #0
 800600c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800600e:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8006012:	f7fd ba8f 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8006016:	6833      	ldr	r3, [r6, #0]
 8006018:	4658      	mov	r0, fp
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	4798      	blx	r3
 800601e:	2320      	movs	r3, #32
 8006020:	b2c4      	uxtb	r4, r0
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800602a:	2300      	movs	r3, #0
 800602c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800602e:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8006032:	4542      	cmp	r2, r8
 8006034:	f67e acd3 	bls.w	80049de <CharacterInputThread+0x180e>
        tbuf[cntdwn++] = c;
 8006038:	950a      	str	r5, [sp, #40]	; 0x28
 800603a:	f7fd ba7b 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 800603e:	6833      	ldr	r3, [r6, #0]
 8006040:	4658      	mov	r0, fp
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	4798      	blx	r3
 8006046:	2320      	movs	r3, #32
 8006048:	b2c4      	uxtb	r4, r0
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006052:	2300      	movs	r3, #0
 8006054:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006056:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800605a:	f7fd ba6b 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 800605e:	6833      	ldr	r3, [r6, #0]
 8006060:	4658      	mov	r0, fp
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	4798      	blx	r3
 8006066:	2320      	movs	r3, #32
 8006068:	b2c4      	uxtb	r4, r0
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006072:	2300      	movs	r3, #0
 8006074:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006076:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800607a:	f7fd ba5b 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 800607e:	6833      	ldr	r3, [r6, #0]
 8006080:	4658      	mov	r0, fp
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	4798      	blx	r3
 8006086:	2320      	movs	r3, #32
 8006088:	b2c4      	uxtb	r4, r0
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006094:	f387 8811 	msr	BASEPRI, r7
      if (start > end){
 8006098:	f7fd ba4c 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 800609c:	6833      	ldr	r3, [r6, #0]
 800609e:	4658      	mov	r0, fp
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	4798      	blx	r3
 80060a4:	2320      	movs	r3, #32
 80060a6:	b2c4      	uxtb	r4, r0
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80060b0:	2300      	movs	r3, #0
 80060b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060b4:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80060b8:	f7fd ba3c 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80060bc:	6833      	ldr	r3, [r6, #0]
 80060be:	4658      	mov	r0, fp
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	4798      	blx	r3
 80060c4:	2320      	movs	r3, #32
 80060c6:	b2c4      	uxtb	r4, r0
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060d2:	f387 8811 	msr	BASEPRI, r7
      if (start > end){
 80060d6:	f7fd ba2d 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80060da:	6833      	ldr	r3, [r6, #0]
 80060dc:	4658      	mov	r0, fp
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	4798      	blx	r3
 80060e2:	2320      	movs	r3, #32
 80060e4:	b2c4      	uxtb	r4, r0
 80060e6:	f383 8811 	msr	BASEPRI, r3
 80060ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80060ee:	2300      	movs	r3, #0
 80060f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060f2:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80060f6:	f7fd ba1d 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80060fa:	6833      	ldr	r3, [r6, #0]
 80060fc:	4658      	mov	r0, fp
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	4798      	blx	r3
 8006102:	2320      	movs	r3, #32
 8006104:	b2c4      	uxtb	r4, r0
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800610e:	2300      	movs	r3, #0
 8006110:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006112:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8006116:	f7fd ba0d 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 800611a:	6833      	ldr	r3, [r6, #0]
 800611c:	4658      	mov	r0, fp
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	4798      	blx	r3
 8006122:	2320      	movs	r3, #32
 8006124:	b2c4      	uxtb	r4, r0
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800612e:	2300      	movs	r3, #0
 8006130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006132:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8006136:	4590      	cmp	r8, r2
 8006138:	f4fd a9fc 	bcc.w	8003534 <CharacterInputThread+0x364>
 800613c:	f7fe bb21 	b.w	8004782 <CharacterInputThread+0x15b2>
          state = UNHANDLED;
 8006140:	2726      	movs	r7, #38	; 0x26
 8006142:	f7fd b8c4 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 8006146:	6833      	ldr	r3, [r6, #0]
 8006148:	4658      	mov	r0, fp
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	4798      	blx	r3
 800614e:	2320      	movs	r3, #32
 8006150:	b2c4      	uxtb	r4, r0
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800615a:	2300      	movs	r3, #0
 800615c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800615e:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8006162:	f7fd b9e7 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8006166:	6833      	ldr	r3, [r6, #0]
 8006168:	4658      	mov	r0, fp
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	4798      	blx	r3
 800616e:	2320      	movs	r3, #32
 8006170:	b2c4      	uxtb	r4, r0
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800617a:	2300      	movs	r3, #0
 800617c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800617e:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8006182:	f7fd b9d7 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8006186:	6833      	ldr	r3, [r6, #0]
 8006188:	4658      	mov	r0, fp
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	4798      	blx	r3
 800618e:	2320      	movs	r3, #32
 8006190:	b2c4      	uxtb	r4, r0
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800619a:	2300      	movs	r3, #0
 800619c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800619e:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80061a2:	f7fd b9c7 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80061a6:	6833      	ldr	r3, [r6, #0]
 80061a8:	4658      	mov	r0, fp
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	4798      	blx	r3
 80061ae:	2320      	movs	r3, #32
 80061b0:	b2c4      	uxtb	r4, r0
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061ba:	2300      	movs	r3, #0
 80061bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061be:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80061c2:	f7fd b9b7 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80061c6:	6833      	ldr	r3, [r6, #0]
 80061c8:	4658      	mov	r0, fp
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	4798      	blx	r3
 80061ce:	2320      	movs	r3, #32
 80061d0:	b2c4      	uxtb	r4, r0
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061da:	2300      	movs	r3, #0
 80061dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061de:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80061e2:	4590      	cmp	r8, r2
 80061e4:	f4fd a9a6 	bcc.w	8003534 <CharacterInputThread+0x364>
 80061e8:	f7fd bf95 	b.w	8004116 <CharacterInputThread+0xf46>
      c=streamGet(&OSTRICHPORT);
 80061ec:	6833      	ldr	r3, [r6, #0]
 80061ee:	4658      	mov	r0, fp
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	4798      	blx	r3
 80061f4:	2320      	movs	r3, #32
 80061f6:	b2c4      	uxtb	r4, r0
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006200:	2300      	movs	r3, #0
 8006202:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006204:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8006208:	f7fd b994 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 800620c:	6833      	ldr	r3, [r6, #0]
 800620e:	4658      	mov	r0, fp
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	4798      	blx	r3
 8006214:	2320      	movs	r3, #32
 8006216:	b2c4      	uxtb	r4, r0
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006220:	2300      	movs	r3, #0
 8006222:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006224:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8006228:	f7fd b984 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 800622c:	6833      	ldr	r3, [r6, #0]
 800622e:	4658      	mov	r0, fp
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	4798      	blx	r3
 8006234:	2320      	movs	r3, #32
 8006236:	b2c4      	uxtb	r4, r0
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006240:	2300      	movs	r3, #0
 8006242:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006244:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8006248:	f7fd b974 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 800624c:	6833      	ldr	r3, [r6, #0]
 800624e:	4658      	mov	r0, fp
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	4798      	blx	r3
 8006254:	2320      	movs	r3, #32
 8006256:	b2c4      	uxtb	r4, r0
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006260:	2300      	movs	r3, #0
 8006262:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006264:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8006268:	f7fd b964 	b.w	8003534 <CharacterInputThread+0x364>
          tbuf[cntdwn++] = c;
 800626c:	950a      	str	r5, [sp, #40]	; 0x28
 800626e:	f7fd b961 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8006272:	6833      	ldr	r3, [r6, #0]
 8006274:	4658      	mov	r0, fp
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	4798      	blx	r3
 800627a:	2320      	movs	r3, #32
 800627c:	b2c4      	uxtb	r4, r0
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006286:	2300      	movs	r3, #0
 8006288:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800628a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800628e:	4542      	cmp	r2, r8
 8006290:	f63d a950 	bhi.w	8003534 <CharacterInputThread+0x364>
 8006294:	f7fd b92e 	b.w	80034f4 <CharacterInputThread+0x324>
      c=streamGet(&OSTRICHPORT);
 8006298:	6833      	ldr	r3, [r6, #0]
 800629a:	4658      	mov	r0, fp
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	4798      	blx	r3
 80062a0:	2320      	movs	r3, #32
 80062a2:	b2c4      	uxtb	r4, r0
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062ac:	2300      	movs	r3, #0
 80062ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062b0:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80062b4:	4542      	cmp	r2, r8
 80062b6:	f67e ab92 	bls.w	80049de <CharacterInputThread+0x180e>
        tbuf[cntdwn++] = c;
 80062ba:	950a      	str	r5, [sp, #40]	; 0x28
 80062bc:	f7fd b93a 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80062c0:	6833      	ldr	r3, [r6, #0]
 80062c2:	4658      	mov	r0, fp
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	4798      	blx	r3
 80062c8:	2320      	movs	r3, #32
 80062ca:	b2c4      	uxtb	r4, r0
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062d4:	2300      	movs	r3, #0
 80062d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062d8:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80062dc:	4590      	cmp	r8, r2
 80062de:	f4fd a929 	bcc.w	8003534 <CharacterInputThread+0x364>
 80062e2:	f7fe b95f 	b.w	80045a4 <CharacterInputThread+0x13d4>
      c=streamGet(&OSTRICHPORT);
 80062e6:	6833      	ldr	r3, [r6, #0]
 80062e8:	4658      	mov	r0, fp
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	4798      	blx	r3
 80062ee:	2320      	movs	r3, #32
 80062f0:	b2c4      	uxtb	r4, r0
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062fa:	2300      	movs	r3, #0
 80062fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062fe:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8006302:	4590      	cmp	r8, r2
 8006304:	f4fd a916 	bcc.w	8003534 <CharacterInputThread+0x364>
 8006308:	f7fd bf68 	b.w	80041dc <CharacterInputThread+0x100c>
      c=streamGet(&OSTRICHPORT);
 800630c:	6833      	ldr	r3, [r6, #0]
 800630e:	4658      	mov	r0, fp
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	4798      	blx	r3
 8006314:	2320      	movs	r3, #32
 8006316:	b2c4      	uxtb	r4, r0
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006320:	2300      	movs	r3, #0
 8006322:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006324:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8006328:	4590      	cmp	r8, r2
 800632a:	f4fd a903 	bcc.w	8003534 <CharacterInputThread+0x364>
 800632e:	f7fd bea0 	b.w	8004072 <CharacterInputThread+0xea2>
      c=streamGet(&OSTRICHPORT);
 8006332:	6833      	ldr	r3, [r6, #0]
 8006334:	4658      	mov	r0, fp
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	4798      	blx	r3
 800633a:	2320      	movs	r3, #32
 800633c:	b2c4      	uxtb	r4, r0
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006346:	2300      	movs	r3, #0
 8006348:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800634a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800634e:	f7fd b8f1 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8006352:	6833      	ldr	r3, [r6, #0]
 8006354:	4658      	mov	r0, fp
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	4798      	blx	r3
 800635a:	2320      	movs	r3, #32
 800635c:	b2c4      	uxtb	r4, r0
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006366:	2300      	movs	r3, #0
 8006368:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800636a:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 800636e:	4590      	cmp	r8, r2
 8006370:	f4fd a8e0 	bcc.w	8003534 <CharacterInputThread+0x364>
 8006374:	f7fd ba07 	b.w	8003786 <CharacterInputThread+0x5b6>
      c=streamGet(&OSTRICHPORT);
 8006378:	6833      	ldr	r3, [r6, #0]
 800637a:	4658      	mov	r0, fp
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	4798      	blx	r3
 8006380:	2320      	movs	r3, #32
 8006382:	b2c4      	uxtb	r4, r0
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800638c:	2300      	movs	r3, #0
 800638e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006390:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 8006394:	f7fd b8ce 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 8006398:	6833      	ldr	r3, [r6, #0]
 800639a:	4658      	mov	r0, fp
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	4798      	blx	r3
 80063a0:	2320      	movs	r3, #32
 80063a2:	b2c4      	uxtb	r4, r0
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063ae:	f387 8811 	msr	BASEPRI, r7
      if (start > end){
 80063b2:	f7fd b8bf 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80063b6:	6833      	ldr	r3, [r6, #0]
 80063b8:	4658      	mov	r0, fp
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	4798      	blx	r3
 80063be:	2320      	movs	r3, #32
 80063c0:	b2c4      	uxtb	r4, r0
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80063ca:	2300      	movs	r3, #0
 80063cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063ce:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80063d2:	f7fd b8af 	b.w	8003534 <CharacterInputThread+0x364>
      c=streamGet(&OSTRICHPORT);
 80063d6:	6833      	ldr	r3, [r6, #0]
 80063d8:	4658      	mov	r0, fp
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	4798      	blx	r3
 80063de:	2320      	movs	r3, #32
 80063e0:	b2c4      	uxtb	r4, r0
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80063ea:	2300      	movs	r3, #0
 80063ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063ee:	f383 8811 	msr	BASEPRI, r3
      if (start > end){
 80063f2:	f7fd b89f 	b.w	8003534 <CharacterInputThread+0x364>
        tbuf[cntdwn++] = c;
 80063f6:	950a      	str	r5, [sp, #40]	; 0x28
          state = CONFIG_CnCs;
 80063f8:	2725      	movs	r7, #37	; 0x25
 80063fa:	f7fc bf68 	b.w	80032ce <CharacterInputThread+0xfe>
          state = SERIAL_NS;
 80063fe:	270f      	movs	r7, #15
 8006400:	f7fc bf65 	b.w	80032ce <CharacterInputThread+0xfe>
          state = VERSION;
 8006404:	2701      	movs	r7, #1
 8006406:	f7fc bf62 	b.w	80032ce <CharacterInputThread+0xfe>
      c=streamGet(&OSTRICHPORT);
 800640a:	6833      	ldr	r3, [r6, #0]
 800640c:	4658      	mov	r0, fp
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	4798      	blx	r3
 8006412:	2320      	movs	r3, #32
 8006414:	b2c4      	uxtb	r4, r0
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800641e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006420:	f387 8811 	msr	BASEPRI, r7
      if (start > end){
 8006424:	f7fd b886 	b.w	8003534 <CharacterInputThread+0x364>
	...

08006430 <cmd_wc>:

  write_single_byte(data, address, 0);
  chprintf(chp, "Data: %02x @ address %08x\r\n", data, address);
}

void cmd_wc(BaseSequentialStream *chp, int argc, char *argv[]){
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	460d      	mov	r5, r1
  (void)* argv;
  (void)argc;
  //uint8_t data;
  //int32_t address;
  const char * const usage = "Usage: wc\r\n";
  chprintf(chp, "Writes config data\r\n");
 8006434:	490a      	ldr	r1, [pc, #40]	; (8006460 <cmd_wc+0x30>)
void cmd_wc(BaseSequentialStream *chp, int argc, char *argv[]){
 8006436:	4604      	mov	r4, r0
  chprintf(chp, "Writes config data\r\n");
 8006438:	f7fc fa62 	bl	8002900 <chprintf>
  if (argc < 2) {
 800643c:	2d01      	cmp	r5, #1
 800643e:	dd05      	ble.n	800644c <cmd_wc+0x1c>
//    .data[12]  = 0xFF,
//    .data[13]  = 0xFF,
//    .data[14]  = 0xFF
//  };
  write_config(&cfdat[0]);
  chprintf(chp, "Done.\r\n");
 8006440:	4620      	mov	r0, r4
 8006442:	4908      	ldr	r1, [pc, #32]	; (8006464 <cmd_wc+0x34>)
}
 8006444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chprintf(chp, "Done.\r\n");
 8006448:	f7fc ba5a 	b.w	8002900 <chprintf>
    chprintf(chp, usage);
 800644c:	4906      	ldr	r1, [pc, #24]	; (8006468 <cmd_wc+0x38>)
 800644e:	4620      	mov	r0, r4
 8006450:	f7fc fa56 	bl	8002900 <chprintf>
  chprintf(chp, "Done.\r\n");
 8006454:	4620      	mov	r0, r4
 8006456:	4903      	ldr	r1, [pc, #12]	; (8006464 <cmd_wc+0x34>)
}
 8006458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chprintf(chp, "Done.\r\n");
 800645c:	f7fc ba50 	b.w	8002900 <chprintf>
 8006460:	0800a038 	.word	0x0800a038
 8006464:	0800a05c 	.word	0x0800a05c
 8006468:	0800a050 	.word	0x0800a050
 800646c:	00000000 	.word	0x00000000

08006470 <cmd_echo>:

#if (SHELL_CMD_ECHO_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_echo(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc != 1) {
 8006470:	2901      	cmp	r1, #1
 8006472:	d003      	beq.n	800647c <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 8006474:	4a03      	ldr	r2, [pc, #12]	; (8006484 <cmd_echo+0x14>)
 8006476:	4904      	ldr	r1, [pc, #16]	; (8006488 <cmd_echo+0x18>)
 8006478:	f7fc ba42 	b.w	8002900 <chprintf>
    return;
  }
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 800647c:	6812      	ldr	r2, [r2, #0]
 800647e:	4903      	ldr	r1, [pc, #12]	; (800648c <cmd_echo+0x1c>)
 8006480:	f7fc ba3e 	b.w	8002900 <chprintf>
 8006484:	0800a064 	.word	0x0800a064
 8006488:	0800a074 	.word	0x0800a074
 800648c:	0800a080 	.word	0x0800a080

08006490 <cmd_test>:

void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006490:	b510      	push	{r4, lr}
  (void)* argv;
  (void)argc;
  char text[10];
  uint16_t val;

  chprintf(chp, "Enter Number (<256) \r\n");
 8006492:	4911      	ldr	r1, [pc, #68]	; (80064d8 <cmd_test+0x48>)
void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006494:	b084      	sub	sp, #16
 8006496:	4604      	mov	r4, r0
  chprintf(chp, "Enter Number (<256) \r\n");
 8006498:	f7fc fa32 	bl	8002900 <chprintf>
//  ret = chscanf(chp, "%7s", &text);
  if (chscanf((BaseBufferedStream *)chp, "%10s", &text) != 1){
 800649c:	490f      	ldr	r1, [pc, #60]	; (80064dc <cmd_test+0x4c>)
 800649e:	4620      	mov	r0, r4
 80064a0:	aa01      	add	r2, sp, #4
 80064a2:	f7fb ff6d 	bl	8002380 <chscanf.constprop.0>
 80064a6:	2801      	cmp	r0, #1
 80064a8:	d005      	beq.n	80064b6 <cmd_test+0x26>
    chprintf(chp, "Something went wrong\r\n");
 80064aa:	490d      	ldr	r1, [pc, #52]	; (80064e0 <cmd_test+0x50>)
 80064ac:	4620      	mov	r0, r4
 80064ae:	f7fc fa27 	bl	8002900 <chprintf>

  chprintf(chp, "You entered text: %s Val: %04x got: %02x\r\n",
                      text, val);
  chprintf(ost, "OK\r\n");

}
 80064b2:	b004      	add	sp, #16
 80064b4:	bd10      	pop	{r4, pc}
  val = (uint16_t)strtol(text, NULL, 0);
 80064b6:	2200      	movs	r2, #0
 80064b8:	4611      	mov	r1, r2
 80064ba:	a801      	add	r0, sp, #4
 80064bc:	f003 f828 	bl	8009510 <strtol>
  chprintf(chp, "You entered text: %s Val: %04x got: %02x\r\n",
 80064c0:	aa01      	add	r2, sp, #4
 80064c2:	b283      	uxth	r3, r0
 80064c4:	4907      	ldr	r1, [pc, #28]	; (80064e4 <cmd_test+0x54>)
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7fc fa1a 	bl	8002900 <chprintf>
  chprintf(ost, "OK\r\n");
 80064cc:	4906      	ldr	r1, [pc, #24]	; (80064e8 <cmd_test+0x58>)
 80064ce:	4807      	ldr	r0, [pc, #28]	; (80064ec <cmd_test+0x5c>)
 80064d0:	f7fc fa16 	bl	8002900 <chprintf>
}
 80064d4:	b004      	add	sp, #16
 80064d6:	bd10      	pop	{r4, pc}
 80064d8:	0800a088 	.word	0x0800a088
 80064dc:	08009bac 	.word	0x08009bac
 80064e0:	0800a0a0 	.word	0x0800a0a0
 80064e4:	0800a0b8 	.word	0x0800a0b8
 80064e8:	0800a0e4 	.word	0x0800a0e4
 80064ec:	200013a8 	.word	0x200013a8

080064f0 <cmd_wb>:
void cmd_wb(BaseSequentialStream *chp, int argc, char *argv[]){
 80064f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f4:	460e      	mov	r6, r1
  chprintf(chp, "Writes byte to address\r\n");
 80064f6:	4922      	ldr	r1, [pc, #136]	; (8006580 <cmd_wb+0x90>)
void cmd_wb(BaseSequentialStream *chp, int argc, char *argv[]){
 80064f8:	4615      	mov	r5, r2
 80064fa:	4604      	mov	r4, r0
  chprintf(chp, "Writes byte to address\r\n");
 80064fc:	f7fc fa00 	bl	8002900 <chprintf>
  if (argc != 2) {
 8006500:	2e02      	cmp	r6, #2
 8006502:	d005      	beq.n	8006510 <cmd_wb+0x20>
    chprintf(chp, usage);
 8006504:	4620      	mov	r0, r4
 8006506:	491f      	ldr	r1, [pc, #124]	; (8006584 <cmd_wb+0x94>)
}
 8006508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    chprintf(chp, usage);
 800650c:	f7fc b9f8 	b.w	8002900 <chprintf>
  address = (int32_t)strtol(argv[0], NULL, 0);
 8006510:	2200      	movs	r2, #0
 8006512:	4611      	mov	r1, r2
 8006514:	6828      	ldr	r0, [r5, #0]
 8006516:	f002 fffb 	bl	8009510 <strtol>
  data = (uint8_t)strtol(argv[1], NULL, 0);
 800651a:	2200      	movs	r2, #0
  address = (int32_t)strtol(argv[0], NULL, 0);
 800651c:	4603      	mov	r3, r0
  data = (uint8_t)strtol(argv[1], NULL, 0);
 800651e:	4611      	mov	r1, r2
 8006520:	6868      	ldr	r0, [r5, #4]
  address = (int32_t)strtol(argv[0], NULL, 0);
 8006522:	461d      	mov	r5, r3
  data = (uint8_t)strtol(argv[1], NULL, 0);
 8006524:	f002 fff4 	bl	8009510 <strtol>
  MRC_ACTIVE;  // Reset '590
 8006528:	4b17      	ldr	r3, [pc, #92]	; (8006588 <cmd_wb+0x98>)
 800652a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800652e:	b2c6      	uxtb	r6, r0
 8006530:	8359      	strh	r1, [r3, #26]
  __NOP();
 8006532:	bf00      	nop
  for (i=0; i<address; i++){
 8006534:	2d00      	cmp	r5, #0
  MRC_INACTIVE;
 8006536:	8319      	strh	r1, [r3, #24]
  for (i=0; i<address; i++){
 8006538:	dd09      	ble.n	800654e <cmd_wb+0x5e>
  CNT_ACTIVE;
 800653a:	4914      	ldr	r1, [pc, #80]	; (800658c <cmd_wb+0x9c>)
  for (i=0; i<address; i++){
 800653c:	2300      	movs	r3, #0
  CNT_ACTIVE;
 800653e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006542:	830a      	strh	r2, [r1, #24]
  __NOP();
 8006544:	bf00      	nop
  for (i=0; i<address; i++){
 8006546:	3301      	adds	r3, #1
 8006548:	429d      	cmp	r5, r3
  CNT_INACTIVE;
 800654a:	834a      	strh	r2, [r1, #26]
  for (i=0; i<address; i++){
 800654c:	d1f9      	bne.n	8006542 <cmd_wb+0x52>
  select_chip(15); // RAM is Chip 15
 800654e:	200f      	movs	r0, #15
 8006550:	f7fa fabe 	bl	8000ad0 <select_chip>
  check_BUS();
 8006554:	f7fa fa7c 	bl	8000a50 <check_BUS>
  write_byte(data);
 8006558:	4630      	mov	r0, r6
 800655a:	f7fb fe21 	bl	80021a0 <write_byte>
  BUS_in_use = 1;
 800655e:	4f0c      	ldr	r7, [pc, #48]	; (8006590 <cmd_wb+0xa0>)
  TRESET_INACTIVE;
 8006560:	4909      	ldr	r1, [pc, #36]	; (8006588 <cmd_wb+0x98>)
 8006562:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  chprintf(chp, "Data: %02x @ address %08x\r\n", data, address);
 8006566:	4620      	mov	r0, r4
  BUS_in_use = 1;
 8006568:	2401      	movs	r4, #1
  TRESET_INACTIVE;
 800656a:	f8a1 c01a 	strh.w	ip, [r1, #26]
 800656e:	462b      	mov	r3, r5
 8006570:	4632      	mov	r2, r6
  BUS_in_use = 1;
 8006572:	703c      	strb	r4, [r7, #0]
 8006574:	4907      	ldr	r1, [pc, #28]	; (8006594 <cmd_wb+0xa4>)
}
 8006576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chprintf(chp, "Data: %02x @ address %08x\r\n", data, address);
 800657a:	f7fc b9c1 	b.w	8002900 <chprintf>
 800657e:	bf00      	nop
 8006580:	0800a0ec 	.word	0x0800a0ec
 8006584:	0800a108 	.word	0x0800a108
 8006588:	40020400 	.word	0x40020400
 800658c:	40020000 	.word	0x40020000
 8006590:	20000c48 	.word	0x20000c48
 8006594:	0800a124 	.word	0x0800a124
	...

080065a0 <cmd_rb>:
void cmd_rb(BaseSequentialStream *chp, int argc, char *argv[]){
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	460d      	mov	r5, r1
  chprintf(chp, "Reads byte from address\r\n");
 80065a4:	490e      	ldr	r1, [pc, #56]	; (80065e0 <cmd_rb+0x40>)
void cmd_rb(BaseSequentialStream *chp, int argc, char *argv[]){
 80065a6:	4616      	mov	r6, r2
 80065a8:	4604      	mov	r4, r0
  chprintf(chp, "Reads byte from address\r\n");
 80065aa:	f7fc f9a9 	bl	8002900 <chprintf>
  if (argc != 1) {
 80065ae:	2d01      	cmp	r5, #1
 80065b0:	d005      	beq.n	80065be <cmd_rb+0x1e>
    chprintf(chp, usage);
 80065b2:	4620      	mov	r0, r4
 80065b4:	490b      	ldr	r1, [pc, #44]	; (80065e4 <cmd_rb+0x44>)
}
 80065b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    chprintf(chp, usage);
 80065ba:	f7fc b9a1 	b.w	8002900 <chprintf>
  address = (int32_t)strtol(argv[0], NULL, 0);
 80065be:	2200      	movs	r2, #0
 80065c0:	4611      	mov	r1, r2
 80065c2:	6830      	ldr	r0, [r6, #0]
 80065c4:	f002 ffa4 	bl	8009510 <strtol>
 80065c8:	4605      	mov	r5, r0
  data=read_single_byte(address, 0);
 80065ca:	f7fb fd59 	bl	8002080 <read_single_byte.constprop.0>
  chprintf(chp, "Data on %08x is %02x\r\n", address, data);
 80065ce:	462a      	mov	r2, r5
  data=read_single_byte(address, 0);
 80065d0:	4603      	mov	r3, r0
  chprintf(chp, "Data on %08x is %02x\r\n", address, data);
 80065d2:	4905      	ldr	r1, [pc, #20]	; (80065e8 <cmd_rb+0x48>)
 80065d4:	4620      	mov	r0, r4
}
 80065d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chprintf(chp, "Data on %08x is %02x\r\n", address, data);
 80065da:	f7fc b991 	b.w	8002900 <chprintf>
 80065de:	bf00      	nop
 80065e0:	0800a140 	.word	0x0800a140
 80065e4:	0800a15c 	.word	0x0800a15c
 80065e8:	0800a174 	.word	0x0800a174
 80065ec:	00000000 	.word	0x00000000

080065f0 <cmd_fill>:
void cmd_fill(BaseSequentialStream *chp, int argc, char *argv[]){
 80065f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065f2:	460e      	mov	r6, r1
 80065f4:	b0c1      	sub	sp, #260	; 0x104
  chprintf(chp, "Fills block with bytes from address\r\n");
 80065f6:	4921      	ldr	r1, [pc, #132]	; (800667c <cmd_fill+0x8c>)
void cmd_fill(BaseSequentialStream *chp, int argc, char *argv[]){
 80065f8:	4614      	mov	r4, r2
 80065fa:	4605      	mov	r5, r0
  chprintf(chp, "Fills block with bytes from address\r\n");
 80065fc:	f7fc f980 	bl	8002900 <chprintf>
  if (argc != 3) {
 8006600:	2e03      	cmp	r6, #3
 8006602:	d005      	beq.n	8006610 <cmd_fill+0x20>
    chprintf(chp, usage);
 8006604:	491e      	ldr	r1, [pc, #120]	; (8006680 <cmd_fill+0x90>)
 8006606:	4628      	mov	r0, r5
 8006608:	f7fc f97a 	bl	8002900 <chprintf>
}
 800660c:	b041      	add	sp, #260	; 0x104
 800660e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 8006610:	2200      	movs	r2, #0
 8006612:	4611      	mov	r1, r2
 8006614:	6820      	ldr	r0, [r4, #0]
 8006616:	f002 ff7b 	bl	8009510 <strtol>
  address = (int32_t)strtol(argv[1], NULL, 0);
 800661a:	2200      	movs	r2, #0
 800661c:	4611      	mov	r1, r2
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 800661e:	4606      	mov	r6, r0
  address = (int32_t)strtol(argv[1], NULL, 0);
 8006620:	6860      	ldr	r0, [r4, #4]
 8006622:	f002 ff75 	bl	8009510 <strtol>
  d  = (uint8_t)strtol(argv[2], NULL, 0);
 8006626:	2200      	movs	r2, #0
  address = (int32_t)strtol(argv[1], NULL, 0);
 8006628:	4607      	mov	r7, r0
  d  = (uint8_t)strtol(argv[2], NULL, 0);
 800662a:	4611      	mov	r1, r2
 800662c:	68a0      	ldr	r0, [r4, #8]
 800662e:	f002 ff6f 	bl	8009510 <strtol>
  if (lcnt > 256){
 8006632:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
  d  = (uint8_t)strtol(argv[2], NULL, 0);
 8006636:	4604      	mov	r4, r0
  if (lcnt > 256){
 8006638:	dc19      	bgt.n	800666e <cmd_fill+0x7e>
  chprintf(chp, "Starting at: %8x blocksize: %8x \r\n", address, lcnt);
 800663a:	463a      	mov	r2, r7
 800663c:	4911      	ldr	r1, [pc, #68]	; (8006684 <cmd_fill+0x94>)
 800663e:	4633      	mov	r3, r6
 8006640:	4628      	mov	r0, r5
 8006642:	f7fc f95d 	bl	8002900 <chprintf>
  for (acnt = 0; acnt < lcnt; acnt ++){
 8006646:	2e00      	cmp	r6, #0
 8006648:	466a      	mov	r2, sp
 800664a:	dd06      	ble.n	800665a <cmd_fill+0x6a>
  d  = (uint8_t)strtol(argv[2], NULL, 0);
 800664c:	b2e4      	uxtb	r4, r4
 800664e:	4611      	mov	r1, r2
 8006650:	1993      	adds	r3, r2, r6
    data[acnt] = d;
 8006652:	f801 4b01 	strb.w	r4, [r1], #1
  for (acnt = 0; acnt < lcnt; acnt ++){
 8006656:	4299      	cmp	r1, r3
 8006658:	d1fb      	bne.n	8006652 <cmd_fill+0x62>
  write_block(address, lcnt, data, 0);
 800665a:	4631      	mov	r1, r6
 800665c:	4638      	mov	r0, r7
 800665e:	f7fb fdcf 	bl	8002200 <write_block.constprop.0>
  chprintf(chp, "OK.\r\n");
 8006662:	4909      	ldr	r1, [pc, #36]	; (8006688 <cmd_fill+0x98>)
 8006664:	4628      	mov	r0, r5
 8006666:	f7fc f94b 	bl	8002900 <chprintf>
}
 800666a:	b041      	add	sp, #260	; 0x104
 800666c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    chprintf(chp, "Only 256 bytes for now\r\n");
 800666e:	4907      	ldr	r1, [pc, #28]	; (800668c <cmd_fill+0x9c>)
 8006670:	4628      	mov	r0, r5
 8006672:	f7fc f945 	bl	8002900 <chprintf>
}
 8006676:	b041      	add	sp, #260	; 0x104
 8006678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667a:	bf00      	nop
 800667c:	0800a18c 	.word	0x0800a18c
 8006680:	0800a1b4 	.word	0x0800a1b4
 8006684:	0800a1f4 	.word	0x0800a1f4
 8006688:	0800a218 	.word	0x0800a218
 800668c:	0800a1d8 	.word	0x0800a1d8

08006690 <cmd_spi>:
  if (argc != 1) {
 8006690:	2901      	cmp	r1, #1
 8006692:	d002      	beq.n	800669a <cmd_spi+0xa>
    chprintf(chp, usage);
 8006694:	4908      	ldr	r1, [pc, #32]	; (80066b8 <cmd_spi+0x28>)
 8006696:	f7fc b933 	b.w	8002900 <chprintf>
 800669a:	4613      	mov	r3, r2
void cmd_spi(BaseSequentialStream *chp, int argc, char *argv[]){
 800669c:	b510      	push	{r4, lr}
  val = (int32_t)strtol(argv[0], NULL, 0);
 800669e:	2200      	movs	r2, #0
 80066a0:	4604      	mov	r4, r0
 80066a2:	4611      	mov	r1, r2
 80066a4:	6818      	ldr	r0, [r3, #0]
 80066a6:	f002 ff33 	bl	8009510 <strtol>
  chprintf(chp, "You entered: %08x \r\n", val);
 80066aa:	4904      	ldr	r1, [pc, #16]	; (80066bc <cmd_spi+0x2c>)
  val = (int32_t)strtol(argv[0], NULL, 0);
 80066ac:	4602      	mov	r2, r0
  chprintf(chp, "You entered: %08x \r\n", val);
 80066ae:	4620      	mov	r0, r4
}
 80066b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chprintf(chp, "You entered: %08x \r\n", val);
 80066b4:	f7fc b924 	b.w	8002900 <chprintf>
 80066b8:	0800a220 	.word	0x0800a220
 80066bc:	0800a234 	.word	0x0800a234

080066c0 <cmd_br>:
void cmd_br(BaseSequentialStream *chp, int argc, char *argv[]){
 80066c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c4:	460d      	mov	r5, r1
 80066c6:	b0c1      	sub	sp, #260	; 0x104
  chprintf(chp, "Prints block of bytes from address\r\n");
 80066c8:	4939      	ldr	r1, [pc, #228]	; (80067b0 <cmd_br+0xf0>)
void cmd_br(BaseSequentialStream *chp, int argc, char *argv[]){
 80066ca:	4616      	mov	r6, r2
 80066cc:	4604      	mov	r4, r0
  chprintf(chp, "Prints block of bytes from address\r\n");
 80066ce:	f7fc f917 	bl	8002900 <chprintf>
  if (argc != 2) {
 80066d2:	2d02      	cmp	r5, #2
 80066d4:	d006      	beq.n	80066e4 <cmd_br+0x24>
    chprintf(chp, usage);
 80066d6:	4937      	ldr	r1, [pc, #220]	; (80067b4 <cmd_br+0xf4>)
 80066d8:	4620      	mov	r0, r4
 80066da:	f7fc f911 	bl	8002900 <chprintf>
}
 80066de:	b041      	add	sp, #260	; 0x104
 80066e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memset(data,0,256);
 80066e4:	46e9      	mov	r9, sp
 80066e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066ea:	2100      	movs	r1, #0
 80066ec:	4648      	mov	r0, r9
 80066ee:	f002 ff1b 	bl	8009528 <memset>
  address = (int32_t)strtol(argv[1], NULL, 0);
 80066f2:	2200      	movs	r2, #0
 80066f4:	4611      	mov	r1, r2
 80066f6:	6870      	ldr	r0, [r6, #4]
 80066f8:	f002 ff0a 	bl	8009510 <strtol>
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 80066fc:	2200      	movs	r2, #0
  address = (int32_t)strtol(argv[1], NULL, 0);
 80066fe:	4680      	mov	r8, r0
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 8006700:	4611      	mov	r1, r2
 8006702:	6830      	ldr	r0, [r6, #0]
 8006704:	f002 ff04 	bl	8009510 <strtol>
  if (lcnt > 256){
 8006708:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 800670c:	4607      	mov	r7, r0
  if (lcnt > 256){
 800670e:	dc47      	bgt.n	80067a0 <cmd_br+0xe0>
  chprintf(chp, "Starting at: %08x\r\n", address);
 8006710:	4929      	ldr	r1, [pc, #164]	; (80067b8 <cmd_br+0xf8>)
 8006712:	4642      	mov	r2, r8
 8006714:	4620      	mov	r0, r4
 8006716:	f7fc f8f3 	bl	8002900 <chprintf>
  read_block(address, lcnt, data, 0);
 800671a:	464a      	mov	r2, r9
 800671c:	4639      	mov	r1, r7
 800671e:	4640      	mov	r0, r8
 8006720:	f7fb fcd6 	bl	80020d0 <read_block.constprop.0>
  for (acnt = 0; acnt < lcnt; acnt ++){
 8006724:	2f00      	cmp	r7, #0
 8006726:	ddda      	ble.n	80066de <cmd_br+0x1e>
    chprintf(chp, "%02x, ", d);
 8006728:	4924      	ldr	r1, [pc, #144]	; (80067bc <cmd_br+0xfc>)
 800672a:	f899 2000 	ldrb.w	r2, [r9]
      chprintf(chp, "\r\n");
 800672e:	f8df a098 	ldr.w	sl, [pc, #152]	; 80067c8 <cmd_br+0x108>
    chprintf(chp, "%02x, ", d);
 8006732:	4620      	mov	r0, r4
 8006734:	460e      	mov	r6, r1
 8006736:	f7fc f8e3 	bl	8002900 <chprintf>
    if (line % 8 == 0){
 800673a:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
 800673e:	441f      	add	r7, r3
    chprintf(chp, "%02x, ", d);
 8006740:	464d      	mov	r5, r9
    line++;
 8006742:	f04f 0b01 	mov.w	fp, #1
    if (line % 32 == 0){
 8006746:	f01b 0f1f 	tst.w	fp, #31
    chprintf(chp, "%02x, ", d);
 800674a:	4631      	mov	r1, r6
 800674c:	4620      	mov	r0, r4
    if (line % 32 == 0){
 800674e:	d015      	beq.n	800677c <cmd_br+0xbc>
  for (acnt = 0; acnt < lcnt; acnt ++){
 8006750:	42bd      	cmp	r5, r7
 8006752:	d0c4      	beq.n	80066de <cmd_br+0x1e>
    chprintf(chp, "%02x, ", d);
 8006754:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8006758:	f7fc f8d2 	bl	8002900 <chprintf>
    line++;
 800675c:	f10b 0201 	add.w	r2, fp, #1
    if (line % 8 == 0){
 8006760:	f012 0f07 	tst.w	r2, #7
    line++;
 8006764:	fa5f fb82 	uxtb.w	fp, r2
      chprintf(chp, "\r\n");
 8006768:	4651      	mov	r1, sl
 800676a:	4620      	mov	r0, r4
    if (line % 8 == 0){
 800676c:	d1eb      	bne.n	8006746 <cmd_br+0x86>
      chprintf(chp, "\r\n");
 800676e:	f7fc f8c7 	bl	8002900 <chprintf>
    if (line % 32 == 0){
 8006772:	f01b 0f1f 	tst.w	fp, #31
    chprintf(chp, "%02x, ", d);
 8006776:	4631      	mov	r1, r6
 8006778:	4620      	mov	r0, r4
    if (line % 32 == 0){
 800677a:	d1e9      	bne.n	8006750 <cmd_br+0x90>
      chprintf(chp, "Address now: %08x\r\n", address+acnt+1);
 800677c:	f1c9 0201 	rsb	r2, r9, #1
 8006780:	4442      	add	r2, r8
 8006782:	490f      	ldr	r1, [pc, #60]	; (80067c0 <cmd_br+0x100>)
 8006784:	442a      	add	r2, r5
 8006786:	f7fc f8bb 	bl	8002900 <chprintf>
  for (acnt = 0; acnt < lcnt; acnt ++){
 800678a:	42bd      	cmp	r5, r7
    chprintf(chp, "%02x, ", d);
 800678c:	4631      	mov	r1, r6
 800678e:	4620      	mov	r0, r4
  for (acnt = 0; acnt < lcnt; acnt ++){
 8006790:	d0a5      	beq.n	80066de <cmd_br+0x1e>
    chprintf(chp, "%02x, ", d);
 8006792:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8006796:	f7fc f8b3 	bl	8002900 <chprintf>
    line++;
 800679a:	f04f 0b01 	mov.w	fp, #1
 800679e:	e7d2      	b.n	8006746 <cmd_br+0x86>
    chprintf(chp, "Only 256 bytes for now\r\n");
 80067a0:	4908      	ldr	r1, [pc, #32]	; (80067c4 <cmd_br+0x104>)
 80067a2:	4620      	mov	r0, r4
 80067a4:	f7fc f8ac 	bl	8002900 <chprintf>
}
 80067a8:	b041      	add	sp, #260	; 0x104
 80067aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ae:	bf00      	nop
 80067b0:	0800a24c 	.word	0x0800a24c
 80067b4:	0800a274 	.word	0x0800a274
 80067b8:	0800a290 	.word	0x0800a290
 80067bc:	0800a2a4 	.word	0x0800a2a4
 80067c0:	0800a2ac 	.word	0x0800a2ac
 80067c4:	0800a1d8 	.word	0x0800a1d8
 80067c8:	0800a09c 	.word	0x0800a09c
 80067cc:	00000000 	.word	0x00000000

080067d0 <usbInitEndpointI>:
                      const USBEndpointConfig *epcp) {
 80067d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (epcp->in_state != NULL) {
 80067d4:	6953      	ldr	r3, [r2, #20]
 80067d6:	eb00 0781 	add.w	r7, r0, r1, lsl #2
                      const USBEndpointConfig *epcp) {
 80067da:	460c      	mov	r4, r1
  usbp->epc[ep] = epcp;
 80067dc:	60fa      	str	r2, [r7, #12]
  if (epcp->in_state != NULL) {
 80067de:	fa0f f881 	sxth.w	r8, r1
 80067e2:	b123      	cbz	r3, 80067ee <usbInitEndpointI+0x1e>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 80067e4:	2100      	movs	r1, #0
 80067e6:	6019      	str	r1, [r3, #0]
 80067e8:	6059      	str	r1, [r3, #4]
 80067ea:	6099      	str	r1, [r3, #8]
 80067ec:	60d9      	str	r1, [r3, #12]
  if (epcp->out_state != NULL) {
 80067ee:	6993      	ldr	r3, [r2, #24]
 80067f0:	b123      	cbz	r3, 80067fc <usbInitEndpointI+0x2c>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	605a      	str	r2, [r3, #4]
 80067f8:	609a      	str	r2, [r3, #8]
 80067fa:	60da      	str	r2, [r3, #12]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 80067fc:	68fb      	ldr	r3, [r7, #12]
  stm32_otg_t *otgp = usbp->otg;
 80067fe:	6d45      	ldr	r5, [r0, #84]	; 0x54
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8006800:	681e      	ldr	r6, [r3, #0]
  if (usbp->epc[ep]->out_state != NULL) {
 8006802:	f8d3 c018 	ldr.w	ip, [r3, #24]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8006806:	f006 0603 	and.w	r6, r6, #3
 800680a:	1e72      	subs	r2, r6, #1
 800680c:	2a02      	cmp	r2, #2
 800680e:	bf98      	it	ls
 8006810:	04b6      	lslls	r6, r6, #18
  otgp->oe[ep].DOEPTSIZ = 0;
 8006812:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 8006816:	f04f 0100 	mov.w	r1, #0
 800681a:	bf98      	it	ls
 800681c:	f106 5680 	addls.w	r6, r6, #268435456	; 0x10000000
 8006820:	f8c2 1b10 	str.w	r1, [r2, #2832]	; 0xb10
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8006824:	bf8c      	ite	hi
 8006826:	4e45      	ldrhi	r6, [pc, #276]	; (800693c <usbInitEndpointI+0x16c>)
 8006828:	f506 4600 	addls.w	r6, r6, #32768	; 0x8000
  otgp->oe[ep].DOEPTSIZ = 0;
 800682c:	0161      	lsls	r1, r4, #5
  if (usbp->epc[ep]->out_state != NULL) {
 800682e:	f1bc 0f00 	cmp.w	ip, #0
 8006832:	d04b      	beq.n	80068cc <usbInitEndpointI+0xfc>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 8006834:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8006838:	f104 0258 	add.w	r2, r4, #88	; 0x58
 800683c:	0152      	lsls	r2, r2, #5
 800683e:	ea4c 0c06 	orr.w	ip, ip, r6
 8006842:	f845 c002 	str.w	ip, [r5, r2]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8006846:	f104 0e10 	add.w	lr, r4, #16
 800684a:	f8d5 c81c 	ldr.w	ip, [r5, #2076]	; 0x81c
 800684e:	2201      	movs	r2, #1
 8006850:	fa02 f20e 	lsl.w	r2, r2, lr
 8006854:	ea42 020c 	orr.w	r2, r2, ip
 8006858:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
 800685c:	186a      	adds	r2, r5, r1
  if (usbp->epc[ep]->in_state != NULL) {
 800685e:	6959      	ldr	r1, [r3, #20]
  otgp->ie[ep].DIEPTSIZ = 0;
 8006860:	f04f 0c00 	mov.w	ip, #0
 8006864:	f8c2 c910 	str.w	ip, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_state != NULL) {
 8006868:	2900      	cmp	r1, #0
 800686a:	d044      	beq.n	80068f6 <usbInitEndpointI+0x126>
    if (usbp->epc[ep]->in_multiplier > 1)
 800686c:	8b99      	ldrh	r1, [r3, #28]
    fsize = usbp->epc[ep]->in_maxsize / 4;
 800686e:	8a1a      	ldrh	r2, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 8006870:	2901      	cmp	r1, #1
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8006872:	ea4f 0392 	mov.w	r3, r2, lsr #2
  next = usbp->pmnext;
 8006876:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
      fsize *= usbp->epc[ep]->in_multiplier;
 8006878:	bf88      	it	hi
 800687a:	434b      	mulhi	r3, r1
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800687c:	f104 013f 	add.w	r1, r4, #63	; 0x3f
  usbp->pmnext += size;
 8006880:	eb03 0c02 	add.w	ip, r3, r2
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8006884:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8006888:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800688c:	01a2      	lsls	r2, r4, #6
 800688e:	f042 0220 	orr.w	r2, r2, #32
  usbp->pmnext += size;
 8006892:	f8c0 c05c 	str.w	ip, [r0, #92]	; 0x5c
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8006896:	604b      	str	r3, [r1, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8006898:	612a      	str	r2, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800689a:	692b      	ldr	r3, [r5, #16]
 800689c:	069a      	lsls	r2, r3, #26
 800689e:	d4fc      	bmi.n	800689a <usbInitEndpointI+0xca>
  chSysPolledDelayX(cycles);
 80068a0:	2012      	movs	r0, #18
 80068a2:	f7fa fbfd 	bl	80010a0 <chSysPolledDelayX>
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8a1b      	ldrh	r3, [r3, #16]
    otgp->ie[ep].DIEPCTL = ctl |
 80068aa:	f104 0248 	add.w	r2, r4, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 80068ae:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
    otgp->ie[ep].DIEPCTL = ctl |
 80068b2:	0152      	lsls	r2, r2, #5
                           DIEPCTL_TXFNUM(ep) |
 80068b4:	431e      	orrs	r6, r3
    otgp->ie[ep].DIEPCTL = ctl |
 80068b6:	50ae      	str	r6, [r5, r2]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 80068b8:	2101      	movs	r1, #1
 80068ba:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 80068be:	fa01 f404 	lsl.w	r4, r1, r4
 80068c2:	431c      	orrs	r4, r3
 80068c4:	f8c5 481c 	str.w	r4, [r5, #2076]	; 0x81c
}
 80068c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 80068cc:	eb05 1248 	add.w	r2, r5, r8, lsl #5
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 80068d0:	f104 0910 	add.w	r9, r4, #16
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 80068d4:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 80068d8:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 80068dc:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 80068e0:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 80068e4:	f04f 0c01 	mov.w	ip, #1
 80068e8:	fa0c fc09 	lsl.w	ip, ip, r9
 80068ec:	ea22 020c 	bic.w	r2, r2, ip
 80068f0:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
 80068f4:	e7b2      	b.n	800685c <usbInitEndpointI+0x8c>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 80068f6:	f104 023f 	add.w	r2, r4, #63	; 0x3f
 80068fa:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80068fe:	01a3      	lsls	r3, r4, #6
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8006900:	490f      	ldr	r1, [pc, #60]	; (8006940 <usbInitEndpointI+0x170>)
 8006902:	6051      	str	r1, [r2, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8006904:	f043 0320 	orr.w	r3, r3, #32
 8006908:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800690a:	692b      	ldr	r3, [r5, #16]
 800690c:	069b      	lsls	r3, r3, #26
 800690e:	d4fc      	bmi.n	800690a <usbInitEndpointI+0x13a>
 8006910:	eb05 1848 	add.w	r8, r5, r8, lsl #5
 8006914:	2012      	movs	r0, #18
 8006916:	f7fa fbc3 	bl	80010a0 <chSysPolledDelayX>
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 800691a:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 800691e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006922:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 8006926:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 800692a:	2101      	movs	r1, #1
 800692c:	fa01 f404 	lsl.w	r4, r1, r4
 8006930:	ea23 0404 	bic.w	r4, r3, r4
 8006934:	f8c5 481c 	str.w	r4, [r5, #2076]	; 0x81c
 8006938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800693c:	10008000 	.word	0x10008000
 8006940:	02000400 	.word	0x02000400
	...

08006950 <usb_event>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8006950:	b530      	push	{r4, r5, lr}
 8006952:	b083      	sub	sp, #12
 8006954:	2905      	cmp	r1, #5
 8006956:	d80f      	bhi.n	8006978 <usb_event+0x28>
 8006958:	e8df f001 	tbb	[pc, r1]
 800695c:	10030e10 	.word	0x10030e10
 8006960:	2910      	.short	0x2910
 8006962:	2320      	movs	r3, #32
 8006964:	f383 8811 	msr	BASEPRI, r3
    if (usbp->state == USB_ACTIVE) {
 8006968:	7803      	ldrb	r3, [r0, #0]
 800696a:	2b04      	cmp	r3, #4
 800696c:	d02f      	beq.n	80069ce <usb_event+0x7e>
    else if (usbp->state == USB_SELECTED) {
 800696e:	2b03      	cmp	r3, #3
 8006970:	d059      	beq.n	8006a26 <usb_event+0xd6>
 8006972:	2300      	movs	r3, #0
 8006974:	f383 8811 	msr	BASEPRI, r3
}
 8006978:	b003      	add	sp, #12
 800697a:	bd30      	pop	{r4, r5, pc}
 800697c:	2320      	movs	r3, #32
 800697e:	f383 8811 	msr	BASEPRI, r3
  if (bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 8006982:	4c2a      	ldr	r4, [pc, #168]	; (8006a2c <usb_event+0xdc>)
 8006984:	7d23      	ldrb	r3, [r4, #20]
 8006986:	b11b      	cbz	r3, 8006990 <usb_event+0x40>
 8006988:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f0      	bne.n	8006972 <usb_event+0x22>
  chEvtBroadcastFlagsI(esp, flags);
 8006990:	2102      	movs	r1, #2
 8006992:	4827      	ldr	r0, [pc, #156]	; (8006a30 <usb_event+0xe0>)
 8006994:	f7fa fb54 	bl	8001040 <chEvtBroadcastFlagsI>
  bqSuspendI(&sdup->ibqueue);
 8006998:	2501      	movs	r5, #1
  chThdDequeueAllI(tqp, msg);
 800699a:	4826      	ldr	r0, [pc, #152]	; (8006a34 <usb_event+0xe4>)
 800699c:	7525      	strb	r5, [r4, #20]
 800699e:	f7fa fb27 	bl	8000ff0 <chThdDequeueAllI.constprop.0>
 80069a2:	4825      	ldr	r0, [pc, #148]	; (8006a38 <usb_event+0xe8>)
  bqSuspendI(&sdup->obqueue);
 80069a4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 80069a8:	f7fa fb22 	bl	8000ff0 <chThdDequeueAllI.constprop.0>
 80069ac:	e7e1      	b.n	8006972 <usb_event+0x22>
 80069ae:	2320      	movs	r3, #32
 80069b0:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 80069b4:	4c1d      	ldr	r4, [pc, #116]	; (8006a2c <usb_event+0xdc>)
 80069b6:	2101      	movs	r1, #1
 80069b8:	1d20      	adds	r0, r4, #4
 80069ba:	f7fa fb41 	bl	8001040 <chEvtBroadcastFlagsI>
  bqResumeX(&sdup->ibqueue);
 80069be:	2300      	movs	r3, #0
 80069c0:	7523      	strb	r3, [r4, #20]
  bqResumeX(&sdup->obqueue);
 80069c2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	b003      	add	sp, #12
 80069cc:	bd30      	pop	{r4, r5, pc}
  ibqp->bcounter  = 0;
 80069ce:	4c17      	ldr	r4, [pc, #92]	; (8006a2c <usb_event+0xdc>)
      usbInitEndpointI(usbp, USB_INTERRUPT_REQUEST_EP_A, &ep1config);
 80069d0:	4a1a      	ldr	r2, [pc, #104]	; (8006a3c <usb_event+0xec>)
 80069d2:	9001      	str	r0, [sp, #4]
 80069d4:	2101      	movs	r1, #1
 80069d6:	f7ff fefb 	bl	80067d0 <usbInitEndpointI>
      usbInitEndpointI(usbp, USB_DATA_REQUEST_EP_A, &ep2config);
 80069da:	2102      	movs	r1, #2
 80069dc:	9801      	ldr	r0, [sp, #4]
 80069de:	4a18      	ldr	r2, [pc, #96]	; (8006a40 <usb_event+0xf0>)
 80069e0:	f7ff fef6 	bl	80067d0 <usbInitEndpointI>
 80069e4:	2500      	movs	r5, #0
  ibqp->brdptr    = ibqp->buffers;
 80069e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069e8:	6223      	str	r3, [r4, #32]
  chThdDequeueAllI(tqp, msg);
 80069ea:	f104 000c 	add.w	r0, r4, #12
  ibqp->bwrptr    = ibqp->buffers;
 80069ee:	61e3      	str	r3, [r4, #28]
  ibqp->top       = NULL;
 80069f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  ibqp->bcounter  = 0;
 80069f4:	61a5      	str	r5, [r4, #24]
 80069f6:	f7fa fafb 	bl	8000ff0 <chThdDequeueAllI.constprop.0>
  obqp->brdptr    = obqp->buffers;
 80069fa:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 80069fe:	f104 0044 	add.w	r0, r4, #68	; 0x44
  obqp->bwrptr    = obqp->buffers;
 8006a02:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  obqp->bcounter  = bqSizeX(obqp);
 8006a06:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->top       = NULL;
 8006a08:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  bqResumeX(&sdup->ibqueue);
 8006a0c:	7525      	strb	r5, [r4, #20]
 8006a0e:	f7fa faef 	bl	8000ff0 <chThdDequeueAllI.constprop.0>
  chEvtBroadcastFlagsI(esp, flags);
 8006a12:	1d20      	adds	r0, r4, #4
 8006a14:	2101      	movs	r1, #1
  bqResumeX(&sdup->obqueue);
 8006a16:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8006a1a:	f7fa fb11 	bl	8001040 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7fa ff4e 	bl	80018c0 <sdu_start_receive>
 8006a24:	e7a5      	b.n	8006972 <usb_event+0x22>
      usbDisableEndpointsI(usbp);
 8006a26:	f7fa fefb 	bl	8001820 <usbDisableEndpointsI>
 8006a2a:	e7a2      	b.n	8006972 <usb_event+0x22>
 8006a2c:	200013a8 	.word	0x200013a8
 8006a30:	200013ac 	.word	0x200013ac
 8006a34:	200013b4 	.word	0x200013b4
 8006a38:	200013ec 	.word	0x200013ec
 8006a3c:	0800a4f0 	.word	0x0800a4f0
 8006a40:	0800a514 	.word	0x0800a514
	...

08006a50 <get_history>:
    shp->sh_end -= shp->sh_size;
  *(shp->sh_buffer + shp->sh_end) = 0;
  shp->sh_cur = 0;
}

static int get_history(ShellHistory *shp, char *line, int dir) {
 8006a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (shp == NULL)
    return -1;

  /* Count the number of lines saved in the buffer */
  int idx = shp->sh_beg;
  while (idx != shp->sh_end) {
 8006a54:	e9d0 4602 	ldrd	r4, r6, [r0, #8]
 8006a58:	42b4      	cmp	r4, r6
static int get_history(ShellHistory *shp, char *line, int dir) {
 8006a5a:	4607      	mov	r7, r0
 8006a5c:	4688      	mov	r8, r1
  while (idx != shp->sh_end) {
 8006a5e:	d053      	beq.n	8006b08 <get_history+0xb8>
    idx += *(shp->sh_buffer + idx) + 1;
    if (idx >= shp->sh_size)
 8006a60:	e9d0 c000 	ldrd	ip, r0, [r0]
 8006a64:	4623      	mov	r3, r4
  int count=0;
 8006a66:	2100      	movs	r1, #0
    idx += *(shp->sh_buffer + idx) + 1;
 8006a68:	f81c 5003 	ldrb.w	r5, [ip, r3]
 8006a6c:	3501      	adds	r5, #1
 8006a6e:	442b      	add	r3, r5
    if (idx >= shp->sh_size)
 8006a70:	4298      	cmp	r0, r3
      idx -= shp->sh_size;
 8006a72:	bfd8      	it	le
 8006a74:	1a1b      	suble	r3, r3, r0
  while (idx != shp->sh_end) {
 8006a76:	42b3      	cmp	r3, r6
    count++;
 8006a78:	f101 0101 	add.w	r1, r1, #1
  while (idx != shp->sh_end) {
 8006a7c:	d1f4      	bne.n	8006a68 <get_history+0x18>
  }

  if (dir == SHELL_HIST_DIR_FW) {
 8006a7e:	2a01      	cmp	r2, #1
    if (shp->sh_cur > 0)
 8006a80:	693d      	ldr	r5, [r7, #16]
  if (dir == SHELL_HIST_DIR_FW) {
 8006a82:	d03c      	beq.n	8006afe <get_history+0xae>
      shp->sh_cur -= 2;
    else
      return 0;
  }

  if (count >= shp->sh_cur) {
 8006a84:	42a9      	cmp	r1, r5
 8006a86:	db53      	blt.n	8006b30 <get_history+0xe0>
    idx = shp->sh_beg;
    int i = 0;
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8006a88:	42b4      	cmp	r4, r6
 8006a8a:	d054      	beq.n	8006b36 <get_history+0xe6>
 8006a8c:	1e4b      	subs	r3, r1, #1
 8006a8e:	429d      	cmp	r5, r3
 8006a90:	d054      	beq.n	8006b3c <get_history+0xec>
      idx += *(shp->sh_buffer + idx) + 1;
      if (idx >= shp->sh_size)
 8006a92:	e9d7 ec00 	ldrd	lr, ip, [r7]
    int i = 0;
 8006a96:	2000      	movs	r0, #0
 8006a98:	e001      	b.n	8006a9e <get_history+0x4e>
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8006a9a:	429d      	cmp	r5, r3
 8006a9c:	d017      	beq.n	8006ace <get_history+0x7e>
      idx += *(shp->sh_buffer + idx) + 1;
 8006a9e:	f81e 3004 	ldrb.w	r3, [lr, r4]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	441c      	add	r4, r3
      if (idx >= shp->sh_size)
 8006aa6:	45a4      	cmp	ip, r4
        idx -= shp->sh_size;
      i++;
 8006aa8:	f100 0001 	add.w	r0, r0, #1
        idx -= shp->sh_size;
 8006aac:	bfd8      	it	le
 8006aae:	eba4 040c 	suble.w	r4, r4, ip
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8006ab2:	43c3      	mvns	r3, r0
 8006ab4:	42b4      	cmp	r4, r6
 8006ab6:	440b      	add	r3, r1
 8006ab8:	d1ef      	bne.n	8006a9a <get_history+0x4a>
    }

    int length = *(shp->sh_buffer + idx);
 8006aba:	f81e 4006 	ldrb.w	r4, [lr, r6]

    if (length > 0) {
 8006abe:	b95c      	cbnz	r4, 8006ad8 <get_history+0x88>
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
      }
      return length;
    }
    else if (dir == SHELL_HIST_DIR_FW) {
 8006ac0:	2a01      	cmp	r2, #1
 8006ac2:	d135      	bne.n	8006b30 <get_history+0xe0>
      shp->sh_cur++;
 8006ac4:	3501      	adds	r5, #1
 8006ac6:	613d      	str	r5, [r7, #16]
      return 0;
    }
  }
  return -1;
}
 8006ac8:	4620      	mov	r0, r4
 8006aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8006ace:	4626      	mov	r6, r4
    int length = *(shp->sh_buffer + idx);
 8006ad0:	f81e 4006 	ldrb.w	r4, [lr, r6]
    if (length > 0) {
 8006ad4:	2c00      	cmp	r4, #0
 8006ad6:	d0f3      	beq.n	8006ac0 <get_history+0x70>
      shp->sh_cur++;
 8006ad8:	3501      	adds	r5, #1
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 8006ada:	2240      	movs	r2, #64	; 0x40
      shp->sh_cur++;
 8006adc:	613d      	str	r5, [r7, #16]
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 8006ade:	2100      	movs	r1, #0
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	f002 fd21 	bl	8009528 <memset>
      if ((idx + length) < shp->sh_size) {
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	19a2      	adds	r2, r4, r6
 8006aea:	429a      	cmp	r2, r3
 8006aec:	da10      	bge.n	8006b10 <get_history+0xc0>
        memcpy(line, (shp->sh_buffer + idx + 1), length);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	3601      	adds	r6, #1
 8006af2:	4431      	add	r1, r6
 8006af4:	4640      	mov	r0, r8
 8006af6:	4622      	mov	r2, r4
 8006af8:	f7f9 fc08 	bl	800030c <memcpy>
 8006afc:	e7e4      	b.n	8006ac8 <get_history+0x78>
    if (shp->sh_cur > 0)
 8006afe:	2d00      	cmp	r5, #0
 8006b00:	dd04      	ble.n	8006b0c <get_history+0xbc>
      shp->sh_cur -= 2;
 8006b02:	3d02      	subs	r5, #2
 8006b04:	613d      	str	r5, [r7, #16]
 8006b06:	e7bd      	b.n	8006a84 <get_history+0x34>
  int count=0;
 8006b08:	2100      	movs	r1, #0
 8006b0a:	e7b8      	b.n	8006a7e <get_history+0x2e>
      return 0;
 8006b0c:	2400      	movs	r4, #0
 8006b0e:	e7db      	b.n	8006ac8 <get_history+0x78>
        int part_len = shp->sh_size - idx - 1;
 8006b10:	1b9b      	subs	r3, r3, r6
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 8006b12:	6839      	ldr	r1, [r7, #0]
        int part_len = shp->sh_size - idx - 1;
 8006b14:	1e5d      	subs	r5, r3, #1
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 8006b16:	3601      	adds	r6, #1
 8006b18:	4431      	add	r1, r6
 8006b1a:	462a      	mov	r2, r5
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	f7f9 fbf5 	bl	800030c <memcpy>
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	eb08 0005 	add.w	r0, r8, r5
 8006b28:	1b62      	subs	r2, r4, r5
 8006b2a:	f7f9 fbef 	bl	800030c <memcpy>
 8006b2e:	e7cb      	b.n	8006ac8 <get_history+0x78>
  return -1;
 8006b30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006b34:	e7c8      	b.n	8006ac8 <get_history+0x78>
 8006b36:	f8d7 e000 	ldr.w	lr, [r7]
 8006b3a:	e7be      	b.n	8006aba <get_history+0x6a>
 8006b3c:	f8d7 e000 	ldr.w	lr, [r7]
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8006b40:	4626      	mov	r6, r4
 8006b42:	e7ba      	b.n	8006aba <get_history+0x6a>
	...

08006b50 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8006b50:	b570      	push	{r4, r5, r6, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8006b52:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8006b56:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8006b58:	b113      	cbz	r3, 8006b60 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8006b60:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  if ((usbp->config->requests_hook_cb == NULL) ||
 8006b64:	6862      	ldr	r2, [r4, #4]
 8006b66:	68cb      	ldr	r3, [r1, #12]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	6819      	ldr	r1, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b70:	6461      	str	r1, [r4, #68]	; 0x44
 8006b72:	6893      	ldr	r3, [r2, #8]
 8006b74:	b36b      	cbz	r3, 8006bd2 <_usb_ep0setup+0x82>
      !(usbp->config->requests_hook_cb(usbp))) {
 8006b76:	4620      	mov	r0, r4
 8006b78:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 8006b7a:	b350      	cbz	r0, 8006bd2 <_usb_ep0setup+0x82>
 8006b7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b7e:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  hw |= (uint16_t)*p << 8U;
 8006b82:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 8006b86:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
  max = (size_t)get_hword(&usbp->setup[6]);
 8006b8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if (usbp->ep0n > max) {
 8006b8e:	429a      	cmp	r2, r3
    usbp->ep0n = max;
 8006b90:	bf3c      	itt	cc
 8006b92:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 8006b94:	4613      	movcc	r3, r2
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8006b96:	0602      	lsls	r2, r0, #24
 8006b98:	f100 80df 	bmi.w	8006d5a <_usb_ep0setup+0x20a>
    if (usbp->ep0n != 0U) {
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 808f 	beq.w	8006cc0 <_usb_ep0setup+0x170>
      usbp->ep0state = USB_EP0_OUT_RX;
 8006ba2:	2315      	movs	r3, #21
 8006ba4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8006ba8:	2320      	movs	r3, #32
 8006baa:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8006bae:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006bb0:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8006bb2:	699b      	ldr	r3, [r3, #24]
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8006bb4:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006bb8:	f042 0201 	orr.w	r2, r2, #1
  osp->rxcnt  = 0;
 8006bbc:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006bbe:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8006bc0:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8006bc2:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_out(usbp, ep);
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	f7fa fc5a 	bl	8001480 <usb_lld_start_out>
 8006bcc:	f385 8811 	msr	BASEPRI, r5
}
 8006bd0:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8006bd2:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8006bd6:	f010 0660 	ands.w	r6, r0, #96	; 0x60
 8006bda:	d11c      	bne.n	8006c16 <_usb_ep0setup+0xc6>
           ((uint32_t)usbp->setup[1] << 8U))) {
 8006bdc:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006be0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8006be4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006be8:	f240 3202 	movw	r2, #770	; 0x302
 8006bec:	4293      	cmp	r3, r2
 8006bee:	f000 8113 	beq.w	8006e18 <_usb_ep0setup+0x2c8>
 8006bf2:	d844      	bhi.n	8006c7e <_usb_ep0setup+0x12e>
 8006bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf8:	f000 8125 	beq.w	8006e46 <_usb_ep0setup+0x2f6>
 8006bfc:	d922      	bls.n	8006c44 <_usb_ep0setup+0xf4>
 8006bfe:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8006c02:	f000 812f 	beq.w	8006e64 <_usb_ep0setup+0x314>
 8006c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c0a:	d104      	bne.n	8006c16 <_usb_ep0setup+0xc6>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8006c0c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	f000 80d2 	beq.w	8006dba <_usb_ep0setup+0x26a>
 8006c16:	6d62      	ldr	r2, [r4, #84]	; 0x54
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8006c18:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8006c1c:	6861      	ldr	r1, [r4, #4]
 8006c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c22:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8006c26:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8006c2a:	680d      	ldr	r5, [r1, #0]
 8006c2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c30:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8006c34:	b115      	cbz	r5, 8006c3c <_usb_ep0setup+0xec>
 8006c36:	2106      	movs	r1, #6
 8006c38:	4620      	mov	r0, r4
 8006c3a:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8006c3c:	2306      	movs	r3, #6
 8006c3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d060      	beq.n	8006d0a <_usb_ep0setup+0x1ba>
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d150      	bne.n	8006cee <_usb_ep0setup+0x19e>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8006c4c:	f994 1048 	ldrsb.w	r1, [r4, #72]	; 0x48
 8006c50:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8006c54:	2900      	cmp	r1, #0
  ctl = usbp->otg->ie[ep].DIEPCTL;
 8006c56:	f002 010f 	and.w	r1, r2, #15
 8006c5a:	bfb4      	ite	lt
 8006c5c:	3148      	addlt	r1, #72	; 0x48
  ctl = usbp->otg->oe[ep].DOEPCTL;
 8006c5e:	3158      	addge	r1, #88	; 0x58
 8006c60:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006c62:	0149      	lsls	r1, r1, #5
 8006c64:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 8006c66:	040d      	lsls	r5, r1, #16
 8006c68:	d5d6      	bpl.n	8006c18 <_usb_ep0setup+0xc8>
  if (ctl & DOEPCTL_STALL)
 8006c6a:	0289      	lsls	r1, r1, #10
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8006c6c:	bf4c      	ite	mi
 8006c6e:	4a9c      	ldrmi	r2, [pc, #624]	; (8006ee0 <_usb_ep0setup+0x390>)
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8006c70:	4a9c      	ldrpl	r2, [pc, #624]	; (8006ee4 <_usb_ep0setup+0x394>)
 8006c72:	63a2      	str	r2, [r4, #56]	; 0x38
 8006c74:	2102      	movs	r1, #2
 8006c76:	2200      	movs	r2, #0
 8006c78:	e9c4 120f 	strd	r1, r2, [r4, #60]	; 0x3c
        return true;
 8006c7c:	e781      	b.n	8006b82 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c82:	f000 80c2 	beq.w	8006e0a <_usb_ep0setup+0x2ba>
 8006c86:	d947      	bls.n	8006d18 <_usb_ep0setup+0x1c8>
 8006c88:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8006c8c:	d139      	bne.n	8006d02 <_usb_ep0setup+0x1b2>
      if (usbp->state == USB_ACTIVE) {
 8006c8e:	7823      	ldrb	r3, [r4, #0]
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	f000 809c 	beq.w	8006dce <_usb_ep0setup+0x27e>
      if (usbp->setup[2] != 0U) {
 8006c96:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006c9a:	b14b      	cbz	r3, 8006cb0 <_usb_ep0setup+0x160>
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8006c9c:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 8006c9e:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
        usbp->state = USB_ACTIVE;
 8006ca2:	2104      	movs	r1, #4
 8006ca4:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8006ca6:	6813      	ldr	r3, [r2, #0]
 8006ca8:	b113      	cbz	r3, 8006cb0 <_usb_ep0setup+0x160>
 8006caa:	2102      	movs	r1, #2
 8006cac:	4620      	mov	r0, r4
 8006cae:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8006cb6:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8006cba:	6423      	str	r3, [r4, #64]	; 0x40
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8006cbc:	0603      	lsls	r3, r0, #24
 8006cbe:	d465      	bmi.n	8006d8c <_usb_ep0setup+0x23c>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8006cc0:	230b      	movs	r3, #11
 8006cc2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8006cc6:	2320      	movs	r3, #32
 8006cc8:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8006ccc:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006cce:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8006cd0:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 8006cd2:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006cd4:	f042 0201 	orr.w	r2, r2, #1
 8006cd8:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8006cda:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 8006cdc:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8006ce0:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	f7fa fb34 	bl	8001350 <usb_lld_start_in>
 8006ce8:	f385 8811 	msr	BASEPRI, r5
}
 8006cec:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d191      	bne.n	8006c16 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8006cf8:	6423      	str	r3, [r4, #64]	; 0x40
 8006cfa:	e9c4 120e 	strd	r1, r2, [r4, #56]	; 0x38
 8006cfe:	4613      	mov	r3, r2
 8006d00:	e73f      	b.n	8006b82 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006d02:	f640 4202 	movw	r2, #3074	; 0xc02
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d185      	bne.n	8006c16 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8006d0a:	4b77      	ldr	r3, [pc, #476]	; (8006ee8 <_usb_ep0setup+0x398>)
 8006d0c:	63a3      	str	r3, [r4, #56]	; 0x38
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2302      	movs	r3, #2
 8006d12:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
    return true;
 8006d16:	e734      	b.n	8006b82 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006d18:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006d1c:	d06b      	beq.n	8006df6 <_usb_ep0setup+0x2a6>
 8006d1e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	f63f af77 	bhi.w	8006c16 <_usb_ep0setup+0xc6>
  hw |= (uint16_t)*p << 8U;
 8006d28:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8006d2c:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 8006d2e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8006d32:	684d      	ldr	r5, [r1, #4]
 8006d34:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8006d38:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 8006d3c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006d40:	4620      	mov	r0, r4
 8006d42:	47a8      	blx	r5
    if (dp == NULL) {
 8006d44:	2800      	cmp	r0, #0
 8006d46:	f43f af66 	beq.w	8006c16 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8006d4a:	e9d0 3200 	ldrd	r3, r2, [r0]
 8006d4e:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8006d52:	6426      	str	r6, [r4, #64]	; 0x40
 8006d54:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    return true;
 8006d58:	e713      	b.n	8006b82 <_usb_ep0setup+0x32>
    if (usbp->ep0n != 0U) {
 8006d5a:	b1bb      	cbz	r3, 8006d8c <_usb_ep0setup+0x23c>
      usbp->ep0state = USB_EP0_IN_TX;
 8006d5c:	2309      	movs	r3, #9
 8006d5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8006d62:	2320      	movs	r3, #32
 8006d64:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8006d68:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006d6a:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8006d6c:	695b      	ldr	r3, [r3, #20]
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8006d6e:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006d72:	f042 0201 	orr.w	r2, r2, #1
  isp->txcnt  = 0;
 8006d76:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006d78:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8006d7a:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 8006d7c:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_in(usbp, ep);
 8006d80:	4629      	mov	r1, r5
 8006d82:	f7fa fae5 	bl	8001350 <usb_lld_start_in>
 8006d86:	f385 8811 	msr	BASEPRI, r5
}
 8006d8a:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8006d8c:	2314      	movs	r3, #20
 8006d8e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8006d92:	2320      	movs	r3, #32
 8006d94:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8006d98:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006d9a:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8006d9c:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 8006d9e:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006da0:	f042 0201 	orr.w	r2, r2, #1
 8006da4:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8006da6:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8006da8:	e9c3 5500 	strd	r5, r5, [r3]
  osp->rxbuf  = buf;
 8006dac:	609d      	str	r5, [r3, #8]
  usb_lld_start_out(usbp, ep);
 8006dae:	4629      	mov	r1, r5
 8006db0:	f7fa fb66 	bl	8001480 <usb_lld_start_out>
 8006db4:	f385 8811 	msr	BASEPRI, r5
}
 8006db8:	bd70      	pop	{r4, r5, r6, pc}
      usbp->status |= 2U;
 8006dba:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006dbe:	63a6      	str	r6, [r4, #56]	; 0x38
      usbp->status |= 2U;
 8006dc0:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006dc4:	e9c4 660f 	strd	r6, r6, [r4, #60]	; 0x3c
      usbp->status |= 2U;
 8006dc8:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      return true;
 8006dcc:	e776      	b.n	8006cbc <_usb_ep0setup+0x16c>
 8006dce:	2320      	movs	r3, #32
 8006dd0:	f383 8811 	msr	BASEPRI, r3
        usbDisableEndpointsI(usbp);
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f7fa fd23 	bl	8001820 <usbDisableEndpointsI>
 8006dda:	f386 8811 	msr	BASEPRI, r6
        usbp->state = USB_SELECTED;
 8006dde:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8006de0:	6863      	ldr	r3, [r4, #4]
        usbp->configuration = 0U;
 8006de2:	f884 604f 	strb.w	r6, [r4, #79]	; 0x4f
        usbp->state = USB_SELECTED;
 8006de6:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f43f af53 	beq.w	8006c96 <_usb_ep0setup+0x146>
 8006df0:	4620      	mov	r0, r4
 8006df2:	4798      	blx	r3
 8006df4:	e74f      	b.n	8006c96 <_usb_ep0setup+0x146>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 8006df6:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8006dfa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006dfe:	d048      	beq.n	8006e92 <_usb_ep0setup+0x342>
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8006e00:	2300      	movs	r3, #0
 8006e02:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8006e06:	6423      	str	r3, [r4, #64]	; 0x40
    return true;
 8006e08:	e758      	b.n	8006cbc <_usb_ep0setup+0x16c>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8006e0a:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 8006e14:	6426      	str	r6, [r4, #64]	; 0x40
 8006e16:	e6b4      	b.n	8006b82 <_usb_ep0setup+0x32>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8006e18:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f47f aefa 	bne.w	8006c16 <_usb_ep0setup+0xc6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8006e22:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8006e26:	f013 020f 	ands.w	r2, r3, #15
 8006e2a:	d0e9      	beq.n	8006e00 <_usb_ep0setup+0x2b0>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8006e2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e32:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8006e36:	d144      	bne.n	8006ec2 <_usb_ep0setup+0x372>
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8006e38:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006e3c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006e40:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8006e44:	e7dc      	b.n	8006e00 <_usb_ep0setup+0x2b0>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8006e46:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	f47f aee3 	bne.w	8006c16 <_usb_ep0setup+0xc6>
      usbp->status &= ~2U;
 8006e50:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006e54:	63a6      	str	r6, [r4, #56]	; 0x38
      usbp->status &= ~2U;
 8006e56:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006e5a:	e9c4 660f 	strd	r6, r6, [r4, #60]	; 0x3c
      usbp->status &= ~2U;
 8006e5e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      return true;
 8006e62:	e72b      	b.n	8006cbc <_usb_ep0setup+0x16c>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8006e64:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f47f aed4 	bne.w	8006c16 <_usb_ep0setup+0xc6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8006e6e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8006e72:	f013 020f 	ands.w	r2, r3, #15
 8006e76:	d0c3      	beq.n	8006e00 <_usb_ep0setup+0x2b0>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8006e78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e7e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8006e82:	d125      	bne.n	8006ed0 <_usb_ep0setup+0x380>
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8006e84:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006e88:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006e8c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8006e90:	e7b6      	b.n	8006e00 <_usb_ep0setup+0x2b0>
  usbp->address = usbp->setup[2];
 8006e92:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
  stm32_otg_t *otgp = usbp->otg;
 8006e96:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006e98:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 8006e9c:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8006ea0:	6865      	ldr	r5, [r4, #4]
 8006ea2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006ea6:	682d      	ldr	r5, [r5, #0]
 8006ea8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8006eac:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8006eb0:	b125      	cbz	r5, 8006ebc <_usb_ep0setup+0x36c>
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	47a8      	blx	r5
 8006eb8:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  usbp->state = USB_SELECTED;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	7023      	strb	r3, [r4, #0]
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8006ec0:	e79e      	b.n	8006e00 <_usb_ep0setup+0x2b0>
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8006ec2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8006ec6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006eca:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8006ece:	e797      	b.n	8006e00 <_usb_ep0setup+0x2b0>
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8006ed0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8006ed4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006ed8:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8006edc:	e790      	b.n	8006e00 <_usb_ep0setup+0x2b0>
 8006ede:	bf00      	nop
 8006ee0:	0800a554 	.word	0x0800a554
 8006ee4:	0800a46c 	.word	0x0800a46c
 8006ee8:	0800a768 	.word	0x0800a768
 8006eec:	00000000 	.word	0x00000000

08006ef0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8006ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	b085      	sub	sp, #20
 8006ef6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 8006efa:	69c7      	ldr	r7, [r0, #28]
 8006efc:	f04f 0920 	mov.w	r9, #32
 8006f00:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8006f04:	b3a2      	cbz	r2, 8006f70 <oqWriteTimeout+0x80>
 8006f06:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	460e      	mov	r6, r1
 8006f0e:	f04f 0a00 	mov.w	sl, #0
  if (n > oqGetEmptyI(oqp)) {
 8006f12:	68a2      	ldr	r2, [r4, #8]
 8006f14:	4593      	cmp	fp, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8006f16:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 8006f1a:	bf8c      	ite	hi
 8006f1c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8006f1e:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8006f20:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8006f24:	45a8      	cmp	r8, r5
 8006f26:	d844      	bhi.n	8006fb2 <oqWriteTimeout+0xc2>
  else if (n > s1) {
 8006f28:	d229      	bcs.n	8006f7e <oqWriteTimeout+0x8e>
    s2 = n - s1;
 8006f2a:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8006f2e:	4642      	mov	r2, r8
 8006f30:	4631      	mov	r1, r6
    s2 = n - s1;
 8006f32:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8006f34:	f7f9 f9ea 	bl	800030c <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8006f38:	eb06 0108 	add.w	r1, r6, r8
 8006f3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006f40:	68e0      	ldr	r0, [r4, #12]
 8006f42:	4642      	mov	r2, r8
 8006f44:	f7f9 f9e2 	bl	800030c <memcpy>
  oqp->q_counter -= n;
 8006f48:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 8006f4a:	68e1      	ldr	r1, [r4, #12]
 8006f4c:	4643      	mov	r3, r8
 8006f4e:	18cb      	adds	r3, r1, r3
  oqp->q_counter -= n;
 8006f50:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 8006f52:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8006f54:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8006f56:	b10f      	cbz	r7, 8006f5c <oqWriteTimeout+0x6c>
        nfy(oqp);
 8006f58:	4620      	mov	r0, r4
 8006f5a:	47b8      	blx	r7
 8006f5c:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8006f60:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8006f64:	442e      	add	r6, r5
 8006f66:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8006f6a:	f1bb 0f00 	cmp.w	fp, #0
 8006f6e:	d1d0      	bne.n	8006f12 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8006f70:	9803      	ldr	r0, [sp, #12]
 8006f72:	2300      	movs	r3, #0
 8006f74:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8006f78:	b005      	add	sp, #20
 8006f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8006f7e:	462a      	mov	r2, r5
 8006f80:	4631      	mov	r1, r6
 8006f82:	f7f9 f9c3 	bl	800030c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8006f86:	68e2      	ldr	r2, [r4, #12]
 8006f88:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8006f8a:	68a2      	ldr	r2, [r4, #8]
 8006f8c:	1b52      	subs	r2, r2, r5
 8006f8e:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8006f90:	2d00      	cmp	r5, #0
 8006f92:	d1e0      	bne.n	8006f56 <oqWriteTimeout+0x66>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8006f94:	9902      	ldr	r1, [sp, #8]
 8006f96:	4620      	mov	r0, r4
 8006f98:	f7fa feaa 	bl	8001cf0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d0b8      	beq.n	8006f12 <oqWriteTimeout+0x22>
 8006fa0:	9b03      	ldr	r3, [sp, #12]
 8006fa2:	eba3 000b 	sub.w	r0, r3, fp
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f383 8811 	msr	BASEPRI, r3
}
 8006fac:	b005      	add	sp, #20
 8006fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8006fb2:	462a      	mov	r2, r5
 8006fb4:	4631      	mov	r1, r6
 8006fb6:	f7f9 f9a9 	bl	800030c <memcpy>
    oqp->q_wrptr += n;
 8006fba:	6962      	ldr	r2, [r4, #20]
 8006fbc:	442a      	add	r2, r5
 8006fbe:	6162      	str	r2, [r4, #20]
 8006fc0:	e7e3      	b.n	8006f8a <oqWriteTimeout+0x9a>
 8006fc2:	bf00      	nop
	...

08006fd0 <_writet.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8006fd0:	3030      	adds	r0, #48	; 0x30
 8006fd2:	f7ff bf8d 	b.w	8006ef0 <oqWriteTimeout>
 8006fd6:	bf00      	nop
	...

08006fe0 <_write.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8006fe0:	3030      	adds	r0, #48	; 0x30
 8006fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fe6:	f7ff bf83 	b.w	8006ef0 <oqWriteTimeout>
 8006fea:	bf00      	nop
 8006fec:	0000      	movs	r0, r0
	...

08006ff0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8006ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff4:	b085      	sub	sp, #20
 8006ff6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8006ffa:	69c7      	ldr	r7, [r0, #28]
 8006ffc:	f04f 0920 	mov.w	r9, #32
 8007000:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8007004:	2a00      	cmp	r2, #0
 8007006:	d034      	beq.n	8007072 <iqReadTimeout+0x82>
 8007008:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800700c:	4604      	mov	r4, r0
 800700e:	460e      	mov	r6, r1
 8007010:	f04f 0a00 	mov.w	sl, #0
  if (n > iqGetFullI(iqp)) {
 8007014:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8007016:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8007018:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800701a:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 800701c:	bf8c      	ite	hi
 800701e:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8007020:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8007022:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8007026:	45a8      	cmp	r8, r5
 8007028:	d844      	bhi.n	80070b4 <iqReadTimeout+0xc4>
  else if (n > s1) {
 800702a:	d229      	bcs.n	8007080 <iqReadTimeout+0x90>
    s2 = n - s1;
 800702c:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8007030:	4642      	mov	r2, r8
 8007032:	4630      	mov	r0, r6
    s2 = n - s1;
 8007034:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8007036:	f7f9 f969 	bl	800030c <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 800703a:	eb06 0008 	add.w	r0, r6, r8
 800703e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007042:	68e1      	ldr	r1, [r4, #12]
 8007044:	4642      	mov	r2, r8
 8007046:	f7f9 f961 	bl	800030c <memcpy>
  iqp->q_counter -= n;
 800704a:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 800704c:	68e1      	ldr	r1, [r4, #12]
 800704e:	4643      	mov	r3, r8
 8007050:	18cb      	adds	r3, r1, r3
  iqp->q_counter -= n;
 8007052:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 8007054:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8007056:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 8007058:	b10f      	cbz	r7, 800705e <iqReadTimeout+0x6e>
        nfy(iqp);
 800705a:	4620      	mov	r0, r4
 800705c:	47b8      	blx	r7
 800705e:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 8007062:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8007066:	442e      	add	r6, r5
 8007068:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800706c:	f1bb 0f00 	cmp.w	fp, #0
 8007070:	d1d0      	bne.n	8007014 <iqReadTimeout+0x24>
  if (n > iqGetFullI(iqp)) {
 8007072:	9803      	ldr	r0, [sp, #12]
 8007074:	2300      	movs	r3, #0
 8007076:	f383 8811 	msr	BASEPRI, r3
}
 800707a:	b005      	add	sp, #20
 800707c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8007080:	462a      	mov	r2, r5
 8007082:	4630      	mov	r0, r6
 8007084:	f7f9 f942 	bl	800030c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8007088:	68e2      	ldr	r2, [r4, #12]
 800708a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800708c:	68a2      	ldr	r2, [r4, #8]
 800708e:	1b52      	subs	r2, r2, r5
 8007090:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8007092:	2d00      	cmp	r5, #0
 8007094:	d1e0      	bne.n	8007058 <iqReadTimeout+0x68>
 8007096:	9902      	ldr	r1, [sp, #8]
 8007098:	4620      	mov	r0, r4
 800709a:	f7fa fe29 	bl	8001cf0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800709e:	2800      	cmp	r0, #0
 80070a0:	d0b8      	beq.n	8007014 <iqReadTimeout+0x24>
 80070a2:	9b03      	ldr	r3, [sp, #12]
 80070a4:	eba3 000b 	sub.w	r0, r3, fp
 80070a8:	2300      	movs	r3, #0
 80070aa:	f383 8811 	msr	BASEPRI, r3
}
 80070ae:	b005      	add	sp, #20
 80070b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80070b4:	462a      	mov	r2, r5
 80070b6:	4630      	mov	r0, r6
 80070b8:	f7f9 f928 	bl	800030c <memcpy>
    iqp->q_rdptr += n;
 80070bc:	69a2      	ldr	r2, [r4, #24]
 80070be:	442a      	add	r2, r5
 80070c0:	61a2      	str	r2, [r4, #24]
 80070c2:	e7e3      	b.n	800708c <iqReadTimeout+0x9c>
	...

080070d0 <_readt.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80070d0:	300c      	adds	r0, #12
 80070d2:	f7ff bf8d 	b.w	8006ff0 <iqReadTimeout>
 80070d6:	bf00      	nop
	...

080070e0 <_read.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80070e0:	300c      	adds	r0, #12
 80070e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070e6:	f7ff bf83 	b.w	8006ff0 <iqReadTimeout>
 80070ea:	bf00      	nop
 80070ec:	0000      	movs	r0, r0
	...

080070f0 <obqWriteTimeout>:
                       size_t n, sysinterval_t timeout) {
 80070f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	4605      	mov	r5, r0
 80070f6:	b083      	sub	sp, #12
 80070f8:	460c      	mov	r4, r1
 80070fa:	4692      	mov	sl, r2
 80070fc:	4699      	mov	r9, r3
 80070fe:	f04f 0820 	mov.w	r8, #32
 8007102:	f388 8811 	msr	BASEPRI, r8
    if (obqp->ptr == NULL) {
 8007106:	6aab      	ldr	r3, [r5, #40]	; 0x28
  size_t w = 0;
 8007108:	2600      	movs	r6, #0
  obqp->ptr = NULL;
 800710a:	4637      	mov	r7, r6
    if (obqp->ptr == NULL) {
 800710c:	2b00      	cmp	r3, #0
 800710e:	d041      	beq.n	8007194 <obqWriteTimeout+0xa4>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8007110:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    if (size > (n - w)) {
 8007112:	ebaa 0b06 	sub.w	fp, sl, r6
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8007116:	1aca      	subs	r2, r1, r3
    if (size > (n - w)) {
 8007118:	4593      	cmp	fp, r2
 800711a:	bf28      	it	cs
 800711c:	4693      	movcs	fp, r2
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 800711e:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8007122:	d940      	bls.n	80071a6 <obqWriteTimeout+0xb6>
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 8007124:	4621      	mov	r1, r4
 8007126:	4618      	mov	r0, r3
 8007128:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800712c:	680c      	ldr	r4, [r1, #0]
 800712e:	684a      	ldr	r2, [r1, #4]
 8007130:	688b      	ldr	r3, [r1, #8]
 8007132:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8007136:	f8c0 c00c 	str.w	ip, [r0, #12]
 800713a:	3110      	adds	r1, #16
 800713c:	4571      	cmp	r1, lr
 800713e:	6004      	str	r4, [r0, #0]
 8007140:	6042      	str	r2, [r0, #4]
 8007142:	6083      	str	r3, [r0, #8]
 8007144:	f100 0010 	add.w	r0, r0, #16
 8007148:	d1f0      	bne.n	800712c <obqWriteTimeout+0x3c>
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 800714a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800714c:	3340      	adds	r3, #64	; 0x40
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 800714e:	460c      	mov	r4, r1
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 8007150:	3640      	adds	r6, #64	; 0x40
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8007152:	62ab      	str	r3, [r5, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 8007154:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8007156:	429a      	cmp	r2, r3
 8007158:	d813      	bhi.n	8007182 <obqWriteTimeout+0x92>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800715a:	69ea      	ldr	r2, [r5, #28]
  *((size_t *)obqp->bwrptr) = size;
 800715c:	692b      	ldr	r3, [r5, #16]
  if (obqp->bwrptr >= obqp->btop) {
 800715e:	69a8      	ldr	r0, [r5, #24]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8007160:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8007162:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 8007164:	69e9      	ldr	r1, [r5, #28]
  obqp->bcounter--;
 8007166:	68ea      	ldr	r2, [r5, #12]
  obqp->ptr = NULL;
 8007168:	62af      	str	r7, [r5, #40]	; 0x28
  obqp->bwrptr += obqp->bsize;
 800716a:	440b      	add	r3, r1
  if (obqp->bwrptr >= obqp->btop) {
 800716c:	4283      	cmp	r3, r0
  obqp->bwrptr += obqp->bsize;
 800716e:	612b      	str	r3, [r5, #16]
    obqp->bwrptr = obqp->buffers;
 8007170:	bf24      	itt	cs
 8007172:	6a6b      	ldrcs	r3, [r5, #36]	; 0x24
 8007174:	612b      	strcs	r3, [r5, #16]
  if (obqp->notify != NULL) {
 8007176:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  obqp->bcounter--;
 8007178:	3a01      	subs	r2, #1
 800717a:	60ea      	str	r2, [r5, #12]
  if (obqp->notify != NULL) {
 800717c:	b10b      	cbz	r3, 8007182 <obqWriteTimeout+0x92>
    obqp->notify(obqp);
 800717e:	4628      	mov	r0, r5
 8007180:	4798      	blx	r3
 8007182:	f387 8811 	msr	BASEPRI, r7
    if (w >= n) {
 8007186:	4556      	cmp	r6, sl
 8007188:	d21a      	bcs.n	80071c0 <obqWriteTimeout+0xd0>
 800718a:	f388 8811 	msr	BASEPRI, r8
    if (obqp->ptr == NULL) {
 800718e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1bd      	bne.n	8007110 <obqWriteTimeout+0x20>
      msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8007194:	4649      	mov	r1, r9
 8007196:	4628      	mov	r0, r5
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	f7fa fe39 	bl	8001e10 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 800719e:	9b01      	ldr	r3, [sp, #4]
 80071a0:	b960      	cbnz	r0, 80071bc <obqWriteTimeout+0xcc>
 80071a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80071a4:	e7b4      	b.n	8007110 <obqWriteTimeout+0x20>
      memcpy(obqp->ptr, bp, size);
 80071a6:	4618      	mov	r0, r3
 80071a8:	4621      	mov	r1, r4
 80071aa:	465a      	mov	r2, fp
 80071ac:	f7f9 f8ae 	bl	800030c <memcpy>
      obqp->ptr += size;
 80071b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80071b2:	445b      	add	r3, fp
      w         += size;
 80071b4:	445e      	add	r6, fp
      bp        += size;
 80071b6:	445c      	add	r4, fp
      obqp->ptr += size;
 80071b8:	62ab      	str	r3, [r5, #40]	; 0x28
      w         += size;
 80071ba:	e7cb      	b.n	8007154 <obqWriteTimeout+0x64>
 80071bc:	f383 8811 	msr	BASEPRI, r3
}
 80071c0:	4630      	mov	r0, r6
 80071c2:	b003      	add	sp, #12
 80071c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080071d0 <_writet.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 80071d0:	3044      	adds	r0, #68	; 0x44
 80071d2:	f7ff bf8d 	b.w	80070f0 <obqWriteTimeout>
 80071d6:	bf00      	nop
	...

080071e0 <_write.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 80071e0:	3044      	adds	r0, #68	; 0x44
 80071e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071e6:	f7ff bf83 	b.w	80070f0 <obqWriteTimeout>
 80071ea:	bf00      	nop
 80071ec:	0000      	movs	r0, r0
	...

080071f0 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
 80071f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	b083      	sub	sp, #12
 80071f6:	4605      	mov	r5, r0
 80071f8:	460f      	mov	r7, r1
 80071fa:	4693      	mov	fp, r2
 80071fc:	9301      	str	r3, [sp, #4]
 80071fe:	f04f 0920 	mov.w	r9, #32
 8007202:	f389 8811 	msr	BASEPRI, r9
    if (ibqp->ptr == NULL) {
 8007206:	6aac      	ldr	r4, [r5, #40]	; 0x28
  size_t r = 0;
 8007208:	2600      	movs	r6, #0
  ibqp->ptr = NULL;
 800720a:	46b0      	mov	r8, r6
    if (ibqp->ptr == NULL) {
 800720c:	2c00      	cmp	r4, #0
 800720e:	d03f      	beq.n	8007290 <ibqReadTimeout+0xa0>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8007210:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    if (size > (n - r)) {
 8007212:	ebab 0206 	sub.w	r2, fp, r6
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8007216:	1b1b      	subs	r3, r3, r4
    if (size > (n - r)) {
 8007218:	429a      	cmp	r2, r3
 800721a:	bf28      	it	cs
 800721c:	461a      	movcs	r2, r3
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 800721e:	2a40      	cmp	r2, #64	; 0x40
 8007220:	4692      	mov	sl, r2
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8007222:	4621      	mov	r1, r4
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8007224:	d93b      	bls.n	800729e <ibqReadTimeout+0xae>
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8007226:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800722a:	463b      	mov	r3, r7
 800722c:	680c      	ldr	r4, [r1, #0]
 800722e:	6848      	ldr	r0, [r1, #4]
 8007230:	688a      	ldr	r2, [r1, #8]
 8007232:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8007236:	f8c3 c00c 	str.w	ip, [r3, #12]
 800723a:	3110      	adds	r1, #16
 800723c:	4571      	cmp	r1, lr
 800723e:	601c      	str	r4, [r3, #0]
 8007240:	6058      	str	r0, [r3, #4]
 8007242:	609a      	str	r2, [r3, #8]
 8007244:	f103 0310 	add.w	r3, r3, #16
 8007248:	d1f0      	bne.n	800722c <ibqReadTimeout+0x3c>
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 800724a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800724c:	3340      	adds	r3, #64	; 0x40
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 800724e:	3740      	adds	r7, #64	; 0x40
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 8007250:	3640      	adds	r6, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8007252:	62ab      	str	r3, [r5, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 8007254:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8007256:	429a      	cmp	r2, r3
 8007258:	d811      	bhi.n	800727e <ibqReadTimeout+0x8e>
  if (ibqp->brdptr >= ibqp->btop) {
 800725a:	e9d5 2106 	ldrd	r2, r1, [r5, #24]
  ibqp->brdptr += ibqp->bsize;
 800725e:	696b      	ldr	r3, [r5, #20]
  ibqp->bcounter--;
 8007260:	68e8      	ldr	r0, [r5, #12]
  ibqp->ptr = NULL;
 8007262:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  ibqp->brdptr += ibqp->bsize;
 8007266:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 8007268:	4293      	cmp	r3, r2
  ibqp->brdptr += ibqp->bsize;
 800726a:	616b      	str	r3, [r5, #20]
    ibqp->brdptr = ibqp->buffers;
 800726c:	bf24      	itt	cs
 800726e:	6a6b      	ldrcs	r3, [r5, #36]	; 0x24
 8007270:	616b      	strcs	r3, [r5, #20]
  if (ibqp->notify != NULL) {
 8007272:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  ibqp->bcounter--;
 8007274:	3801      	subs	r0, #1
 8007276:	60e8      	str	r0, [r5, #12]
  if (ibqp->notify != NULL) {
 8007278:	b10b      	cbz	r3, 800727e <ibqReadTimeout+0x8e>
    ibqp->notify(ibqp);
 800727a:	4628      	mov	r0, r5
 800727c:	4798      	blx	r3
 800727e:	f388 8811 	msr	BASEPRI, r8
    if (r >= n) {
 8007282:	455e      	cmp	r6, fp
 8007284:	d216      	bcs.n	80072b4 <ibqReadTimeout+0xc4>
 8007286:	f389 8811 	msr	BASEPRI, r9
    if (ibqp->ptr == NULL) {
 800728a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800728c:	2c00      	cmp	r4, #0
 800728e:	d1bf      	bne.n	8007210 <ibqReadTimeout+0x20>
      msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8007290:	9901      	ldr	r1, [sp, #4]
 8007292:	4628      	mov	r0, r5
 8007294:	f7fa fe24 	bl	8001ee0 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 8007298:	b950      	cbnz	r0, 80072b0 <ibqReadTimeout+0xc0>
 800729a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800729c:	e7b8      	b.n	8007210 <ibqReadTimeout+0x20>
      memcpy(bp, ibqp->ptr, size);
 800729e:	4638      	mov	r0, r7
 80072a0:	f7f9 f834 	bl	800030c <memcpy>
      ibqp->ptr += size;
 80072a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80072a6:	4453      	add	r3, sl
      r         += size;
 80072a8:	4456      	add	r6, sl
      bp        += size;
 80072aa:	4457      	add	r7, sl
      ibqp->ptr += size;
 80072ac:	62ab      	str	r3, [r5, #40]	; 0x28
      r         += size;
 80072ae:	e7d1      	b.n	8007254 <ibqReadTimeout+0x64>
 80072b0:	f384 8811 	msr	BASEPRI, r4
}
 80072b4:	4630      	mov	r0, r6
 80072b6:	b003      	add	sp, #12
 80072b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072bc:	0000      	movs	r0, r0
	...

080072c0 <_readt.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 80072c0:	300c      	adds	r0, #12
 80072c2:	f7ff bf95 	b.w	80071f0 <ibqReadTimeout>
 80072c6:	bf00      	nop
	...

080072d0 <_read.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 80072d0:	300c      	adds	r0, #12
 80072d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072d6:	f7ff bf8b 	b.w	80071f0 <ibqReadTimeout>
 80072da:	bf00      	nop
 80072dc:	0000      	movs	r0, r0
	...

080072e0 <parse_arguments>:
static char *parse_arguments(char *str, char **saveptr) {
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	460d      	mov	r5, r1
  if (str != NULL)
 80072e4:	b1b8      	cbz	r0, 8007316 <parse_arguments+0x36>
 80072e6:	4604      	mov	r4, r0
    *saveptr = str;
 80072e8:	6028      	str	r0, [r5, #0]
  p += strspn(p, " \t");
 80072ea:	4912      	ldr	r1, [pc, #72]	; (8007334 <parse_arguments+0x54>)
 80072ec:	4620      	mov	r0, r4
 80072ee:	f002 f9ef 	bl	80096d0 <strspn>
  if (*p == '"') {
 80072f2:	5c21      	ldrb	r1, [r4, r0]
 80072f4:	2922      	cmp	r1, #34	; 0x22
  p += strspn(p, " \t");
 80072f6:	eb04 0600 	add.w	r6, r4, r0
  if (*p == '"') {
 80072fa:	d012      	beq.n	8007322 <parse_arguments+0x42>
    *saveptr = strpbrk(p, " \t");
 80072fc:	490d      	ldr	r1, [pc, #52]	; (8007334 <parse_arguments+0x54>)
 80072fe:	4630      	mov	r0, r6
 8007300:	f002 f9ca 	bl	8009698 <strpbrk>
  if (*saveptr != NULL) {
 8007304:	b198      	cbz	r0, 800732e <parse_arguments+0x4e>
    *(*saveptr)++ = '\0';
 8007306:	1c42      	adds	r2, r0, #1
 8007308:	2300      	movs	r3, #0
 800730a:	602a      	str	r2, [r5, #0]
 800730c:	7003      	strb	r3, [r0, #0]
  return *p != '\0' ? p : NULL;
 800730e:	7833      	ldrb	r3, [r6, #0]
 8007310:	b123      	cbz	r3, 800731c <parse_arguments+0x3c>
}
 8007312:	4630      	mov	r0, r6
 8007314:	bd70      	pop	{r4, r5, r6, pc}
  p = *saveptr;
 8007316:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 8007318:	2c00      	cmp	r4, #0
 800731a:	d1e6      	bne.n	80072ea <parse_arguments+0xa>
    return NULL;
 800731c:	2600      	movs	r6, #0
}
 800731e:	4630      	mov	r0, r6
 8007320:	bd70      	pop	{r4, r5, r6, pc}
    p++;
 8007322:	3601      	adds	r6, #1
    *saveptr = strpbrk(p, "\"");
 8007324:	4630      	mov	r0, r6
 8007326:	f002 f94f 	bl	80095c8 <strchr>
  if (*saveptr != NULL) {
 800732a:	2800      	cmp	r0, #0
 800732c:	d1eb      	bne.n	8007306 <parse_arguments+0x26>
 800732e:	6028      	str	r0, [r5, #0]
 8007330:	e7ed      	b.n	800730e <parse_arguments+0x2e>
 8007332:	bf00      	nop
 8007334:	0800a2c0 	.word	0x0800a2c0
	...

08007340 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 8007340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8007344:	4dbc      	ldr	r5, [pc, #752]	; (8007638 <shellThread+0x2f8>)
  int n;
  ShellConfig *scfg = p;
  BaseSequentialStream *chp = scfg->sc_channel;
 8007346:	f8d0 a000 	ldr.w	sl, [r0]
#if !defined(_CHIBIOS_NIL_)
  chRegSetThreadName(SHELL_THREAD_NAME);
#endif

#if SHELL_USE_HISTORY == TRUE
  *(scfg->sc_histbuf) = 0;
 800734a:	6883      	ldr	r3, [r0, #8]
 800734c:	696a      	ldr	r2, [r5, #20]
 800734e:	49bb      	ldr	r1, [pc, #748]	; (800763c <shellThread+0x2fc>)
THD_FUNCTION(shellThread, p) {
 8007350:	b0a7      	sub	sp, #156	; 0x9c
 8007352:	4604      	mov	r4, r0
 8007354:	9001      	str	r0, [sp, #4]
  const ShellCommand *scp = scfg->sc_commands;
 8007356:	6840      	ldr	r0, [r0, #4]
 8007358:	9006      	str	r0, [sp, #24]
  *(scfg->sc_histbuf) = 0;
 800735a:	2000      	movs	r0, #0
 800735c:	6191      	str	r1, [r2, #24]
 800735e:	7018      	strb	r0, [r3, #0]
  ShellHistory hist = {
 8007360:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007364:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 8007368:	49b5      	ldr	r1, [pc, #724]	; (8007640 <shellThread+0x300>)
  ShellHistory hist = {
 800736a:	9010      	str	r0, [sp, #64]	; 0x40
  chprintf(chp, SHELL_NEWLINE_STR);
 800736c:	4650      	mov	r0, sl
  ShellHistory hist = {
 800736e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  chprintf(chp, SHELL_NEWLINE_STR);
 8007372:	f7fb fac5 	bl	8002900 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 8007376:	49b3      	ldr	r1, [pc, #716]	; (8007644 <shellThread+0x304>)
 8007378:	4650      	mov	r0, sl
 800737a:	f7fb fac1 	bl	8002900 <chprintf>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 800737e:	696b      	ldr	r3, [r5, #20]
#if !defined(_CHIBIOS_NIL_)
  while (!chThdShouldTerminateX()) {
 8007380:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007384:	f013 0304 	ands.w	r3, r3, #4
 8007388:	f040 8095 	bne.w	80074b6 <shellThread+0x176>
bool shellGetLine(ShellConfig *scfg, char *line, unsigned size, ShellHistory *shp) {
  char *p = line;
  BaseSequentialStream *chp = scfg->sc_channel;
#if SHELL_USE_ESC_SEQ == TRUE
  bool escape = false;
  bool bracket = false;
 800738c:	9302      	str	r3, [sp, #8]
 800738e:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 8007392:	f8cd a000 	str.w	sl, [sp]
    chprintf(chp, SHELL_PROMPT_STR);
 8007396:	49ac      	ldr	r1, [pc, #688]	; (8007648 <shellThread+0x308>)
 8007398:	9800      	ldr	r0, [sp, #0]
 800739a:	f7fb fab1 	bl	8002900 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 800739e:	9b01      	ldr	r3, [sp, #4]
  bool bracket = false;
 80073a0:	2500      	movs	r5, #0
  BaseSequentialStream *chp = scfg->sc_channel;
 80073a2:	681c      	ldr	r4, [r3, #0]
  bool escape = false;
 80073a4:	462f      	mov	r7, r5
  char *p = line;
 80073a6:	46c8      	mov	r8, r9
#endif

  while (true) {
    char c;

    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	2201      	movs	r2, #1
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 80073b2:	4620      	mov	r0, r4
 80073b4:	4798      	blx	r3
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d046      	beq.n	8007448 <shellThread+0x108>
      return true;
#if SHELL_USE_ESC_SEQ == TRUE
    if (c == 27) {
 80073ba:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 80073be:	291b      	cmp	r1, #27
 80073c0:	d02a      	beq.n	8007418 <shellThread+0xd8>
      escape = true;
      continue;
    }
    if (escape) {
 80073c2:	b15f      	cbz	r7, 80073dc <shellThread+0x9c>
      escape = false;
      if (c == '[') {
 80073c4:	295b      	cmp	r1, #91	; 0x5b
 80073c6:	d03d      	beq.n	8007444 <shellThread+0x104>
        escape = true;
        bracket = true;
        continue;
      }
      if (bracket) {
 80073c8:	b135      	cbz	r5, 80073d8 <shellThread+0x98>
        bracket = false;
#if SHELL_USE_HISTORY == TRUE
        if (c == 'A') {
 80073ca:	2941      	cmp	r1, #65	; 0x41
 80073cc:	f000 812a 	beq.w	8007624 <shellThread+0x2e4>
            chprintf(chp, "%s", line);
            p = line + len;
          }
          continue;
        }
        if (c == 'B') {
 80073d0:	2942      	cmp	r1, #66	; 0x42
 80073d2:	f000 810a 	beq.w	80075ea <shellThread+0x2aa>
        bracket = false;
 80073d6:	2500      	movs	r5, #0
      escape = false;
 80073d8:	462f      	mov	r7, r5
 80073da:	e7e5      	b.n	80073a8 <shellThread+0x68>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
#endif
    if ((c == 8) || (c == 127)) {
 80073dc:	2908      	cmp	r1, #8
 80073de:	d01d      	beq.n	800741c <shellThread+0xdc>
 80073e0:	297f      	cmp	r1, #127	; 0x7f
 80073e2:	d01b      	beq.n	800741c <shellThread+0xdc>
        streamPut(chp, 0x08);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 80073e4:	290d      	cmp	r1, #13
 80073e6:	f000 8168 	beq.w	80076ba <shellThread+0x37a>
#endif
      *p = 0;
      return false;
    }
#if SHELL_USE_COMPLETION == TRUE
    if (c == '\t') {
 80073ea:	2909      	cmp	r1, #9
 80073ec:	d077      	beq.n	80074de <shellThread+0x19e>
      }
      continue;
    }
#endif
#if SHELL_USE_HISTORY == TRUE
    if (c == 14) {
 80073ee:	290e      	cmp	r1, #14
 80073f0:	f000 813f 	beq.w	8007672 <shellThread+0x332>
        chprintf(chp, "%s", line);
        p = line + len;
      }
      continue;
    }
    if (c == 16) {
 80073f4:	2910      	cmp	r1, #16
 80073f6:	f000 8157 	beq.w	80076a8 <shellThread+0x368>
        p = line + len;
      }
      continue;
    }
#endif
    if (c < 0x20)
 80073fa:	291f      	cmp	r1, #31
 80073fc:	d9d4      	bls.n	80073a8 <shellThread+0x68>
      continue;
    if (p < line + size - 1) {
 80073fe:	f10d 0397 	add.w	r3, sp, #151	; 0x97
 8007402:	4598      	cmp	r8, r3
 8007404:	d2d0      	bcs.n	80073a8 <shellThread+0x68>
      streamPut(chp, c);
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	4620      	mov	r0, r4
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	4798      	blx	r3
      *p++ = (char)c;
 800740e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007412:	f808 3b01 	strb.w	r3, [r8], #1
 8007416:	e7c7      	b.n	80073a8 <shellThread+0x68>
      escape = true;
 8007418:	2701      	movs	r7, #1
 800741a:	e7c5      	b.n	80073a8 <shellThread+0x68>
      if (p != line) {
 800741c:	45c8      	cmp	r8, r9
 800741e:	d0c3      	beq.n	80073a8 <shellThread+0x68>
        streamPut(chp, 0x08);
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	2108      	movs	r1, #8
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	4620      	mov	r0, r4
 8007428:	4798      	blx	r3
        streamPut(chp, 0x20);
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	2120      	movs	r1, #32
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	4620      	mov	r0, r4
 8007432:	4798      	blx	r3
        streamPut(chp, 0x08);
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	2108      	movs	r1, #8
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	4620      	mov	r0, r4
        p--;
 800743c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
        streamPut(chp, 0x08);
 8007440:	4798      	blx	r3
 8007442:	e7b1      	b.n	80073a8 <shellThread+0x68>
        bracket = true;
 8007444:	463d      	mov	r5, r7
 8007446:	e7af      	b.n	80073a8 <shellThread+0x68>
  chThdSleep(delay);
 8007448:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800744c:	f7fa fda8 	bl	8001fa0 <chThdSleep>
    lp = parse_arguments(line, &tokp);
 8007450:	a909      	add	r1, sp, #36	; 0x24
 8007452:	4648      	mov	r0, r9
 8007454:	f7ff ff44 	bl	80072e0 <parse_arguments>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8007458:	a909      	add	r1, sp, #36	; 0x24
    lp = parse_arguments(line, &tokp);
 800745a:	4605      	mov	r5, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800745c:	2000      	movs	r0, #0
 800745e:	ac11      	add	r4, sp, #68	; 0x44
    n = 0;
 8007460:	2600      	movs	r6, #0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8007462:	f7ff ff3d 	bl	80072e0 <parse_arguments>
 8007466:	b150      	cbz	r0, 800747e <shellThread+0x13e>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8007468:	2e04      	cmp	r6, #4
 800746a:	d031      	beq.n	80074d0 <shellThread+0x190>
      args[n++] = lp;
 800746c:	f844 0b04 	str.w	r0, [r4], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8007470:	a909      	add	r1, sp, #36	; 0x24
 8007472:	2000      	movs	r0, #0
      args[n++] = lp;
 8007474:	3601      	adds	r6, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8007476:	f7ff ff33 	bl	80072e0 <parse_arguments>
 800747a:	2800      	cmp	r0, #0
 800747c:	d1f4      	bne.n	8007468 <shellThread+0x128>
    args[n] = NULL;
 800747e:	ab26      	add	r3, sp, #152	; 0x98
 8007480:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8007484:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8007488:	b175      	cbz	r5, 80074a8 <shellThread+0x168>
      if (strcmp(cmd, "help") == 0) {
 800748a:	4970      	ldr	r1, [pc, #448]	; (800764c <shellThread+0x30c>)
 800748c:	4628      	mov	r0, r5
 800748e:	f7f8 ffdb 	bl	8000448 <strcmp>
 8007492:	2800      	cmp	r0, #0
 8007494:	f040 81bd 	bne.w	8007812 <shellThread+0x4d2>
        if (n > 0) {
 8007498:	2e00      	cmp	r6, #0
 800749a:	f000 8172 	beq.w	8007782 <shellThread+0x442>
          shellUsage(chp, "help");
 800749e:	4a6b      	ldr	r2, [pc, #428]	; (800764c <shellThread+0x30c>)
 80074a0:	496b      	ldr	r1, [pc, #428]	; (8007650 <shellThread+0x310>)
 80074a2:	9800      	ldr	r0, [sp, #0]
 80074a4:	f7fb fa2c 	bl	8002900 <chprintf>
 80074a8:	4b63      	ldr	r3, [pc, #396]	; (8007638 <shellThread+0x2f8>)
 80074aa:	695b      	ldr	r3, [r3, #20]
  while (!chThdShouldTerminateX()) {
 80074ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80074b0:	075b      	lsls	r3, r3, #29
 80074b2:	f57f af70 	bpl.w	8007396 <shellThread+0x56>
 80074b6:	2320      	movs	r3, #32
 80074b8:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 80074bc:	2100      	movs	r1, #0
 80074be:	4865      	ldr	r0, [pc, #404]	; (8007654 <shellThread+0x314>)
 80074c0:	f7f9 fdbe 	bl	8001040 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 80074c4:	2000      	movs	r0, #0
 80074c6:	f7fa ff33 	bl	8002330 <chThdExitS>
}
 80074ca:	b027      	add	sp, #156	; 0x9c
 80074cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 80074d0:	4961      	ldr	r1, [pc, #388]	; (8007658 <shellThread+0x318>)
 80074d2:	9800      	ldr	r0, [sp, #0]
 80074d4:	f7fb fa14 	bl	8002900 <chprintf>
    args[n] = NULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	9315      	str	r3, [sp, #84]	; 0x54
    if (cmd != NULL) {
 80074dc:	e7e4      	b.n	80074a8 <shellThread+0x168>
      if (p < line + size - 1) {
 80074de:	f10d 0697 	add.w	r6, sp, #151	; 0x97
 80074e2:	45b0      	cmp	r8, r6
 80074e4:	f4bf af60 	bcs.w	80073a8 <shellThread+0x68>
  char help_cmp[] = "help";
 80074e8:	4b58      	ldr	r3, [pc, #352]	; (800764c <shellThread+0x30c>)
        *p = 0;
 80074ea:	f888 7000 	strb.w	r7, [r8]
  char help_cmp[] = "help";
 80074ee:	e893 0003 	ldmia.w	r3, {r0, r1}
  if (strstr(help_cmp, line) == help_cmp) {
 80074f2:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
  char help_cmp[] = "help";
 80074f6:	900a      	str	r0, [sp, #40]	; 0x28
 80074f8:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
  if (strstr(help_cmp, line) == help_cmp) {
 80074fc:	4658      	mov	r0, fp
 80074fe:	4649      	mov	r1, r9
 8007500:	f002 fa58 	bl	80099b4 <strstr>
        get_completions(scfg, line);
 8007504:	9b01      	ldr	r3, [sp, #4]
 8007506:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800750a:	685a      	ldr	r2, [r3, #4]
  if (strstr(help_cmp, line) == help_cmp) {
 800750c:	9203      	str	r2, [sp, #12]
 800750e:	4558      	cmp	r0, fp
    *scmp++ = help_cmp;
 8007510:	f10a 0304 	add.w	r3, sl, #4
 8007514:	bf08      	it	eq
 8007516:	469b      	moveq	fp, r3
 8007518:	9304      	str	r3, [sp, #16]
 800751a:	4b50      	ldr	r3, [pc, #320]	; (800765c <shellThread+0x31c>)
 800751c:	bf08      	it	eq
 800751e:	f8ca 0000 	streq.w	r0, [sl]
 8007522:	4649      	mov	r1, r9
 8007524:	4618      	mov	r0, r3
        get_completions(scfg, line);
 8007526:	bf18      	it	ne
 8007528:	46d3      	movne	fp, sl
  while (lcp->sc_name != NULL) {
 800752a:	f002 fa43 	bl	80099b4 <strstr>
    if (strstr(lcp->sc_name, line) == lcp->sc_name) {
 800752e:	4b4b      	ldr	r3, [pc, #300]	; (800765c <shellThread+0x31c>)
 8007530:	9a03      	ldr	r2, [sp, #12]
 8007532:	4298      	cmp	r0, r3
      *scmp++ = (char *)lcp->sc_name;
 8007534:	465b      	mov	r3, fp
 8007536:	bf08      	it	eq
 8007538:	f843 0b04 	streq.w	r0, [r3], #4
  if (scp != NULL) {
 800753c:	b1c2      	cbz	r2, 8007570 <shellThread+0x230>
    while (scp->sc_name != NULL) {
 800753e:	f8d2 b000 	ldr.w	fp, [r2]
 8007542:	f1bb 0f00 	cmp.w	fp, #0
 8007546:	d013      	beq.n	8007570 <shellThread+0x230>
 8007548:	9403      	str	r4, [sp, #12]
 800754a:	9505      	str	r5, [sp, #20]
 800754c:	465c      	mov	r4, fp
 800754e:	4615      	mov	r5, r2
 8007550:	469b      	mov	fp, r3
      if (strstr(scp->sc_name, line) == scp->sc_name) {
 8007552:	4620      	mov	r0, r4
 8007554:	4649      	mov	r1, r9
 8007556:	f002 fa2d 	bl	80099b4 <strstr>
 800755a:	4284      	cmp	r4, r0
        *scmp++ = (char *)scp->sc_name;
 800755c:	bf08      	it	eq
 800755e:	f84b 4b04 	streq.w	r4, [fp], #4
    while (scp->sc_name != NULL) {
 8007562:	f855 4f08 	ldr.w	r4, [r5, #8]!
 8007566:	2c00      	cmp	r4, #0
 8007568:	d1f3      	bne.n	8007552 <shellThread+0x212>
 800756a:	9c03      	ldr	r4, [sp, #12]
 800756c:	9d05      	ldr	r5, [sp, #20]
 800756e:	465b      	mov	r3, fp
  *scmp = NULL;
 8007570:	9a02      	ldr	r2, [sp, #8]
 8007572:	601a      	str	r2, [r3, #0]
  if (*scmp != NULL) {
 8007574:	f8da b000 	ldr.w	fp, [sl]
 8007578:	f1bb 0f00 	cmp.w	fp, #0
 800757c:	f43f af14 	beq.w	80073a8 <shellThread+0x68>
    if (*cmp == NULL) {
 8007580:	f8da 3004 	ldr.w	r3, [sl, #4]
        int len = process_completions(scfg, line, p - line, size);
 8007584:	eba8 0109 	sub.w	r1, r8, r9
 8007588:	9103      	str	r1, [sp, #12]
    if (*cmp == NULL) {
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 8170 	beq.w	8007870 <shellThread+0x530>
      while (*(*scmp + clen) != 0) {
 8007590:	f89b c000 	ldrb.w	ip, [fp]
 8007594:	f1bc 0f00 	cmp.w	ip, #0
 8007598:	f000 81b8 	beq.w	800790c <shellThread+0x5cc>
  int clen = 0;
 800759c:	9405      	str	r4, [sp, #20]
 800759e:	9507      	str	r5, [sp, #28]
 80075a0:	4664      	mov	r4, ip
 80075a2:	9d03      	ldr	r5, [sp, #12]
 80075a4:	f8dd c010 	ldr.w	ip, [sp, #16]
      while (*(*scmp + clen) != 0) {
 80075a8:	46c6      	mov	lr, r8
  int clen = 0;
 80075aa:	2100      	movs	r1, #0
        while ((*(*scmp + clen) == *(*cmp + clen)) &&
 80075ac:	5c5a      	ldrb	r2, [r3, r1]
 80075ae:	42a2      	cmp	r2, r4
 80075b0:	bf08      	it	eq
 80075b2:	4662      	moveq	r2, ip
 80075b4:	d105      	bne.n	80075c2 <shellThread+0x282>
               (*(*cmp + clen) != 0) && (*cmp != NULL)) {
 80075b6:	b13b      	cbz	r3, 80075c8 <shellThread+0x288>
        while ((*(*scmp + clen) == *(*cmp + clen)) &&
 80075b8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80075bc:	5c58      	ldrb	r0, [r3, r1]
 80075be:	42a0      	cmp	r0, r4
 80075c0:	d0f9      	beq.n	80075b6 <shellThread+0x276>
        if (*cmp == NULL) {
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f040 80f0 	bne.w	80077a8 <shellThread+0x468>
          if ((c < line + size - 1) && (clen >= length))
 80075c8:	45b6      	cmp	lr, r6
 80075ca:	d205      	bcs.n	80075d8 <shellThread+0x298>
 80075cc:	428d      	cmp	r5, r1
            *c++ = *(*scmp + clen);
 80075ce:	bfdc      	itt	le
 80075d0:	f80e 4b01 	strble.w	r4, [lr], #1
 80075d4:	f8da b000 	ldrle.w	fp, [sl]
          clen++;
 80075d8:	3101      	adds	r1, #1
      while (*(*scmp + clen) != 0) {
 80075da:	f81b 4001 	ldrb.w	r4, [fp, r1]
 80075de:	2c00      	cmp	r4, #0
 80075e0:	f000 8132 	beq.w	8007848 <shellThread+0x508>
 80075e4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80075e8:	e7e0      	b.n	80075ac <shellThread+0x26c>
          int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 80075ea:	2201      	movs	r2, #1
 80075ec:	4649      	mov	r1, r9
 80075ee:	a80c      	add	r0, sp, #48	; 0x30
 80075f0:	f7ff fa2e 	bl	8006a50 <get_history>
          if (len == 0)
 80075f4:	1e06      	subs	r6, r0, #0
 80075f6:	d139      	bne.n	800766c <shellThread+0x32c>
            *line = 0;
 80075f8:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
            _shell_reset_cur(chp);
 80075fc:	2304      	movs	r3, #4
 80075fe:	2246      	movs	r2, #70	; 0x46
 8007600:	4917      	ldr	r1, [pc, #92]	; (8007660 <shellThread+0x320>)
 8007602:	4620      	mov	r0, r4
 8007604:	f7fb f97c 	bl	8002900 <chprintf>
            _shell_clr_line(chp);
 8007608:	4916      	ldr	r1, [pc, #88]	; (8007664 <shellThread+0x324>)
 800760a:	4620      	mov	r0, r4
 800760c:	f7fb f978 	bl	8002900 <chprintf>
        bracket = false;
 8007610:	2500      	movs	r5, #0
            chprintf(chp, "%s", line);
 8007612:	4915      	ldr	r1, [pc, #84]	; (8007668 <shellThread+0x328>)
 8007614:	464a      	mov	r2, r9
 8007616:	4620      	mov	r0, r4
 8007618:	f7fb f972 	bl	8002900 <chprintf>
            p = line + len;
 800761c:	eb09 0806 	add.w	r8, r9, r6
      escape = false;
 8007620:	462f      	mov	r7, r5
 8007622:	e6c1      	b.n	80073a8 <shellThread+0x68>
          int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 8007624:	2200      	movs	r2, #0
 8007626:	4649      	mov	r1, r9
 8007628:	a80c      	add	r0, sp, #48	; 0x30
 800762a:	f7ff fa11 	bl	8006a50 <get_history>
          if (len > 0) {
 800762e:	1e06      	subs	r6, r0, #0
 8007630:	f77f aed1 	ble.w	80073d6 <shellThread+0x96>
 8007634:	e7e2      	b.n	80075fc <shellThread+0x2bc>
 8007636:	bf00      	nop
 8007638:	200018d0 	.word	0x200018d0
 800763c:	0800a2c4 	.word	0x0800a2c4
 8007640:	0800a09c 	.word	0x0800a09c
 8007644:	0800a2cc 	.word	0x0800a2cc
 8007648:	0800a2e0 	.word	0x0800a2e0
 800764c:	0800a31c 	.word	0x0800a31c
 8007650:	0800a074 	.word	0x0800a074
 8007654:	20001d74 	.word	0x20001d74
 8007658:	0800a304 	.word	0x0800a304
 800765c:	0800a2f8 	.word	0x0800a2f8
 8007660:	0800a2e8 	.word	0x0800a2e8
 8007664:	0800a2f4 	.word	0x0800a2f4
 8007668:	08009bbc 	.word	0x08009bbc
          if (len >= 0) {
 800766c:	f6ff aeb3 	blt.w	80073d6 <shellThread+0x96>
 8007670:	e7c4      	b.n	80075fc <shellThread+0x2bc>
      int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 8007672:	2201      	movs	r2, #1
 8007674:	4649      	mov	r1, r9
 8007676:	a80c      	add	r0, sp, #48	; 0x30
 8007678:	f7ff f9ea 	bl	8006a50 <get_history>
      if (len == 0)
 800767c:	1e06      	subs	r6, r0, #0
 800767e:	d178      	bne.n	8007772 <shellThread+0x432>
        *line = 0;
 8007680:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
        _shell_reset_cur(chp);
 8007684:	2304      	movs	r3, #4
 8007686:	2246      	movs	r2, #70	; 0x46
 8007688:	49a3      	ldr	r1, [pc, #652]	; (8007918 <shellThread+0x5d8>)
 800768a:	4620      	mov	r0, r4
 800768c:	f7fb f938 	bl	8002900 <chprintf>
        _shell_clr_line(chp);
 8007690:	49a2      	ldr	r1, [pc, #648]	; (800791c <shellThread+0x5dc>)
 8007692:	4620      	mov	r0, r4
 8007694:	f7fb f934 	bl	8002900 <chprintf>
        chprintf(chp, "%s", line);
 8007698:	49a1      	ldr	r1, [pc, #644]	; (8007920 <shellThread+0x5e0>)
 800769a:	464a      	mov	r2, r9
 800769c:	4620      	mov	r0, r4
        p = line + len;
 800769e:	eb09 0806 	add.w	r8, r9, r6
        chprintf(chp, "%s", line);
 80076a2:	f7fb f92d 	bl	8002900 <chprintf>
 80076a6:	e67f      	b.n	80073a8 <shellThread+0x68>
      int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 80076a8:	463a      	mov	r2, r7
 80076aa:	4649      	mov	r1, r9
 80076ac:	a80c      	add	r0, sp, #48	; 0x30
 80076ae:	f7ff f9cf 	bl	8006a50 <get_history>
      if (len > 0) {
 80076b2:	1e06      	subs	r6, r0, #0
 80076b4:	f77f ae78 	ble.w	80073a8 <shellThread+0x68>
 80076b8:	e7e4      	b.n	8007684 <shellThread+0x344>
      chprintf(chp, SHELL_NEWLINE_STR);
 80076ba:	4620      	mov	r0, r4
 80076bc:	4999      	ldr	r1, [pc, #612]	; (8007924 <shellThread+0x5e4>)
 80076be:	f7fb f91f 	bl	8002900 <chprintf>
  if (length > shp->sh_size - 2)
 80076c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
      save_history(shp, line, p - line);
 80076c4:	eba8 0409 	sub.w	r4, r8, r9
  if (length > shp->sh_size - 2)
 80076c8:	1e6b      	subs	r3, r5, #1
 80076ca:	429c      	cmp	r4, r3
 80076cc:	da4d      	bge.n	800776a <shellThread+0x42a>
  while ((*(line + length -1) == ' ') && (length > 0))
 80076ce:	1e63      	subs	r3, r4, #1
 80076d0:	eb09 0203 	add.w	r2, r9, r3
 80076d4:	f819 1003 	ldrb.w	r1, [r9, r3]
 80076d8:	2920      	cmp	r1, #32
 80076da:	d10a      	bne.n	80076f2 <shellThread+0x3b2>
 80076dc:	2c00      	cmp	r4, #0
 80076de:	dc03      	bgt.n	80076e8 <shellThread+0x3a8>
 80076e0:	e043      	b.n	800776a <shellThread+0x42a>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d041      	beq.n	800776a <shellThread+0x42a>
 80076e6:	3b01      	subs	r3, #1
 80076e8:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 80076ec:	2920      	cmp	r1, #32
    length--;
 80076ee:	461c      	mov	r4, r3
  while ((*(line + length -1) == ' ') && (length > 0))
 80076f0:	d0f7      	beq.n	80076e2 <shellThread+0x3a2>
  if (length <= 0)
 80076f2:	2c00      	cmp	r4, #0
 80076f4:	dd39      	ble.n	800776a <shellThread+0x42a>
  if (shp->sh_end >= shp->sh_beg) {
 80076f6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 80076f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80076fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 80076fc:	1af2      	subs	r2, r6, r3
    if (length < (shp->sh_beg - shp->sh_end - 1))
 80076fe:	1b99      	subs	r1, r3, r6
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8007700:	3201      	adds	r2, #1
  if (shp->sh_end >= shp->sh_beg) {
 8007702:	429e      	cmp	r6, r3
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8007704:	eba5 0202 	sub.w	r2, r5, r2
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8007708:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
  if (shp->sh_end >= shp->sh_beg) {
 800770c:	db09      	blt.n	8007722 <shellThread+0x3e2>
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 800770e:	42a2      	cmp	r2, r4
 8007710:	dc09      	bgt.n	8007726 <shellThread+0x3e6>
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 8007712:	5cc2      	ldrb	r2, [r0, r3]
 8007714:	4413      	add	r3, r2
 8007716:	3301      	adds	r3, #1
  if (pos >= shp->sh_size)
 8007718:	429d      	cmp	r5, r3
    pos -= shp->sh_size;
 800771a:	bfd8      	it	le
 800771c:	1b5b      	suble	r3, r3, r5
  shp->sh_beg = pos;
 800771e:	930e      	str	r3, [sp, #56]	; 0x38
 8007720:	e7ec      	b.n	80076fc <shellThread+0x3bc>
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8007722:	42a1      	cmp	r1, r4
 8007724:	ddf5      	ble.n	8007712 <shellThread+0x3d2>
  if (length < shp->sh_size - shp->sh_end - 1)
 8007726:	1bad      	subs	r5, r5, r6
 8007728:	3d01      	subs	r5, #1
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 800772a:	3601      	adds	r6, #1
  if (length < shp->sh_size - shp->sh_end - 1)
 800772c:	42a5      	cmp	r5, r4
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 800772e:	4430      	add	r0, r6
  if (length < shp->sh_size - shp->sh_end - 1)
 8007730:	dc22      	bgt.n	8007778 <shellThread+0x438>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, part_len);
 8007732:	462a      	mov	r2, r5
 8007734:	4649      	mov	r1, r9
 8007736:	f7f8 fde9 	bl	800030c <memcpy>
    memcpy(shp->sh_buffer, line + part_len, length - part_len);
 800773a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800773c:	1b62      	subs	r2, r4, r5
 800773e:	eb09 0105 	add.w	r1, r9, r5
 8007742:	f7f8 fde3 	bl	800030c <memcpy>
  *(shp->sh_buffer + shp->sh_end) = (char)length;
 8007746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800774a:	54d4      	strb	r4, [r2, r3]
  shp->sh_end += length + 1;
 800774c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  if (shp->sh_end >= shp->sh_size)
 800774e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  shp->sh_end += length + 1;
 8007750:	3401      	adds	r4, #1
 8007752:	4414      	add	r4, r2
  if (shp->sh_end >= shp->sh_size)
 8007754:	429c      	cmp	r4, r3
  shp->sh_end += length + 1;
 8007756:	940f      	str	r4, [sp, #60]	; 0x3c
    shp->sh_end -= shp->sh_size;
 8007758:	bfa8      	it	ge
 800775a:	1ae4      	subge	r4, r4, r3
  *(shp->sh_buffer + shp->sh_end) = 0;
 800775c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800775e:	9a02      	ldr	r2, [sp, #8]
    shp->sh_end -= shp->sh_size;
 8007760:	bfa8      	it	ge
 8007762:	940f      	strge	r4, [sp, #60]	; 0x3c
  *(shp->sh_buffer + shp->sh_end) = 0;
 8007764:	551a      	strb	r2, [r3, r4]
  shp->sh_cur = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	9310      	str	r3, [sp, #64]	; 0x40
      *p = 0;
 800776a:	9b02      	ldr	r3, [sp, #8]
 800776c:	f888 3000 	strb.w	r3, [r8]
 8007770:	e66e      	b.n	8007450 <shellThread+0x110>
      if (len >= 0) {
 8007772:	f6ff ae19 	blt.w	80073a8 <shellThread+0x68>
 8007776:	e785      	b.n	8007684 <shellThread+0x344>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8007778:	4622      	mov	r2, r4
 800777a:	4649      	mov	r1, r9
 800777c:	f7f8 fdc6 	bl	800030c <memcpy>
 8007780:	e7e1      	b.n	8007746 <shellThread+0x406>
        chprintf(chp, "Commands: help ");
 8007782:	9c00      	ldr	r4, [sp, #0]
 8007784:	4968      	ldr	r1, [pc, #416]	; (8007928 <shellThread+0x5e8>)
 8007786:	4620      	mov	r0, r4
 8007788:	f7fb f8ba 	bl	8002900 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
 800778c:	4a67      	ldr	r2, [pc, #412]	; (800792c <shellThread+0x5ec>)
 800778e:	4968      	ldr	r1, [pc, #416]	; (8007930 <shellThread+0x5f0>)
 8007790:	4620      	mov	r0, r4
 8007792:	f7fb f8b5 	bl	8002900 <chprintf>
        if (scp != NULL)
 8007796:	9b06      	ldr	r3, [sp, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	f040 8098 	bne.w	80078ce <shellThread+0x58e>
        chprintf(chp, SHELL_NEWLINE_STR);
 800779e:	4961      	ldr	r1, [pc, #388]	; (8007924 <shellThread+0x5e4>)
 80077a0:	9800      	ldr	r0, [sp, #0]
 80077a2:	f7fb f8ad 	bl	8002900 <chprintf>
 80077a6:	e67f      	b.n	80074a8 <shellThread+0x168>
 80077a8:	9c05      	ldr	r4, [sp, #20]
 80077aa:	9d07      	ldr	r5, [sp, #28]
 80077ac:	eb09 0b01 	add.w	fp, r9, r1
    *(line + clen) = 0;
 80077b0:	9b02      	ldr	r3, [sp, #8]
 80077b2:	f88b 3000 	strb.w	r3, [fp]
        if (len > 0) {
 80077b6:	2900      	cmp	r1, #0
 80077b8:	f43f adf6 	beq.w	80073a8 <shellThread+0x68>
          write_completions(scfg, line, p - line);
 80077bc:	9a01      	ldr	r2, [sp, #4]
  if (*(scmp + 1) != NULL) {
 80077be:	f8da 3004 	ldr.w	r3, [sl, #4]
          write_completions(scfg, line, p - line);
 80077c2:	6816      	ldr	r6, [r2, #0]
  if (*(scmp + 1) != NULL) {
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d04c      	beq.n	8007862 <shellThread+0x522>
    chprintf(chp, SHELL_NEWLINE_STR);
 80077c8:	4956      	ldr	r1, [pc, #344]	; (8007924 <shellThread+0x5e4>)
 80077ca:	4630      	mov	r0, r6
 80077cc:	f7fb f898 	bl	8002900 <chprintf>
    while (*scmp != NULL)
 80077d0:	f8da 2000 	ldr.w	r2, [sl]
 80077d4:	b172      	cbz	r2, 80077f4 <shellThread+0x4b4>
      chprintf(chp, " %s", *scmp++);
 80077d6:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800793c <shellThread+0x5fc>
 80077da:	f8dd a010 	ldr.w	sl, [sp, #16]
 80077de:	e001      	b.n	80077e4 <shellThread+0x4a4>
 80077e0:	f10a 0a04 	add.w	sl, sl, #4
 80077e4:	4641      	mov	r1, r8
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7fb f88a 	bl	8002900 <chprintf>
    while (*scmp != NULL)
 80077ec:	f8da 2000 	ldr.w	r2, [sl]
 80077f0:	2a00      	cmp	r2, #0
 80077f2:	d1f5      	bne.n	80077e0 <shellThread+0x4a0>
    chprintf(chp, SHELL_NEWLINE_STR);
 80077f4:	494b      	ldr	r1, [pc, #300]	; (8007924 <shellThread+0x5e4>)
 80077f6:	4630      	mov	r0, r6
 80077f8:	f7fb f882 	bl	8002900 <chprintf>
    chprintf(chp, SHELL_PROMPT_STR);
 80077fc:	494d      	ldr	r1, [pc, #308]	; (8007934 <shellThread+0x5f4>)
 80077fe:	4630      	mov	r0, r6
 8007800:	f7fb f87e 	bl	8002900 <chprintf>
    chprintf(chp, "%s", line);
 8007804:	4946      	ldr	r1, [pc, #280]	; (8007920 <shellThread+0x5e0>)
 8007806:	464a      	mov	r2, r9
 8007808:	4630      	mov	r0, r6
 800780a:	f7fb f879 	bl	8002900 <chprintf>
          p = line + len;
 800780e:	46d8      	mov	r8, fp
 8007810:	e5ca      	b.n	80073a8 <shellThread+0x68>
 8007812:	4846      	ldr	r0, [pc, #280]	; (800792c <shellThread+0x5ec>)
 8007814:	4629      	mov	r1, r5
 8007816:	f7f8 fe17 	bl	8000448 <strcmp>
    if (strcmp(scp->sc_name, name) == 0) {
 800781a:	2800      	cmp	r0, #0
 800781c:	d051      	beq.n	80078c2 <shellThread+0x582>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 800781e:	9c06      	ldr	r4, [sp, #24]
 8007820:	2c00      	cmp	r4, #0
 8007822:	d068      	beq.n	80078f6 <shellThread+0x5b6>
  while (scp->sc_name != NULL) {
 8007824:	6820      	ldr	r0, [r4, #0]
 8007826:	b920      	cbnz	r0, 8007832 <shellThread+0x4f2>
 8007828:	e065      	b.n	80078f6 <shellThread+0x5b6>
 800782a:	f854 0f08 	ldr.w	r0, [r4, #8]!
 800782e:	2800      	cmp	r0, #0
 8007830:	d061      	beq.n	80078f6 <shellThread+0x5b6>
    if (strcmp(scp->sc_name, name) == 0) {
 8007832:	4629      	mov	r1, r5
 8007834:	f7f8 fe08 	bl	8000448 <strcmp>
 8007838:	2800      	cmp	r0, #0
 800783a:	d1f6      	bne.n	800782a <shellThread+0x4ea>
      scp->sc_function(chp, argc, argv);
 800783c:	6863      	ldr	r3, [r4, #4]
 800783e:	9800      	ldr	r0, [sp, #0]
 8007840:	4631      	mov	r1, r6
 8007842:	aa11      	add	r2, sp, #68	; 0x44
 8007844:	4798      	blx	r3
      return false;
 8007846:	e62f      	b.n	80074a8 <shellThread+0x168>
 8007848:	46a4      	mov	ip, r4
    *(line + clen) = 0;
 800784a:	f809 c001 	strb.w	ip, [r9, r1]
          write_completions(scfg, line, p - line);
 800784e:	9a01      	ldr	r2, [sp, #4]
  if (*(scmp + 1) != NULL) {
 8007850:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007854:	9d07      	ldr	r5, [sp, #28]
 8007856:	9c05      	ldr	r4, [sp, #20]
          write_completions(scfg, line, p - line);
 8007858:	6816      	ldr	r6, [r2, #0]
    *(line + clen) = 0;
 800785a:	eb09 0b01 	add.w	fp, r9, r1
  if (*(scmp + 1) != NULL) {
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1b2      	bne.n	80077c8 <shellThread+0x488>
    chprintf(chp, "%s", line + pos);
 8007862:	4642      	mov	r2, r8
 8007864:	492e      	ldr	r1, [pc, #184]	; (8007920 <shellThread+0x5e0>)
 8007866:	4630      	mov	r0, r6
 8007868:	f7fb f84a 	bl	8002900 <chprintf>
          p = line + len;
 800786c:	46d8      	mov	r8, fp
 800786e:	e59b      	b.n	80073a8 <shellThread+0x68>
      clen = strlen(*scmp);
 8007870:	4658      	mov	r0, fp
 8007872:	f8cd b014 	str.w	fp, [sp, #20]
 8007876:	f7f8 ff63 	bl	8000740 <strlen>
      while ((c < line + clen) && (c < line + size - 1))
 800787a:	eb09 0b00 	add.w	fp, r9, r0
 800787e:	45d8      	cmp	r8, fp
      clen = strlen(*scmp);
 8007880:	4686      	mov	lr, r0
 8007882:	4601      	mov	r1, r0
      while ((c < line + clen) && (c < line + size - 1))
 8007884:	d245      	bcs.n	8007912 <shellThread+0x5d2>
 8007886:	9b03      	ldr	r3, [sp, #12]
 8007888:	9a05      	ldr	r2, [sp, #20]
 800788a:	eba3 0c08 	sub.w	ip, r3, r8
 800788e:	4643      	mov	r3, r8
 8007890:	e003      	b.n	800789a <shellThread+0x55a>
 8007892:	42b3      	cmp	r3, r6
 8007894:	d08c      	beq.n	80077b0 <shellThread+0x470>
 8007896:	f8da 2000 	ldr.w	r2, [sl]
        *c++ = *(*scmp + i++);
 800789a:	eb03 000c 	add.w	r0, r3, ip
 800789e:	5c12      	ldrb	r2, [r2, r0]
 80078a0:	f803 2b01 	strb.w	r2, [r3], #1
      while ((c < line + clen) && (c < line + size - 1))
 80078a4:	455b      	cmp	r3, fp
 80078a6:	d1f4      	bne.n	8007892 <shellThread+0x552>
      if (c < line + size -1) {
 80078a8:	45b3      	cmp	fp, r6
 80078aa:	d281      	bcs.n	80077b0 <shellThread+0x470>
        clen++;
 80078ac:	f10e 0e01 	add.w	lr, lr, #1
        *c = ' ';
 80078b0:	2320      	movs	r3, #32
 80078b2:	f88b 3000 	strb.w	r3, [fp]
    *(line + clen) = 0;
 80078b6:	9b02      	ldr	r3, [sp, #8]
 80078b8:	f809 300e 	strb.w	r3, [r9, lr]
 80078bc:	eb09 0b0e 	add.w	fp, r9, lr
 80078c0:	e77c      	b.n	80077bc <shellThread+0x47c>
      scp->sc_function(chp, argc, argv);
 80078c2:	9800      	ldr	r0, [sp, #0]
 80078c4:	4631      	mov	r1, r6
 80078c6:	aa11      	add	r2, sp, #68	; 0x44
 80078c8:	f7fe fdd2 	bl	8006470 <cmd_echo>
      return false;
 80078cc:	e5ec      	b.n	80074a8 <shellThread+0x168>
  while (scp->sc_name != NULL) {
 80078ce:	9c06      	ldr	r4, [sp, #24]
 80078d0:	6822      	ldr	r2, [r4, #0]
 80078d2:	2a00      	cmp	r2, #0
 80078d4:	f43f af63 	beq.w	800779e <shellThread+0x45e>
    chprintf(chp, "%s ", scp->sc_name);
 80078d8:	4d15      	ldr	r5, [pc, #84]	; (8007930 <shellThread+0x5f0>)
 80078da:	9e00      	ldr	r6, [sp, #0]
 80078dc:	4629      	mov	r1, r5
 80078de:	4630      	mov	r0, r6
 80078e0:	f7fb f80e 	bl	8002900 <chprintf>
  while (scp->sc_name != NULL) {
 80078e4:	f854 2f08 	ldr.w	r2, [r4, #8]!
 80078e8:	2a00      	cmp	r2, #0
 80078ea:	d1f7      	bne.n	80078dc <shellThread+0x59c>
        chprintf(chp, SHELL_NEWLINE_STR);
 80078ec:	490d      	ldr	r1, [pc, #52]	; (8007924 <shellThread+0x5e4>)
 80078ee:	9800      	ldr	r0, [sp, #0]
 80078f0:	f7fb f806 	bl	8002900 <chprintf>
 80078f4:	e5d8      	b.n	80074a8 <shellThread+0x168>
        chprintf(chp, "%s", cmd);
 80078f6:	9c00      	ldr	r4, [sp, #0]
 80078f8:	4909      	ldr	r1, [pc, #36]	; (8007920 <shellThread+0x5e0>)
 80078fa:	462a      	mov	r2, r5
 80078fc:	4620      	mov	r0, r4
 80078fe:	f7fa ffff 	bl	8002900 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 8007902:	490d      	ldr	r1, [pc, #52]	; (8007938 <shellThread+0x5f8>)
 8007904:	4620      	mov	r0, r4
 8007906:	f7fa fffb 	bl	8002900 <chprintf>
 800790a:	e5cd      	b.n	80074a8 <shellThread+0x168>
    *(line + clen) = 0;
 800790c:	f88d c058 	strb.w	ip, [sp, #88]	; 0x58
 8007910:	e54a      	b.n	80073a8 <shellThread+0x68>
      while ((c < line + clen) && (c < line + size - 1))
 8007912:	46c3      	mov	fp, r8
 8007914:	e7ca      	b.n	80078ac <shellThread+0x56c>
 8007916:	bf00      	nop
 8007918:	0800a2e8 	.word	0x0800a2e8
 800791c:	0800a2f4 	.word	0x0800a2f4
 8007920:	08009bbc 	.word	0x08009bbc
 8007924:	0800a09c 	.word	0x0800a09c
 8007928:	0800a324 	.word	0x0800a324
 800792c:	0800a2f8 	.word	0x0800a2f8
 8007930:	0800a334 	.word	0x0800a334
 8007934:	0800a2e0 	.word	0x0800a2e0
 8007938:	0800a338 	.word	0x0800a338
 800793c:	0800a300 	.word	0x0800a300

08007940 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8007940:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8007944:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8007946:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800794a:	2300      	movs	r3, #0
 800794c:	f383 8811 	msr	BASEPRI, r3
}
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
	...

08007960 <chThdExit>:
 8007960:	2320      	movs	r3, #32
 8007962:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 8007966:	f7fa bce3 	b.w	8002330 <chThdExitS>
 800796a:	bf00      	nop
 800796c:	0000      	movs	r0, r0
	...

08007970 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 8007970:	4a0d      	ldr	r2, [pc, #52]	; (80079a8 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->next;
 8007972:	6810      	ldr	r0, [r2, #0]
 8007974:	6951      	ldr	r1, [r2, #20]
  tqp->next             = tp->queue.next;
 8007976:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 8007978:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 800797a:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 800797c:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 800797e:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 8007980:	f880 4020 	strb.w	r4, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8007984:	688c      	ldr	r4, [r1, #8]
  tqp->next             = tp->queue.next;
 8007986:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8007988:	6150      	str	r0, [r2, #20]
  tp->state = CH_STATE_READY;
 800798a:	f881 5020 	strb.w	r5, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 800798e:	e000      	b.n	8007992 <chSchDoReschedule+0x22>
 8007990:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	4294      	cmp	r4, r2
 8007996:	d3fb      	bcc.n	8007990 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8007998:	685a      	ldr	r2, [r3, #4]
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 800799a:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 800799c:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 80079a0:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 80079a2:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 80079a4:	f7f8 bc9c 	b.w	80002e0 <_port_switch>
 80079a8:	200018d0 	.word	0x200018d0
 80079ac:	00000000 	.word	0x00000000

080079b0 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 80079b0:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 80079b2:	4d1b      	ldr	r5, [pc, #108]	; (8007a20 <chMtxUnlock+0x70>)
void chMtxUnlock(mutex_t *mp) {
 80079b4:	4601      	mov	r1, r0
  thread_t *ctp = currp;
 80079b6:	696e      	ldr	r6, [r5, #20]
 80079b8:	2320      	movs	r3, #32
 80079ba:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 80079be:	6800      	ldr	r0, [r0, #0]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 80079c0:	68cb      	ldr	r3, [r1, #12]
 80079c2:	63b3      	str	r3, [r6, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80079c4:	4288      	cmp	r0, r1
 80079c6:	d025      	beq.n	8007a14 <chMtxUnlock+0x64>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 80079c8:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 80079ca:	b14b      	cbz	r3, 80079e0 <chMtxUnlock+0x30>
 80079cc:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d003      	beq.n	80079da <chMtxUnlock+0x2a>
 80079d2:	6892      	ldr	r2, [r2, #8]
 80079d4:	4294      	cmp	r4, r2
 80079d6:	bf38      	it	cc
 80079d8:	4614      	movcc	r4, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 80079da:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1f5      	bne.n	80079cc <chMtxUnlock+0x1c>
  tqp->next             = tp->queue.next;
 80079e0:	6803      	ldr	r3, [r0, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 80079e2:	6b82      	ldr	r2, [r0, #56]	; 0x38
      ctp->prio = newprio;
 80079e4:	60b4      	str	r4, [r6, #8]
 80079e6:	600b      	str	r3, [r1, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80079e8:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 80079ea:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 80079ee:	6381      	str	r1, [r0, #56]	; 0x38

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80079f0:	f7f9 fae6 	bl	8000fc0 <chSchReadyI>
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 80079f4:	682a      	ldr	r2, [r5, #0]
 80079f6:	696b      	ldr	r3, [r5, #20]
  if (chSchIsRescRequiredI()) {
 80079f8:	6892      	ldr	r2, [r2, #8]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d803      	bhi.n	8007a08 <chMtxUnlock+0x58>
 8007a00:	2300      	movs	r3, #0
 8007a02:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
    chSchDoRescheduleAhead();
 8007a08:	f7ff ffb2 	bl	8007970 <chSchDoReschedule>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 8007a14:	2300      	movs	r3, #0
 8007a16:	6083      	str	r3, [r0, #8]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f383 8811 	msr	BASEPRI, r3
}
 8007a1e:	bd70      	pop	{r4, r5, r6, pc}
 8007a20:	200018d0 	.word	0x200018d0
	...

08007a30 <chThdRelease>:
 8007a30:	2220      	movs	r2, #32
 8007a32:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 8007a36:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8007a40:	6a03      	ldr	r3, [r0, #32]
 8007a42:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8007a46:	2b0f      	cmp	r3, #15
 8007a48:	d003      	beq.n	8007a52 <chThdRelease+0x22>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	4770      	bx	lr
    REG_REMOVE(tp);
 8007a52:	e9d0 1303 	ldrd	r1, r3, [r0, #12]
void chThdRelease(thread_t *tp) {
 8007a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    REG_REMOVE(tp);
 8007a5a:	60d9      	str	r1, [r3, #12]
 8007a5c:	68c1      	ldr	r1, [r0, #12]
 8007a5e:	2700      	movs	r7, #0
 8007a60:	610b      	str	r3, [r1, #16]
 8007a62:	f387 8811 	msr	BASEPRI, r7
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8007a66:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8007a6a:	f003 0303 	and.w	r3, r3, #3
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d00d      	beq.n	8007a8e <chThdRelease+0x5e>
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d001      	beq.n	8007a7a <chThdRelease+0x4a>
}
 8007a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8007a7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007a7c:	69c1      	ldr	r1, [r0, #28]
 8007a7e:	f382 8811 	msr	BASEPRI, r2
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	600a      	str	r2, [r1, #0]
  mp->next = php;
 8007a86:	6019      	str	r1, [r3, #0]
 8007a88:	f387 8811 	msr	BASEPRI, r7
 8007a8c:	e7f3      	b.n	8007a76 <chThdRelease+0x46>
      chHeapFree(chThdGetWorkingAreaX(tp));
 8007a8e:	69c6      	ldr	r6, [r0, #28]
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8007a90:	e956 0302 	ldrd	r0, r3, [r6, #-8]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8007a94:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8007a96:	08db      	lsrs	r3, r3, #3
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8007a98:	f846 3c04 	str.w	r3, [r6, #-4]
  qp = &heapp->header;
 8007a9c:	1d05      	adds	r5, r0, #4

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8007a9e:	f100 080c 	add.w	r8, r0, #12
  hp = (heap_header_t *)p - 1U;
 8007aa2:	f1a6 0408 	sub.w	r4, r6, #8
 8007aa6:	f382 8811 	msr	BASEPRI, r2
  chMtxLockS(mp);
 8007aaa:	4640      	mov	r0, r8
 8007aac:	f7fa fbe0 	bl	8002270 <chMtxLockS>
 8007ab0:	f387 8811 	msr	BASEPRI, r7
  qp = &heapp->header;
 8007ab4:	462b      	mov	r3, r5

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 8007ab6:	429d      	cmp	r5, r3
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8007ab8:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8007aba:	d001      	beq.n	8007ac0 <chThdRelease+0x90>
 8007abc:	429c      	cmp	r4, r3
 8007abe:	d902      	bls.n	8007ac6 <chThdRelease+0x96>
 8007ac0:	b11a      	cbz	r2, 8007aca <chThdRelease+0x9a>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8007ac2:	4294      	cmp	r4, r2
 8007ac4:	d301      	bcc.n	8007aca <chThdRelease+0x9a>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
      }
      break;
    }
    qp = H_NEXT(qp);
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	e7f5      	b.n	8007ab6 <chThdRelease+0x86>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8007aca:	f856 1c04 	ldr.w	r1, [r6, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 8007ace:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 8007ad2:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8007ad4:	1c4a      	adds	r2, r1, #1
 8007ad6:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8007ada:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8007ade:	4281      	cmp	r1, r0
 8007ae0:	d011      	beq.n	8007b06 <chThdRelease+0xd6>
      if ((H_LIMIT(qp) == hp)) {
 8007ae2:	6859      	ldr	r1, [r3, #4]
 8007ae4:	1c4a      	adds	r2, r1, #1
 8007ae6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007aea:	4294      	cmp	r4, r2
 8007aec:	d004      	beq.n	8007af8 <chThdRelease+0xc8>
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8007aee:	4640      	mov	r0, r8
}
 8007af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007af4:	f7ff bf5c 	b.w	80079b0 <chMtxUnlock>
        H_NEXT(qp) = H_NEXT(hp);
 8007af8:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8007afc:	3201      	adds	r2, #1
 8007afe:	4411      	add	r1, r2
        H_NEXT(qp) = H_NEXT(hp);
 8007b00:	6018      	str	r0, [r3, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8007b02:	6059      	str	r1, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 8007b04:	e7f3      	b.n	8007aee <chThdRelease+0xbe>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8007b06:	e9d1 1000 	ldrd	r1, r0, [r1]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8007b0a:	4402      	add	r2, r0
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8007b0c:	f846 1c08 	str.w	r1, [r6, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8007b10:	f846 2c04 	str.w	r2, [r6, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8007b14:	e7e5      	b.n	8007ae2 <chThdRelease+0xb2>
 8007b16:	bf00      	nop
	...

08007b20 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8007b20:	4b24      	ldr	r3, [pc, #144]	; (8007bb4 <main+0x94>)
  PWR->CR |= PWR_CR_DBP;
 8007b22:	4825      	ldr	r0, [pc, #148]	; (8007bb8 <main+0x98>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	f062 021f 	orn	r2, r2, #31
//}

/*
 * Application entry point.
 */
int main(void) {
 8007b2a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8007b2e:	611a      	str	r2, [r3, #16]
 8007b30:	691a      	ldr	r2, [r3, #16]
 8007b32:	f002 021f 	and.w	r2, r2, #31
 8007b36:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8007b38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8007b3c:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 8007b3e:	695a      	ldr	r2, [r3, #20]
 8007b40:	615c      	str	r4, [r3, #20]
 8007b42:	2100      	movs	r1, #0
 8007b44:	695a      	ldr	r2, [r3, #20]
 8007b46:	6159      	str	r1, [r3, #20]
 8007b48:	695a      	ldr	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8007b4a:	6a1a      	ldr	r2, [r3, #32]
 8007b4c:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 8007b50:	621a      	str	r2, [r3, #32]
 8007b52:	6a1a      	ldr	r2, [r3, #32]
 8007b54:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8007b58:	621a      	str	r2, [r3, #32]
 8007b5a:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 8007b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b5e:	625c      	str	r4, [r3, #36]	; 0x24
 8007b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b62:	6259      	str	r1, [r3, #36]	; 0x24
 8007b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8007b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007b6c:	641a      	str	r2, [r3, #64]	; 0x40
 8007b6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007b70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007b74:	661a      	str	r2, [r3, #96]	; 0x60
 8007b76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8007b78:	6802      	ldr	r2, [r0, #0]
 8007b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b7e:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8007b80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b82:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007b86:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007b8a:	b08d      	sub	sp, #52	; 0x34
 8007b8c:	d003      	beq.n	8007b96 <main+0x76>
    RCC->BDCR = RCC_BDCR_BDRST;
 8007b8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007b92:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8007b94:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8007b96:	4d08      	ldr	r5, [pc, #32]	; (8007bb8 <main+0x98>)
  dma.allocated_mask = 0U;
 8007b98:	4808      	ldr	r0, [pc, #32]	; (8007bbc <main+0x9c>)
 8007b9a:	686a      	ldr	r2, [r5, #4]
 8007b9c:	4b08      	ldr	r3, [pc, #32]	; (8007bc0 <main+0xa0>)
 8007b9e:	4909      	ldr	r1, [pc, #36]	; (8007bc4 <main+0xa4>)
 8007ba0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ba4:	2400      	movs	r4, #0
 8007ba6:	606a      	str	r2, [r5, #4]
 8007ba8:	4602      	mov	r2, r0
 8007baa:	6004      	str	r4, [r0, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8007bac:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8007bb0:	e00c      	b.n	8007bcc <main+0xac>
 8007bb2:	bf00      	nop
 8007bb4:	40023800 	.word	0x40023800
 8007bb8:	40007000 	.word	0x40007000
 8007bbc:	20001aa0 	.word	0x20001aa0
 8007bc0:	0800a3b8 	.word	0x0800a3b8
 8007bc4:	40026010 	.word	0x40026010
 8007bc8:	f853 1c0c 	ldr.w	r1, [r3, #-12]
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8007bcc:	600c      	str	r4, [r1, #0]
    dma.streams[i].func = NULL;
 8007bce:	330c      	adds	r3, #12
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8007bd0:	4298      	cmp	r0, r3
    dma.streams[i].func = NULL;
 8007bd2:	6054      	str	r4, [r2, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8007bd4:	f102 0208 	add.w	r2, r2, #8
 8007bd8:	d1f6      	bne.n	8007bc8 <main+0xa8>
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8007bda:	4ac2      	ldr	r2, [pc, #776]	; (8007ee4 <main+0x3c4>)
  gptp->config = NULL;
 8007bdc:	4ec2      	ldr	r6, [pc, #776]	; (8007ee8 <main+0x3c8>)
  DMA1->LIFCR = 0xFFFFFFFFU;
 8007bde:	4bc3      	ldr	r3, [pc, #780]	; (8007eec <main+0x3cc>)
  DMA2->LIFCR = 0xFFFFFFFFU;
 8007be0:	4dc3      	ldr	r5, [pc, #780]	; (8007ef0 <main+0x3d0>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8007be2:	f8df 8380 	ldr.w	r8, [pc, #896]	; 8007f64 <main+0x444>
  GPTD5.tim = STM32_TIM5;
 8007be6:	4fc3      	ldr	r7, [pc, #780]	; (8007ef4 <main+0x3d4>)
  i2cp->config = NULL;
 8007be8:	6054      	str	r4, [r2, #4]
  DMA1->LIFCR = 0xFFFFFFFFU;
 8007bea:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007bee:	f8c3 9008 	str.w	r9, [r3, #8]
 8007bf2:	2160      	movs	r1, #96	; 0x60
 8007bf4:	6074      	str	r4, [r6, #4]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007bf6:	f04f 0c40 	mov.w	ip, #64	; 0x40
  DMA1->HIFCR = 0xFFFFFFFFU;
 8007bfa:	f8c3 900c 	str.w	r9, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8007bfe:	f8c5 9008 	str.w	r9, [r5, #8]
 8007c02:	2380      	movs	r3, #128	; 0x80
 8007c04:	60f7      	str	r7, [r6, #12]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8007c06:	f8c5 900c 	str.w	r9, [r5, #12]
 8007c0a:	f44f 7780 	mov.w	r7, #256	; 0x100
 8007c0e:	f44f 7500 	mov.w	r5, #512	; 0x200
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8007c12:	f888 1306 	strb.w	r1, [r8, #774]	; 0x306
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007c16:	f8c8 c180 	str.w	ip, [r8, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007c1a:	f8c8 c000 	str.w	ip, [r8]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8007c1e:	f888 1307 	strb.w	r1, [r8, #775]	; 0x307
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007c22:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8007c26:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007c2a:	f8c8 3000 	str.w	r3, [r8]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8007c2e:	f888 1308 	strb.w	r1, [r8, #776]	; 0x308
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007c32:	f8c8 7180 	str.w	r7, [r8, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007c36:	f8c8 7000 	str.w	r7, [r8]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8007c3a:	f888 1309 	strb.w	r1, [r8, #777]	; 0x309
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007c3e:	f8c8 5180 	str.w	r5, [r8, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007c42:	f8c8 5000 	str.w	r5, [r8]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007c46:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8007c4a:	f888 130a 	strb.w	r1, [r8, #778]	; 0x30a
  gptp->state  = GPT_STOP;
 8007c4e:	f04f 0b01 	mov.w	fp, #1
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007c52:	f8c8 c180 	str.w	ip, [r8, #384]	; 0x180
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 8007c56:	f8df e310 	ldr.w	lr, [pc, #784]	; 8007f68 <main+0x448>
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007c5a:	f8c8 c000 	str.w	ip, [r8]
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8007c5e:	48a6      	ldr	r0, [pc, #664]	; (8007ef8 <main+0x3d8>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8007c60:	f888 1317 	strb.w	r1, [r8, #791]	; 0x317
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007c64:	f8c8 5180 	str.w	r5, [r8, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007c68:	f8c8 5000 	str.w	r5, [r8]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8007c6c:	f888 1328 	strb.w	r1, [r8, #808]	; 0x328
  tqp->next = (thread_t *)tqp;
 8007c70:	f102 050c 	add.w	r5, r2, #12
 8007c74:	49a1      	ldr	r1, [pc, #644]	; (8007efc <main+0x3dc>)
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007c76:	f8c8 7184 	str.w	r7, [r8, #388]	; 0x184
 8007c7a:	60d5      	str	r5, [r2, #12]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007c7c:	f8c8 7004 	str.w	r7, [r8, #4]
  tqp->prev = (thread_t *)tqp;
 8007c80:	6115      	str	r5, [r2, #16]
  i2cp->state  = I2C_STOP;
 8007c82:	f882 b000 	strb.w	fp, [r2]
 8007c86:	f886 b000 	strb.w	fp, [r6]
  mp->owner = NULL;
 8007c8a:	6154      	str	r4, [r2, #20]
 8007c8c:	f8c2 e034 	str.w	lr, [r2, #52]	; 0x34
  I2CD1.dmarx  = NULL;
  I2CD1.dmatx  = NULL;
 8007c90:	e9c2 440b 	strd	r4, r4, [r2, #44]	; 0x2c
  I2CD1.thread = NULL;
 8007c94:	61d4      	str	r4, [r2, #28]
 8007c96:	f7f8 fdc3 	bl	8000820 <sdObjectInit.constprop.0>
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8007c9a:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8007f6c <main+0x44c>
  sdObjectInit(&SD5, NULL, notify5);
  SD5.usart = UART5;
#endif

#if STM32_SERIAL_USE_USART6
  sdObjectInit(&SD6, NULL, notify6);
 8007c9e:	4d98      	ldr	r5, [pc, #608]	; (8007f00 <main+0x3e0>)
  SD1.usart = USART1;
 8007ca0:	4a98      	ldr	r2, [pc, #608]	; (8007f04 <main+0x3e4>)
 8007ca2:	f8c0 2254 	str.w	r2, [r0, #596]	; 0x254
  sdObjectInit(&SD2, NULL, notify2);
 8007ca6:	4998      	ldr	r1, [pc, #608]	; (8007f08 <main+0x3e8>)
  spip->state = SPI_STOP;
 8007ca8:	4e98      	ldr	r6, [pc, #608]	; (8007f0c <main+0x3ec>)
  usbp->state        = USB_STOP;
 8007caa:	4f99      	ldr	r7, [pc, #612]	; (8007f10 <main+0x3f0>)
 8007cac:	4650      	mov	r0, sl
 8007cae:	f7f8 fdb7 	bl	8000820 <sdObjectInit.constprop.0>
  SD2.usart = USART2;
 8007cb2:	4a98      	ldr	r2, [pc, #608]	; (8007f14 <main+0x3f4>)
  sdObjectInit(&SD6, NULL, notify6);
 8007cb4:	4998      	ldr	r1, [pc, #608]	; (8007f18 <main+0x3f8>)
  SD2.usart = USART2;
 8007cb6:	f8ca 2254 	str.w	r2, [sl, #596]	; 0x254
  sdObjectInit(&SD6, NULL, notify6);
 8007cba:	4628      	mov	r0, r5
 8007cbc:	f7f8 fdb0 	bl	8000820 <sdObjectInit.constprop.0>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8007cc0:	4a96      	ldr	r2, [pc, #600]	; (8007f1c <main+0x3fc>)
 8007cc2:	f886 b000 	strb.w	fp, [r6]
 8007cc6:	f887 b000 	strb.w	fp, [r7]
 8007cca:	6c11      	ldr	r1, [r2, #64]	; 0x40
  SD6.usart = USART6;
 8007ccc:	4894      	ldr	r0, [pc, #592]	; (8007f20 <main+0x400>)
 8007cce:	f8c5 0254 	str.w	r0, [r5, #596]	; 0x254
 8007cd2:	ea41 010b 	orr.w	r1, r1, fp
 8007cd6:	6411      	str	r1, [r2, #64]	; 0x40
 8007cd8:	6e15      	ldr	r5, [r2, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8007cda:	4892      	ldr	r0, [pc, #584]	; (8007f24 <main+0x404>)
  spip->config = NULL;
 8007cdc:	6074      	str	r4, [r6, #4]
  ST_ENABLE_CLOCK();
 8007cde:	ea45 050b 	orr.w	r5, r5, fp
 8007ce2:	6615      	str	r5, [r2, #96]	; 0x60
  SPID1.spi       = SPI1;
 8007ce4:	4990      	ldr	r1, [pc, #576]	; (8007f28 <main+0x408>)
 8007ce6:	6e12      	ldr	r2, [r2, #96]	; 0x60
  ST_ENABLE_STOP();
 8007ce8:	6882      	ldr	r2, [r0, #8]
 8007cea:	61f1      	str	r1, [r6, #28]
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8007cec:	498f      	ldr	r1, [pc, #572]	; (8007f2c <main+0x40c>)
 8007cee:	62b1      	str	r1, [r6, #40]	; 0x28
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8007cf0:	3130      	adds	r1, #48	; 0x30
 8007cf2:	62f1      	str	r1, [r6, #44]	; 0x2c
  USBD1.otg       = OTG_FS;
 8007cf4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8007cf8:	6579      	str	r1, [r7, #84]	; 0x54
 8007cfa:	ea42 020b 	orr.w	r2, r2, fp
  USBD1.otgparams = &fsparams;
 8007cfe:	498c      	ldr	r1, [pc, #560]	; (8007f30 <main+0x410>)
  tqp->next = (thread_t *)tqp;
 8007d00:	4d8c      	ldr	r5, [pc, #560]	; (8007f34 <main+0x414>)
 8007d02:	65b9      	str	r1, [r7, #88]	; 0x58
  SPID1.dmatx     = NULL;
 8007d04:	e9c6 4408 	strd	r4, r4, [r6, #32]
  usbp->transmitting = 0;
 8007d08:	e9c7 4401 	strd	r4, r4, [r7, #4]
  spip->thread = NULL;
 8007d0c:	60b4      	str	r4, [r6, #8]
 8007d0e:	6174      	str	r4, [r6, #20]
    usbp->in_params[i]  = NULL;
 8007d10:	61fc      	str	r4, [r7, #28]
    usbp->out_params[i] = NULL;
 8007d12:	62bc      	str	r4, [r7, #40]	; 0x28
    usbp->in_params[i]  = NULL;
 8007d14:	623c      	str	r4, [r7, #32]
    usbp->out_params[i] = NULL;
 8007d16:	62fc      	str	r4, [r7, #44]	; 0x2c
    usbp->in_params[i]  = NULL;
 8007d18:	627c      	str	r4, [r7, #36]	; 0x24
    usbp->out_params[i] = NULL;
 8007d1a:	633c      	str	r4, [r7, #48]	; 0x30
 8007d1c:	6082      	str	r2, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8007d1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007d22:	f106 000c 	add.w	r0, r6, #12
  tqp->prev = (thread_t *)tqp;
 8007d26:	e9c6 0003 	strd	r0, r0, [r6, #12]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8007d2a:	2380      	movs	r3, #128	; 0x80
 8007d2c:	f242 00cf 	movw	r0, #8399	; 0x20cf
 8007d30:	6290      	str	r0, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8007d32:	f8c2 902c 	str.w	r9, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8007d36:	6194      	str	r4, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8007d38:	6354      	str	r4, [r2, #52]	; 0x34
 8007d3a:	606d      	str	r5, [r5, #4]
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 8007d3c:	60d4      	str	r4, [r2, #12]
  ch.rlist.prio = NOPRIO;
 8007d3e:	60ac      	str	r4, [r5, #8]
  STM32_ST_TIM->CR2    = 0;
 8007d40:	6054      	str	r4, [r2, #4]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8007d42:	60ed      	str	r5, [r5, #12]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8007d44:	f8c2 b014 	str.w	fp, [r2, #20]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8007d48:	612d      	str	r5, [r5, #16]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8007d4a:	f8c2 b000 	str.w	fp, [r2]
 8007d4e:	f888 331c 	strb.w	r3, [r8, #796]	; 0x31c
  tqp->next = (thread_t *)tqp;
 8007d52:	4b79      	ldr	r3, [pc, #484]	; (8007f38 <main+0x418>)
 8007d54:	4979      	ldr	r1, [pc, #484]	; (8007f3c <main+0x41c>)
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8007d56:	4a7a      	ldr	r2, [pc, #488]	; (8007f40 <main+0x420>)
  ch_memcore.basemem = __heap_base__;
 8007d58:	f8df c214 	ldr.w	ip, [pc, #532]	; 8007f70 <main+0x450>
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007d5c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007d60:	f103 0e0c 	add.w	lr, r3, #12
 8007d64:	f8c8 0180 	str.w	r0, [r8, #384]	; 0x180
  ch.vtlist.delta = (sysinterval_t)-1;
 8007d68:	f8c5 9020 	str.w	r9, [r5, #32]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007d6c:	f8c8 0000 	str.w	r0, [r8]
  tqp->prev = (thread_t *)tqp;
 8007d70:	e9c3 ee03 	strd	lr, lr, [r3, #12]
 8007d74:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 8007d76:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8007f74 <main+0x454>
 8007d7a:	615c      	str	r4, [r3, #20]
  H_PAGES(&default_heap.header) = 0;
 8007d7c:	e9c3 4401 	strd	r4, r4, [r3, #4]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8007d80:	f101 0010 	add.w	r0, r1, #16
  mp->object_size = size;
 8007d84:	2214      	movs	r2, #20
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8007d86:	f105 0318 	add.w	r3, r5, #24
 8007d8a:	e9c1 0404 	strd	r0, r4, [r1, #16]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8007d8e:	e9c5 3306 	strd	r3, r3, [r5, #24]
  mp->align = align;
 8007d92:	2004      	movs	r0, #4
  ch_memcore.topmem  = __heap_end__;
 8007d94:	4b6b      	ldr	r3, [pc, #428]	; (8007f44 <main+0x424>)
  mp->object_size = size;
 8007d96:	618a      	str	r2, [r1, #24]
  ch_memcore.basemem = __heap_base__;
 8007d98:	4a6b      	ldr	r2, [pc, #428]	; (8007f48 <main+0x428>)
 8007d9a:	f8cc 2000 	str.w	r2, [ip]
  ch_memcore.topmem  = __heap_end__;
 8007d9e:	f8cc 3004 	str.w	r3, [ip, #4]
  mp->align = align;
 8007da2:	61c8      	str	r0, [r1, #28]
  tmp->cumulative = (rttime_t)0;
 8007da4:	2200      	movs	r2, #0
 8007da6:	2300      	movs	r3, #0
 8007da8:	e9c1 1100 	strd	r1, r1, [r1]
  tqp->next = (thread_t *)tqp;
 8007dac:	602d      	str	r5, [r5, #0]
  ch.vtlist.lasttime = (systime_t)0;
 8007dae:	626c      	str	r4, [r5, #36]	; 0x24
 8007db0:	608c      	str	r4, [r1, #8]
 8007db2:	4680      	mov	r8, r0
  mp->provider = provider;
 8007db4:	f8c1 e020 	str.w	lr, [r1, #32]
 8007db8:	e9c1 0e0d 	strd	r0, lr, [r1, #52]	; 0x34
 8007dbc:	f101 0e3c 	add.w	lr, r1, #60	; 0x3c
 8007dc0:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8007dc4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  tmp->last       = (rtcnt_t)0;
 8007dc8:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8007dcc:	f101 0224 	add.w	r2, r1, #36	; 0x24
 8007dd0:	e9c1 e00f 	strd	lr, r0, [r1, #60]	; 0x3c
 8007dd4:	f101 0328 	add.w	r3, r1, #40	; 0x28
  mp->object_size = size;
 8007dd8:	f04f 0c1c 	mov.w	ip, #28
 8007ddc:	624a      	str	r2, [r1, #36]	; 0x24
 8007dde:	f101 0244 	add.w	r2, r1, #68	; 0x44
  tmp->best       = (rtcnt_t)-1;
 8007de2:	f8cd 9018 	str.w	r9, [sp, #24]
  mp->next = NULL;
 8007de6:	62cc      	str	r4, [r1, #44]	; 0x2c
  ch.tm.offset = (rtcnt_t)0;
 8007de8:	672c      	str	r4, [r5, #112]	; 0x70
  tmp->n          = (ucnt_t)0;
 8007dea:	9409      	str	r4, [sp, #36]	; 0x24
 8007dec:	628b      	str	r3, [r1, #40]	; 0x28
  mp->object_size = size;
 8007dee:	f8c1 c030 	str.w	ip, [r1, #48]	; 0x30
 8007df2:	644a      	str	r2, [r1, #68]	; 0x44
    chTMStartMeasurementX(&tm);
 8007df4:	a806      	add	r0, sp, #24
 8007df6:	f7f9 f863 	bl	8000ec0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8007dfa:	a806      	add	r0, sp, #24
 8007dfc:	f7f9 f838 	bl	8000e70 <chTMStopMeasurementX>
  } while (i > 0U);
 8007e00:	f1b8 0801 	subs.w	r8, r8, #1
 8007e04:	d1f6      	bne.n	8007df4 <main+0x2d4>
  REG_INSERT(tp);
 8007e06:	4b51      	ldr	r3, [pc, #324]	; (8007f4c <main+0x42c>)
 8007e08:	6928      	ldr	r0, [r5, #16]
  ch.tm.offset = tm.best;
 8007e0a:	9906      	ldr	r1, [sp, #24]
  tp->name      = name;
 8007e0c:	4a50      	ldr	r2, [pc, #320]	; (8007f50 <main+0x430>)
 8007e0e:	6729      	str	r1, [r5, #112]	; 0x70
  tp->prio      = prio;
 8007e10:	2480      	movs	r4, #128	; 0x80
  tp->refs      = (trefs_t)1;
 8007e12:	2101      	movs	r1, #1
  tp->prio      = prio;
 8007e14:	636c      	str	r4, [r5, #52]	; 0x34
  tp->realprio  = prio;
 8007e16:	66ac      	str	r4, [r5, #104]	; 0x68
  tp->name      = name;
 8007e18:	646a      	str	r2, [r5, #68]	; 0x44
  tlp->next = (thread_t *)tlp;
 8007e1a:	f103 0428 	add.w	r4, r3, #40	; 0x28
  tqp->next = (thread_t *)tqp;
 8007e1e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
  tp->epending  = (eventmask_t)0;
 8007e22:	e9c5 8818 	strd	r8, r8, [r5, #96]	; 0x60
  REG_INSERT(tp);
 8007e26:	e9c5 500e 	strd	r5, r0, [r5, #56]	; 0x38
  tp->flags     = CH_FLAG_MODE_STATIC;
 8007e2a:	f885 804d 	strb.w	r8, [r5, #77]	; 0x4d
  tp->refs      = (trefs_t)1;
 8007e2e:	f885 104e 	strb.w	r1, [r5, #78]	; 0x4e
  REG_INSERT(tp);
 8007e32:	60c3      	str	r3, [r0, #12]
 8007e34:	e9c5 4215 	strd	r4, r2, [r5, #84]	; 0x54
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8007e38:	e9c5 3304 	strd	r3, r3, [r5, #16]
  currp->state = CH_STATE_CURRENT;
 8007e3c:	f885 104c 	strb.w	r1, [r5, #76]	; 0x4c
  currp->wabase = NULL;
 8007e40:	f8c5 8048 	str.w	r8, [r5, #72]	; 0x48
  tqp->prev = (thread_t *)tqp;
 8007e44:	65ea      	str	r2, [r5, #92]	; 0x5c
 8007e46:	2420      	movs	r4, #32
 8007e48:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 8007e4c:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e4e:	4b41      	ldr	r3, [pc, #260]	; (8007f54 <main+0x434>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8007e50:	4a41      	ldr	r2, [pc, #260]	; (8007f58 <main+0x438>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e52:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e54:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 8007e58:	4001      	ands	r1, r0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007e5a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	f6a0 300f 	subw	r0, r0, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8007e64:	60da      	str	r2, [r3, #12]
 8007e66:	68c2      	ldr	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007e68:	493c      	ldr	r1, [pc, #240]	; (8007f5c <main+0x43c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007e6a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007e6e:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007e70:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e72:	2010      	movs	r0, #16
 8007e74:	f042 0201 	orr.w	r2, r2, #1
 8007e78:	600a      	str	r2, [r1, #0]
 8007e7a:	77d8      	strb	r0, [r3, #31]
 8007e7c:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007e80:	f388 8811 	msr	BASEPRI, r8
  __ASM volatile ("cpsie i" : : : "memory");
 8007e84:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007e86:	f384 8811 	msr	BASEPRI, r4
  tp = chThdCreateSuspendedI(tdp);
 8007e8a:	4835      	ldr	r0, [pc, #212]	; (8007f60 <main+0x440>)
 8007e8c:	f7f9 f820 	bl	8000ed0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8007e90:	f7f9 fe5e 	bl	8001b50 <chSchWakeupS.constprop.0>
 8007e94:	f388 8811 	msr	BASEPRI, r8
 8007e98:	f384 8811 	msr	BASEPRI, r4
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8007e9c:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d111      	bne.n	8007ec8 <main+0x3a8>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 8007ea4:	4b1d      	ldr	r3, [pc, #116]	; (8007f1c <main+0x3fc>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8007ea6:	4a2f      	ldr	r2, [pc, #188]	; (8007f64 <main+0x444>)
 8007ea8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007eaa:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8007eae:	6419      	str	r1, [r3, #64]	; 0x40
 8007eb0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8007eb2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8007eb6:	6619      	str	r1, [r3, #96]	; 0x60
 8007eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eba:	21c0      	movs	r1, #192	; 0xc0
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007ebc:	2340      	movs	r3, #64	; 0x40
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8007ebe:	f882 1326 	strb.w	r1, [r2, #806]	; 0x326
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007ec2:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007ec6:	6053      	str	r3, [r2, #4]
  USART_TypeDef *u = sdp->usart;
 8007ec8:	f8da 3254 	ldr.w	r3, [sl, #596]	; 0x254
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8007ecc:	4a0d      	ldr	r2, [pc, #52]	; (8007f04 <main+0x3e4>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	f000 838c 	beq.w	80085ec <main+0xacc>
 8007ed4:	4912      	ldr	r1, [pc, #72]	; (8007f20 <main+0x400>)
    fck = STM32_PCLK2 / config->speed;
 8007ed6:	f240 22d9 	movw	r2, #729	; 0x2d9
 8007eda:	428b      	cmp	r3, r1
 8007edc:	bf18      	it	ne
 8007ede:	f44f 72b6 	movne.w	r2, #364	; 0x16c
 8007ee2:	e049      	b.n	8007f78 <main+0x458>
 8007ee4:	20000c5c 	.word	0x20000c5c
 8007ee8:	20000c4c 	.word	0x20000c4c
 8007eec:	40026000 	.word	0x40026000
 8007ef0:	40026400 	.word	0x40026400
 8007ef4:	40000c00 	.word	0x40000c00
 8007ef8:	20000c94 	.word	0x20000c94
 8007efc:	08000a21 	.word	0x08000a21
 8007f00:	2000114c 	.word	0x2000114c
 8007f04:	40011000 	.word	0x40011000
 8007f08:	08000a31 	.word	0x08000a31
 8007f0c:	20001838 	.word	0x20001838
 8007f10:	20001868 	.word	0x20001868
 8007f14:	40004400 	.word	0x40004400
 8007f18:	08000a41 	.word	0x08000a41
 8007f1c:	40023800 	.word	0x40023800
 8007f20:	40011400 	.word	0x40011400
 8007f24:	e0042000 	.word	0xe0042000
 8007f28:	40013000 	.word	0x40013000
 8007f2c:	06010016 	.word	0x06010016
 8007f30:	0800a538 	.word	0x0800a538
 8007f34:	200018d0 	.word	0x200018d0
 8007f38:	20001a84 	.word	0x20001a84
 8007f3c:	20001944 	.word	0x20001944
 8007f40:	080009e1 	.word	0x080009e1
 8007f44:	20010000 	.word	0x20010000
 8007f48:	20002050 	.word	0x20002050
 8007f4c:	200018fc 	.word	0x200018fc
 8007f50:	0800a470 	.word	0x0800a470
 8007f54:	e000ed00 	.word	0xe000ed00
 8007f58:	05fa0300 	.word	0x05fa0300
 8007f5c:	e0001000 	.word	0xe0001000
 8007f60:	0800a558 	.word	0x0800a558
 8007f64:	e000e100 	.word	0xe000e100
 8007f68:	40005400 	.word	0x40005400
 8007f6c:	20000ef0 	.word	0x20000ef0
 8007f70:	20001a68 	.word	0x20001a68
 8007f74:	08000e41 	.word	0x08000e41
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8007f78:	2040      	movs	r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8007f7a:	f04f 0901 	mov.w	r9, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8007f7e:	f242 112c 	movw	r1, #8492	; 0x212c
  u->SR = 0;
 8007f82:	2400      	movs	r4, #0
  u->BRR = fck;
 8007f84:	609a      	str	r2, [r3, #8]
  sdp->state = SD_READY;
 8007f86:	f04f 0802 	mov.w	r8, #2
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8007f8a:	6118      	str	r0, [r3, #16]
 8007f8c:	22ff      	movs	r2, #255	; 0xff
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8007f8e:	f8c3 9014 	str.w	r9, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8007f92:	60d9      	str	r1, [r3, #12]
  u->SR = 0;
 8007f94:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8007f96:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f88a 2258 	strb.w	r2, [sl, #600]	; 0x258
 8007f9e:	f88a 8008 	strb.w	r8, [sl, #8]
 8007fa2:	f384 8811 	msr	BASEPRI, r4
      0,
      0
  };

  sdStart(&SHELLPORT, &serial_config6);
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8007fa6:	48ca      	ldr	r0, [pc, #808]	; (80082d0 <main+0x7b0>)
 8007fa8:	f240 3282 	movw	r2, #898	; 0x382
 8007fac:	2104      	movs	r1, #4
 8007fae:	f7f9 faf7 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 8007fb2:	48c7      	ldr	r0, [pc, #796]	; (80082d0 <main+0x7b0>)
 8007fb4:	f240 3282 	movw	r2, #898	; 0x382
 8007fb8:	2108      	movs	r1, #8
 8007fba:	f7f9 faf1 	bl	80015a0 <_pal_lld_setgroupmode>

  chprintf(dbg, "\r\nNVRAM Programmer: %i.%i \r\nSystem started. (Shell)\r\n", VMAJOR, VMINOR);
 8007fbe:	49c5      	ldr	r1, [pc, #788]	; (80082d4 <main+0x7b4>)
 8007fc0:	48c5      	ldr	r0, [pc, #788]	; (80082d8 <main+0x7b8>)
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	220a      	movs	r2, #10
 8007fc6:	f7fa fc9b 	bl	8002900 <chprintf>
  sdup->vmt = &vmt;
 8007fca:	4bc4      	ldr	r3, [pc, #784]	; (80082dc <main+0x7bc>)
 8007fcc:	4ac4      	ldr	r2, [pc, #784]	; (80082e0 <main+0x7c0>)
  ibqp->notify    = infy;
 8007fce:	49c5      	ldr	r1, [pc, #788]	; (80082e4 <main+0x7c4>)
  obqp->notify    = onfy;
 8007fd0:	f8df c348 	ldr.w	ip, [pc, #840]	; 800831c <main+0x7fc>
  ibqp->notify    = infy;
 8007fd4:	63d9      	str	r1, [r3, #60]	; 0x3c
 8007fd6:	4618      	mov	r0, r3
  ibqp->brdptr    = bp;
 8007fd8:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8007fdc:	f840 2b04 	str.w	r2, [r0], #4
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8007fe0:	f203 428c 	addw	r2, r3, #1164	; 0x48c
  tqp->next = (thread_t *)tqp;
 8007fe4:	f103 0e0c 	add.w	lr, r3, #12
 8007fe8:	65da      	str	r2, [r3, #92]	; 0x5c
  obqp->notify    = onfy;
 8007fea:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8007fee:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8007ff2:	f103 0c44 	add.w	ip, r3, #68	; 0x44
  esp->next = (event_listener_t *)esp;
 8007ff6:	6058      	str	r0, [r3, #4]
  ibqp->bsize     = size + sizeof (size_t);
 8007ff8:	f44f 7082 	mov.w	r0, #260	; 0x104
  ibqp->bcounter  = 0;
 8007ffc:	619c      	str	r4, [r3, #24]
  sdup->state = SDU_STOP;
 8007ffe:	f883 9008 	strb.w	r9, [r3, #8]
  ibqp->suspended = suspended;
 8008002:	f883 9014 	strb.w	r9, [r3, #20]
  obqp->suspended = suspended;
 8008006:	f883 904c 	strb.w	r9, [r3, #76]	; 0x4c
  ibqp->top       = NULL;
 800800a:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  obqp->top       = NULL;
 800800e:	e9c3 441b 	strd	r4, r4, [r3, #108]	; 0x6c
  tqp->prev = (thread_t *)tqp;
 8008012:	e9c3 ee03 	strd	lr, lr, [r3, #12]
  ibqp->bwrptr    = bp;
 8008016:	e9c3 1107 	strd	r1, r1, [r3, #28]
  obqp->bwrptr    = bp;
 800801a:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
 800801e:	e9c3 cc11 	strd	ip, ip, [r3, #68]	; 0x44
  ibqp->bn        = n;
 8008022:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
  obqp->bcounter  = n;
 8008026:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
  obqp->bn        = n;
 800802a:	f8c3 8064 	str.w	r8, [r3, #100]	; 0x64
  ibqp->link      = link;
 800802e:	641b      	str	r3, [r3, #64]	; 0x40
  obqp->link      = link;
 8008030:	679b      	str	r3, [r3, #120]	; 0x78
  ibqp->buffers   = bp;
 8008032:	6319      	str	r1, [r3, #48]	; 0x30
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8008034:	625a      	str	r2, [r3, #36]	; 0x24
  obqp->buffers   = bp;
 8008036:	669a      	str	r2, [r3, #104]	; 0x68
  ibqp->bsize     = size + sizeof (size_t);
 8008038:	6298      	str	r0, [r3, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
 800803a:	6618      	str	r0, [r3, #96]	; 0x60
 800803c:	f04f 0920 	mov.w	r9, #32
 8008040:	f389 8811 	msr	BASEPRI, r9
  sdup->config = config;
 8008044:	4aa8      	ldr	r2, [pc, #672]	; (80082e8 <main+0x7c8>)
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8008046:	623b      	str	r3, [r7, #32]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8008048:	62fb      	str	r3, [r7, #44]	; 0x2c
    usbp->in_params[config->int_in - 1U]  = sdup;
 800804a:	61fb      	str	r3, [r7, #28]
  sdup->state = SDU_READY;
 800804c:	f883 8008 	strb.w	r8, [r3, #8]
  sdup->config = config;
 8008050:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
 8008054:	f384 8811 	msr	BASEPRI, r4
  sduObjectInit(&OSTRICHPORT);
  sduStart(&OSTRICHPORT, &serusbcfg1);
//  palSetPadMode(GPIOA, 11, PAL_MODE_ALTERNATE(10));
//  palSetPadMode(GPIOA, 12, PAL_MODE_ALTERNATE(10));

  usbDisconnectBus(serusbcfg1.usbp);
 8008058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800805a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800805c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008060:	6393      	str	r3, [r2, #56]	; 0x38
  chThdSleepMilliseconds(1500);
 8008062:	f643 2098 	movw	r0, #15000	; 0x3a98
 8008066:	f7f9 ff9b 	bl	8001fa0 <chThdSleep>
 800806a:	f389 8811 	msr	BASEPRI, r9
  if (usbp->state == USB_STOP) {
 800806e:	783b      	ldrb	r3, [r7, #0]
  usbp->config = config;
 8008070:	4a9e      	ldr	r2, [pc, #632]	; (80082ec <main+0x7cc>)
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	2b01      	cmp	r3, #1
    usbp->epc[i] = NULL;
 8008076:	e9c7 4403 	strd	r4, r4, [r7, #12]
 800807a:	e9c7 4405 	strd	r4, r4, [r7, #20]
 800807e:	f000 822a 	beq.w	80084d6 <main+0x9b6>
  usbp->state = USB_READY;
 8008082:	f04f 0302 	mov.w	r3, #2
 8008086:	703b      	strb	r3, [r7, #0]
 8008088:	2300      	movs	r3, #0
 800808a:	f383 8811 	msr	BASEPRI, r3
  usbStart(serusbcfg1.usbp, &usbcfg);
  usbConnectBus(serusbcfg1.usbp);
 800808e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
//  TRESET_INACTIVE;
//  BUS_in_use = 1;
}

void SPI_init(void){
  palSetPadMode(SPI_PORT, SCK_PAD, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 8008090:	4f8f      	ldr	r7, [pc, #572]	; (80082d0 <main+0x7b0>)
 8008092:	6b93      	ldr	r3, [r2, #56]	; 0x38
  palSetPadMode(SPI_PORT, MOSI_PAD, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
  palSetPadMode(SPI_PORT, MISO_PAD, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);

  palClearLine(SEL0);
 8008094:	f8df a288 	ldr.w	sl, [pc, #648]	; 8008320 <main+0x800>
  palClearLine(SEL1);
  palClearLine(SEL2);
  palClearLine(SEL4);

  PLD_IDLE;
 8008098:	4c95      	ldr	r4, [pc, #596]	; (80082f0 <main+0x7d0>)
 800809a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800809e:	6393      	str	r3, [r2, #56]	; 0x38
  palSetPadMode(SPI_PORT, SCK_PAD, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 80080a0:	4638      	mov	r0, r7
 80080a2:	f240 229a 	movw	r2, #666	; 0x29a
 80080a6:	2120      	movs	r1, #32
 80080a8:	f7f9 fa7a 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetPadMode(SPI_PORT, MOSI_PAD, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 80080ac:	f240 229a 	movw	r2, #666	; 0x29a
 80080b0:	2180      	movs	r1, #128	; 0x80
 80080b2:	f7f9 fa75 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetPadMode(SPI_PORT, MISO_PAD, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 80080b6:	f240 229a 	movw	r2, #666	; 0x29a
 80080ba:	2140      	movs	r1, #64	; 0x40
 80080bc:	f7f9 fa70 	bl	80015a0 <_pal_lld_setgroupmode>
  palClearLine(SEL1);
 80080c0:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  palClearLine(SEL2);
 80080c4:	f44f 4900 	mov.w	r9, #32768	; 0x8000
  palClearLine(SEL0);
 80080c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  palClearLine(SEL4);
 80080cc:	f04f 0c02 	mov.w	ip, #2
  palClearLine(SEL0);
 80080d0:	f8aa 301a 	strh.w	r3, [sl, #26]
  palClearLine(SEL1);
 80080d4:	f8aa 801a 	strh.w	r8, [sl, #26]
  palClearLine(SEL2);
 80080d8:	f8aa 901a 	strh.w	r9, [sl, #26]
  palClearLine(SEL4);
 80080dc:	f8a7 c01a 	strh.w	ip, [r7, #26]
  PLD_IDLE;
 80080e0:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 80080e4:	f8a4 c018 	strh.w	ip, [r4, #24]
  WE_INACTIVE;
 80080e8:	f04f 0b01 	mov.w	fp, #1
  CNT_INACTIVE;
 80080ec:	f44f 7c80 	mov.w	ip, #256	; 0x100
  WE_INACTIVE;
 80080f0:	f8a7 b018 	strh.w	fp, [r7, #24]
  CNT_INACTIVE;
 80080f4:	f8a7 c01a 	strh.w	ip, [r7, #26]
  MRC_INACTIVE;
 80080f8:	f8a4 9018 	strh.w	r9, [r4, #24]
  CPR_INACTIVE;
 80080fc:	f8a4 8018 	strh.w	r8, [r4, #24]
  CNTOE_INACTIVE;
 8008100:	8323      	strh	r3, [r4, #24]
  RAMOE_INACTIVE;
 8008102:	f04f 0310 	mov.w	r3, #16
 8008106:	833b      	strh	r3, [r7, #24]
  TRESET_INACTIVE;
 8008108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800810c:	8363      	strh	r3, [r4, #26]
  DEBUG_HI;
  palSetLineMode(BUSFREE, PAL_MODE_INPUT);
 800810e:	4620      	mov	r0, r4
 8008110:	2200      	movs	r2, #0
 8008112:	f44f 7100 	mov.w	r1, #512	; 0x200
  DEBUG_HI;
 8008116:	f8a4 b018 	strh.w	fp, [r4, #24]
  palSetLineMode(BUSFREE, PAL_MODE_INPUT);
 800811a:	f7f9 fa41 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetLineMode(PLD, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800811e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008122:	2219      	movs	r2, #25
 8008124:	f7f9 fa3c 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetLineMode(ON_OFF, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8008128:	4638      	mov	r0, r7
 800812a:	4659      	mov	r1, fp
 800812c:	2219      	movs	r2, #25
 800812e:	f7f9 fa37 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetLineMode(CNT, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8008132:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008136:	2219      	movs	r2, #25
 8008138:	f7f9 fa32 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetLineMode(MRC, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800813c:	4620      	mov	r0, r4
 800813e:	4649      	mov	r1, r9
 8008140:	2219      	movs	r2, #25
 8008142:	f7f9 fa2d 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetLineMode(CPR, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8008146:	4641      	mov	r1, r8
 8008148:	2219      	movs	r2, #25
 800814a:	f7f9 fa29 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetLineMode(CNTOE, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800814e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008152:	4619      	mov	r1, r3
 8008154:	2219      	movs	r2, #25
 8008156:	f7f9 fa23 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetLineMode(RAMOE, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800815a:	4638      	mov	r0, r7
 800815c:	2110      	movs	r1, #16
 800815e:	2219      	movs	r2, #25
 8008160:	f7f9 fa1e 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetLineMode(TRESET, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8008164:	4620      	mov	r0, r4
 8008166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800816a:	2219      	movs	r2, #25
 800816c:	f7f9 fa18 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetLineMode(SEL0, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8008170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008174:	4619      	mov	r1, r3
 8008176:	4650      	mov	r0, sl
 8008178:	2219      	movs	r2, #25
 800817a:	f7f9 fa11 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetLineMode(SEL1, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800817e:	4641      	mov	r1, r8
 8008180:	2219      	movs	r2, #25
 8008182:	f7f9 fa0d 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetLineMode(SEL2, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8008186:	4649      	mov	r1, r9
 8008188:	2219      	movs	r2, #25
 800818a:	f7f9 fa09 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetLineMode(SEL4, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800818e:	4638      	mov	r0, r7
 8008190:	2102      	movs	r1, #2
 8008192:	2219      	movs	r2, #25
 8008194:	f7f9 fa04 	bl	80015a0 <_pal_lld_setgroupmode>
  palSetLineMode(DEBUG, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8008198:	4659      	mov	r1, fp
 800819a:	4620      	mov	r0, r4
 800819c:	2219      	movs	r2, #25
 800819e:	f7f9 f9ff 	bl	80015a0 <_pal_lld_setgroupmode>
 80081a2:	2320      	movs	r3, #32
 80081a4:	f383 8811 	msr	BASEPRI, r3
  if (spip->state == SPI_STOP) {
 80081a8:	7833      	ldrb	r3, [r6, #0]
  spip->config = config;
 80081aa:	4a52      	ldr	r2, [pc, #328]	; (80082f4 <main+0x7d4>)
 80081ac:	6072      	str	r2, [r6, #4]
 80081ae:	455b      	cmp	r3, fp
 80081b0:	d11a      	bne.n	80081e8 <main+0x6c8>
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 80081b2:	4951      	ldr	r1, [pc, #324]	; (80082f8 <main+0x7d8>)
 80081b4:	2008      	movs	r0, #8
 80081b6:	f7f8 fb63 	bl	8000880 <dmaStreamAllocI.part.0.constprop.0>
 80081ba:	4950      	ldr	r1, [pc, #320]	; (80082fc <main+0x7dc>)
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI1_RX_DMA_STREAM,
 80081bc:	6230      	str	r0, [r6, #32]
 80081be:	200b      	movs	r0, #11
 80081c0:	f7f8 fb5e 	bl	8000880 <dmaStreamAllocI.part.0.constprop.0>
      rccEnableSPI1(true);
 80081c4:	4b4e      	ldr	r3, [pc, #312]	; (8008300 <main+0x7e0>)
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80081c6:	6a31      	ldr	r1, [r6, #32]
      rccEnableSPI1(true);
 80081c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80081ca:	680c      	ldr	r4, [r1, #0]
      rccEnableSPI1(true);
 80081cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081d0:	645a      	str	r2, [r3, #68]	; 0x44
 80081d2:	6e59      	ldr	r1, [r3, #100]	; 0x64
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80081d4:	69f2      	ldr	r2, [r6, #28]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI1_TX_DMA_STREAM,
 80081d6:	6270      	str	r0, [r6, #36]	; 0x24
      rccEnableSPI1(true);
 80081d8:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80081dc:	6800      	ldr	r0, [r0, #0]
      rccEnableSPI1(true);
 80081de:	6659      	str	r1, [r3, #100]	; 0x64
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80081e0:	320c      	adds	r2, #12
      rccEnableSPI1(true);
 80081e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80081e4:	60a2      	str	r2, [r4, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80081e6:	6082      	str	r2, [r0, #8]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80081e8:	6871      	ldr	r1, [r6, #4]
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80081ea:	e9d6 030a 	ldrd	r0, r3, [r6, #40]	; 0x28
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80081ee:	8a0a      	ldrh	r2, [r1, #16]
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80081f0:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80081f4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80081f8:	0514      	lsls	r4, r2, #20
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80081fa:	bf44      	itt	mi
 80081fc:	f440 5020 	orrmi.w	r0, r0, #10240	; 0x2800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8008200:	f443 5320 	orrmi.w	r3, r3, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8008204:	e9c6 030a 	strd	r0, r3, [r6, #40]	; 0x28
  if (spip->config->circular) {
 8008208:	780b      	ldrb	r3, [r1, #0]
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800820a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
  if (spip->config->circular) {
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 815a 	beq.w	80084c6 <main+0x9a6>
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8008212:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8008214:	f440 7084 	orr.w	r0, r0, #264	; 0x108
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8008218:	f443 7384 	orr.w	r3, r3, #264	; 0x108
 800821c:	e9c6 030a 	strd	r0, r3, [r6, #40]	; 0x28
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8008220:	69f3      	ldr	r3, [r6, #28]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8008222:	8a49      	ldrh	r1, [r1, #18]
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8008224:	6818      	ldr	r0, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8008226:	f041 0107 	orr.w	r1, r1, #7
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800822a:	f442 7241 	orr.w	r2, r2, #772	; 0x304
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 800822e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8008232:	6018      	str	r0, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8008234:	601a      	str	r2, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8008236:	6059      	str	r1, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8008238:	681a      	ldr	r2, [r3, #0]
  spip->state = SPI_READY;
 800823a:	2102      	movs	r1, #2
 800823c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	2700      	movs	r7, #0
 8008244:	7031      	strb	r1, [r6, #0]
 8008246:	f387 8811 	msr	BASEPRI, r7
 800824a:	2420      	movs	r4, #32
 800824c:	f384 8811 	msr	BASEPRI, r4
  chMtxLockS(mp);
 8008250:	482c      	ldr	r0, [pc, #176]	; (8008304 <main+0x7e4>)
 8008252:	f7fa f80d 	bl	8002270 <chMtxLockS>
 8008256:	f387 8811 	msr	BASEPRI, r7
 800825a:	f384 8811 	msr	BASEPRI, r4
  if (gptp->state == GPT_STOP) {
 800825e:	492a      	ldr	r1, [pc, #168]	; (8008308 <main+0x7e8>)
  gptp->config = config;
 8008260:	4a2a      	ldr	r2, [pc, #168]	; (800830c <main+0x7ec>)
 8008262:	780b      	ldrb	r3, [r1, #0]
 8008264:	604a      	str	r2, [r1, #4]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d11e      	bne.n	80082a8 <main+0x788>
      rccEnableTIM5(true);
 800826a:	4b25      	ldr	r3, [pc, #148]	; (8008300 <main+0x7e0>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800826c:	4a28      	ldr	r2, [pc, #160]	; (8008310 <main+0x7f0>)
 800826e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008270:	f041 0108 	orr.w	r1, r1, #8
 8008274:	6419      	str	r1, [r3, #64]	; 0x40
 8008276:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8008278:	f041 0108 	orr.w	r1, r1, #8
 800827c:	6619      	str	r1, [r3, #96]	; 0x60
 800827e:	6e19      	ldr	r1, [r3, #96]	; 0x60
      rccResetTIM5();
 8008280:	6a19      	ldr	r1, [r3, #32]
 8008282:	f041 0108 	orr.w	r1, r1, #8
 8008286:	6219      	str	r1, [r3, #32]
 8008288:	6a19      	ldr	r1, [r3, #32]
 800828a:	f021 0108 	bic.w	r1, r1, #8
 800828e:	6219      	str	r1, [r3, #32]
 8008290:	2070      	movs	r0, #112	; 0x70
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	f882 0332 	strb.w	r0, [r2, #818]	; 0x332
      gptp->clock = STM32_TIMCLK1;
 8008298:	481b      	ldr	r0, [pc, #108]	; (8008308 <main+0x7e8>)
 800829a:	491e      	ldr	r1, [pc, #120]	; (8008314 <main+0x7f4>)
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800829c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80082a0:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 80082a4:	6081      	str	r1, [r0, #8]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80082a6:	6053      	str	r3, [r2, #4]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80082a8:	4817      	ldr	r0, [pc, #92]	; (8008308 <main+0x7e8>)
 80082aa:	491b      	ldr	r1, [pc, #108]	; (8008318 <main+0x7f8>)
 80082ac:	6883      	ldr	r3, [r0, #8]
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80082ae:	68c2      	ldr	r2, [r0, #12]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80082b0:	fba1 1303 	umull	r1, r3, r1, r3
 80082b4:	0c9b      	lsrs	r3, r3, #18
 80082b6:	3b01      	subs	r3, #1
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80082b8:	2600      	movs	r6, #0
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80082ba:	b29b      	uxth	r3, r3
  gptp->state = GPT_READY;
 80082bc:	2102      	movs	r1, #2
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80082be:	6016      	str	r6, [r2, #0]
  gptp->tim->CR2  = gptp->config->cr2;
 80082c0:	6056      	str	r6, [r2, #4]
 80082c2:	7001      	strb	r1, [r0, #0]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 80082c4:	6293      	str	r3, [r2, #40]	; 0x28
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
 80082c6:	6116      	str	r6, [r2, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80082c8:	60d6      	str	r6, [r2, #12]
 80082ca:	f386 8811 	msr	BASEPRI, r6
 80082ce:	e029      	b.n	8008324 <main+0x804>
 80082d0:	40020000 	.word	0x40020000
 80082d4:	0800a340 	.word	0x0800a340
 80082d8:	20000ef0 	.word	0x20000ef0
 80082dc:	200013a8 	.word	0x200013a8
 80082e0:	0800a740 	.word	0x0800a740
 80082e4:	08001921 	.word	0x08001921
 80082e8:	0800a5f0 	.word	0x0800a5f0
 80082ec:	0800a60c 	.word	0x0800a60c
 80082f0:	40020400 	.word	0x40020400
 80082f4:	20000808 	.word	0x20000808
 80082f8:	08001281 	.word	0x08001281
 80082fc:	08001261 	.word	0x08001261
 8008300:	40023800 	.word	0x40023800
 8008304:	20001844 	.word	0x20001844
 8008308:	20000c4c 	.word	0x20000c4c
 800830c:	0800a544 	.word	0x0800a544
 8008310:	e000e100 	.word	0xe000e100
 8008314:	0501bd00 	.word	0x0501bd00
 8008318:	431bde83 	.word	0x431bde83
 800831c:	080019c1 	.word	0x080019c1
 8008320:	40020800 	.word	0x40020800
  /*
   * Starting GPT5 driver, it is used for checking the BUSFREE Signal
   */
  gptStart(&GPTD5, &gpt5cfg1);

  BUS_in_use = 1; //assume bus is in use
 8008324:	4bce      	ldr	r3, [pc, #824]	; (8008660 <main+0xb40>)
 8008326:	2701      	movs	r7, #1
 8008328:	701f      	strb	r7, [r3, #0]
 800832a:	2420      	movs	r4, #32
 800832c:	f384 8811 	msr	BASEPRI, r4
  tp->wabase = (stkalign_t *)wsp;
 8008330:	4bcc      	ldr	r3, [pc, #816]	; (8008664 <main+0xb44>)
  REG_INSERT(tp);
 8008332:	692a      	ldr	r2, [r5, #16]
  tp->state     = CH_STATE_WTSTART;
 8008334:	f8a3 12a0 	strh.w	r1, [r3, #672]	; 0x2a0
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8008338:	48cb      	ldr	r0, [pc, #812]	; (8008668 <main+0xb48>)
 800833a:	f8c3 025c 	str.w	r0, [r3, #604]	; 0x25c
 800833e:	f503 7117 	add.w	r1, r3, #604	; 0x25c
 8008342:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
  REG_INSERT(tp);
 8008346:	f503 7020 	add.w	r0, r3, #640	; 0x280
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800834a:	f8df e344 	ldr.w	lr, [pc, #836]	; 8008690 <main+0xb70>
  tp->name      = name;
 800834e:	f8df c344 	ldr.w	ip, [pc, #836]	; 8008694 <main+0xb74>
  REG_INSERT(tp);
 8008352:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  tp->prio      = prio;
 8008356:	2180      	movs	r1, #128	; 0x80
 8008358:	f8c3 1288 	str.w	r1, [r3, #648]	; 0x288
  tp->realprio  = prio;
 800835c:	f8c3 12bc 	str.w	r1, [r3, #700]	; 0x2bc
  tp->epending  = (eventmask_t)0;
 8008360:	e9c3 66ad 	strd	r6, r6, [r3, #692]	; 0x2b4
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8008364:	f8c3 6260 	str.w	r6, [r3, #608]	; 0x260
  tp->refs      = (trefs_t)1;
 8008368:	f883 72a2 	strb.w	r7, [r3, #674]	; 0x2a2
  REG_INSERT(tp);
 800836c:	f8c3 528c 	str.w	r5, [r3, #652]	; 0x28c
  tp->wabase = (stkalign_t *)wsp;
 8008370:	f8c3 329c 	str.w	r3, [r3, #668]	; 0x29c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8008374:	f8c3 e27c 	str.w	lr, [r3, #636]	; 0x27c
  tp->name      = name;
 8008378:	f8c3 c298 	str.w	ip, [r3, #664]	; 0x298
  tlp->next = (thread_t *)tlp;
 800837c:	f503 712a 	add.w	r1, r3, #680	; 0x2a8
  REG_INSERT(tp);
 8008380:	60d0      	str	r0, [r2, #12]
  tqp->next = (thread_t *)tqp;
 8008382:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 8008386:	e9c3 12aa 	strd	r1, r2, [r3, #680]	; 0x2a8
  tqp->prev = (thread_t *)tqp;
 800838a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
 800838e:	6128      	str	r0, [r5, #16]
  chSchWakeupS(tp, MSG_OK);
 8008390:	f7f9 fbde 	bl	8001b50 <chSchWakeupS.constprop.0>
 8008394:	f386 8811 	msr	BASEPRI, r6
 8008398:	4bb4      	ldr	r3, [pc, #720]	; (800866c <main+0xb4c>)
 800839a:	601b      	str	r3, [r3, #0]
 800839c:	f384 8811 	msr	BASEPRI, r4
  elp->wflags   = wflags;
 80083a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  elp->next     = esp->next;
 80083a4:	6819      	ldr	r1, [r3, #0]
  elp->listener = currp;
 80083a6:	696a      	ldr	r2, [r5, #20]
  elp->events   = events;
 80083a8:	9703      	str	r7, [sp, #12]
  esp->next     = elp;
 80083aa:	af01      	add	r7, sp, #4
  elp->flags    = (eventflags_t)0;
 80083ac:	9604      	str	r6, [sp, #16]
  elp->next     = esp->next;
 80083ae:	9101      	str	r1, [sp, #4]
  esp->next     = elp;
 80083b0:	601f      	str	r7, [r3, #0]
  elp->listener = currp;
 80083b2:	9202      	str	r2, [sp, #8]
  elp->wflags   = wflags;
 80083b4:	9005      	str	r0, [sp, #20]
 80083b6:	f386 8811 	msr	BASEPRI, r6
 80083ba:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 8008698 <main+0xb78>
 80083be:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 800869c <main+0xb7c>
 80083c2:	4fab      	ldr	r7, [pc, #684]	; (8008670 <main+0xb50>)
  thread_t *shelltp = NULL;
 80083c4:	46b3      	mov	fp, r6
        shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
                                       "shell1", NORMALPRIO + 1,
                                       shellThread, (void *)&shell_cfg1);
      }
#else
    if (!shelltp)
 80083c6:	f1bb 0f00 	cmp.w	fp, #0
 80083ca:	d019      	beq.n	8008400 <main+0x8e0>
      shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
                                    "shell", NORMALPRIO + 1,
                                    shellThread, (void *)&shell_cfg1);
    else if (chThdTerminatedX(shelltp)) {
 80083cc:	f89b 3020 	ldrb.w	r3, [fp, #32]
 80083d0:	2b0f      	cmp	r3, #15
 80083d2:	d066      	beq.n	80084a2 <main+0x982>
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 80083d4:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80083d8:	f384 8811 	msr	BASEPRI, r4
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 80083dc:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80083e0:	07d3      	lsls	r3, r2, #31
 80083e2:	d564      	bpl.n	80084ae <main+0x98e>
 80083e4:	f06f 0301 	mvn.w	r3, #1
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 80083e8:	4013      	ands	r3, r2
 80083ea:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 80083ee:	f386 8811 	msr	BASEPRI, r6
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
#endif
    /* Waiting for an exit event then freeing terminated shells.*/
    chEvtWaitAny(EVENT_MASK(0));
    if (chThdTerminatedX(shelltp)) {
 80083f2:	f89b 3020 	ldrb.w	r3, [fp, #32]
 80083f6:	2b0f      	cmp	r3, #15
 80083f8:	d1e5      	bne.n	80083c6 <main+0x8a6>
      chThdRelease(shelltp);
 80083fa:	4658      	mov	r0, fp
 80083fc:	f7ff fb18 	bl	8007a30 <chThdRelease>
 8008400:	f384 8811 	msr	BASEPRI, r4
 8008404:	4638      	mov	r0, r7
 8008406:	f7f9 ff33 	bl	8002270 <chMtxLockS>
 800840a:	f386 8811 	msr	BASEPRI, r6
  while (H_NEXT(qp) != NULL) {
 800840e:	4b99      	ldr	r3, [pc, #612]	; (8008674 <main+0xb54>)
 8008410:	6859      	ldr	r1, [r3, #4]
 8008412:	b1d9      	cbz	r1, 800844c <main+0x92c>
  qp = &heapp->header;
 8008414:	1d18      	adds	r0, r3, #4
 8008416:	4686      	mov	lr, r0
 8008418:	e000      	b.n	800841c <main+0x8fc>
  while (H_NEXT(qp) != NULL) {
 800841a:	4619      	mov	r1, r3
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800841c:	6848      	ldr	r0, [r1, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800841e:	f101 030f 	add.w	r3, r1, #15
 8008422:	f023 0307 	bic.w	r3, r3, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8008426:	1c42      	adds	r2, r0, #1
 8008428:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800842c:	f1a3 0c08 	sub.w	ip, r3, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8008430:	eba2 0803 	sub.w	r8, r2, r3
 8008434:	4594      	cmp	ip, r2
 8008436:	ea4f 08e8 	mov.w	r8, r8, asr #3
 800843a:	d203      	bcs.n	8008444 <main+0x924>
 800843c:	f5b8 7f8c 	cmp.w	r8, #280	; 0x118
 8008440:	f200 80d7 	bhi.w	80085f2 <main+0xad2>
  while (H_NEXT(qp) != NULL) {
 8008444:	680b      	ldr	r3, [r1, #0]
 8008446:	468e      	mov	lr, r1
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1e6      	bne.n	800841a <main+0x8fa>
  H_UNLOCK(heapp);
 800844c:	4638      	mov	r0, r7
 800844e:	f7ff faaf 	bl	80079b0 <chMtxUnlock>
  if (heapp->provider != NULL) {
 8008452:	4b88      	ldr	r3, [pc, #544]	; (8008674 <main+0xb54>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	b33b      	cbz	r3, 80084a8 <main+0x988>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8008458:	2208      	movs	r2, #8
 800845a:	4611      	mov	r1, r2
 800845c:	f640 00c8 	movw	r0, #2248	; 0x8c8
 8008460:	4798      	blx	r3
    if (ahp != NULL) {
 8008462:	4680      	mov	r8, r0
 8008464:	b300      	cbz	r0, 80084a8 <main+0x988>
      H_HEAP(hp) = heapp;
 8008466:	4a83      	ldr	r2, [pc, #524]	; (8008674 <main+0xb54>)
      H_SIZE(hp) = size;
 8008468:	f640 03c8 	movw	r3, #2248	; 0x8c8
 800846c:	e940 2302 	strd	r2, r3, [r0, #-8]
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + size),
 8008470:	f608 02c8 	addw	r2, r8, #2248	; 0x8c8
  thread_descriptor_t td = {
 8008474:	2381      	movs	r3, #129	; 0x81
 8008476:	9208      	str	r2, [sp, #32]
 8008478:	4a7f      	ldr	r2, [pc, #508]	; (8008678 <main+0xb58>)
 800847a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800847e:	e9cd a806 	strd	sl, r8, [sp, #24]
 8008482:	920b      	str	r2, [sp, #44]	; 0x2c
 8008484:	9309      	str	r3, [sp, #36]	; 0x24
 8008486:	f384 8811 	msr	BASEPRI, r4
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800848a:	a806      	add	r0, sp, #24
 800848c:	f7f8 fd20 	bl	8000ed0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8008490:	2301      	movs	r3, #1
 8008492:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp = chThdCreateSuspendedI(&td);
 8008496:	4683      	mov	fp, r0
  chSchWakeupS(tp, MSG_OK);
 8008498:	f7f9 fb5a 	bl	8001b50 <chSchWakeupS.constprop.0>
 800849c:	f386 8811 	msr	BASEPRI, r6
 80084a0:	e798      	b.n	80083d4 <main+0x8b4>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
 80084a2:	4658      	mov	r0, fp
 80084a4:	f7ff fac4 	bl	8007a30 <chThdRelease>
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 80084a8:	f04f 0b00 	mov.w	fp, #0
 80084ac:	e792      	b.n	80083d4 <main+0x8b4>
    ctp->u.ewmask = events;
 80084ae:	2301      	movs	r3, #1
 80084b0:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 80084b4:	200a      	movs	r0, #10
 80084b6:	f7f9 fb7b 	bl	8001bb0 <chSchGoSleepS>
    m = ctp->epending & events;
 80084ba:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80084be:	f002 0301 	and.w	r3, r2, #1
 80084c2:	43db      	mvns	r3, r3
 80084c4:	e790      	b.n	80083e8 <main+0x8c8>
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80084c6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80084c8:	f420 7084 	bic.w	r0, r0, #264	; 0x108
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80084cc:	f423 7384 	bic.w	r3, r3, #264	; 0x108
 80084d0:	e9c6 030a 	strd	r0, r3, [r6, #40]	; 0x28
 80084d4:	e6a4      	b.n	8008220 <main+0x700>
      rccEnableOTG_FS(true);
 80084d6:	4b69      	ldr	r3, [pc, #420]	; (800867c <main+0xb5c>)
  stm32_otg_t *otgp = usbp->otg;
 80084d8:	f8d7 8054 	ldr.w	r8, [r7, #84]	; 0x54
      rccEnableOTG_FS(true);
 80084dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80084de:	4a68      	ldr	r2, [pc, #416]	; (8008680 <main+0xb60>)
 80084e0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80084e4:	6359      	str	r1, [r3, #52]	; 0x34
 80084e6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084e8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80084ec:	6559      	str	r1, [r3, #84]	; 0x54
 80084ee:	6d59      	ldr	r1, [r3, #84]	; 0x54
      rccResetOTG_FS();
 80084f0:	6959      	ldr	r1, [r3, #20]
 80084f2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80084f6:	6159      	str	r1, [r3, #20]
 80084f8:	6959      	ldr	r1, [r3, #20]
 80084fa:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80084fe:	6159      	str	r1, [r3, #20]
 8008500:	695b      	ldr	r3, [r3, #20]
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8008502:	4960      	ldr	r1, [pc, #384]	; (8008684 <main+0xb64>)
 8008504:	23e0      	movs	r3, #224	; 0xe0
 8008506:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800850a:	2308      	movs	r3, #8
 800850c:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8008510:	6093      	str	r3, [r2, #8]
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8008512:	4b5d      	ldr	r3, [pc, #372]	; (8008688 <main+0xb68>)
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8008514:	f8c8 100c 	str.w	r1, [r8, #12]
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8008518:	22c0      	movs	r2, #192	; 0xc0
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 800851a:	f8c8 3800 	str.w	r3, [r8, #2048]	; 0x800
    otgp->GCCFG = GCCFG_INIT_VALUE;
 800851e:	f44f 1334 	mov.w	r3, #2949120	; 0x2d0000
    otgp->PCGCCTL = 0;
 8008522:	f8c8 4e00 	str.w	r4, [r8, #3584]	; 0xe00
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8008526:	f8c8 2000 	str.w	r2, [r8]
    otgp->GCCFG = GCCFG_INIT_VALUE;
 800852a:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 800852e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	dafb      	bge.n	800852e <main+0xa0e>
  otgp->GRSTCTL = GRSTCTL_CSRST;
 8008536:	2301      	movs	r3, #1
 8008538:	f8c8 3010 	str.w	r3, [r8, #16]
  chSysPolledDelayX(cycles);
 800853c:	200c      	movs	r0, #12
 800853e:	f7f8 fdaf 	bl	80010a0 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 8008542:	f8d8 4010 	ldr.w	r4, [r8, #16]
 8008546:	f014 0401 	ands.w	r4, r4, #1
 800854a:	d1fa      	bne.n	8008542 <main+0xa22>
 800854c:	2012      	movs	r0, #18
 800854e:	f7f8 fda7 	bl	80010a0 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8008552:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008556:	2b00      	cmp	r3, #0
 8008558:	dafb      	bge.n	8008552 <main+0xa32>
    otg_disable_ep(usbp);
 800855a:	e9d7 1315 	ldrd	r1, r3, [r7, #84]	; 0x54
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800855e:	f8d3 e008 	ldr.w	lr, [r3, #8]
    otgp->GAHBCFG = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	f8c8 3008 	str.w	r3, [r8, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8008568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800856c:	e000      	b.n	8008570 <main+0xa50>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800856e:	464c      	mov	r4, r9
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8008570:	eb01 1244 	add.w	r2, r1, r4, lsl #5
 8008574:	4613      	mov	r3, r2
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8008576:	f8d2 c900 	ldr.w	ip, [r2, #2304]	; 0x900
 800857a:	f1bc 0f00 	cmp.w	ip, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800857e:	f104 0901 	add.w	r9, r4, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8008582:	da05      	bge.n	8008590 <main+0xa70>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8008584:	f8d2 c900 	ldr.w	ip, [r2, #2304]	; 0x900
 8008588:	f04c 4c80 	orr.w	ip, ip, #1073741824	; 0x40000000
 800858c:	f8c2 c900 	str.w	ip, [r2, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8008590:	f8d2 cb00 	ldr.w	ip, [r2, #2816]	; 0xb00
 8008594:	f1bc 0f00 	cmp.w	ip, #0
 8008598:	da05      	bge.n	80085a6 <main+0xa86>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 800859a:	f8d2 cb00 	ldr.w	ip, [r2, #2816]	; 0xb00
 800859e:	f04c 4c80 	orr.w	ip, ip, #1073741824	; 0x40000000
 80085a2:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80085a6:	4574      	cmp	r4, lr
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80085a8:	f8c3 0908 	str.w	r0, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80085ac:	f8c3 0b08 	str.w	r0, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80085b0:	d1dd      	bne.n	800856e <main+0xa4e>
    if (usbp->config->sof_cb == NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68da      	ldr	r2, [r3, #12]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80085b6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80085ba:	f8c1 381c 	str.w	r3, [r1, #2076]	; 0x81c
    otgp->DIEPMSK  = 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	f8c8 3810 	str.w	r3, [r8, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 80085c4:	f8c8 3814 	str.w	r3, [r8, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 80085c8:	f8c8 381c 	str.w	r3, [r8, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 80085cc:	2a00      	cmp	r2, #0
 80085ce:	d067      	beq.n	80086a0 <main+0xb80>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 80085d0:	4b2e      	ldr	r3, [pc, #184]	; (800868c <main+0xb6c>)
 80085d2:	f8c8 3018 	str.w	r3, [r8, #24]
    otgp->GINTSTS  = 0xFFFFFFFF;
 80085d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085da:	f8c8 3014 	str.w	r3, [r8, #20]
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 80085de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085e2:	f043 0301 	orr.w	r3, r3, #1
 80085e6:	f8c8 3008 	str.w	r3, [r8, #8]
 80085ea:	e54a      	b.n	8008082 <main+0x562>
    fck = STM32_PCLK2 / config->speed;
 80085ec:	f240 22d9 	movw	r2, #729	; 0x2d9
 80085f0:	e4c2      	b.n	8007f78 <main+0x458>
      if (ahp > hp) {
 80085f2:	458c      	cmp	ip, r1
 80085f4:	4683      	mov	fp, r0
 80085f6:	4670      	mov	r0, lr
 80085f8:	d81c      	bhi.n	8008634 <main+0xb14>
        if (H_PAGES(hp) == pages) {
 80085fa:	f240 1319 	movw	r3, #281	; 0x119
 80085fe:	459b      	cmp	fp, r3
 8008600:	d052      	beq.n	80086a8 <main+0xb88>
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8008602:	f601 03d8 	addw	r3, r1, #2264	; 0x8d8
 8008606:	1ad2      	subs	r2, r2, r3
 8008608:	10d2      	asrs	r2, r2, #3
          H_NEXT(fp) = H_NEXT(hp);
 800860a:	680b      	ldr	r3, [r1, #0]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 800860c:	f8c1 28d4 	str.w	r2, [r1, #2260]	; 0x8d4
          fp = H_BLOCK(hp) + pages;
 8008610:	f501 620d 	add.w	r2, r1, #2256	; 0x8d0
          H_NEXT(fp) = H_NEXT(hp);
 8008614:	f8c1 38d0 	str.w	r3, [r1, #2256]	; 0x8d0
          H_NEXT(qp) = fp;
 8008618:	468c      	mov	ip, r1
 800861a:	6002      	str	r2, [r0, #0]
      H_HEAP(hp) = heapp;
 800861c:	46e0      	mov	r8, ip
      H_SIZE(hp) = size;
 800861e:	f640 03c8 	movw	r3, #2248	; 0x8c8
 8008622:	f8cc 3004 	str.w	r3, [ip, #4]
      H_HEAP(hp) = heapp;
 8008626:	4b13      	ldr	r3, [pc, #76]	; (8008674 <main+0xb54>)
 8008628:	f848 3b08 	str.w	r3, [r8], #8
      H_UNLOCK(heapp);
 800862c:	4638      	mov	r0, r7
 800862e:	f7ff f9bf 	bl	80079b0 <chMtxUnlock>
 8008632:	e71d      	b.n	8008470 <main+0x950>
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8008634:	f101 0208 	add.w	r2, r1, #8
 8008638:	ebac 0202 	sub.w	r2, ip, r2
        if (bpages > pages) {
 800863c:	f240 1019 	movw	r0, #281	; 0x119
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8008640:	10d2      	asrs	r2, r2, #3
        if (bpages > pages) {
 8008642:	4580      	cmp	r8, r0
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8008644:	604a      	str	r2, [r1, #4]
        if (bpages > pages) {
 8008646:	d0e9      	beq.n	800861c <main+0xafc>
          H_NEXT(fp) = H_NEXT(hp);
 8008648:	6808      	ldr	r0, [r1, #0]
 800864a:	f8cc 08d0 	str.w	r0, [ip, #2256]	; 0x8d0
          H_PAGES(fp) = (bpages - pages) - 1U;
 800864e:	f5a8 728d 	sub.w	r2, r8, #282	; 0x11a
          fp = H_BLOCK(ahp) + pages;
 8008652:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
          H_PAGES(fp) = (bpages - pages) - 1U;
 8008656:	f8cc 28d4 	str.w	r2, [ip, #2260]	; 0x8d4
          H_NEXT(hp) = fp;
 800865a:	600b      	str	r3, [r1, #0]
 800865c:	e7de      	b.n	800861c <main+0xafc>
 800865e:	bf00      	nop
 8008660:	20000c48 	.word	0x20000c48
 8008664:	20001d80 	.word	0x20001d80
 8008668:	080031d1 	.word	0x080031d1
 800866c:	20001d74 	.word	0x20001d74
 8008670:	20001a90 	.word	0x20001a90
 8008674:	20001a84 	.word	0x20001a84
 8008678:	0800a5f8 	.word	0x0800a5f8
 800867c:	40023800 	.word	0x40023800
 8008680:	e000e100 	.word	0xe000e100
 8008684:	40001440 	.word	0x40001440
 8008688:	02200003 	.word	0x02200003
 800868c:	c0303c08 	.word	0xc0303c08
 8008690:	080002f1 	.word	0x080002f1
 8008694:	0800a378 	.word	0x0800a378
 8008698:	0800a2c4 	.word	0x0800a2c4
 800869c:	08007341 	.word	0x08007341
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 80086a0:	4b03      	ldr	r3, [pc, #12]	; (80086b0 <main+0xb90>)
 80086a2:	f8c8 3018 	str.w	r3, [r8, #24]
 80086a6:	e796      	b.n	80085d6 <main+0xab6>
          H_NEXT(qp) = H_NEXT(hp);
 80086a8:	680b      	ldr	r3, [r1, #0]
 80086aa:	6003      	str	r3, [r0, #0]
 80086ac:	468c      	mov	ip, r1
 80086ae:	e7b5      	b.n	800861c <main+0xafc>
 80086b0:	c0303c00 	.word	0xc0303c00
	...

080086c0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80086c0:	4b68      	ldr	r3, [pc, #416]	; (8008864 <__early_init+0x1a4>)
  gpiop->PUPDR   = config->pupdr;
 80086c2:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 80088ac <__early_init+0x1ec>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80086c6:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 80086c8:	4867      	ldr	r0, [pc, #412]	; (8008868 <__early_init+0x1a8>)
 80086ca:	4968      	ldr	r1, [pc, #416]	; (800886c <__early_init+0x1ac>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80086cc:	f042 021f 	orr.w	r2, r2, #31
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80086d0:	b4f0      	push	{r4, r5, r6, r7}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80086d2:	611a      	str	r2, [r3, #16]
 80086d4:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 80086d6:	4d66      	ldr	r5, [pc, #408]	; (8008870 <__early_init+0x1b0>)
  gpiop->AFRL    = config->afrl;
 80086d8:	4f66      	ldr	r7, [pc, #408]	; (8008874 <__early_init+0x1b4>)
  gpiop->OTYPER  = config->otyper;
 80086da:	4c67      	ldr	r4, [pc, #412]	; (8008878 <__early_init+0x1b8>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80086dc:	f022 021f 	bic.w	r2, r2, #31
 80086e0:	611a      	str	r2, [r3, #16]
 80086e2:	691a      	ldr	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80086e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086e6:	f042 021f 	orr.w	r2, r2, #31
 80086ea:	631a      	str	r2, [r3, #48]	; 0x30
 80086ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086ee:	f042 021f 	orr.w	r2, r2, #31
 80086f2:	651a      	str	r2, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 80086f4:	f44f 7280 	mov.w	r2, #256	; 0x100
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80086f8:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 80086fa:	606a      	str	r2, [r5, #4]
  gpiop->ODR     = config->odr;
 80086fc:	f64f 76ff 	movw	r6, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
 8008700:	f06f 0250 	mvn.w	r2, #80	; 0x50
 8008704:	60aa      	str	r2, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8008706:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->AFRH    = config->afrh;
 800870a:	f44f 222a 	mov.w	r2, #696320	; 0xaa000
  gpiop->ODR     = config->odr;
 800870e:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8008710:	622f      	str	r7, [r5, #32]
  gpiop->MODER   = config->moder;
 8008712:	4f5a      	ldr	r7, [pc, #360]	; (800887c <__early_init+0x1bc>)
  gpiop->AFRH    = config->afrh;
 8008714:	626a      	str	r2, [r5, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 8008716:	2200      	movs	r2, #0
  gpiop->MODER   = config->moder;
 8008718:	602f      	str	r7, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
 800871a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  gpiop->PUPDR   = config->pupdr;
 800871e:	4f58      	ldr	r7, [pc, #352]	; (8008880 <__early_init+0x1c0>)
  gpiop->OTYPER  = config->otyper;
 8008720:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8008722:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8008724:	60c7      	str	r7, [r0, #12]
  gpiop->MODER   = config->moder;
 8008726:	2780      	movs	r7, #128	; 0x80
  gpiop->ODR     = config->odr;
 8008728:	6146      	str	r6, [r0, #20]
  gpiop->AFRL    = config->afrl;
 800872a:	6202      	str	r2, [r0, #32]
  gpiop->AFRH    = config->afrh;
 800872c:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800872e:	6007      	str	r7, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 8008730:	4f54      	ldr	r7, [pc, #336]	; (8008884 <__early_init+0x1c4>)
  gpiop->OTYPER  = config->otyper;
 8008732:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8008734:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8008736:	60cf      	str	r7, [r1, #12]
  gpiop->MODER   = config->moder;
 8008738:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  gpiop->ODR     = config->odr;
 800873c:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800873e:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8008740:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008742:	600f      	str	r7, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8008744:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
  gpiop->PUPDR   = config->pupdr;
 8008748:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
  gpiop->OTYPER  = config->otyper;
 800874c:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800874e:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8008750:	60e7      	str	r7, [r4, #12]
  gpiop->ODR     = config->odr;
 8008752:	6166      	str	r6, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8008754:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8008756:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008758:	6022      	str	r2, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 800875a:	f8c0 2c04 	str.w	r2, [r0, #3076]	; 0xc04
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800875e:	f5a4 34ce 	sub.w	r4, r4, #105472	; 0x19c00
  gpiop->OSPEEDR = config->ospeedr;
 8008762:	f8c0 5c08 	str.w	r5, [r0, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
 8008766:	f8c0 7c0c 	str.w	r7, [r0, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
 800876a:	f8c0 6c14 	str.w	r6, [r0, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
 800876e:	f8c0 2c20 	str.w	r2, [r0, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
 8008772:	f8c0 2c24 	str.w	r2, [r0, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
 8008776:	f8c0 2c00 	str.w	r2, [r0, #3072]	; 0xc00
  gpiop->PUPDR   = config->pupdr;
 800877a:	4843      	ldr	r0, [pc, #268]	; (8008888 <__early_init+0x1c8>)
  gpiop->OTYPER  = config->otyper;
 800877c:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800877e:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8008780:	60c8      	str	r0, [r1, #12]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8008782:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8008786:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  gpiop->ODR     = config->odr;
 800878a:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800878c:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800878e:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8008790:	600a      	str	r2, [r1, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8008792:	641d      	str	r5, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8008794:	6020      	str	r0, [r4, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	f042 0201 	orr.w	r2, r2, #1
 800879c:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	0796      	lsls	r6, r2, #30
 80087a2:	d5fc      	bpl.n	800879e <__early_init+0xde>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80087a4:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80087a6:	4a2f      	ldr	r2, [pc, #188]	; (8008864 <__early_init+0x1a4>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80087a8:	f021 0103 	bic.w	r1, r1, #3
 80087ac:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80087ae:	6893      	ldr	r3, [r2, #8]
 80087b0:	f013 030c 	ands.w	r3, r3, #12
 80087b4:	d1fb      	bne.n	80087ae <__early_init+0xee>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80087b6:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80087b8:	492a      	ldr	r1, [pc, #168]	; (8008864 <__early_init+0x1a4>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80087ba:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 80087be:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80087c0:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON;
 80087c2:	6813      	ldr	r3, [r2, #0]
 80087c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087c8:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80087ca:	680b      	ldr	r3, [r1, #0]
 80087cc:	039d      	lsls	r5, r3, #14
 80087ce:	d5fc      	bpl.n	80087ca <__early_init+0x10a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80087d0:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80087d2:	4b24      	ldr	r3, [pc, #144]	; (8008864 <__early_init+0x1a4>)
  RCC->CSR |= RCC_CSR_LSION;
 80087d4:	f042 0201 	orr.w	r2, r2, #1
 80087d8:	674a      	str	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80087da:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80087dc:	0794      	lsls	r4, r2, #30
 80087de:	d5fc      	bpl.n	80087da <__early_init+0x11a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80087e0:	4a2a      	ldr	r2, [pc, #168]	; (800888c <__early_init+0x1cc>)
 80087e2:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80087e4:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80087e6:	492a      	ldr	r1, [pc, #168]	; (8008890 <__early_init+0x1d0>)
  RCC->CR |= RCC_CR_PLLON;
 80087e8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80087ec:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80087ee:	684b      	ldr	r3, [r1, #4]
 80087f0:	0458      	lsls	r0, r3, #17
 80087f2:	d5fc      	bpl.n	80087ee <__early_init+0x12e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80087f4:	4b1b      	ldr	r3, [pc, #108]	; (8008864 <__early_init+0x1a4>)
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	0192      	lsls	r2, r2, #6
 80087fa:	d5fc      	bpl.n	80087f6 <__early_init+0x136>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80087fc:	4925      	ldr	r1, [pc, #148]	; (8008894 <__early_init+0x1d4>)
 80087fe:	6099      	str	r1, [r3, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8008800:	4a25      	ldr	r2, [pc, #148]	; (8008898 <__early_init+0x1d8>)
    RCC->DCKCFGR = dckcfgr |
 8008802:	2103      	movs	r1, #3
 8008804:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8008808:	6812      	ldr	r2, [r2, #0]
 800880a:	4b24      	ldr	r3, [pc, #144]	; (800889c <__early_init+0x1dc>)
 800880c:	429a      	cmp	r2, r3
 800880e:	d01e      	beq.n	800884e <__early_init+0x18e>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8008810:	4b23      	ldr	r3, [pc, #140]	; (80088a0 <__early_init+0x1e0>)
 8008812:	f240 7202 	movw	r2, #1794	; 0x702
 8008816:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8008818:	4a21      	ldr	r2, [pc, #132]	; (80088a0 <__early_init+0x1e0>)
 800881a:	6813      	ldr	r3, [r2, #0]
 800881c:	f003 030f 	and.w	r3, r3, #15
 8008820:	2b02      	cmp	r3, #2
 8008822:	d1fa      	bne.n	800881a <__early_init+0x15a>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8008824:	4b0f      	ldr	r3, [pc, #60]	; (8008864 <__early_init+0x1a4>)
 8008826:	689a      	ldr	r2, [r3, #8]
 8008828:	f042 0202 	orr.w	r2, r2, #2
 800882c:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800882e:	689a      	ldr	r2, [r3, #8]
 8008830:	f002 020c 	and.w	r2, r2, #12
 8008834:	2a08      	cmp	r2, #8
 8008836:	d1fa      	bne.n	800882e <__early_init+0x16e>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8008838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800883a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800883e:	645a      	str	r2, [r3, #68]	; 0x44
 8008840:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008846:	665a      	str	r2, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8008848:	bcf0      	pop	{r4, r5, r6, r7}
 800884a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800884c:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800884e:	4a15      	ldr	r2, [pc, #84]	; (80088a4 <__early_init+0x1e4>)
 8008850:	4b15      	ldr	r3, [pc, #84]	; (80088a8 <__early_init+0x1e8>)
 8008852:	6812      	ldr	r2, [r2, #0]
 8008854:	429a      	cmp	r2, r3
 8008856:	d1db      	bne.n	8008810 <__early_init+0x150>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8008858:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <__early_init+0x1e0>)
 800885a:	f44f 7281 	mov.w	r2, #258	; 0x102
 800885e:	601a      	str	r2, [r3, #0]
 8008860:	e7da      	b.n	8008818 <__early_init+0x158>
 8008862:	bf00      	nop
 8008864:	40023800 	.word	0x40023800
 8008868:	40020400 	.word	0x40020400
 800886c:	40020800 	.word	0x40020800
 8008870:	40020000 	.word	0x40020000
 8008874:	55507700 	.word	0x55507700
 8008878:	40020c00 	.word	0x40020c00
 800887c:	2a80a9a0 	.word	0x2a80a9a0
 8008880:	55555455 	.word	0x55555455
 8008884:	01555555 	.word	0x01555555
 8008888:	55555550 	.word	0x55555550
 800888c:	07415419 	.word	0x07415419
 8008890:	40007000 	.word	0x40007000
 8008894:	38881000 	.word	0x38881000
 8008898:	e0042000 	.word	0xe0042000
 800889c:	20006411 	.word	0x20006411
 80088a0:	40023c00 	.word	0x40023c00
 80088a4:	e000ed00 	.word	0xe000ed00
 80088a8:	410fc241 	.word	0x410fc241
 80088ac:	64150005 	.word	0x64150005

080088b0 <Vector15C>:
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 80088b0:	b508      	push	{r3, lr}
  serve_interrupt(&SD6);
 80088b2:	4803      	ldr	r0, [pc, #12]	; (80088c0 <Vector15C+0x10>)
 80088b4:	f7f8 fc0c 	bl	80010d0 <serve_interrupt>
}
 80088b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80088bc:	f7f8 ba98 	b.w	8000df0 <_port_irq_epilogue>
 80088c0:	2000114c 	.word	0x2000114c
	...

080088d0 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80088d0:	b508      	push	{r3, lr}
  serve_interrupt(&SD2);
 80088d2:	4803      	ldr	r0, [pc, #12]	; (80088e0 <VectorD8+0x10>)
 80088d4:	f7f8 fbfc 	bl	80010d0 <serve_interrupt>
}
 80088d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80088dc:	f7f8 ba88 	b.w	8000df0 <_port_irq_epilogue>
 80088e0:	20000ef0 	.word	0x20000ef0
	...

080088f0 <VectorD4>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 80088f0:	b508      	push	{r3, lr}
  serve_interrupt(&SD1);
 80088f2:	4803      	ldr	r0, [pc, #12]	; (8008900 <VectorD4+0x10>)
 80088f4:	f7f8 fbec 	bl	80010d0 <serve_interrupt>
}
 80088f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80088fc:	f7f8 ba78 	b.w	8000df0 <_port_irq_epilogue>
 8008900:	20000c94 	.word	0x20000c94
	...

08008910 <Vector108>:
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {
  uint32_t sr;

  sr  = gptp->tim->SR;
 8008910:	4812      	ldr	r0, [pc, #72]	; (800895c <Vector108+0x4c>)
 8008912:	68c2      	ldr	r2, [r0, #12]
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 8008914:	b508      	push	{r3, lr}
  sr  = gptp->tim->SR;
 8008916:	6913      	ldr	r3, [r2, #16]
  sr &= gptp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8008918:	68d1      	ldr	r1, [r2, #12]
 800891a:	400b      	ands	r3, r1
 800891c:	b2d9      	uxtb	r1, r3
  gptp->tim->SR = ~sr;
 800891e:	43c9      	mvns	r1, r1
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8008920:	07db      	lsls	r3, r3, #31
  gptp->tim->SR = ~sr;
 8008922:	6111      	str	r1, [r2, #16]
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8008924:	d507      	bpl.n	8008936 <Vector108+0x26>
    _gpt_isr_invoke_cb(gptp);
 8008926:	7803      	ldrb	r3, [r0, #0]
 8008928:	2b04      	cmp	r3, #4
 800892a:	d008      	beq.n	800893e <Vector108+0x2e>
 800892c:	6843      	ldr	r3, [r0, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	b10b      	cbz	r3, 8008936 <Vector108+0x26>
 8008932:	480a      	ldr	r0, [pc, #40]	; (800895c <Vector108+0x4c>)
 8008934:	4798      	blx	r3
}
 8008936:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800893a:	f7f8 ba59 	b.w	8000df0 <_port_irq_epilogue>
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 800893e:	2300      	movs	r3, #0
    _gpt_isr_invoke_cb(gptp);
 8008940:	2102      	movs	r1, #2
 8008942:	7001      	strb	r1, [r0, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 8008944:	6013      	str	r3, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8008946:	6113      	str	r3, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8008948:	68d3      	ldr	r3, [r2, #12]
 800894a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800894e:	60d3      	str	r3, [r2, #12]
    _gpt_isr_invoke_cb(gptp);
 8008950:	6843      	ldr	r3, [r0, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1ec      	bne.n	8008932 <Vector108+0x22>
 8008958:	e7ed      	b.n	8008936 <Vector108+0x26>
 800895a:	bf00      	nop
 800895c:	20000c4c 	.word	0x20000c4c

08008960 <VectorB0>:
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8008960:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8008964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sr  = timp->SR;
 8008968:	6903      	ldr	r3, [r0, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 800896a:	68c2      	ldr	r2, [r0, #12]
 800896c:	4013      	ands	r3, r2
 800896e:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8008970:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8008972:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8008974:	6102      	str	r2, [r0, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8008976:	d403      	bmi.n	8008980 <VectorB0+0x20>
}
 8008978:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800897c:	f7f8 ba38 	b.w	8000df0 <_port_irq_epilogue>
 8008980:	2320      	movs	r3, #32
 8008982:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8008986:	4d23      	ldr	r5, [pc, #140]	; (8008a14 <VectorB0+0xb4>)
 8008988:	6a47      	ldr	r7, [r0, #36]	; 0x24
 800898a:	69ab      	ldr	r3, [r5, #24]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800898c:	6a6a      	ldr	r2, [r5, #36]	; 0x24

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 800898e:	6899      	ldr	r1, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8008990:	1abe      	subs	r6, r7, r2
 8008992:	42b1      	cmp	r1, r6
 8008994:	bf88      	it	hi
 8008996:	f105 0918 	addhi.w	r9, r5, #24
 800899a:	d825      	bhi.n	80089e8 <VectorB0+0x88>
  STM32_ST_TIM->DIER = 0U;
 800899c:	4604      	mov	r4, r0
 800899e:	f105 0918 	add.w	r9, r5, #24
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 80089a2:	f04f 0800 	mov.w	r8, #0
 80089a6:	2720      	movs	r7, #32
 80089a8:	e000      	b.n	80089ac <VectorB0+0x4c>
 80089aa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80089ac:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 80089ae:	440a      	add	r2, r1

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80089b0:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 80089b2:	626a      	str	r2, [r5, #36]	; 0x24
      nowdelta -= vtp->delta;
 80089b4:	eba6 0601 	sub.w	r6, r6, r1
      fn = vtp->func;
 80089b8:	68da      	ldr	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80089ba:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 80089be:	61a8      	str	r0, [r5, #24]
      vtp->func = NULL;
 80089c0:	f8c3 800c 	str.w	r8, [r3, #12]
 80089c4:	bf08      	it	eq
 80089c6:	f8c4 800c 	streq.w	r8, [r4, #12]
 80089ca:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 80089ce:	6918      	ldr	r0, [r3, #16]
 80089d0:	4790      	blx	r2
 80089d2:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 80089d6:	69ab      	ldr	r3, [r5, #24]
    }
    while (vtp->delta <= nowdelta);
 80089d8:	6899      	ldr	r1, [r3, #8]
 80089da:	428e      	cmp	r6, r1
 80089dc:	d2e5      	bcs.n	80089aa <VectorB0+0x4a>
  return (systime_t)STM32_ST_TIM->CNT;
 80089de:	6a67      	ldr	r7, [r4, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80089e0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80089e2:	1abe      	subs	r6, r7, r2
    if (nowdelta < vtp->delta) {
 80089e4:	428e      	cmp	r6, r1
 80089e6:	d2de      	bcs.n	80089a6 <VectorB0+0x46>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80089e8:	454b      	cmp	r3, r9
 80089ea:	d00b      	beq.n	8008a04 <VectorB0+0xa4>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 80089ec:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 80089ee:	626f      	str	r7, [r5, #36]	; 0x24
  ch.vtlist.next->delta -= nowdelta;
 80089f0:	1bc9      	subs	r1, r1, r7
 80089f2:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80089f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 80089f8:	2a02      	cmp	r2, #2
 80089fa:	bf2c      	ite	cs
 80089fc:	18bf      	addcs	r7, r7, r2
 80089fe:	3702      	addcc	r7, #2
 8008a00:	609a      	str	r2, [r3, #8]
 8008a02:	634f      	str	r7, [r1, #52]	; 0x34
 8008a04:	2300      	movs	r3, #0
 8008a06:	f383 8811 	msr	BASEPRI, r3
}
 8008a0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8008a0e:	f7f8 b9ef 	b.w	8000df0 <_port_irq_epilogue>
 8008a12:	bf00      	nop
 8008a14:	200018d0 	.word	0x200018d0
	...

08008a20 <Vector14C>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8008a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  stm32_otg_t *otgp = usbp->otg;
 8008a24:	4c9f      	ldr	r4, [pc, #636]	; (8008ca4 <Vector14C+0x284>)
 8008a26:	6d66      	ldr	r6, [r4, #84]	; 0x54
  sts  = otgp->GINTSTS;
 8008a28:	6975      	ldr	r5, [r6, #20]
  sts &= otgp->GINTMSK;
 8008a2a:	69b3      	ldr	r3, [r6, #24]
 8008a2c:	401d      	ands	r5, r3
  if (sts & GINTSTS_USBRST) {
 8008a2e:	f415 5880 	ands.w	r8, r5, #4096	; 0x1000
  otgp->GINTSTS = sts;
 8008a32:	6175      	str	r5, [r6, #20]
  if (sts & GINTSTS_USBRST) {
 8008a34:	f040 8138 	bne.w	8008ca8 <Vector14C+0x288>
  if (sts & GINTSTS_WKUPINT) {
 8008a38:	2d00      	cmp	r5, #0
 8008a3a:	f2c0 80c2 	blt.w	8008bc2 <Vector14C+0x1a2>
  if (sts & GINTSTS_USBSUSP) {
 8008a3e:	0529      	lsls	r1, r5, #20
 8008a40:	d538      	bpl.n	8008ab4 <Vector14C+0x94>
    otg_disable_ep(usbp);
 8008a42:	e9d4 7315 	ldrd	r7, r3, [r4, #84]	; 0x54
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8008a46:	2100      	movs	r1, #0
 8008a48:	f8d3 9008 	ldr.w	r9, [r3, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8008a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008a50:	e000      	b.n	8008a54 <Vector14C+0x34>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8008a52:	4671      	mov	r1, lr
 8008a54:	eb07 1241 	add.w	r2, r7, r1, lsl #5
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8008a58:	4613      	mov	r3, r2
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8008a5a:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8008a5e:	2800      	cmp	r0, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8008a60:	f101 0e01 	add.w	lr, r1, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8008a64:	da05      	bge.n	8008a72 <Vector14C+0x52>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8008a66:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8008a6a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8008a6e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8008a72:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 8008a76:	2800      	cmp	r0, #0
 8008a78:	da05      	bge.n	8008a86 <Vector14C+0x66>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 8008a7a:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 8008a7e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8008a82:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8008a86:	4589      	cmp	r9, r1
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8008a88:	f8c3 c908 	str.w	ip, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8008a8c:	f8c3 cb08 	str.w	ip, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8008a90:	d1df      	bne.n	8008a52 <Vector14C+0x32>
  usbp->saved_state = usbp->state;
 8008a92:	7822      	ldrb	r2, [r4, #0]
 8008a94:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8008a98:	6863      	ldr	r3, [r4, #4]
  usbp->state       = USB_SUSPENDED;
 8008a9a:	2205      	movs	r2, #5
 8008a9c:	7022      	strb	r2, [r4, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8008a9e:	681b      	ldr	r3, [r3, #0]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8008aa0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8008aa4:	f8c7 281c 	str.w	r2, [r7, #2076]	; 0x81c
 8008aa8:	b113      	cbz	r3, 8008ab0 <Vector14C+0x90>
 8008aaa:	487e      	ldr	r0, [pc, #504]	; (8008ca4 <Vector14C+0x284>)
 8008aac:	2104      	movs	r1, #4
 8008aae:	4798      	blx	r3
  usbp->transmitting  = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60a3      	str	r3, [r4, #8]
  if (sts & GINTSTS_ENUMDNE) {
 8008ab4:	04aa      	lsls	r2, r5, #18
 8008ab6:	d50c      	bpl.n	8008ad2 <Vector14C+0xb2>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 8008ab8:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8008abc:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8008ac0:	68f3      	ldr	r3, [r6, #12]
 8008ac2:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8008ac6:	bf0c      	ite	eq
 8008ac8:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8008acc:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 8008ad0:	60f3      	str	r3, [r6, #12]
  if (sts & GINTSTS_SOF) {
 8008ad2:	072b      	lsls	r3, r5, #28
 8008ad4:	d429      	bmi.n	8008b2a <Vector14C+0x10a>
  if (sts & GINTSTS_IISOIXFR) {
 8008ad6:	02ef      	lsls	r7, r5, #11
 8008ad8:	d42f      	bmi.n	8008b3a <Vector14C+0x11a>
  if (sts & GINTSTS_IISOOXFR) {
 8008ada:	02a8      	lsls	r0, r5, #10
 8008adc:	f100 80b6 	bmi.w	8008c4c <Vector14C+0x22c>
  if ((sts & GINTSTS_RXFLVL) != 0U) {
 8008ae0:	06eb      	lsls	r3, r5, #27
 8008ae2:	f100 8088 	bmi.w	8008bf6 <Vector14C+0x1d6>
  if (sts & GINTSTS_OEPINT) {
 8008ae6:	0329      	lsls	r1, r5, #12
  src = otgp->DAINT;
 8008ae8:	f8d6 4818 	ldr.w	r4, [r6, #2072]	; 0x818
  if (sts & GINTSTS_OEPINT) {
 8008aec:	d50b      	bpl.n	8008b06 <Vector14C+0xe6>
    if (src & (1 << 16))
 8008aee:	03e2      	lsls	r2, r4, #15
 8008af0:	f100 8194 	bmi.w	8008e1c <Vector14C+0x3fc>
    if (src & (1 << 17))
 8008af4:	03a3      	lsls	r3, r4, #14
 8008af6:	f100 8187 	bmi.w	8008e08 <Vector14C+0x3e8>
    if (src & (1 << 18))
 8008afa:	0367      	lsls	r7, r4, #13
 8008afc:	f100 818a 	bmi.w	8008e14 <Vector14C+0x3f4>
    if (src & (1 << 19))
 8008b00:	0326      	lsls	r6, r4, #12
 8008b02:	f100 8149 	bmi.w	8008d98 <Vector14C+0x378>
  if (sts & GINTSTS_IEPINT) {
 8008b06:	036d      	lsls	r5, r5, #13
 8008b08:	d50b      	bpl.n	8008b22 <Vector14C+0x102>
    if (src & (1 << 0))
 8008b0a:	07e0      	lsls	r0, r4, #31
 8008b0c:	f100 8192 	bmi.w	8008e34 <Vector14C+0x414>
    if (src & (1 << 1))
 8008b10:	07a1      	lsls	r1, r4, #30
 8008b12:	f100 818b 	bmi.w	8008e2c <Vector14C+0x40c>
    if (src & (1 << 2))
 8008b16:	0762      	lsls	r2, r4, #29
 8008b18:	f100 8184 	bmi.w	8008e24 <Vector14C+0x404>
    if (src & (1 << 3))
 8008b1c:	0723      	lsls	r3, r4, #28
 8008b1e:	f100 8142 	bmi.w	8008da6 <Vector14C+0x386>
}
 8008b22:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8008b26:	f7f8 b963 	b.w	8000df0 <_port_irq_epilogue>
    _usb_isr_invoke_sof_cb(usbp);
 8008b2a:	6863      	ldr	r3, [r4, #4]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d0d1      	beq.n	8008ad6 <Vector14C+0xb6>
 8008b32:	485c      	ldr	r0, [pc, #368]	; (8008ca4 <Vector14C+0x284>)
 8008b34:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
 8008b36:	02ef      	lsls	r7, r5, #11
 8008b38:	d5cf      	bpl.n	8008ada <Vector14C+0xba>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8008b3a:	2100      	movs	r1, #0
  stm32_otg_t *otgp = usbp->otg;
 8008b3c:	f8d4 b054 	ldr.w	fp, [r4, #84]	; 0x54
      _usb_isr_invoke_in_cb(usbp, ep);
 8008b40:	f8df a160 	ldr.w	sl, [pc, #352]	; 8008ca4 <Vector14C+0x284>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8008b44:	460f      	mov	r7, r1
      _usb_isr_invoke_in_cb(usbp, ep);
 8008b46:	f04f 0901 	mov.w	r9, #1
 8008b4a:	e006      	b.n	8008b5a <Vector14C+0x13a>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8008b4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b4e:	3701      	adds	r7, #1
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	b2ff      	uxtb	r7, r7
 8008b54:	429f      	cmp	r7, r3
 8008b56:	4639      	mov	r1, r7
 8008b58:	d8bf      	bhi.n	8008ada <Vector14C+0xba>
 8008b5a:	eb0b 1347 	add.w	r3, fp, r7, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8008b5e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8008b62:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8008b66:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8008b6a:	d1ef      	bne.n	8008b4c <Vector14C+0x12c>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 8008b6c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8008b70:	2a00      	cmp	r2, #0
 8008b72:	daeb      	bge.n	8008b4c <Vector14C+0x12c>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 8008b74:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8008b78:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
 8008b7c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 8008b80:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8008b84:	2a00      	cmp	r2, #0
 8008b86:	dbfb      	blt.n	8008b80 <Vector14C+0x160>
      otg_txfifo_flush(usbp, ep);
 8008b88:	6d62      	ldr	r2, [r4, #84]	; 0x54
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8008b8a:	0189      	lsls	r1, r1, #6
 8008b8c:	f041 0120 	orr.w	r1, r1, #32
 8008b90:	6111      	str	r1, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8008b92:	6913      	ldr	r3, [r2, #16]
 8008b94:	0699      	lsls	r1, r3, #26
 8008b96:	d4fc      	bmi.n	8008b92 <Vector14C+0x172>
 8008b98:	2012      	movs	r0, #18
 8008b9a:	f7f8 fa81 	bl	80010a0 <chSysPolledDelayX>
      _usb_isr_invoke_in_cb(usbp, ep);
 8008b9e:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8008ba2:	8921      	ldrh	r1, [r4, #8]
 8008ba4:	68da      	ldr	r2, [r3, #12]
 8008ba6:	fa09 f307 	lsl.w	r3, r9, r7
 8008baa:	6892      	ldr	r2, [r2, #8]
 8008bac:	ea21 0303 	bic.w	r3, r1, r3
 8008bb0:	8123      	strh	r3, [r4, #8]
 8008bb2:	b112      	cbz	r2, 8008bba <Vector14C+0x19a>
 8008bb4:	4639      	mov	r1, r7
 8008bb6:	4650      	mov	r0, sl
 8008bb8:	4790      	blx	r2
      otg_txfifo_handler(usbp, ep);
 8008bba:	4638      	mov	r0, r7
 8008bbc:	f7f7 fec8 	bl	8000950 <otg_txfifo_handler.constprop.0>
 8008bc0:	e7c4      	b.n	8008b4c <Vector14C+0x12c>
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8008bc2:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 8008bc6:	0798      	lsls	r0, r3, #30
 8008bc8:	f040 80df 	bne.w	8008d8a <Vector14C+0x36a>
  usbp->state = usbp->saved_state;
 8008bcc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8008bd0:	6862      	ldr	r2, [r4, #4]
  usbp->state = usbp->saved_state;
 8008bd2:	7023      	strb	r3, [r4, #0]
    otgp->DCTL &= ~DCTL_RWUSIG;
 8008bd4:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8008bd8:	6812      	ldr	r2, [r2, #0]
 8008bda:	f023 0301 	bic.w	r3, r3, #1
 8008bde:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
 8008be2:	2a00      	cmp	r2, #0
 8008be4:	f43f af2b 	beq.w	8008a3e <Vector14C+0x1e>
 8008be8:	2105      	movs	r1, #5
 8008bea:	482e      	ldr	r0, [pc, #184]	; (8008ca4 <Vector14C+0x284>)
 8008bec:	4790      	blx	r2
  if (sts & GINTSTS_USBSUSP) {
 8008bee:	0529      	lsls	r1, r5, #20
 8008bf0:	f57f af60 	bpl.w	8008ab4 <Vector14C+0x94>
 8008bf4:	e725      	b.n	8008a42 <Vector14C+0x22>
  sts = usbp->otg->GRXSTSP;
 8008bf6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008bf8:	6a0b      	ldr	r3, [r1, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8008bfa:	f403 10f0 	and.w	r0, r3, #1966080	; 0x1e0000
 8008bfe:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 8008c02:	f3c3 120a 	ubfx	r2, r3, #4, #11
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 8008c06:	f003 030f 	and.w	r3, r3, #15
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8008c0a:	f000 80d3 	beq.w	8008db4 <Vector14C+0x394>
 8008c0e:	f5b0 2f40 	cmp.w	r0, #786432	; 0xc0000
 8008c12:	f47f af68 	bne.w	8008ae6 <Vector14C+0xc6>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8008c16:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	6a18      	ldr	r0, [r3, #32]
  while (i < n) {
 8008c1e:	2a00      	cmp	r2, #0
 8008c20:	f43f af61 	beq.w	8008ae6 <Vector14C+0xc6>
      w = *fifop;
 8008c24:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
  size_t i = 0;
 8008c28:	2300      	movs	r3, #0
    if ((i & 3) == 0) {
 8008c2a:	079f      	lsls	r7, r3, #30
      w = *fifop;
 8008c2c:	bf08      	it	eq
 8008c2e:	f8d4 8000 	ldreq.w	r8, [r4]
    if (i < max) {
 8008c32:	2b07      	cmp	r3, #7
      *buf++ = (uint8_t)w;
 8008c34:	4601      	mov	r1, r0
    i++;
 8008c36:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
 8008c3a:	d804      	bhi.n	8008c46 <Vector14C+0x226>
      *buf++ = (uint8_t)w;
 8008c3c:	f801 8b01 	strb.w	r8, [r1], #1
      w >>= 8;
 8008c40:	ea4f 2818 	mov.w	r8, r8, lsr #8
      *buf++ = (uint8_t)w;
 8008c44:	4608      	mov	r0, r1
  while (i < n) {
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d1ef      	bne.n	8008c2a <Vector14C+0x20a>
 8008c4a:	e74c      	b.n	8008ae6 <Vector14C+0xc6>
  stm32_otg_t *otgp = usbp->otg;
 8008c4c:	f8d4 9054 	ldr.w	r9, [r4, #84]	; 0x54
      _usb_isr_invoke_out_cb(usbp, ep);
 8008c50:	f8df b050 	ldr.w	fp, [pc, #80]	; 8008ca4 <Vector14C+0x284>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8008c54:	2700      	movs	r7, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 8008c56:	f04f 0a01 	mov.w	sl, #1
 8008c5a:	e006      	b.n	8008c6a <Vector14C+0x24a>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8008c5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c5e:	3701      	adds	r7, #1
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	b2ff      	uxtb	r7, r7
 8008c64:	429f      	cmp	r7, r3
 8008c66:	f63f af3b 	bhi.w	8008ae0 <Vector14C+0xc0>
 8008c6a:	eb09 1247 	add.w	r2, r9, r7, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8008c6e:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8008c72:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008c76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c7a:	d1ef      	bne.n	8008c5c <Vector14C+0x23c>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 8008c7c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8008c80:	2b00      	cmp	r3, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 8008c82:	eb04 0087 	add.w	r0, r4, r7, lsl #2
 8008c86:	fa0a f107 	lsl.w	r1, sl, r7
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8008c8a:	dae7      	bge.n	8008c5c <Vector14C+0x23c>
      _usb_isr_invoke_out_cb(usbp, ep);
 8008c8c:	68c2      	ldr	r2, [r0, #12]
 8008c8e:	8963      	ldrh	r3, [r4, #10]
 8008c90:	68d2      	ldr	r2, [r2, #12]
 8008c92:	ea23 0301 	bic.w	r3, r3, r1
 8008c96:	4658      	mov	r0, fp
 8008c98:	4639      	mov	r1, r7
 8008c9a:	8163      	strh	r3, [r4, #10]
 8008c9c:	2a00      	cmp	r2, #0
 8008c9e:	d0dd      	beq.n	8008c5c <Vector14C+0x23c>
 8008ca0:	4790      	blx	r2
 8008ca2:	e7db      	b.n	8008c5c <Vector14C+0x23c>
 8008ca4:	20001868 	.word	0x20001868
  usbp->status        = 0;
 8008ca8:	2300      	movs	r3, #0
  usbp->state         = USB_READY;
 8008caa:	2102      	movs	r1, #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8008cac:	2220      	movs	r2, #32
    usbp->epc[i] = NULL;
 8008cae:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8008cb2:	e9c4 3305 	strd	r3, r3, [r4, #20]
  usbp->status        = 0;
 8008cb6:	64e3      	str	r3, [r4, #76]	; 0x4c
  usbp->ep0state = USB_EP0_STP_WAITING;
 8008cb8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  usbp->transmitting  = 0;
 8008cbc:	60a3      	str	r3, [r4, #8]
  usbp->state         = USB_READY;
 8008cbe:	7021      	strb	r1, [r4, #0]
 8008cc0:	6132      	str	r2, [r6, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8008cc2:	6935      	ldr	r5, [r6, #16]
 8008cc4:	f015 0520 	ands.w	r5, r5, #32
 8008cc8:	d1fb      	bne.n	8008cc2 <Vector14C+0x2a2>
 8008cca:	2012      	movs	r0, #18
 8008ccc:	f7f8 f9e8 	bl	80010a0 <chSysPolledDelayX>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8008cd0:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
  otgp->DIEPEMPMSK = 0;
 8008cd4:	f8c6 5834 	str.w	r5, [r6, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8008cd8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8008cdc:	f8dc 7008 	ldr.w	r7, [ip, #8]
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8008ce0:	f8c6 381c 	str.w	r3, [r6, #2076]	; 0x81c
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8008ce4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8008ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008cec:	eb06 1345 	add.w	r3, r6, r5, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8008cf0:	42af      	cmp	r7, r5
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8008cf2:	f8c3 0900 	str.w	r0, [r3, #2304]	; 0x900
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8008cf6:	f105 0501 	add.w	r5, r5, #1
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8008cfa:	f8c3 0b00 	str.w	r0, [r3, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8008cfe:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8008d02:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8008d06:	d1f1      	bne.n	8008cec <Vector14C+0x2cc>
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8008d08:	f8dc 3000 	ldr.w	r3, [ip]
 8008d0c:	65e3      	str	r3, [r4, #92]	; 0x5c
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8008d0e:	f8dc 2000 	ldr.w	r2, [ip]
  otg_rxfifo_flush(usbp);
 8008d12:	6d63      	ldr	r3, [r4, #84]	; 0x54
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8008d14:	6272      	str	r2, [r6, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 8008d16:	2210      	movs	r2, #16
 8008d18:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 8008d1a:	691d      	ldr	r5, [r3, #16]
 8008d1c:	f015 0510 	ands.w	r5, r5, #16
 8008d20:	d1fb      	bne.n	8008d1a <Vector14C+0x2fa>
 8008d22:	2012      	movs	r0, #18
 8008d24:	f7f8 f9bc 	bl	80010a0 <chSysPolledDelayX>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8008d28:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8008d2c:	6861      	ldr	r1, [r4, #4]
  next = usbp->pmnext;
 8008d2e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008d30:	680f      	ldr	r7, [r1, #0]
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8008d32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008d36:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8008d3a:	69b3      	ldr	r3, [r6, #24]
 8008d3c:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8008d40:	f043 0310 	orr.w	r3, r3, #16
 8008d44:	61b3      	str	r3, [r6, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8008d46:	2309      	movs	r3, #9
 8008d48:	f8c6 3810 	str.w	r3, [r6, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8008d4c:	f8c6 3814 	str.w	r3, [r6, #2068]	; 0x814
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 8008d50:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8008d54:	f8c6 3b10 	str.w	r3, [r6, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8008d58:	4b38      	ldr	r3, [pc, #224]	; (8008e3c <Vector14C+0x41c>)
 8008d5a:	f8c6 3b00 	str.w	r3, [r6, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
 8008d5e:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8008d62:	f8c6 3900 	str.w	r3, [r6, #2304]	; 0x900
  usbp->pmnext += size;
 8008d66:	f102 0310 	add.w	r3, r2, #16
 8008d6a:	65e3      	str	r3, [r4, #92]	; 0x5c
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8008d6c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  usbp->epc[0] = &ep0config;
 8008d70:	4b33      	ldr	r3, [pc, #204]	; (8008e40 <Vector14C+0x420>)
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8008d72:	62b2      	str	r2, [r6, #40]	; 0x28
  usbp->epc[0] = &ep0config;
 8008d74:	60e3      	str	r3, [r4, #12]
 8008d76:	2f00      	cmp	r7, #0
 8008d78:	f43f aed3 	beq.w	8008b22 <Vector14C+0x102>
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	4831      	ldr	r0, [pc, #196]	; (8008e44 <Vector14C+0x424>)
 8008d80:	47b8      	blx	r7
}
 8008d82:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8008d86:	f7f8 b833 	b.w	8000df0 <_port_irq_epilogue>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 8008d8a:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 8008d8e:	f023 0303 	bic.w	r3, r3, #3
 8008d92:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00
 8008d96:	e719      	b.n	8008bcc <Vector14C+0x1ac>
      otg_epout_handler(usbp, 3);
 8008d98:	2003      	movs	r0, #3
 8008d9a:	f7f8 fbb1 	bl	8001500 <otg_epout_handler.constprop.0>
  if (sts & GINTSTS_IEPINT) {
 8008d9e:	036d      	lsls	r5, r5, #13
 8008da0:	f57f aebf 	bpl.w	8008b22 <Vector14C+0x102>
 8008da4:	e6b1      	b.n	8008b0a <Vector14C+0xea>
      otg_epin_handler(usbp, 3);
 8008da6:	2003      	movs	r0, #3
 8008da8:	f7f8 fb22 	bl	80013f0 <otg_epin_handler.constprop.0>
}
 8008dac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8008db0:	f7f8 b81e 	b.w	8000df0 <_port_irq_epilogue>
                            usbp->epc[ep]->out_state->rxbuf,
 8008db4:	f103 0a02 	add.w	sl, r3, #2
 8008db8:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	699b      	ldr	r3, [r3, #24]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8008dc0:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	eba0 0e09 	sub.w	lr, r0, r9
  while (i < n) {
 8008dca:	b1c2      	cbz	r2, 8008dfe <Vector14C+0x3de>
      w = *fifop;
 8008dcc:	f501 5c80 	add.w	ip, r1, #4096	; 0x1000
  size_t i = 0;
 8008dd0:	2300      	movs	r3, #0
    if ((i & 3) == 0) {
 8008dd2:	0798      	lsls	r0, r3, #30
      w = *fifop;
 8008dd4:	bf08      	it	eq
 8008dd6:	f8dc 8000 	ldreq.w	r8, [ip]
    if (i < max) {
 8008dda:	459e      	cmp	lr, r3
      *buf++ = (uint8_t)w;
 8008ddc:	4639      	mov	r1, r7
    i++;
 8008dde:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
 8008de2:	d904      	bls.n	8008dee <Vector14C+0x3ce>
      *buf++ = (uint8_t)w;
 8008de4:	f801 8b01 	strb.w	r8, [r1], #1
      w >>= 8;
 8008de8:	ea4f 2818 	mov.w	r8, r8, lsr #8
      *buf++ = (uint8_t)w;
 8008dec:	460f      	mov	r7, r1
  while (i < n) {
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d1ef      	bne.n	8008dd2 <Vector14C+0x3b2>
 8008df2:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8008df6:	6863      	ldr	r3, [r4, #4]
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
    usbp->epc[ep]->out_state->rxbuf += cnt;
 8008dfe:	4417      	add	r7, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
 8008e00:	444a      	add	r2, r9
 8008e02:	e9c3 2701 	strd	r2, r7, [r3, #4]
 8008e06:	e66e      	b.n	8008ae6 <Vector14C+0xc6>
      otg_epout_handler(usbp, 1);
 8008e08:	2001      	movs	r0, #1
 8008e0a:	f7f8 fb79 	bl	8001500 <otg_epout_handler.constprop.0>
    if (src & (1 << 18))
 8008e0e:	0367      	lsls	r7, r4, #13
 8008e10:	f57f ae76 	bpl.w	8008b00 <Vector14C+0xe0>
      otg_epout_handler(usbp, 2);
 8008e14:	2002      	movs	r0, #2
 8008e16:	f7f8 fb73 	bl	8001500 <otg_epout_handler.constprop.0>
 8008e1a:	e671      	b.n	8008b00 <Vector14C+0xe0>
      otg_epout_handler(usbp, 0);
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	f7f8 fb6f 	bl	8001500 <otg_epout_handler.constprop.0>
 8008e22:	e667      	b.n	8008af4 <Vector14C+0xd4>
      otg_epin_handler(usbp, 2);
 8008e24:	2002      	movs	r0, #2
 8008e26:	f7f8 fae3 	bl	80013f0 <otg_epin_handler.constprop.0>
 8008e2a:	e677      	b.n	8008b1c <Vector14C+0xfc>
      otg_epin_handler(usbp, 1);
 8008e2c:	2001      	movs	r0, #1
 8008e2e:	f7f8 fadf 	bl	80013f0 <otg_epin_handler.constprop.0>
 8008e32:	e670      	b.n	8008b16 <Vector14C+0xf6>
      otg_epin_handler(usbp, 0);
 8008e34:	2000      	movs	r0, #0
 8008e36:	f7f8 fadb 	bl	80013f0 <otg_epin_handler.constprop.0>
 8008e3a:	e669      	b.n	8008b10 <Vector14C+0xf0>
 8008e3c:	10008040 	.word	0x10008040
 8008e40:	0800a4cc 	.word	0x0800a4cc
 8008e44:	20001868 	.word	0x20001868
	...

08008e50 <VectorC0>:
  uint16_t sr = I2CD1.i2c->SR1;
 8008e50:	4a38      	ldr	r2, [pc, #224]	; (8008f34 <VectorC0+0xe4>)
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8008e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dmaStreamDisable(i2cp->dmatx);
 8008e54:	e9d2 500c 	ldrd	r5, r0, [r2, #48]	; 0x30
  uint16_t sr = I2CD1.i2c->SR1;
 8008e58:	6944      	ldr	r4, [r0, #20]
  dmaStreamDisable(i2cp->dmatx);
 8008e5a:	682b      	ldr	r3, [r5, #0]
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8008e5c:	f404 415f 	and.w	r1, r4, #57088	; 0xdf00
 8008e60:	43c9      	mvns	r1, r1
 8008e62:	6141      	str	r1, [r0, #20]
  dmaStreamDisable(i2cp->dmatx);
 8008e64:	6819      	ldr	r1, [r3, #0]
 8008e66:	f021 011f 	bic.w	r1, r1, #31
 8008e6a:	6019      	str	r1, [r3, #0]
  uint16_t sr = I2CD1.i2c->SR1;
 8008e6c:	b2a1      	uxth	r1, r4
  dmaStreamDisable(i2cp->dmatx);
 8008e6e:	681e      	ldr	r6, [r3, #0]
 8008e70:	07f6      	lsls	r6, r6, #31
 8008e72:	d4fc      	bmi.n	8008e6e <VectorC0+0x1e>
 8008e74:	f895 c009 	ldrb.w	ip, [r5, #9]
  dmaStreamDisable(i2cp->dmarx);
 8008e78:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8008e7a:	686f      	ldr	r7, [r5, #4]
  dmaStreamDisable(i2cp->dmarx);
 8008e7c:	6835      	ldr	r5, [r6, #0]
  dmaStreamDisable(i2cp->dmatx);
 8008e7e:	233d      	movs	r3, #61	; 0x3d
 8008e80:	fa03 f30c 	lsl.w	r3, r3, ip
 8008e84:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 8008e86:	682b      	ldr	r3, [r5, #0]
 8008e88:	f023 031f 	bic.w	r3, r3, #31
 8008e8c:	602b      	str	r3, [r5, #0]
 8008e8e:	682b      	ldr	r3, [r5, #0]
 8008e90:	f013 0301 	ands.w	r3, r3, #1
 8008e94:	d1fb      	bne.n	8008e8e <VectorC0+0x3e>
 8008e96:	7a77      	ldrb	r7, [r6, #9]
 8008e98:	6876      	ldr	r6, [r6, #4]
 8008e9a:	253d      	movs	r5, #61	; 0x3d
 8008e9c:	40bd      	lsls	r5, r7
 8008e9e:	6035      	str	r5, [r6, #0]
  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 8008ea0:	05cf      	lsls	r7, r1, #23
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 8008ea2:	bf41      	itttt	mi
 8008ea4:	6945      	ldrmi	r5, [r0, #20]
 8008ea6:	f425 7580 	bicmi.w	r5, r5, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 8008eaa:	2301      	movmi	r3, #1
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 8008eac:	6145      	strmi	r5, [r0, #20]
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8008eae:	058e      	lsls	r6, r1, #22
    i2cp->errors |= I2C_BUS_ERROR;
 8008eb0:	6093      	str	r3, [r2, #8]
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8008eb2:	bf44      	itt	mi
 8008eb4:	f043 0302 	orrmi.w	r3, r3, #2
 8008eb8:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8008eba:	054d      	lsls	r5, r1, #21
 8008ebc:	d50a      	bpl.n	8008ed4 <VectorC0+0x84>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8008ebe:	6845      	ldr	r5, [r0, #4]
 8008ec0:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8008ec4:	6045      	str	r5, [r0, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8008ec6:	6805      	ldr	r5, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8008ec8:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8008ecc:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8008ed0:	6005      	str	r5, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8008ed2:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8008ed4:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 8008ed6:	bf44      	itt	mi
 8008ed8:	f043 0308 	orrmi.w	r3, r3, #8
 8008edc:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8008ede:	044e      	lsls	r6, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 8008ee0:	bf44      	itt	mi
 8008ee2:	f043 0320 	orrmi.w	r3, r3, #32
 8008ee6:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8008ee8:	04cd      	lsls	r5, r1, #19
 8008eea:	d51a      	bpl.n	8008f22 <VectorC0+0xd2>
    i2cp->errors |= I2C_PEC_ERROR;
 8008eec:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8008ef0:	0420      	lsls	r0, r4, #16
    i2cp->errors |= I2C_PEC_ERROR;
 8008ef2:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8008ef4:	d502      	bpl.n	8008efc <VectorC0+0xac>
    i2cp->errors |= I2C_SMB_ALERT;
 8008ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008efa:	6093      	str	r3, [r2, #8]
 8008efc:	2320      	movs	r3, #32
 8008efe:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8008f02:	69d0      	ldr	r0, [r2, #28]
 8008f04:	b130      	cbz	r0, 8008f14 <VectorC0+0xc4>
    tp->u.rdymsg = msg;
 8008f06:	f06f 0301 	mvn.w	r3, #1
 8008f0a:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	61d3      	str	r3, [r2, #28]
    (void) chSchReadyI(tp);
 8008f10:	f7f8 f856 	bl	8000fc0 <chSchReadyI>
 8008f14:	2300      	movs	r3, #0
 8008f16:	f383 8811 	msr	BASEPRI, r3
}
 8008f1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8008f1e:	f7f7 bf67 	b.w	8000df0 <_port_irq_epilogue>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8008f22:	0421      	lsls	r1, r4, #16
 8008f24:	d4e7      	bmi.n	8008ef6 <VectorC0+0xa6>
  if (i2cp->errors != I2C_NO_ERROR)
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1e8      	bne.n	8008efc <VectorC0+0xac>
}
 8008f2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8008f2e:	f7f7 bf5f 	b.w	8000df0 <_port_irq_epilogue>
 8008f32:	bf00      	nop
 8008f34:	20000c5c 	.word	0x20000c5c
	...

08008f40 <VectorBC>:
  I2C_TypeDef *dp = i2cp->i2c;
 8008f40:	4a45      	ldr	r2, [pc, #276]	; (8009058 <VectorBC+0x118>)
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8008f42:	4946      	ldr	r1, [pc, #280]	; (800905c <VectorBC+0x11c>)
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8008f44:	b538      	push	{r3, r4, r5, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8008f46:	6b54      	ldr	r4, [r2, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 8008f48:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 8008f4a:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8008f4c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8008f50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f54:	428b      	cmp	r3, r1
 8008f56:	d062      	beq.n	800901e <VectorBC+0xde>
 8008f58:	d833      	bhi.n	8008fc2 <VectorBC+0x82>
 8008f5a:	3907      	subs	r1, #7
 8008f5c:	428b      	cmp	r3, r1
 8008f5e:	d024      	beq.n	8008faa <VectorBC+0x6a>
 8008f60:	3101      	adds	r1, #1
 8008f62:	428b      	cmp	r3, r1
 8008f64:	d11e      	bne.n	8008fa4 <VectorBC+0x64>
    dmaStreamEnable(i2cp->dmarx);
 8008f66:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8008f68:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8008f6a:	681b      	ldr	r3, [r3, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8008f6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f70:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	f042 0201 	orr.w	r2, r2, #1
 8008f78:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8008f7a:	6862      	ldr	r2, [r4, #4]
 8008f7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f80:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d945      	bls.n	8009014 <VectorBC+0xd4>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8008f88:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8008f8c:	bf18      	it	ne
 8008f8e:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 8008f90:	05eb      	lsls	r3, r5, #23
 8008f92:	d503      	bpl.n	8008f9c <VectorBC+0x5c>
    dp->SR1 &= ~I2C_SR1_BERR;
 8008f94:	6963      	ldr	r3, [r4, #20]
 8008f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f9a:	6163      	str	r3, [r4, #20]
}
 8008f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8008fa0:	f7f7 bf26 	b.w	8000df0 <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8008fa4:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8008fa8:	d1ee      	bne.n	8008f88 <VectorBC+0x48>
    if ((i2cp->addr >> 8) > 0) {
 8008faa:	8c13      	ldrh	r3, [r2, #32]
 8008fac:	0a1a      	lsrs	r2, r3, #8
 8008fae:	d039      	beq.n	8009024 <VectorBC+0xe4>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8008fb0:	f002 0206 	and.w	r2, r2, #6
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8008fbe:	6123      	str	r3, [r4, #16]
 8008fc0:	e7e2      	b.n	8008f88 <VectorBC+0x48>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8008fc2:	4927      	ldr	r1, [pc, #156]	; (8009060 <VectorBC+0x120>)
 8008fc4:	428b      	cmp	r3, r1
 8008fc6:	d035      	beq.n	8009034 <VectorBC+0xf4>
 8008fc8:	3102      	adds	r1, #2
 8008fca:	428b      	cmp	r3, r1
 8008fcc:	d1dc      	bne.n	8008f88 <VectorBC+0x48>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8008fce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    (void)dp->DR; /* clear BTF.*/
 8008fd0:	6921      	ldr	r1, [r4, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	b143      	cbz	r3, 8008fea <VectorBC+0xaa>
      i2cp->addr |= 0x01;
 8008fd8:	8c11      	ldrh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8008fda:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 8008fdc:	f041 0101 	orr.w	r1, r1, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8008fe0:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 8008fe4:	8411      	strh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8008fe6:	6023      	str	r3, [r4, #0]
 8008fe8:	e7d8      	b.n	8008f9c <VectorBC+0x5c>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8008fea:	6861      	ldr	r1, [r4, #4]
 8008fec:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8008ff0:	6061      	str	r1, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8008ff2:	6821      	ldr	r1, [r4, #0]
 8008ff4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8008ff8:	6021      	str	r1, [r4, #0]
 8008ffa:	2120      	movs	r1, #32
 8008ffc:	f381 8811 	msr	BASEPRI, r1
  if (*trp != NULL) {
 8009000:	69d0      	ldr	r0, [r2, #28]
 8009002:	b118      	cbz	r0, 800900c <VectorBC+0xcc>
    tp->u.rdymsg = msg;
 8009004:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 8009006:	61d3      	str	r3, [r2, #28]
    (void) chSchReadyI(tp);
 8009008:	f7f7 ffda 	bl	8000fc0 <chSchReadyI>
 800900c:	2300      	movs	r3, #0
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	e7b9      	b.n	8008f88 <VectorBC+0x48>
      dp->CR1 &= ~I2C_CR1_ACK;
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800901a:	6023      	str	r3, [r4, #0]
 800901c:	e7b4      	b.n	8008f88 <VectorBC+0x48>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800901e:	8c13      	ldrh	r3, [r2, #32]
 8009020:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8009024:	6123      	str	r3, [r4, #16]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8009026:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800902a:	bf18      	it	ne
 800902c:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 800902e:	05eb      	lsls	r3, r5, #23
 8009030:	d5b4      	bpl.n	8008f9c <VectorBC+0x5c>
 8009032:	e7af      	b.n	8008f94 <VectorBC+0x54>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8009034:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8009036:	6b12      	ldr	r2, [r2, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8009038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800903c:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800903e:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8009040:	6813      	ldr	r3, [r2, #0]
 8009042:	f043 0301 	orr.w	r3, r3, #1
 8009046:	6013      	str	r3, [r2, #0]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8009048:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800904c:	bf18      	it	ne
 800904e:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 8009050:	05eb      	lsls	r3, r5, #23
 8009052:	d5a3      	bpl.n	8008f9c <VectorBC+0x5c>
 8009054:	e79e      	b.n	8008f94 <VectorBC+0x54>
 8009056:	bf00      	nop
 8009058:	20000c5c 	.word	0x20000c5c
 800905c:	00030008 	.word	0x00030008
 8009060:	00070082 	.word	0x00070082
	...

08009070 <Vector158>:
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8009070:	4b08      	ldr	r3, [pc, #32]	; (8009094 <Vector158+0x24>)
  if (dma.streams[15].func)
 8009072:	4809      	ldr	r0, [pc, #36]	; (8009098 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8009074:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 8009076:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8009078:	0d89      	lsrs	r1, r1, #22
 800907a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 800907e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8009080:	058c      	lsls	r4, r1, #22
 8009082:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 8009084:	b112      	cbz	r2, 800908c <Vector158+0x1c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8009086:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800908a:	4790      	blx	r2
}
 800908c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8009090:	f7f7 beae 	b.w	8000df0 <_port_irq_epilogue>
 8009094:	40026400 	.word	0x40026400
 8009098:	20001aa0 	.word	0x20001aa0
 800909c:	00000000 	.word	0x00000000

080090a0 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80090a0:	4b08      	ldr	r3, [pc, #32]	; (80090c4 <Vector154+0x24>)
  if (dma.streams[14].func)
 80090a2:	4809      	ldr	r0, [pc, #36]	; (80090c8 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80090a4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 80090a6:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80090a8:	0c09      	lsrs	r1, r1, #16
 80090aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 80090ae:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 80090b0:	040c      	lsls	r4, r1, #16
 80090b2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 80090b4:	b10a      	cbz	r2, 80090ba <Vector154+0x1a>
    dma.streams[14].func(dma.streams[14].param, flags);
 80090b6:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80090b8:	4790      	blx	r2
}
 80090ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80090be:	f7f7 be97 	b.w	8000df0 <_port_irq_epilogue>
 80090c2:	bf00      	nop
 80090c4:	40026400 	.word	0x40026400
 80090c8:	20001aa0 	.word	0x20001aa0
 80090cc:	00000000 	.word	0x00000000

080090d0 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80090d0:	4b08      	ldr	r3, [pc, #32]	; (80090f4 <Vector150+0x24>)
  if (dma.streams[13].func)
 80090d2:	4809      	ldr	r0, [pc, #36]	; (80090f8 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80090d4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 80090d6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80090d8:	0989      	lsrs	r1, r1, #6
 80090da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80090de:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 80090e0:	018c      	lsls	r4, r1, #6
 80090e2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 80090e4:	b10a      	cbz	r2, 80090ea <Vector150+0x1a>
    dma.streams[13].func(dma.streams[13].param, flags);
 80090e6:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80090e8:	4790      	blx	r2
}
 80090ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80090ee:	f7f7 be7f 	b.w	8000df0 <_port_irq_epilogue>
 80090f2:	bf00      	nop
 80090f4:	40026400 	.word	0x40026400
 80090f8:	20001aa0 	.word	0x20001aa0
 80090fc:	00000000 	.word	0x00000000

08009100 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8009100:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8009102:	4b07      	ldr	r3, [pc, #28]	; (8009120 <Vector130+0x20>)
  if (dma.streams[12].func)
 8009104:	4807      	ldr	r0, [pc, #28]	; (8009124 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8009106:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 8009108:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800910a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 800910e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8009110:	b10a      	cbz	r2, 8009116 <Vector130+0x16>
    dma.streams[12].func(dma.streams[12].param, flags);
 8009112:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8009114:	4790      	blx	r2
}
 8009116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800911a:	f7f7 be69 	b.w	8000df0 <_port_irq_epilogue>
 800911e:	bf00      	nop
 8009120:	40026400 	.word	0x40026400
 8009124:	20001aa0 	.word	0x20001aa0
	...

08009130 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8009130:	4b08      	ldr	r3, [pc, #32]	; (8009154 <Vector12C+0x24>)
  if (dma.streams[11].func)
 8009132:	4809      	ldr	r0, [pc, #36]	; (8009158 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8009134:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 8009136:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8009138:	0d89      	lsrs	r1, r1, #22
 800913a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 800913e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 8009140:	058c      	lsls	r4, r1, #22
 8009142:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 8009144:	b10a      	cbz	r2, 800914a <Vector12C+0x1a>
    dma.streams[11].func(dma.streams[11].param, flags);
 8009146:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8009148:	4790      	blx	r2
}
 800914a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800914e:	f7f7 be4f 	b.w	8000df0 <_port_irq_epilogue>
 8009152:	bf00      	nop
 8009154:	40026400 	.word	0x40026400
 8009158:	20001aa0 	.word	0x20001aa0
 800915c:	00000000 	.word	0x00000000

08009160 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8009160:	4b08      	ldr	r3, [pc, #32]	; (8009184 <Vector128+0x24>)
  if (dma.streams[10].func)
 8009162:	4809      	ldr	r0, [pc, #36]	; (8009188 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8009164:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 8009166:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8009168:	0c09      	lsrs	r1, r1, #16
 800916a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800916e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 8009170:	040c      	lsls	r4, r1, #16
 8009172:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 8009174:	b10a      	cbz	r2, 800917a <Vector128+0x1a>
    dma.streams[10].func(dma.streams[10].param, flags);
 8009176:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8009178:	4790      	blx	r2
}
 800917a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800917e:	f7f7 be37 	b.w	8000df0 <_port_irq_epilogue>
 8009182:	bf00      	nop
 8009184:	40026400 	.word	0x40026400
 8009188:	20001aa0 	.word	0x20001aa0
 800918c:	00000000 	.word	0x00000000

08009190 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8009190:	4b08      	ldr	r3, [pc, #32]	; (80091b4 <Vector124+0x24>)
  if (dma.streams[9].func)
 8009192:	4809      	ldr	r0, [pc, #36]	; (80091b8 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8009194:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 8009196:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8009198:	0989      	lsrs	r1, r1, #6
 800919a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800919e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 80091a0:	018c      	lsls	r4, r1, #6
 80091a2:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 80091a4:	b10a      	cbz	r2, 80091aa <Vector124+0x1a>
    dma.streams[9].func(dma.streams[9].param, flags);
 80091a6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80091a8:	4790      	blx	r2
}
 80091aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80091ae:	f7f7 be1f 	b.w	8000df0 <_port_irq_epilogue>
 80091b2:	bf00      	nop
 80091b4:	40026400 	.word	0x40026400
 80091b8:	20001aa0 	.word	0x20001aa0
 80091bc:	00000000 	.word	0x00000000

080091c0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 80091c0:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80091c2:	4b07      	ldr	r3, [pc, #28]	; (80091e0 <Vector120+0x20>)
  if (dma.streams[8].func)
 80091c4:	4807      	ldr	r0, [pc, #28]	; (80091e4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80091c6:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 80091c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80091ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 80091ce:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 80091d0:	b10a      	cbz	r2, 80091d6 <Vector120+0x16>
    dma.streams[8].func(dma.streams[8].param, flags);
 80091d2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80091d4:	4790      	blx	r2
}
 80091d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80091da:	f7f7 be09 	b.w	8000df0 <_port_irq_epilogue>
 80091de:	bf00      	nop
 80091e0:	40026400 	.word	0x40026400
 80091e4:	20001aa0 	.word	0x20001aa0
	...

080091f0 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80091f0:	4b08      	ldr	r3, [pc, #32]	; (8009214 <VectorFC+0x24>)
  if (dma.streams[7].func)
 80091f2:	4809      	ldr	r0, [pc, #36]	; (8009218 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80091f4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 80091f6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80091f8:	0d89      	lsrs	r1, r1, #22
 80091fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80091fe:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 8009200:	058c      	lsls	r4, r1, #22
 8009202:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 8009204:	b10a      	cbz	r2, 800920a <VectorFC+0x1a>
    dma.streams[7].func(dma.streams[7].param, flags);
 8009206:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8009208:	4790      	blx	r2
}
 800920a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800920e:	f7f7 bdef 	b.w	8000df0 <_port_irq_epilogue>
 8009212:	bf00      	nop
 8009214:	40026000 	.word	0x40026000
 8009218:	20001aa0 	.word	0x20001aa0
 800921c:	00000000 	.word	0x00000000

08009220 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8009220:	4b08      	ldr	r3, [pc, #32]	; (8009244 <Vector84+0x24>)
  if (dma.streams[6].func)
 8009222:	4809      	ldr	r0, [pc, #36]	; (8009248 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8009224:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 8009226:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8009228:	0c09      	lsrs	r1, r1, #16
 800922a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800922e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 8009230:	040c      	lsls	r4, r1, #16
 8009232:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 8009234:	b10a      	cbz	r2, 800923a <Vector84+0x1a>
    dma.streams[6].func(dma.streams[6].param, flags);
 8009236:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8009238:	4790      	blx	r2
}
 800923a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800923e:	f7f7 bdd7 	b.w	8000df0 <_port_irq_epilogue>
 8009242:	bf00      	nop
 8009244:	40026000 	.word	0x40026000
 8009248:	20001aa0 	.word	0x20001aa0
 800924c:	00000000 	.word	0x00000000

08009250 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8009250:	4b08      	ldr	r3, [pc, #32]	; (8009274 <Vector80+0x24>)
  if (dma.streams[5].func)
 8009252:	4809      	ldr	r0, [pc, #36]	; (8009278 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8009254:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 8009256:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8009258:	0989      	lsrs	r1, r1, #6
 800925a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800925e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8009260:	018c      	lsls	r4, r1, #6
 8009262:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 8009264:	b10a      	cbz	r2, 800926a <Vector80+0x1a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8009266:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8009268:	4790      	blx	r2
}
 800926a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800926e:	f7f7 bdbf 	b.w	8000df0 <_port_irq_epilogue>
 8009272:	bf00      	nop
 8009274:	40026000 	.word	0x40026000
 8009278:	20001aa0 	.word	0x20001aa0
 800927c:	00000000 	.word	0x00000000

08009280 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8009280:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8009282:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <Vector7C+0x20>)
  if (dma.streams[4].func)
 8009284:	4807      	ldr	r0, [pc, #28]	; (80092a4 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8009286:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 8009288:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800928a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800928e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8009290:	b10a      	cbz	r2, 8009296 <Vector7C+0x16>
    dma.streams[4].func(dma.streams[4].param, flags);
 8009292:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009294:	4790      	blx	r2
}
 8009296:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800929a:	f7f7 bda9 	b.w	8000df0 <_port_irq_epilogue>
 800929e:	bf00      	nop
 80092a0:	40026000 	.word	0x40026000
 80092a4:	20001aa0 	.word	0x20001aa0
	...

080092b0 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80092b0:	4b08      	ldr	r3, [pc, #32]	; (80092d4 <Vector78+0x24>)
  if (dma.streams[3].func)
 80092b2:	4809      	ldr	r0, [pc, #36]	; (80092d8 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80092b4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 80092b6:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80092b8:	0d89      	lsrs	r1, r1, #22
 80092ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80092be:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 80092c0:	058c      	lsls	r4, r1, #22
 80092c2:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 80092c4:	b10a      	cbz	r2, 80092ca <Vector78+0x1a>
    dma.streams[3].func(dma.streams[3].param, flags);
 80092c6:	6a00      	ldr	r0, [r0, #32]
 80092c8:	4790      	blx	r2
}
 80092ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80092ce:	f7f7 bd8f 	b.w	8000df0 <_port_irq_epilogue>
 80092d2:	bf00      	nop
 80092d4:	40026000 	.word	0x40026000
 80092d8:	20001aa0 	.word	0x20001aa0
 80092dc:	00000000 	.word	0x00000000

080092e0 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80092e0:	4b08      	ldr	r3, [pc, #32]	; (8009304 <Vector74+0x24>)
  if (dma.streams[2].func)
 80092e2:	4809      	ldr	r0, [pc, #36]	; (8009308 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80092e4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 80092e6:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80092e8:	0c09      	lsrs	r1, r1, #16
 80092ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80092ee:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 80092f0:	040c      	lsls	r4, r1, #16
 80092f2:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 80092f4:	b10a      	cbz	r2, 80092fa <Vector74+0x1a>
    dma.streams[2].func(dma.streams[2].param, flags);
 80092f6:	6980      	ldr	r0, [r0, #24]
 80092f8:	4790      	blx	r2
}
 80092fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80092fe:	f7f7 bd77 	b.w	8000df0 <_port_irq_epilogue>
 8009302:	bf00      	nop
 8009304:	40026000 	.word	0x40026000
 8009308:	20001aa0 	.word	0x20001aa0
 800930c:	00000000 	.word	0x00000000

08009310 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8009310:	4b08      	ldr	r3, [pc, #32]	; (8009334 <Vector70+0x24>)
  if (dma.streams[1].func)
 8009312:	4809      	ldr	r0, [pc, #36]	; (8009338 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8009314:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 8009316:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8009318:	0989      	lsrs	r1, r1, #6
 800931a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 800931e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 8009320:	018c      	lsls	r4, r1, #6
 8009322:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 8009324:	b10a      	cbz	r2, 800932a <Vector70+0x1a>
    dma.streams[1].func(dma.streams[1].param, flags);
 8009326:	6900      	ldr	r0, [r0, #16]
 8009328:	4790      	blx	r2
}
 800932a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800932e:	f7f7 bd5f 	b.w	8000df0 <_port_irq_epilogue>
 8009332:	bf00      	nop
 8009334:	40026000 	.word	0x40026000
 8009338:	20001aa0 	.word	0x20001aa0
 800933c:	00000000 	.word	0x00000000

08009340 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8009340:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8009342:	4b07      	ldr	r3, [pc, #28]	; (8009360 <Vector6C+0x20>)
  if (dma.streams[0].func)
 8009344:	4807      	ldr	r0, [pc, #28]	; (8009364 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8009346:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8009348:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800934a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800934e:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8009350:	b10a      	cbz	r2, 8009356 <Vector6C+0x16>
    dma.streams[0].func(dma.streams[0].param, flags);
 8009352:	6880      	ldr	r0, [r0, #8]
 8009354:	4790      	blx	r2
}
 8009356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800935a:	f7f7 bd49 	b.w	8000df0 <_port_irq_epilogue>
 800935e:	bf00      	nop
 8009360:	40026000 	.word	0x40026000
 8009364:	20001aa0 	.word	0x20001aa0
	...

08009370 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8009370:	b4f0      	push	{r4, r5, r6, r7}
 8009372:	4f14      	ldr	r7, [pc, #80]	; (80093c4 <__init_ram_areas+0x54>)
 8009374:	4d14      	ldr	r5, [pc, #80]	; (80093c8 <__init_ram_areas+0x58>)
 8009376:	4815      	ldr	r0, [pc, #84]	; (80093cc <__init_ram_areas+0x5c>)
 8009378:	4b15      	ldr	r3, [pc, #84]	; (80093d0 <__init_ram_areas+0x60>)
 800937a:	4916      	ldr	r1, [pc, #88]	; (80093d4 <__init_ram_areas+0x64>)
 800937c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8009380:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8009382:	4298      	cmp	r0, r3
 8009384:	d911      	bls.n	80093aa <__init_ram_areas+0x3a>
 8009386:	3904      	subs	r1, #4
 8009388:	461a      	mov	r2, r3
      *p = *tp;
 800938a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800938e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8009392:	4290      	cmp	r0, r2
 8009394:	d8f9      	bhi.n	800938a <__init_ram_areas+0x1a>
 8009396:	1e42      	subs	r2, r0, #1
 8009398:	1ad2      	subs	r2, r2, r3
 800939a:	f022 0203 	bic.w	r2, r2, #3
 800939e:	3204      	adds	r2, #4
 80093a0:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 80093a2:	429d      	cmp	r5, r3
 80093a4:	d903      	bls.n	80093ae <__init_ram_areas+0x3e>
      *p = 0;
 80093a6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 80093aa:	429d      	cmp	r5, r3
 80093ac:	d8fb      	bhi.n	80093a6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80093ae:	4567      	cmp	r7, ip
 80093b0:	d005      	beq.n	80093be <__init_ram_areas+0x4e>
 80093b2:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 80093b6:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 80093ba:	3710      	adds	r7, #16
 80093bc:	e7e1      	b.n	8009382 <__init_ram_areas+0x12>
#endif
}
 80093be:	bcf0      	pop	{r4, r5, r6, r7}
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	0800a570 	.word	0x0800a570
 80093c8:	2000204c 	.word	0x2000204c
 80093cc:	2000204c 	.word	0x2000204c
 80093d0:	2000204c 	.word	0x2000204c
 80093d4:	0800acb8 	.word	0x0800acb8
	...

080093e0 <__default_exit>:
  while (true) {
 80093e0:	e7fe      	b.n	80093e0 <__default_exit>
 80093e2:	bf00      	nop
	...

080093f0 <__late_init>:
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
	...

08009400 <__core_init>:
}
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop

08009404 <_strtol_l.isra.0>:
 8009404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009408:	4f40      	ldr	r7, [pc, #256]	; (800950c <_strtol_l.isra.0+0x108>)
 800940a:	4681      	mov	r9, r0
 800940c:	460d      	mov	r5, r1
 800940e:	4628      	mov	r0, r5
 8009410:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009414:	5d3e      	ldrb	r6, [r7, r4]
 8009416:	f016 0608 	ands.w	r6, r6, #8
 800941a:	d1f8      	bne.n	800940e <_strtol_l.isra.0+0xa>
 800941c:	2c2d      	cmp	r4, #45	; 0x2d
 800941e:	d04f      	beq.n	80094c0 <_strtol_l.isra.0+0xbc>
 8009420:	2c2b      	cmp	r4, #43	; 0x2b
 8009422:	bf0a      	itet	eq
 8009424:	f895 b000 	ldrbeq.w	fp, [r5]
 8009428:	46a3      	movne	fp, r4
 800942a:	1c85      	addeq	r5, r0, #2
 800942c:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8009430:	b11b      	cbz	r3, 800943a <_strtol_l.isra.0+0x36>
 8009432:	2b10      	cmp	r3, #16
 8009434:	d04b      	beq.n	80094ce <_strtol_l.isra.0+0xca>
 8009436:	469e      	mov	lr, r3
 8009438:	e004      	b.n	8009444 <_strtol_l.isra.0+0x40>
 800943a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800943e:	d050      	beq.n	80094e2 <_strtol_l.isra.0+0xde>
 8009440:	230a      	movs	r3, #10
 8009442:	469e      	mov	lr, r3
 8009444:	2700      	movs	r7, #0
 8009446:	fbb8 fcfe 	udiv	ip, r8, lr
 800944a:	4638      	mov	r0, r7
 800944c:	fb0e 8a1c 	mls	sl, lr, ip, r8
 8009450:	e005      	b.n	800945e <_strtol_l.isra.0+0x5a>
 8009452:	d029      	beq.n	80094a8 <_strtol_l.isra.0+0xa4>
 8009454:	fb0e 4000 	mla	r0, lr, r0, r4
 8009458:	2701      	movs	r7, #1
 800945a:	f815 bb01 	ldrb.w	fp, [r5], #1
 800945e:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
 8009462:	2c09      	cmp	r4, #9
 8009464:	d905      	bls.n	8009472 <_strtol_l.isra.0+0x6e>
 8009466:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
 800946a:	2c19      	cmp	r4, #25
 800946c:	d80b      	bhi.n	8009486 <_strtol_l.isra.0+0x82>
 800946e:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
 8009472:	42a3      	cmp	r3, r4
 8009474:	dd0f      	ble.n	8009496 <_strtol_l.isra.0+0x92>
 8009476:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800947a:	d0ee      	beq.n	800945a <_strtol_l.isra.0+0x56>
 800947c:	4584      	cmp	ip, r0
 800947e:	d2e8      	bcs.n	8009452 <_strtol_l.isra.0+0x4e>
 8009480:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009484:	e7e9      	b.n	800945a <_strtol_l.isra.0+0x56>
 8009486:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
 800948a:	2c19      	cmp	r4, #25
 800948c:	d803      	bhi.n	8009496 <_strtol_l.isra.0+0x92>
 800948e:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
 8009492:	42a3      	cmp	r3, r4
 8009494:	dcef      	bgt.n	8009476 <_strtol_l.isra.0+0x72>
 8009496:	1c7b      	adds	r3, r7, #1
 8009498:	d00b      	beq.n	80094b2 <_strtol_l.isra.0+0xae>
 800949a:	b106      	cbz	r6, 800949e <_strtol_l.isra.0+0x9a>
 800949c:	4240      	negs	r0, r0
 800949e:	b10a      	cbz	r2, 80094a4 <_strtol_l.isra.0+0xa0>
 80094a0:	bb77      	cbnz	r7, 8009500 <_strtol_l.isra.0+0xfc>
 80094a2:	6011      	str	r1, [r2, #0]
 80094a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a8:	45a2      	cmp	sl, r4
 80094aa:	dad3      	bge.n	8009454 <_strtol_l.isra.0+0x50>
 80094ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80094b0:	e7d3      	b.n	800945a <_strtol_l.isra.0+0x56>
 80094b2:	2322      	movs	r3, #34	; 0x22
 80094b4:	f8c9 3000 	str.w	r3, [r9]
 80094b8:	b1fa      	cbz	r2, 80094fa <_strtol_l.isra.0+0xf6>
 80094ba:	1e69      	subs	r1, r5, #1
 80094bc:	4640      	mov	r0, r8
 80094be:	e7f0      	b.n	80094a2 <_strtol_l.isra.0+0x9e>
 80094c0:	f895 b000 	ldrb.w	fp, [r5]
 80094c4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80094c8:	1c85      	adds	r5, r0, #2
 80094ca:	2601      	movs	r6, #1
 80094cc:	e7b0      	b.n	8009430 <_strtol_l.isra.0+0x2c>
 80094ce:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 80094d2:	d1b0      	bne.n	8009436 <_strtol_l.isra.0+0x32>
 80094d4:	7828      	ldrb	r0, [r5, #0]
 80094d6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80094da:	2858      	cmp	r0, #88	; 0x58
 80094dc:	d006      	beq.n	80094ec <_strtol_l.isra.0+0xe8>
 80094de:	469e      	mov	lr, r3
 80094e0:	e7b0      	b.n	8009444 <_strtol_l.isra.0+0x40>
 80094e2:	782b      	ldrb	r3, [r5, #0]
 80094e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094e8:	2b58      	cmp	r3, #88	; 0x58
 80094ea:	d10b      	bne.n	8009504 <_strtol_l.isra.0+0x100>
 80094ec:	f04f 0e10 	mov.w	lr, #16
 80094f0:	f895 b001 	ldrb.w	fp, [r5, #1]
 80094f4:	4673      	mov	r3, lr
 80094f6:	3502      	adds	r5, #2
 80094f8:	e7a4      	b.n	8009444 <_strtol_l.isra.0+0x40>
 80094fa:	4640      	mov	r0, r8
 80094fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009500:	4680      	mov	r8, r0
 8009502:	e7da      	b.n	80094ba <_strtol_l.isra.0+0xb6>
 8009504:	2308      	movs	r3, #8
 8009506:	469e      	mov	lr, r3
 8009508:	e79c      	b.n	8009444 <_strtol_l.isra.0+0x40>
 800950a:	bf00      	nop
 800950c:	0800a76d 	.word	0x0800a76d

08009510 <strtol>:
 8009510:	b430      	push	{r4, r5}
 8009512:	4c04      	ldr	r4, [pc, #16]	; (8009524 <strtol+0x14>)
 8009514:	460d      	mov	r5, r1
 8009516:	4613      	mov	r3, r2
 8009518:	4601      	mov	r1, r0
 800951a:	462a      	mov	r2, r5
 800951c:	6820      	ldr	r0, [r4, #0]
 800951e:	bc30      	pop	{r4, r5}
 8009520:	f7ff bf70 	b.w	8009404 <_strtol_l.isra.0>
 8009524:	2000081c 	.word	0x2000081c

08009528 <memset>:
 8009528:	b4f0      	push	{r4, r5, r6, r7}
 800952a:	0786      	lsls	r6, r0, #30
 800952c:	d046      	beq.n	80095bc <memset+0x94>
 800952e:	1e54      	subs	r4, r2, #1
 8009530:	2a00      	cmp	r2, #0
 8009532:	d03c      	beq.n	80095ae <memset+0x86>
 8009534:	b2ca      	uxtb	r2, r1
 8009536:	4603      	mov	r3, r0
 8009538:	e001      	b.n	800953e <memset+0x16>
 800953a:	3c01      	subs	r4, #1
 800953c:	d337      	bcc.n	80095ae <memset+0x86>
 800953e:	f803 2b01 	strb.w	r2, [r3], #1
 8009542:	079d      	lsls	r5, r3, #30
 8009544:	d1f9      	bne.n	800953a <memset+0x12>
 8009546:	2c03      	cmp	r4, #3
 8009548:	d92a      	bls.n	80095a0 <memset+0x78>
 800954a:	b2cd      	uxtb	r5, r1
 800954c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8009550:	2c0f      	cmp	r4, #15
 8009552:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8009556:	d934      	bls.n	80095c2 <memset+0x9a>
 8009558:	f1a4 0210 	sub.w	r2, r4, #16
 800955c:	f022 0c0f 	bic.w	ip, r2, #15
 8009560:	f103 0720 	add.w	r7, r3, #32
 8009564:	0916      	lsrs	r6, r2, #4
 8009566:	4467      	add	r7, ip
 8009568:	f103 0210 	add.w	r2, r3, #16
 800956c:	e942 5504 	strd	r5, r5, [r2, #-16]
 8009570:	e942 5502 	strd	r5, r5, [r2, #-8]
 8009574:	3210      	adds	r2, #16
 8009576:	42ba      	cmp	r2, r7
 8009578:	d1f8      	bne.n	800956c <memset+0x44>
 800957a:	1c72      	adds	r2, r6, #1
 800957c:	f014 0f0c 	tst.w	r4, #12
 8009580:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8009584:	f004 060f 	and.w	r6, r4, #15
 8009588:	d013      	beq.n	80095b2 <memset+0x8a>
 800958a:	1f33      	subs	r3, r6, #4
 800958c:	f023 0303 	bic.w	r3, r3, #3
 8009590:	3304      	adds	r3, #4
 8009592:	4413      	add	r3, r2
 8009594:	f842 5b04 	str.w	r5, [r2], #4
 8009598:	4293      	cmp	r3, r2
 800959a:	d1fb      	bne.n	8009594 <memset+0x6c>
 800959c:	f006 0403 	and.w	r4, r6, #3
 80095a0:	b12c      	cbz	r4, 80095ae <memset+0x86>
 80095a2:	b2ca      	uxtb	r2, r1
 80095a4:	441c      	add	r4, r3
 80095a6:	f803 2b01 	strb.w	r2, [r3], #1
 80095aa:	429c      	cmp	r4, r3
 80095ac:	d1fb      	bne.n	80095a6 <memset+0x7e>
 80095ae:	bcf0      	pop	{r4, r5, r6, r7}
 80095b0:	4770      	bx	lr
 80095b2:	4634      	mov	r4, r6
 80095b4:	4613      	mov	r3, r2
 80095b6:	2c00      	cmp	r4, #0
 80095b8:	d1f3      	bne.n	80095a2 <memset+0x7a>
 80095ba:	e7f8      	b.n	80095ae <memset+0x86>
 80095bc:	4614      	mov	r4, r2
 80095be:	4603      	mov	r3, r0
 80095c0:	e7c1      	b.n	8009546 <memset+0x1e>
 80095c2:	461a      	mov	r2, r3
 80095c4:	4626      	mov	r6, r4
 80095c6:	e7e0      	b.n	800958a <memset+0x62>

080095c8 <strchr>:
 80095c8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80095cc:	4603      	mov	r3, r0
 80095ce:	d044      	beq.n	800965a <strchr+0x92>
 80095d0:	0782      	lsls	r2, r0, #30
 80095d2:	d132      	bne.n	800963a <strchr+0x72>
 80095d4:	b470      	push	{r4, r5, r6}
 80095d6:	6804      	ldr	r4, [r0, #0]
 80095d8:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 80095dc:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80095e0:	ea86 0504 	eor.w	r5, r6, r4
 80095e4:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 80095e8:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80095ec:	ea23 0305 	bic.w	r3, r3, r5
 80095f0:	ea22 0204 	bic.w	r2, r2, r4
 80095f4:	4313      	orrs	r3, r2
 80095f6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80095fa:	d10f      	bne.n	800961c <strchr+0x54>
 80095fc:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8009600:	ea84 0506 	eor.w	r5, r4, r6
 8009604:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 8009608:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 800960c:	ea22 0205 	bic.w	r2, r2, r5
 8009610:	ea23 0304 	bic.w	r3, r3, r4
 8009614:	4313      	orrs	r3, r2
 8009616:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800961a:	d0ef      	beq.n	80095fc <strchr+0x34>
 800961c:	7803      	ldrb	r3, [r0, #0]
 800961e:	b923      	cbnz	r3, 800962a <strchr+0x62>
 8009620:	e036      	b.n	8009690 <strchr+0xc8>
 8009622:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8009626:	2b00      	cmp	r3, #0
 8009628:	d032      	beq.n	8009690 <strchr+0xc8>
 800962a:	4299      	cmp	r1, r3
 800962c:	d1f9      	bne.n	8009622 <strchr+0x5a>
 800962e:	e030      	b.n	8009692 <strchr+0xca>
 8009630:	428a      	cmp	r2, r1
 8009632:	d011      	beq.n	8009658 <strchr+0x90>
 8009634:	079a      	lsls	r2, r3, #30
 8009636:	4618      	mov	r0, r3
 8009638:	d0cc      	beq.n	80095d4 <strchr+0xc>
 800963a:	4618      	mov	r0, r3
 800963c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009640:	2a00      	cmp	r2, #0
 8009642:	d1f5      	bne.n	8009630 <strchr+0x68>
 8009644:	4610      	mov	r0, r2
 8009646:	4770      	bx	lr
 8009648:	0799      	lsls	r1, r3, #30
 800964a:	4618      	mov	r0, r3
 800964c:	d007      	beq.n	800965e <strchr+0x96>
 800964e:	4618      	mov	r0, r3
 8009650:	3301      	adds	r3, #1
 8009652:	7802      	ldrb	r2, [r0, #0]
 8009654:	2a00      	cmp	r2, #0
 8009656:	d1f7      	bne.n	8009648 <strchr+0x80>
 8009658:	4770      	bx	lr
 800965a:	0782      	lsls	r2, r0, #30
 800965c:	d1f7      	bne.n	800964e <strchr+0x86>
 800965e:	6802      	ldr	r2, [r0, #0]
 8009660:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8009664:	ea23 0302 	bic.w	r3, r3, r2
 8009668:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800966c:	d108      	bne.n	8009680 <strchr+0xb8>
 800966e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8009672:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8009676:	ea23 0302 	bic.w	r3, r3, r2
 800967a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800967e:	d0f6      	beq.n	800966e <strchr+0xa6>
 8009680:	7803      	ldrb	r3, [r0, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0e8      	beq.n	8009658 <strchr+0x90>
 8009686:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1fb      	bne.n	8009686 <strchr+0xbe>
 800968e:	4770      	bx	lr
 8009690:	4618      	mov	r0, r3
 8009692:	bc70      	pop	{r4, r5, r6}
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop

08009698 <strpbrk>:
 8009698:	b430      	push	{r4, r5}
 800969a:	7804      	ldrb	r4, [r0, #0]
 800969c:	b1a4      	cbz	r4, 80096c8 <strpbrk+0x30>
 800969e:	780d      	ldrb	r5, [r1, #0]
 80096a0:	460a      	mov	r2, r1
 80096a2:	462b      	mov	r3, r5
 80096a4:	b91d      	cbnz	r5, 80096ae <strpbrk+0x16>
 80096a6:	e00a      	b.n	80096be <strpbrk+0x26>
 80096a8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80096ac:	b13b      	cbz	r3, 80096be <strpbrk+0x26>
 80096ae:	429c      	cmp	r4, r3
 80096b0:	d1fa      	bne.n	80096a8 <strpbrk+0x10>
 80096b2:	7813      	ldrb	r3, [r2, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	bf08      	it	eq
 80096b8:	2000      	moveq	r0, #0
 80096ba:	bc30      	pop	{r4, r5}
 80096bc:	4770      	bx	lr
 80096be:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80096c2:	2c00      	cmp	r4, #0
 80096c4:	d1ec      	bne.n	80096a0 <strpbrk+0x8>
 80096c6:	e7f4      	b.n	80096b2 <strpbrk+0x1a>
 80096c8:	4620      	mov	r0, r4
 80096ca:	bc30      	pop	{r4, r5}
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop

080096d0 <strspn>:
 80096d0:	b470      	push	{r4, r5, r6}
 80096d2:	7804      	ldrb	r4, [r0, #0]
 80096d4:	b18c      	cbz	r4, 80096fa <strspn+0x2a>
 80096d6:	780e      	ldrb	r6, [r1, #0]
 80096d8:	4605      	mov	r5, r0
 80096da:	b15e      	cbz	r6, 80096f4 <strspn+0x24>
 80096dc:	460a      	mov	r2, r1
 80096de:	4633      	mov	r3, r6
 80096e0:	e002      	b.n	80096e8 <strspn+0x18>
 80096e2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80096e6:	b12b      	cbz	r3, 80096f4 <strspn+0x24>
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	d1fa      	bne.n	80096e2 <strspn+0x12>
 80096ec:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80096f0:	2c00      	cmp	r4, #0
 80096f2:	d1f2      	bne.n	80096da <strspn+0xa>
 80096f4:	1a28      	subs	r0, r5, r0
 80096f6:	bc70      	pop	{r4, r5, r6}
 80096f8:	4770      	bx	lr
 80096fa:	4620      	mov	r0, r4
 80096fc:	e7fb      	b.n	80096f6 <strspn+0x26>
 80096fe:	bf00      	nop

08009700 <two_way_long_needle>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	2b01      	cmp	r3, #1
 8009706:	461d      	mov	r5, r3
 8009708:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 800970c:	4681      	mov	r9, r0
 800970e:	460f      	mov	r7, r1
 8009710:	4690      	mov	r8, r2
 8009712:	f04f 0301 	mov.w	r3, #1
 8009716:	f240 8144 	bls.w	80099a2 <two_way_long_needle+0x2a2>
 800971a:	4619      	mov	r1, r3
 800971c:	469c      	mov	ip, r3
 800971e:	2400      	movs	r4, #0
 8009720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009724:	e006      	b.n	8009734 <two_way_long_needle+0x34>
 8009726:	eba3 0c00 	sub.w	ip, r3, r0
 800972a:	461c      	mov	r4, r3
 800972c:	2101      	movs	r1, #1
 800972e:	1863      	adds	r3, r4, r1
 8009730:	429d      	cmp	r5, r3
 8009732:	d910      	bls.n	8009756 <two_way_long_needle+0x56>
 8009734:	eb08 0200 	add.w	r2, r8, r0
 8009738:	f818 6003 	ldrb.w	r6, [r8, r3]
 800973c:	5c52      	ldrb	r2, [r2, r1]
 800973e:	4296      	cmp	r6, r2
 8009740:	d3f1      	bcc.n	8009726 <two_way_long_needle+0x26>
 8009742:	f000 8082 	beq.w	800984a <two_way_long_needle+0x14a>
 8009746:	f04f 0c01 	mov.w	ip, #1
 800974a:	4661      	mov	r1, ip
 800974c:	4620      	mov	r0, r4
 800974e:	4464      	add	r4, ip
 8009750:	1863      	adds	r3, r4, r1
 8009752:	429d      	cmp	r5, r3
 8009754:	d8ee      	bhi.n	8009734 <two_way_long_needle+0x34>
 8009756:	f8cd c008 	str.w	ip, [sp, #8]
 800975a:	f04f 0c01 	mov.w	ip, #1
 800975e:	4661      	mov	r1, ip
 8009760:	4663      	mov	r3, ip
 8009762:	2400      	movs	r4, #0
 8009764:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009768:	e006      	b.n	8009778 <two_way_long_needle+0x78>
 800976a:	eba3 0c06 	sub.w	ip, r3, r6
 800976e:	461c      	mov	r4, r3
 8009770:	2101      	movs	r1, #1
 8009772:	1863      	adds	r3, r4, r1
 8009774:	429d      	cmp	r5, r3
 8009776:	d90f      	bls.n	8009798 <two_way_long_needle+0x98>
 8009778:	eb08 0201 	add.w	r2, r8, r1
 800977c:	f818 e003 	ldrb.w	lr, [r8, r3]
 8009780:	5d92      	ldrb	r2, [r2, r6]
 8009782:	4596      	cmp	lr, r2
 8009784:	d8f1      	bhi.n	800976a <two_way_long_needle+0x6a>
 8009786:	d066      	beq.n	8009856 <two_way_long_needle+0x156>
 8009788:	f04f 0c01 	mov.w	ip, #1
 800978c:	4661      	mov	r1, ip
 800978e:	4626      	mov	r6, r4
 8009790:	4464      	add	r4, ip
 8009792:	1863      	adds	r3, r4, r1
 8009794:	429d      	cmp	r5, r3
 8009796:	d8ef      	bhi.n	8009778 <two_way_long_needle+0x78>
 8009798:	3601      	adds	r6, #1
 800979a:	f100 0b01 	add.w	fp, r0, #1
 800979e:	455e      	cmp	r6, fp
 80097a0:	d302      	bcc.n	80097a8 <two_way_long_needle+0xa8>
 80097a2:	f8cd c008 	str.w	ip, [sp, #8]
 80097a6:	46b3      	mov	fp, r6
 80097a8:	ab05      	add	r3, sp, #20
 80097aa:	f20d 4214 	addw	r2, sp, #1044	; 0x414
 80097ae:	f843 5f04 	str.w	r5, [r3, #4]!
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d1fb      	bne.n	80097ae <two_way_long_needle+0xae>
 80097b6:	2d00      	cmp	r5, #0
 80097b8:	f000 80f7 	beq.w	80099aa <two_way_long_needle+0x2aa>
 80097bc:	1e6c      	subs	r4, r5, #1
 80097be:	ae06      	add	r6, sp, #24
 80097c0:	eb08 0004 	add.w	r0, r8, r4
 80097c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80097c8:	9601      	str	r6, [sp, #4]
 80097ca:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80097ce:	43d3      	mvns	r3, r2
 80097d0:	442b      	add	r3, r5
 80097d2:	4443      	add	r3, r8
 80097d4:	4290      	cmp	r0, r2
 80097d6:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
 80097da:	d1f6      	bne.n	80097ca <two_way_long_needle+0xca>
 80097dc:	9b02      	ldr	r3, [sp, #8]
 80097de:	465a      	mov	r2, fp
 80097e0:	eb08 0103 	add.w	r1, r8, r3
 80097e4:	4640      	mov	r0, r8
 80097e6:	f000 f997 	bl	8009b18 <memcmp>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	f040 8081 	bne.w	80098f2 <two_way_long_needle+0x1f2>
 80097f0:	9b02      	ldr	r3, [sp, #8]
 80097f2:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80097f6:	1aeb      	subs	r3, r5, r3
 80097f8:	4682      	mov	sl, r0
 80097fa:	4606      	mov	r6, r0
 80097fc:	9205      	str	r2, [sp, #20]
 80097fe:	9303      	str	r3, [sp, #12]
 8009800:	eb09 0e06 	add.w	lr, r9, r6
 8009804:	9a01      	ldr	r2, [sp, #4]
 8009806:	f81e 3004 	ldrb.w	r3, [lr, r4]
 800980a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800980e:	b343      	cbz	r3, 8009862 <two_way_long_needle+0x162>
 8009810:	f1ba 0f00 	cmp.w	sl, #0
 8009814:	d004      	beq.n	8009820 <two_way_long_needle+0x120>
 8009816:	9a02      	ldr	r2, [sp, #8]
 8009818:	4293      	cmp	r3, r2
 800981a:	9a03      	ldr	r2, [sp, #12]
 800981c:	bf38      	it	cc
 800981e:	4613      	movcc	r3, r2
 8009820:	441e      	add	r6, r3
 8009822:	f04f 0a00 	mov.w	sl, #0
 8009826:	1b7b      	subs	r3, r7, r5
 8009828:	42b3      	cmp	r3, r6
 800982a:	d2e9      	bcs.n	8009800 <two_way_long_needle+0x100>
 800982c:	eb09 0007 	add.w	r0, r9, r7
 8009830:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
 8009834:	f000 f9a0 	bl	8009b78 <strnlen>
 8009838:	4407      	add	r7, r0
 800983a:	1b7b      	subs	r3, r7, r5
 800983c:	42b3      	cmp	r3, r6
 800983e:	d2df      	bcs.n	8009800 <two_way_long_needle+0x100>
 8009840:	2000      	movs	r0, #0
 8009842:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 8009846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984a:	458c      	cmp	ip, r1
 800984c:	bf12      	itee	ne
 800984e:	3101      	addne	r1, #1
 8009850:	4464      	addeq	r4, ip
 8009852:	2101      	moveq	r1, #1
 8009854:	e76b      	b.n	800972e <two_way_long_needle+0x2e>
 8009856:	4561      	cmp	r1, ip
 8009858:	bf0a      	itet	eq
 800985a:	1864      	addeq	r4, r4, r1
 800985c:	3101      	addne	r1, #1
 800985e:	2101      	moveq	r1, #1
 8009860:	e787      	b.n	8009772 <two_way_long_needle+0x72>
 8009862:	45d3      	cmp	fp, sl
 8009864:	465b      	mov	r3, fp
 8009866:	bf38      	it	cc
 8009868:	4653      	movcc	r3, sl
 800986a:	42a3      	cmp	r3, r4
 800986c:	d211      	bcs.n	8009892 <two_way_long_needle+0x192>
 800986e:	1e59      	subs	r1, r3, #1
 8009870:	199a      	adds	r2, r3, r6
 8009872:	4441      	add	r1, r8
 8009874:	444a      	add	r2, r9
 8009876:	e002      	b.n	800987e <two_way_long_needle+0x17e>
 8009878:	3301      	adds	r3, #1
 800987a:	42a3      	cmp	r3, r4
 800987c:	d209      	bcs.n	8009892 <two_way_long_needle+0x192>
 800987e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8009882:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8009886:	4584      	cmp	ip, r0
 8009888:	d0f6      	beq.n	8009878 <two_way_long_needle+0x178>
 800988a:	f1cb 0201 	rsb	r2, fp, #1
 800988e:	4416      	add	r6, r2
 8009890:	e7c6      	b.n	8009820 <two_way_long_needle+0x120>
 8009892:	45d3      	cmp	fp, sl
 8009894:	9b05      	ldr	r3, [sp, #20]
 8009896:	d97d      	bls.n	8009994 <two_way_long_needle+0x294>
 8009898:	eb0b 0206 	add.w	r2, fp, r6
 800989c:	444a      	add	r2, r9
 800989e:	eb08 010b 	add.w	r1, r8, fp
 80098a2:	f8cd b010 	str.w	fp, [sp, #16]
 80098a6:	e002      	b.n	80098ae <two_way_long_needle+0x1ae>
 80098a8:	4553      	cmp	r3, sl
 80098aa:	d016      	beq.n	80098da <two_way_long_needle+0x1da>
 80098ac:	4603      	mov	r3, r0
 80098ae:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 80098b2:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 80098b6:	4584      	cmp	ip, r0
 80098b8:	f103 0b01 	add.w	fp, r3, #1
 80098bc:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80098c0:	d0f2      	beq.n	80098a8 <two_way_long_needle+0x1a8>
 80098c2:	465b      	mov	r3, fp
 80098c4:	f8dd b010 	ldr.w	fp, [sp, #16]
 80098c8:	f10a 0a01 	add.w	sl, sl, #1
 80098cc:	459a      	cmp	sl, r3
 80098ce:	d80b      	bhi.n	80098e8 <two_way_long_needle+0x1e8>
 80098d0:	9b02      	ldr	r3, [sp, #8]
 80098d2:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80098d6:	441e      	add	r6, r3
 80098d8:	e7a5      	b.n	8009826 <two_way_long_needle+0x126>
 80098da:	4653      	mov	r3, sl
 80098dc:	f10a 0a01 	add.w	sl, sl, #1
 80098e0:	459a      	cmp	sl, r3
 80098e2:	f8dd b010 	ldr.w	fp, [sp, #16]
 80098e6:	d9f3      	bls.n	80098d0 <two_way_long_needle+0x1d0>
 80098e8:	4670      	mov	r0, lr
 80098ea:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 80098ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f2:	eba5 030b 	sub.w	r3, r5, fp
 80098f6:	455b      	cmp	r3, fp
 80098f8:	bf38      	it	cc
 80098fa:	465b      	movcc	r3, fp
 80098fc:	3301      	adds	r3, #1
 80098fe:	9304      	str	r3, [sp, #16]
 8009900:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8009904:	9302      	str	r3, [sp, #8]
 8009906:	f1cb 0301 	rsb	r3, fp, #1
 800990a:	2600      	movs	r6, #0
 800990c:	9303      	str	r3, [sp, #12]
 800990e:	f445 6a00 	orr.w	sl, r5, #2048	; 0x800
 8009912:	eb09 0e06 	add.w	lr, r9, r6
 8009916:	9a01      	ldr	r2, [sp, #4]
 8009918:	f81e 3004 	ldrb.w	r3, [lr, r4]
 800991c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009920:	b16b      	cbz	r3, 800993e <two_way_long_needle+0x23e>
 8009922:	441e      	add	r6, r3
 8009924:	1b7b      	subs	r3, r7, r5
 8009926:	429e      	cmp	r6, r3
 8009928:	d9f3      	bls.n	8009912 <two_way_long_needle+0x212>
 800992a:	eb09 0007 	add.w	r0, r9, r7
 800992e:	4651      	mov	r1, sl
 8009930:	f000 f922 	bl	8009b78 <strnlen>
 8009934:	4407      	add	r7, r0
 8009936:	1b7b      	subs	r3, r7, r5
 8009938:	429e      	cmp	r6, r3
 800993a:	d9ea      	bls.n	8009912 <two_way_long_needle+0x212>
 800993c:	e780      	b.n	8009840 <two_way_long_needle+0x140>
 800993e:	45a3      	cmp	fp, r4
 8009940:	d214      	bcs.n	800996c <two_way_long_needle+0x26c>
 8009942:	9b02      	ldr	r3, [sp, #8]
 8009944:	eb0b 0206 	add.w	r2, fp, r6
 8009948:	eb08 0103 	add.w	r1, r8, r3
 800994c:	444a      	add	r2, r9
 800994e:	465b      	mov	r3, fp
 8009950:	e002      	b.n	8009958 <two_way_long_needle+0x258>
 8009952:	3301      	adds	r3, #1
 8009954:	42a3      	cmp	r3, r4
 8009956:	d209      	bcs.n	800996c <two_way_long_needle+0x26c>
 8009958:	f812 0b01 	ldrb.w	r0, [r2], #1
 800995c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8009960:	4584      	cmp	ip, r0
 8009962:	d0f6      	beq.n	8009952 <two_way_long_needle+0x252>
 8009964:	9a03      	ldr	r2, [sp, #12]
 8009966:	4416      	add	r6, r2
 8009968:	441e      	add	r6, r3
 800996a:	e7db      	b.n	8009924 <two_way_long_needle+0x224>
 800996c:	f1bb 0f00 	cmp.w	fp, #0
 8009970:	d012      	beq.n	8009998 <two_way_long_needle+0x298>
 8009972:	eb0b 0106 	add.w	r1, fp, r6
 8009976:	4449      	add	r1, r9
 8009978:	eb08 020b 	add.w	r2, r8, fp
 800997c:	e001      	b.n	8009982 <two_way_long_needle+0x282>
 800997e:	4543      	cmp	r3, r8
 8009980:	d00a      	beq.n	8009998 <two_way_long_needle+0x298>
 8009982:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
 8009986:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 800998a:	4584      	cmp	ip, r0
 800998c:	4613      	mov	r3, r2
 800998e:	d0f6      	beq.n	800997e <two_way_long_needle+0x27e>
 8009990:	9b04      	ldr	r3, [sp, #16]
 8009992:	e7c6      	b.n	8009922 <two_way_long_needle+0x222>
 8009994:	465b      	mov	r3, fp
 8009996:	e797      	b.n	80098c8 <two_way_long_needle+0x1c8>
 8009998:	4670      	mov	r0, lr
 800999a:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 800999e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a2:	9302      	str	r3, [sp, #8]
 80099a4:	f04f 0b00 	mov.w	fp, #0
 80099a8:	e6fe      	b.n	80097a8 <two_way_long_needle+0xa8>
 80099aa:	ab06      	add	r3, sp, #24
 80099ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80099b0:	9301      	str	r3, [sp, #4]
 80099b2:	e713      	b.n	80097dc <two_way_long_needle+0xdc>

080099b4 <strstr>:
 80099b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b8:	460e      	mov	r6, r1
 80099ba:	7809      	ldrb	r1, [r1, #0]
 80099bc:	b090      	sub	sp, #64	; 0x40
 80099be:	4604      	mov	r4, r0
 80099c0:	2900      	cmp	r1, #0
 80099c2:	d050      	beq.n	8009a66 <strstr+0xb2>
 80099c4:	7872      	ldrb	r2, [r6, #1]
 80099c6:	2a00      	cmp	r2, #0
 80099c8:	f000 8082 	beq.w	8009ad0 <strstr+0x11c>
 80099cc:	78b3      	ldrb	r3, [r6, #2]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d04d      	beq.n	8009a6e <strstr+0xba>
 80099d2:	78f0      	ldrb	r0, [r6, #3]
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f000 8082 	beq.w	8009ade <strstr+0x12a>
 80099da:	7933      	ldrb	r3, [r6, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d054      	beq.n	8009a8a <strstr+0xd6>
 80099e0:	4630      	mov	r0, r6
 80099e2:	f7f6 fead 	bl	8000740 <strlen>
 80099e6:	4607      	mov	r7, r0
 80099e8:	f440 7100 	orr.w	r1, r0, #512	; 0x200
 80099ec:	4620      	mov	r0, r4
 80099ee:	f000 f8c3 	bl	8009b78 <strnlen>
 80099f2:	4287      	cmp	r7, r0
 80099f4:	d867      	bhi.n	8009ac6 <strstr+0x112>
 80099f6:	2ffe      	cmp	r7, #254	; 0xfe
 80099f8:	f200 8085 	bhi.w	8009b06 <strstr+0x152>
 80099fc:	eba0 0807 	sub.w	r8, r0, r7
 8009a00:	2240      	movs	r2, #64	; 0x40
 8009a02:	1c79      	adds	r1, r7, #1
 8009a04:	4668      	mov	r0, sp
 8009a06:	44a0      	add	r8, r4
 8009a08:	f7ff fd8e 	bl	8009528 <memset>
 8009a0c:	b177      	cbz	r7, 8009a2c <strstr+0x78>
 8009a0e:	1e72      	subs	r2, r6, #1
 8009a10:	19d5      	adds	r5, r2, r7
 8009a12:	b2f8      	uxtb	r0, r7
 8009a14:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009a18:	a910      	add	r1, sp, #64	; 0x40
 8009a1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a1e:	440b      	add	r3, r1
 8009a20:	1ab1      	subs	r1, r6, r2
 8009a22:	4401      	add	r1, r0
 8009a24:	42aa      	cmp	r2, r5
 8009a26:	f803 1c40 	strb.w	r1, [r3, #-64]
 8009a2a:	d1f3      	bne.n	8009a14 <strstr+0x60>
 8009a2c:	3c01      	subs	r4, #1
 8009a2e:	aa10      	add	r2, sp, #64	; 0x40
 8009a30:	5de3      	ldrb	r3, [r4, r7]
 8009a32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a36:	4413      	add	r3, r2
 8009a38:	f813 0c40 	ldrb.w	r0, [r3, #-64]
 8009a3c:	4404      	add	r4, r0
 8009a3e:	45a0      	cmp	r8, r4
 8009a40:	d203      	bcs.n	8009a4a <strstr+0x96>
 8009a42:	e034      	b.n	8009aae <strstr+0xfa>
 8009a44:	442c      	add	r4, r5
 8009a46:	45a0      	cmp	r8, r4
 8009a48:	d331      	bcc.n	8009aae <strstr+0xfa>
 8009a4a:	5de5      	ldrb	r5, [r4, r7]
 8009a4c:	ab10      	add	r3, sp, #64	; 0x40
 8009a4e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8009a52:	441d      	add	r5, r3
 8009a54:	463a      	mov	r2, r7
 8009a56:	4631      	mov	r1, r6
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f815 5c40 	ldrb.w	r5, [r5, #-64]
 8009a5e:	f000 f85b 	bl	8009b18 <memcmp>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d1ee      	bne.n	8009a44 <strstr+0x90>
 8009a66:	4620      	mov	r0, r4
 8009a68:	b010      	add	sp, #64	; 0x40
 8009a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a6e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8009a72:	7802      	ldrb	r2, [r0, #0]
 8009a74:	e000      	b.n	8009a78 <strstr+0xc4>
 8009a76:	4604      	mov	r4, r0
 8009a78:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8009a7c:	1c60      	adds	r0, r4, #1
 8009a7e:	b312      	cbz	r2, 8009ac6 <strstr+0x112>
 8009a80:	4299      	cmp	r1, r3
 8009a82:	7862      	ldrb	r2, [r4, #1]
 8009a84:	d1f7      	bne.n	8009a76 <strstr+0xc2>
 8009a86:	3c01      	subs	r4, #1
 8009a88:	e7ed      	b.n	8009a66 <strstr+0xb2>
 8009a8a:	7822      	ldrb	r2, [r4, #0]
 8009a8c:	b1da      	cbz	r2, 8009ac6 <strstr+0x112>
 8009a8e:	6831      	ldr	r1, [r6, #0]
 8009a90:	ba09      	rev	r1, r1
 8009a92:	e001      	b.n	8009a98 <strstr+0xe4>
 8009a94:	4299      	cmp	r1, r3
 8009a96:	d008      	beq.n	8009aaa <strstr+0xf6>
 8009a98:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8009aa2:	2a00      	cmp	r2, #0
 8009aa4:	d1f6      	bne.n	8009a94 <strstr+0xe0>
 8009aa6:	4299      	cmp	r1, r3
 8009aa8:	d10d      	bne.n	8009ac6 <strstr+0x112>
 8009aaa:	1ec4      	subs	r4, r0, #3
 8009aac:	e7db      	b.n	8009a66 <strstr+0xb2>
 8009aae:	f818 3007 	ldrb.w	r3, [r8, r7]
 8009ab2:	eb08 0007 	add.w	r0, r8, r7
 8009ab6:	b133      	cbz	r3, 8009ac6 <strstr+0x112>
 8009ab8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009abc:	f000 f85c 	bl	8009b78 <strnlen>
 8009ac0:	4480      	add	r8, r0
 8009ac2:	4544      	cmp	r4, r8
 8009ac4:	d9b2      	bls.n	8009a2c <strstr+0x78>
 8009ac6:	2400      	movs	r4, #0
 8009ac8:	4620      	mov	r0, r4
 8009aca:	b010      	add	sp, #64	; 0x40
 8009acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad0:	f7ff fd7a 	bl	80095c8 <strchr>
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	b010      	add	sp, #64	; 0x40
 8009ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ade:	0412      	lsls	r2, r2, #16
 8009ae0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009ae4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8009ae8:	7822      	ldrb	r2, [r4, #0]
 8009aea:	e000      	b.n	8009aee <strstr+0x13a>
 8009aec:	462c      	mov	r4, r5
 8009aee:	ea42 0100 	orr.w	r1, r2, r0
 8009af2:	1c65      	adds	r5, r4, #1
 8009af4:	0208      	lsls	r0, r1, #8
 8009af6:	2a00      	cmp	r2, #0
 8009af8:	d0e5      	beq.n	8009ac6 <strstr+0x112>
 8009afa:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 8009afe:	7862      	ldrb	r2, [r4, #1]
 8009b00:	d1f4      	bne.n	8009aec <strstr+0x138>
 8009b02:	3c02      	subs	r4, #2
 8009b04:	e7af      	b.n	8009a66 <strstr+0xb2>
 8009b06:	4601      	mov	r1, r0
 8009b08:	463b      	mov	r3, r7
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	4632      	mov	r2, r6
 8009b0e:	f7ff fdf7 	bl	8009700 <two_way_long_needle>
 8009b12:	4604      	mov	r4, r0
 8009b14:	e7a7      	b.n	8009a66 <strstr+0xb2>
 8009b16:	bf00      	nop

08009b18 <memcmp>:
 8009b18:	2a03      	cmp	r2, #3
 8009b1a:	b470      	push	{r4, r5, r6}
 8009b1c:	d912      	bls.n	8009b44 <memcmp+0x2c>
 8009b1e:	ea40 0501 	orr.w	r5, r0, r1
 8009b22:	07ad      	lsls	r5, r5, #30
 8009b24:	4604      	mov	r4, r0
 8009b26:	460b      	mov	r3, r1
 8009b28:	d11e      	bne.n	8009b68 <memcmp+0x50>
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b32:	f854 6b04 	ldr.w	r6, [r4], #4
 8009b36:	42ae      	cmp	r6, r5
 8009b38:	d116      	bne.n	8009b68 <memcmp+0x50>
 8009b3a:	3a04      	subs	r2, #4
 8009b3c:	2a03      	cmp	r2, #3
 8009b3e:	4620      	mov	r0, r4
 8009b40:	4619      	mov	r1, r3
 8009b42:	d8f2      	bhi.n	8009b2a <memcmp+0x12>
 8009b44:	1e56      	subs	r6, r2, #1
 8009b46:	b1a2      	cbz	r2, 8009b72 <memcmp+0x5a>
 8009b48:	3901      	subs	r1, #1
 8009b4a:	1e44      	subs	r4, r0, #1
 8009b4c:	e001      	b.n	8009b52 <memcmp+0x3a>
 8009b4e:	18c3      	adds	r3, r0, r3
 8009b50:	d00c      	beq.n	8009b6c <memcmp+0x54>
 8009b52:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8009b56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b5a:	4295      	cmp	r5, r2
 8009b5c:	eba6 0304 	sub.w	r3, r6, r4
 8009b60:	d0f5      	beq.n	8009b4e <memcmp+0x36>
 8009b62:	1aa8      	subs	r0, r5, r2
 8009b64:	bc70      	pop	{r4, r5, r6}
 8009b66:	4770      	bx	lr
 8009b68:	1e56      	subs	r6, r2, #1
 8009b6a:	e7ed      	b.n	8009b48 <memcmp+0x30>
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	bc70      	pop	{r4, r5, r6}
 8009b70:	4770      	bx	lr
 8009b72:	4610      	mov	r0, r2
 8009b74:	e7f6      	b.n	8009b64 <memcmp+0x4c>
 8009b76:	bf00      	nop

08009b78 <strnlen>:
 8009b78:	b181      	cbz	r1, 8009b9c <strnlen+0x24>
 8009b7a:	b410      	push	{r4}
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	1844      	adds	r4, r0, r1
 8009b80:	e001      	b.n	8009b86 <strnlen+0xe>
 8009b82:	42a3      	cmp	r3, r4
 8009b84:	d007      	beq.n	8009b96 <strnlen+0x1e>
 8009b86:	461a      	mov	r2, r3
 8009b88:	3301      	adds	r3, #1
 8009b8a:	7811      	ldrb	r1, [r2, #0]
 8009b8c:	2900      	cmp	r1, #0
 8009b8e:	d1f8      	bne.n	8009b82 <strnlen+0xa>
 8009b90:	1a10      	subs	r0, r2, r0
 8009b92:	bc10      	pop	{r4}
 8009b94:	4770      	bx	lr
 8009b96:	1a18      	subs	r0, r3, r0
 8009b98:	bc10      	pop	{r4}
 8009b9a:	4770      	bx	lr
 8009b9c:	4608      	mov	r0, r1
 8009b9e:	4770      	bx	lr
