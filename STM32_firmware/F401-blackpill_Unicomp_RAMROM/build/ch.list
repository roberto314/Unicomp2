
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002d9 	.word	0x080002d9
 8000008:	080002db 	.word	0x080002db
 800000c:	080002db 	.word	0x080002db
 8000010:	080002db 	.word	0x080002db
 8000014:	080002db 	.word	0x080002db
 8000018:	080002db 	.word	0x080002db
 800001c:	080002db 	.word	0x080002db
 8000020:	080002db 	.word	0x080002db
 8000024:	080002db 	.word	0x080002db
 8000028:	080002db 	.word	0x080002db
 800002c:	080070b1 	.word	0x080070b1
 8000030:	080002db 	.word	0x080002db
 8000034:	080002db 	.word	0x080002db
 8000038:	080002db 	.word	0x080002db
 800003c:	080002db 	.word	0x080002db
 8000040:	080002db 	.word	0x080002db
 8000044:	080002db 	.word	0x080002db
 8000048:	080002db 	.word	0x080002db
 800004c:	080002db 	.word	0x080002db
 8000050:	080002db 	.word	0x080002db
 8000054:	080002db 	.word	0x080002db
 8000058:	080002db 	.word	0x080002db
 800005c:	080002db 	.word	0x080002db
 8000060:	080002db 	.word	0x080002db
 8000064:	080002db 	.word	0x080002db
 8000068:	080002db 	.word	0x080002db
 800006c:	08008ab1 	.word	0x08008ab1
 8000070:	08008a81 	.word	0x08008a81
 8000074:	08008a51 	.word	0x08008a51
 8000078:	08008a21 	.word	0x08008a21
 800007c:	080089f1 	.word	0x080089f1
 8000080:	080089c1 	.word	0x080089c1
 8000084:	08008991 	.word	0x08008991
 8000088:	080002db 	.word	0x080002db
 800008c:	080002db 	.word	0x080002db
 8000090:	080002db 	.word	0x080002db
 8000094:	080002db 	.word	0x080002db
 8000098:	080002db 	.word	0x080002db
 800009c:	080002db 	.word	0x080002db
 80000a0:	080002db 	.word	0x080002db
 80000a4:	080002db 	.word	0x080002db
 80000a8:	080002db 	.word	0x080002db
 80000ac:	080002db 	.word	0x080002db
 80000b0:	080080d1 	.word	0x080080d1
 80000b4:	080002db 	.word	0x080002db
 80000b8:	080002db 	.word	0x080002db
 80000bc:	080086b1 	.word	0x080086b1
 80000c0:	080085c1 	.word	0x080085c1
 80000c4:	080002db 	.word	0x080002db
 80000c8:	080002db 	.word	0x080002db
 80000cc:	080002db 	.word	0x080002db
 80000d0:	080002db 	.word	0x080002db
 80000d4:	08008061 	.word	0x08008061
 80000d8:	08008041 	.word	0x08008041
 80000dc:	080002db 	.word	0x080002db
 80000e0:	080002db 	.word	0x080002db
 80000e4:	080002db 	.word	0x080002db
 80000e8:	080002db 	.word	0x080002db
 80000ec:	080002db 	.word	0x080002db
 80000f0:	080002db 	.word	0x080002db
 80000f4:	080002db 	.word	0x080002db
 80000f8:	080002db 	.word	0x080002db
 80000fc:	08008961 	.word	0x08008961
 8000100:	080002db 	.word	0x080002db
 8000104:	080002db 	.word	0x080002db
 8000108:	08008081 	.word	0x08008081
 800010c:	080002db 	.word	0x080002db
 8000110:	080002db 	.word	0x080002db
 8000114:	080002db 	.word	0x080002db
 8000118:	080002db 	.word	0x080002db
 800011c:	080002db 	.word	0x080002db
 8000120:	08008931 	.word	0x08008931
 8000124:	08008901 	.word	0x08008901
 8000128:	080088d1 	.word	0x080088d1
 800012c:	080088a1 	.word	0x080088a1
 8000130:	08008871 	.word	0x08008871
 8000134:	080002db 	.word	0x080002db
 8000138:	080002db 	.word	0x080002db
 800013c:	080002db 	.word	0x080002db
 8000140:	080002db 	.word	0x080002db
 8000144:	080002db 	.word	0x080002db
 8000148:	080002db 	.word	0x080002db
 800014c:	08008191 	.word	0x08008191
 8000150:	08008841 	.word	0x08008841
 8000154:	08008811 	.word	0x08008811
 8000158:	080087e1 	.word	0x080087e1
 800015c:	08008021 	.word	0x08008021
 8000160:	080002db 	.word	0x080002db
 8000164:	080002db 	.word	0x080002db
 8000168:	080002db 	.word	0x080002db
 800016c:	080002db 	.word	0x080002db
 8000170:	080002db 	.word	0x080002db
 8000174:	080002db 	.word	0x080002db
 8000178:	080002db 	.word	0x080002db
 800017c:	080002db 	.word	0x080002db
 8000180:	080002db 	.word	0x080002db
 8000184:	080002db 	.word	0x080002db
 8000188:	080002db 	.word	0x080002db
 800018c:	080002db 	.word	0x080002db
 8000190:	080002db 	.word	0x080002db
 8000194:	080002db 	.word	0x080002db
 8000198:	080002db 	.word	0x080002db
 800019c:	080002db 	.word	0x080002db
 80001a0:	080002db 	.word	0x080002db
 80001a4:	080002db 	.word	0x080002db
 80001a8:	080002db 	.word	0x080002db
 80001ac:	080002db 	.word	0x080002db
 80001b0:	080002db 	.word	0x080002db
 80001b4:	080002db 	.word	0x080002db
 80001b8:	080002db 	.word	0x080002db
 80001bc:	080002db 	.word	0x080002db
 80001c0:	080002db 	.word	0x080002db
 80001c4:	080002db 	.word	0x080002db
 80001c8:	080002db 	.word	0x080002db
 80001cc:	080002db 	.word	0x080002db
 80001d0:	080002db 	.word	0x080002db
 80001d4:	080002db 	.word	0x080002db
 80001d8:	080002db 	.word	0x080002db
 80001dc:	080002db 	.word	0x080002db

Disassembly of section .text:

08000200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000202:	4827      	ldr	r0, [pc, #156]	; (80002a0 <endfiniloop+0x4>)
                msr     MSP, r0
 8000204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <endfiniloop+0x8>)
                msr     PSP, r0
 800020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800020e:	4826      	ldr	r0, [pc, #152]	; (80002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800021c:	f380 8814 	msr	CONTROL, r0
                isb
 8000220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000224:	f008 fca4 	bl	8008b70 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000228:	f007 fe02 	bl	8007e30 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000230:	491e      	ldr	r1, [pc, #120]	; (80002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <endfiniloop+0x4>)

08000234 <msloop>:
msloop:
                cmp     r1, r2
 8000234:	4291      	cmp	r1, r2
                itt     lo
 8000236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800023c:	e7fa      	bcc.n	8000234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <endfiniloop+0x8>)

08000242 <psloop>:
psloop:
                cmp     r1, r2
 8000242:	4291      	cmp	r1, r2
                itt     lo
 8000244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800024a:	e7fa      	bcc.n	8000242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800024c:	4919      	ldr	r1, [pc, #100]	; (80002b4 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <endfiniloop+0x20>)

08000252 <dloop>:
dloop:
                cmp     r2, r3
 8000252:	429a      	cmp	r2, r3
                ittt    lo
 8000254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800025e:	e7f8      	bcc.n	8000252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000260:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000262:	4917      	ldr	r1, [pc, #92]	; (80002c0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <endfiniloop+0x28>)

08000266 <bloop>:
bloop:
                cmp     r1, r2
 8000266:	4291      	cmp	r1, r2
                itt     lo
 8000268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800026e:	e7fa      	bcc.n	8000266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000270:	f008 fc36 	bl	8008ae0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000274:	f008 fc74 	bl	8008b60 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000278:	4c13      	ldr	r4, [pc, #76]	; (80002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800027a:	4d14      	ldr	r5, [pc, #80]	; (80002cc <endfiniloop+0x30>)

0800027c <initloop>:
initloop:
                cmp     r4, r5
 800027c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800027e:	da03      	bge.n	8000288 <endinitloop>
                ldr     r1, [r4], #4
 8000280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000284:	4788      	blx	r1
                b       initloop
 8000286:	e7f9      	b.n	800027c <initloop>

08000288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000288:	f007 f802 	bl	8007290 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800028c:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800028e:	4d11      	ldr	r5, [pc, #68]	; (80002d4 <endfiniloop+0x38>)

08000290 <finiloop>:
finiloop:
                cmp     r4, r5
 8000290:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000292:	da03      	bge.n	800029c <endfiniloop>
                ldr     r1, [r4], #4
 8000294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000298:	4788      	blx	r1
                b       finiloop
 800029a:	e7f9      	b.n	8000290 <finiloop>

0800029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800029c:	f008 bc58 	b.w	8008b50 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002a8:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002b0:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002b4:	08009d0c 	.word	0x08009d0c
                ldr     r2, =__data_base__
 80002b8:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002bc:	20000c48 	.word	0x20000c48
                ldr     r1, =__bss_base__
 80002c0:	20000c48 	.word	0x20000c48
                ldr     r2, =__bss_end__
 80002c4:	2000204c 	.word	0x2000204c
                ldr     r4, =__init_array_base__
 80002c8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002cc:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002d0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002d4:	080001e0 	.word	0x080001e0

080002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002d8:	e792      	b.n	8000200 <_crt0_entry>

080002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002da:	f000 f800 	bl	80002de <_unhandled_exception>

080002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002de:	e7fe      	b.n	80002de <_unhandled_exception>

080002e0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002e4:	f8c1 d014 	str.w	sp, [r1, #20]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002e8:	6943      	ldr	r3, [r0, #20]
                mov     sp, r3
 80002ea:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002f0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002f0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002f2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002f6:	4628      	mov	r0, r5
                blx     r4
 80002f8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002fa:	2000      	movs	r0, #0
                bl      chThdExit
 80002fc:	f006 fee8 	bl	80070d0 <chThdExit>

08000300 <_zombies>:
_zombies:       b       _zombies
 8000300:	e7fe      	b.n	8000300 <_zombies>

08000302 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000302:	f006 feed 	bl	80070e0 <chSchDoReschedule>

08000306 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000306:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000308:	e7fe      	b.n	8000308 <_port_exit_from_isr+0x2>
	...

0800030c <memcpy>:
 800030c:	4684      	mov	ip, r0
 800030e:	ea41 0300 	orr.w	r3, r1, r0
 8000312:	f013 0303 	ands.w	r3, r3, #3
 8000316:	d16d      	bne.n	80003f4 <memcpy+0xe8>
 8000318:	3a40      	subs	r2, #64	; 0x40
 800031a:	d341      	bcc.n	80003a0 <memcpy+0x94>
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	3a40      	subs	r2, #64	; 0x40
 800039e:	d2bd      	bcs.n	800031c <memcpy+0x10>
 80003a0:	3230      	adds	r2, #48	; 0x30
 80003a2:	d311      	bcc.n	80003c8 <memcpy+0xbc>
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	3a10      	subs	r2, #16
 80003c6:	d2ed      	bcs.n	80003a4 <memcpy+0x98>
 80003c8:	320c      	adds	r2, #12
 80003ca:	d305      	bcc.n	80003d8 <memcpy+0xcc>
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	3a04      	subs	r2, #4
 80003d6:	d2f9      	bcs.n	80003cc <memcpy+0xc0>
 80003d8:	3204      	adds	r2, #4
 80003da:	d008      	beq.n	80003ee <memcpy+0xe2>
 80003dc:	07d2      	lsls	r2, r2, #31
 80003de:	bf1c      	itt	ne
 80003e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003e4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003e8:	d301      	bcc.n	80003ee <memcpy+0xe2>
 80003ea:	880b      	ldrh	r3, [r1, #0]
 80003ec:	8003      	strh	r3, [r0, #0]
 80003ee:	4660      	mov	r0, ip
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	2a08      	cmp	r2, #8
 80003f6:	d313      	bcc.n	8000420 <memcpy+0x114>
 80003f8:	078b      	lsls	r3, r1, #30
 80003fa:	d08d      	beq.n	8000318 <memcpy+0xc>
 80003fc:	f010 0303 	ands.w	r3, r0, #3
 8000400:	d08a      	beq.n	8000318 <memcpy+0xc>
 8000402:	f1c3 0304 	rsb	r3, r3, #4
 8000406:	1ad2      	subs	r2, r2, r3
 8000408:	07db      	lsls	r3, r3, #31
 800040a:	bf1c      	itt	ne
 800040c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000410:	f800 3b01 	strbne.w	r3, [r0], #1
 8000414:	d380      	bcc.n	8000318 <memcpy+0xc>
 8000416:	f831 3b02 	ldrh.w	r3, [r1], #2
 800041a:	f820 3b02 	strh.w	r3, [r0], #2
 800041e:	e77b      	b.n	8000318 <memcpy+0xc>
 8000420:	3a04      	subs	r2, #4
 8000422:	d3d9      	bcc.n	80003d8 <memcpy+0xcc>
 8000424:	3a01      	subs	r2, #1
 8000426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800042a:	f800 3b01 	strb.w	r3, [r0], #1
 800042e:	d2f9      	bcs.n	8000424 <memcpy+0x118>
 8000430:	780b      	ldrb	r3, [r1, #0]
 8000432:	7003      	strb	r3, [r0, #0]
 8000434:	784b      	ldrb	r3, [r1, #1]
 8000436:	7043      	strb	r3, [r0, #1]
 8000438:	788b      	ldrb	r3, [r1, #2]
 800043a:	7083      	strb	r3, [r0, #2]
 800043c:	4660      	mov	r0, ip
 800043e:	4770      	bx	lr
 8000440:	eba2 0003 	sub.w	r0, r2, r3
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop

08000448 <strcmp>:
 8000448:	7802      	ldrb	r2, [r0, #0]
 800044a:	780b      	ldrb	r3, [r1, #0]
 800044c:	2a01      	cmp	r2, #1
 800044e:	bf28      	it	cs
 8000450:	429a      	cmpcs	r2, r3
 8000452:	d1f5      	bne.n	8000440 <memcpy+0x134>
 8000454:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000458:	ea40 0401 	orr.w	r4, r0, r1
 800045c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000460:	f06f 0c00 	mvn.w	ip, #0
 8000464:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000468:	b312      	cbz	r2, 80004b0 <strcmp+0x68>
 800046a:	ea80 0401 	eor.w	r4, r0, r1
 800046e:	f014 0f07 	tst.w	r4, #7
 8000472:	d16a      	bne.n	800054a <strcmp+0x102>
 8000474:	f000 0407 	and.w	r4, r0, #7
 8000478:	f020 0007 	bic.w	r0, r0, #7
 800047c:	f004 0503 	and.w	r5, r4, #3
 8000480:	f021 0107 	bic.w	r1, r1, #7
 8000484:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000488:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800048c:	f014 0f04 	tst.w	r4, #4
 8000490:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000494:	fa0c f405 	lsl.w	r4, ip, r5
 8000498:	ea62 0204 	orn	r2, r2, r4
 800049c:	ea66 0604 	orn	r6, r6, r4
 80004a0:	d00a      	beq.n	80004b8 <strcmp+0x70>
 80004a2:	ea63 0304 	orn	r3, r3, r4
 80004a6:	4662      	mov	r2, ip
 80004a8:	ea67 0704 	orn	r7, r7, r4
 80004ac:	4666      	mov	r6, ip
 80004ae:	e003      	b.n	80004b8 <strcmp+0x70>
 80004b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80004b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80004b8:	fa82 f54c 	uadd8	r5, r2, ip
 80004bc:	ea82 0406 	eor.w	r4, r2, r6
 80004c0:	faa4 f48c 	sel	r4, r4, ip
 80004c4:	bb6c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004c6:	fa83 f54c 	uadd8	r5, r3, ip
 80004ca:	ea83 0507 	eor.w	r5, r3, r7
 80004ce:	faa5 f58c 	sel	r5, r5, ip
 80004d2:	b995      	cbnz	r5, 80004fa <strcmp+0xb2>
 80004d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80004d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80004dc:	fa82 f54c 	uadd8	r5, r2, ip
 80004e0:	ea82 0406 	eor.w	r4, r2, r6
 80004e4:	faa4 f48c 	sel	r4, r4, ip
 80004e8:	fa83 f54c 	uadd8	r5, r3, ip
 80004ec:	ea83 0507 	eor.w	r5, r3, r7
 80004f0:	faa5 f58c 	sel	r5, r5, ip
 80004f4:	4325      	orrs	r5, r4
 80004f6:	d0db      	beq.n	80004b0 <strcmp+0x68>
 80004f8:	b99c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004fa:	ba2d      	rev	r5, r5
 80004fc:	fab5 f485 	clz	r4, r5
 8000500:	f024 0407 	bic.w	r4, r4, #7
 8000504:	fa27 f104 	lsr.w	r1, r7, r4
 8000508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800050c:	fa23 f304 	lsr.w	r3, r3, r4
 8000510:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000514:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000518:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800051c:	eba0 0001 	sub.w	r0, r0, r1
 8000520:	4770      	bx	lr
 8000522:	ba24      	rev	r4, r4
 8000524:	fab4 f484 	clz	r4, r4
 8000528:	f024 0407 	bic.w	r4, r4, #7
 800052c:	fa26 f104 	lsr.w	r1, r6, r4
 8000530:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000534:	fa22 f204 	lsr.w	r2, r2, r4
 8000538:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800053c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000540:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000544:	eba0 0001 	sub.w	r0, r0, r1
 8000548:	4770      	bx	lr
 800054a:	f014 0f03 	tst.w	r4, #3
 800054e:	d13c      	bne.n	80005ca <strcmp+0x182>
 8000550:	f010 0403 	ands.w	r4, r0, #3
 8000554:	d128      	bne.n	80005a8 <strcmp+0x160>
 8000556:	f850 2b08 	ldr.w	r2, [r0], #8
 800055a:	f851 3b08 	ldr.w	r3, [r1], #8
 800055e:	fa82 f54c 	uadd8	r5, r2, ip
 8000562:	ea82 0503 	eor.w	r5, r2, r3
 8000566:	faa5 f58c 	sel	r5, r5, ip
 800056a:	b95d      	cbnz	r5, 8000584 <strcmp+0x13c>
 800056c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000574:	fa82 f54c 	uadd8	r5, r2, ip
 8000578:	ea82 0503 	eor.w	r5, r2, r3
 800057c:	faa5 f58c 	sel	r5, r5, ip
 8000580:	2d00      	cmp	r5, #0
 8000582:	d0e8      	beq.n	8000556 <strcmp+0x10e>
 8000584:	ba2d      	rev	r5, r5
 8000586:	fab5 f485 	clz	r4, r5
 800058a:	f024 0407 	bic.w	r4, r4, #7
 800058e:	fa23 f104 	lsr.w	r1, r3, r4
 8000592:	fa22 f204 	lsr.w	r2, r2, r4
 8000596:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800059a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800059e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80005a2:	eba0 0001 	sub.w	r0, r0, r1
 80005a6:	4770      	bx	lr
 80005a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80005ac:	f020 0003 	bic.w	r0, r0, #3
 80005b0:	f850 2b08 	ldr.w	r2, [r0], #8
 80005b4:	f021 0103 	bic.w	r1, r1, #3
 80005b8:	f851 3b08 	ldr.w	r3, [r1], #8
 80005bc:	fa0c f404 	lsl.w	r4, ip, r4
 80005c0:	ea62 0204 	orn	r2, r2, r4
 80005c4:	ea63 0304 	orn	r3, r3, r4
 80005c8:	e7c9      	b.n	800055e <strcmp+0x116>
 80005ca:	f010 0403 	ands.w	r4, r0, #3
 80005ce:	d01a      	beq.n	8000606 <strcmp+0x1be>
 80005d0:	eba1 0104 	sub.w	r1, r1, r4
 80005d4:	f020 0003 	bic.w	r0, r0, #3
 80005d8:	07e4      	lsls	r4, r4, #31
 80005da:	f850 2b04 	ldr.w	r2, [r0], #4
 80005de:	d006      	beq.n	80005ee <strcmp+0x1a6>
 80005e0:	d20f      	bcs.n	8000602 <strcmp+0x1ba>
 80005e2:	788b      	ldrb	r3, [r1, #2]
 80005e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	d106      	bne.n	80005fa <strcmp+0x1b2>
 80005ec:	b12b      	cbz	r3, 80005fa <strcmp+0x1b2>
 80005ee:	78cb      	ldrb	r3, [r1, #3]
 80005f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80005f4:	1ae4      	subs	r4, r4, r3
 80005f6:	d100      	bne.n	80005fa <strcmp+0x1b2>
 80005f8:	b91b      	cbnz	r3, 8000602 <strcmp+0x1ba>
 80005fa:	4620      	mov	r0, r4
 80005fc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000600:	4770      	bx	lr
 8000602:	f101 0104 	add.w	r1, r1, #4
 8000606:	f850 2b04 	ldr.w	r2, [r0], #4
 800060a:	07cc      	lsls	r4, r1, #31
 800060c:	f021 0103 	bic.w	r1, r1, #3
 8000610:	f851 3b04 	ldr.w	r3, [r1], #4
 8000614:	d848      	bhi.n	80006a8 <strcmp+0x260>
 8000616:	d224      	bcs.n	8000662 <strcmp+0x21a>
 8000618:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800061c:	fa82 f54c 	uadd8	r5, r2, ip
 8000620:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000624:	faa5 f58c 	sel	r5, r5, ip
 8000628:	d10a      	bne.n	8000640 <strcmp+0x1f8>
 800062a:	b965      	cbnz	r5, 8000646 <strcmp+0x1fe>
 800062c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000630:	ea84 0402 	eor.w	r4, r4, r2
 8000634:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000638:	d10e      	bne.n	8000658 <strcmp+0x210>
 800063a:	f850 2b04 	ldr.w	r2, [r0], #4
 800063e:	e7eb      	b.n	8000618 <strcmp+0x1d0>
 8000640:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000644:	e055      	b.n	80006f2 <strcmp+0x2aa>
 8000646:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800064a:	d14d      	bne.n	80006e8 <strcmp+0x2a0>
 800064c:	7808      	ldrb	r0, [r1, #0]
 800064e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000652:	f1c0 0000 	rsb	r0, r0, #0
 8000656:	4770      	bx	lr
 8000658:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800065c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000660:	e047      	b.n	80006f2 <strcmp+0x2aa>
 8000662:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000666:	fa82 f54c 	uadd8	r5, r2, ip
 800066a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800066e:	faa5 f58c 	sel	r5, r5, ip
 8000672:	d10a      	bne.n	800068a <strcmp+0x242>
 8000674:	b965      	cbnz	r5, 8000690 <strcmp+0x248>
 8000676:	f851 3b04 	ldr.w	r3, [r1], #4
 800067a:	ea84 0402 	eor.w	r4, r4, r2
 800067e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000682:	d10c      	bne.n	800069e <strcmp+0x256>
 8000684:	f850 2b04 	ldr.w	r2, [r0], #4
 8000688:	e7eb      	b.n	8000662 <strcmp+0x21a>
 800068a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800068e:	e030      	b.n	80006f2 <strcmp+0x2aa>
 8000690:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000694:	d128      	bne.n	80006e8 <strcmp+0x2a0>
 8000696:	880b      	ldrh	r3, [r1, #0]
 8000698:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800069c:	e029      	b.n	80006f2 <strcmp+0x2aa>
 800069e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80006a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 80006a6:	e024      	b.n	80006f2 <strcmp+0x2aa>
 80006a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80006ac:	fa82 f54c 	uadd8	r5, r2, ip
 80006b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 80006b4:	faa5 f58c 	sel	r5, r5, ip
 80006b8:	d10a      	bne.n	80006d0 <strcmp+0x288>
 80006ba:	b965      	cbnz	r5, 80006d6 <strcmp+0x28e>
 80006bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c0:	ea84 0402 	eor.w	r4, r4, r2
 80006c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80006c8:	d109      	bne.n	80006de <strcmp+0x296>
 80006ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80006ce:	e7eb      	b.n	80006a8 <strcmp+0x260>
 80006d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80006d4:	e00d      	b.n	80006f2 <strcmp+0x2aa>
 80006d6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80006da:	d105      	bne.n	80006e8 <strcmp+0x2a0>
 80006dc:	680b      	ldr	r3, [r1, #0]
 80006de:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80006e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006e6:	e004      	b.n	80006f2 <strcmp+0x2aa>
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006f0:	4770      	bx	lr
 80006f2:	ba12      	rev	r2, r2
 80006f4:	ba1b      	rev	r3, r3
 80006f6:	fa82 f44c 	uadd8	r4, r2, ip
 80006fa:	ea82 0403 	eor.w	r4, r2, r3
 80006fe:	faa4 f58c 	sel	r5, r4, ip
 8000702:	fab5 f485 	clz	r4, r5
 8000706:	fa02 f204 	lsl.w	r2, r2, r4
 800070a:	fa03 f304 	lsl.w	r3, r3, r4
 800070e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000712:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000716:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800071a:	4770      	bx	lr
	...

08000740 <strlen>:
 8000740:	f890 f000 	pld	[r0]
 8000744:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000748:	f020 0107 	bic.w	r1, r0, #7
 800074c:	f06f 0c00 	mvn.w	ip, #0
 8000750:	f010 0407 	ands.w	r4, r0, #7
 8000754:	f891 f020 	pld	[r1, #32]
 8000758:	f040 8049 	bne.w	80007ee <strlen+0xae>
 800075c:	f04f 0400 	mov.w	r4, #0
 8000760:	f06f 0007 	mvn.w	r0, #7
 8000764:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000768:	f891 f040 	pld	[r1, #64]	; 0x40
 800076c:	f100 0008 	add.w	r0, r0, #8
 8000770:	fa82 f24c 	uadd8	r2, r2, ip
 8000774:	faa4 f28c 	sel	r2, r4, ip
 8000778:	fa83 f34c 	uadd8	r3, r3, ip
 800077c:	faa2 f38c 	sel	r3, r2, ip
 8000780:	bb4b      	cbnz	r3, 80007d6 <strlen+0x96>
 8000782:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000786:	fa82 f24c 	uadd8	r2, r2, ip
 800078a:	f100 0008 	add.w	r0, r0, #8
 800078e:	faa4 f28c 	sel	r2, r4, ip
 8000792:	fa83 f34c 	uadd8	r3, r3, ip
 8000796:	faa2 f38c 	sel	r3, r2, ip
 800079a:	b9e3      	cbnz	r3, 80007d6 <strlen+0x96>
 800079c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80007a0:	fa82 f24c 	uadd8	r2, r2, ip
 80007a4:	f100 0008 	add.w	r0, r0, #8
 80007a8:	faa4 f28c 	sel	r2, r4, ip
 80007ac:	fa83 f34c 	uadd8	r3, r3, ip
 80007b0:	faa2 f38c 	sel	r3, r2, ip
 80007b4:	b97b      	cbnz	r3, 80007d6 <strlen+0x96>
 80007b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80007ba:	f101 0120 	add.w	r1, r1, #32
 80007be:	fa82 f24c 	uadd8	r2, r2, ip
 80007c2:	f100 0008 	add.w	r0, r0, #8
 80007c6:	faa4 f28c 	sel	r2, r4, ip
 80007ca:	fa83 f34c 	uadd8	r3, r3, ip
 80007ce:	faa2 f38c 	sel	r3, r2, ip
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0c6      	beq.n	8000764 <strlen+0x24>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	bf04      	itt	eq
 80007da:	3004      	addeq	r0, #4
 80007dc:	461a      	moveq	r2, r3
 80007de:	ba12      	rev	r2, r2
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80007e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80007ec:	4770      	bx	lr
 80007ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007f2:	f004 0503 	and.w	r5, r4, #3
 80007f6:	f1c4 0000 	rsb	r0, r4, #0
 80007fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80007fe:	f014 0f04 	tst.w	r4, #4
 8000802:	f891 f040 	pld	[r1, #64]	; 0x40
 8000806:	fa0c f505 	lsl.w	r5, ip, r5
 800080a:	ea62 0205 	orn	r2, r2, r5
 800080e:	bf1c      	itt	ne
 8000810:	ea63 0305 	ornne	r3, r3, r5
 8000814:	4662      	movne	r2, ip
 8000816:	f04f 0400 	mov.w	r4, #0
 800081a:	e7a9      	b.n	8000770 <strlen+0x30>
 800081c:	0000      	movs	r0, r0
	...

08000820 <sdObjectInit.constprop.0>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000820:	b4f0      	push	{r4, r5, r6, r7}

  sdp->vmt = &vmt;
 8000822:	4603      	mov	r3, r0
 8000824:	4a13      	ldr	r2, [pc, #76]	; (8000874 <sdObjectInit.constprop.0+0x54>)
 8000826:	f843 2b04 	str.w	r2, [r3], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800082a:	2201      	movs	r2, #1
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800082c:	2500      	movs	r5, #0
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800082e:	f44f 7780 	mov.w	r7, #256	; 0x100
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000832:	f500 7615 	add.w	r6, r0, #596	; 0x254
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000836:	f100 040c 	add.w	r4, r0, #12
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 800083a:	6043      	str	r3, [r0, #4]
  oqp->q_notify  = onfy;
 800083c:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_top     = bp + size;
 800083e:	f500 73aa 	add.w	r3, r0, #340	; 0x154
  sdp->state = SD_STOP;
 8000842:	7202      	strb	r2, [r0, #8]
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8000844:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000848:	f100 0254 	add.w	r2, r0, #84	; 0x54
  iqp->q_counter = 0;
 800084c:	6145      	str	r5, [r0, #20]
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  tqp->prev = (thread_t *)tqp;
 800084e:	e9c0 4403 	strd	r4, r4, [r0, #12]
  iqp->q_notify  = infy;
 8000852:	6285      	str	r5, [r0, #40]	; 0x28
  oqp->q_counter = size;
 8000854:	6387      	str	r7, [r0, #56]	; 0x38
  oqp->q_top     = bp + size;
 8000856:	6406      	str	r6, [r0, #64]	; 0x40
  iqp->q_wrptr   = bp;
 8000858:	e9c0 2208 	strd	r2, r2, [r0, #32]
}
 800085c:	bcf0      	pop	{r4, r5, r6, r7}
  oqp->q_wrptr   = bp;
 800085e:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8000862:	e9c0 110c 	strd	r1, r1, [r0, #48]	; 0x30
  iqp->q_link    = link;
 8000866:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_link    = link;
 8000868:	6500      	str	r0, [r0, #80]	; 0x50
  iqp->q_buffer  = bp;
 800086a:	6182      	str	r2, [r0, #24]
  iqp->q_top     = bp + size;
 800086c:	61c3      	str	r3, [r0, #28]
  oqp->q_buffer  = bp;
 800086e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	08009bb4 	.word	0x08009bb4
	...

08000880 <dmaStreamAllocI.part.0.constprop.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000880:	b4f0      	push	{r4, r5, r6, r7}
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 8000882:	4c2e      	ldr	r4, [pc, #184]	; (800093c <dmaStreamAllocI.part.0.constprop.0+0xbc>)
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000884:	4603      	mov	r3, r0
    uint32_t mask = (1U << i);
 8000886:	2201      	movs	r2, #1
    if ((dma.allocated_mask & mask) == 0U) {
 8000888:	6820      	ldr	r0, [r4, #0]
    uint32_t mask = (1U << i);
 800088a:	409a      	lsls	r2, r3
    if ((dma.allocated_mask & mask) == 0U) {
 800088c:	4202      	tst	r2, r0

      return dmastp;
    }
  }

  return NULL;
 800088e:	bf18      	it	ne
 8000890:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 8000892:	d001      	beq.n	8000898 <dmaStreamAllocI.part.0.constprop.0+0x18>
}
 8000894:	bcf0      	pop	{r4, r5, r6, r7}
 8000896:	4770      	bx	lr
      dma.streams[i].func  = func;
 8000898:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
      dma.allocated_mask  |= mask;
 800089c:	4310      	orrs	r0, r2
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 800089e:	4d28      	ldr	r5, [pc, #160]	; (8000940 <dmaStreamAllocI.part.0.constprop.0+0xc0>)
      dma.allocated_mask  |= mask;
 80008a0:	6020      	str	r0, [r4, #0]
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 80008a2:	f012 0fff 	tst.w	r2, #255	; 0xff
      dma.streams[i].param = param;
 80008a6:	4c27      	ldr	r4, [pc, #156]	; (8000944 <dmaStreamAllocI.part.0.constprop.0+0xc4>)
      dma.streams[i].func  = func;
 80008a8:	6071      	str	r1, [r6, #4]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80008aa:	f04f 000c 	mov.w	r0, #12
      dma.streams[i].param = param;
 80008ae:	60b4      	str	r4, [r6, #8]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 80008b0:	fb00 5003 	mla	r0, r0, r3, r5
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 80008b4:	d137      	bne.n	8000926 <dmaStreamAllocI.part.0.constprop.0+0xa6>
        rccEnableDMA2(true);
 80008b6:	4a24      	ldr	r2, [pc, #144]	; (8000948 <dmaStreamAllocI.part.0.constprop.0+0xc8>)
 80008b8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80008ba:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80008be:	6311      	str	r1, [r2, #48]	; 0x30
      dmaStreamDisable(dmastp);
 80008c0:	210c      	movs	r1, #12
        rccEnableDMA2(true);
 80008c2:	6d14      	ldr	r4, [r2, #80]	; 0x50
      dmaStreamDisable(dmastp);
 80008c4:	fb01 f103 	mul.w	r1, r1, r3
        rccEnableDMA2(true);
 80008c8:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
      dmaStreamDisable(dmastp);
 80008cc:	5869      	ldr	r1, [r5, r1]
        rccEnableDMA2(true);
 80008ce:	6514      	str	r4, [r2, #80]	; 0x50
 80008d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
      dmaStreamDisable(dmastp);
 80008d2:	680a      	ldr	r2, [r1, #0]
 80008d4:	f022 021f 	bic.w	r2, r2, #31
 80008d8:	600a      	str	r2, [r1, #0]
 80008da:	680a      	ldr	r2, [r1, #0]
 80008dc:	f012 0201 	ands.w	r2, r2, #1
 80008e0:	d1fb      	bne.n	80008da <dmaStreamAllocI.part.0.constprop.0+0x5a>
 80008e2:	240c      	movs	r4, #12
 80008e4:	fb04 5303 	mla	r3, r4, r3, r5
 80008e8:	253d      	movs	r5, #61	; 0x3d
        nvicEnableVector(dmastp->vector, priority);
 80008ea:	7adc      	ldrb	r4, [r3, #11]
      dmaStreamDisable(dmastp);
 80008ec:	7a5e      	ldrb	r6, [r3, #9]
 80008ee:	685f      	ldr	r7, [r3, #4]
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80008f0:	0963      	lsrs	r3, r4, #5
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	40b5      	lsls	r5, r6
 80008f6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80008fa:	f104 4660 	add.w	r6, r4, #3758096384	; 0xe0000000
 80008fe:	603d      	str	r5, [r7, #0]
 8000900:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000904:	2501      	movs	r5, #1
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8000906:	f506 4661 	add.w	r6, r6, #57600	; 0xe100
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800090a:	f004 041f 	and.w	r4, r4, #31
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 800090e:	600a      	str	r2, [r1, #0]
 8000910:	fa05 f404 	lsl.w	r4, r5, r4
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8000914:	22a0      	movs	r2, #160	; 0xa0
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8000916:	2521      	movs	r5, #33	; 0x21
 8000918:	614d      	str	r5, [r1, #20]
 800091a:	f886 2300 	strb.w	r2, [r6, #768]	; 0x300
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800091e:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000922:	601c      	str	r4, [r3, #0]
 8000924:	e7b6      	b.n	8000894 <dmaStreamAllocI.part.0.constprop.0+0x14>
        rccEnableDMA1(true);
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <dmaStreamAllocI.part.0.constprop.0+0xc8>)
 8000928:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800092a:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 800092e:	6311      	str	r1, [r2, #48]	; 0x30
 8000930:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8000932:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8000936:	6511      	str	r1, [r2, #80]	; 0x50
 8000938:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800093a:	e7bc      	b.n	80008b6 <dmaStreamAllocI.part.0.constprop.0+0x36>
 800093c:	20001aa0 	.word	0x20001aa0
 8000940:	08009848 	.word	0x08009848
 8000944:	20001838 	.word	0x20001838
 8000948:	40023800 	.word	0x40023800
 800094c:	00000000 	.word	0x00000000

08000950 <otg_txfifo_handler.constprop.0>:
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000950:	4a22      	ldr	r2, [pc, #136]	; (80009dc <otg_txfifo_handler.constprop.0+0x8c>)
 8000952:	eb02 0380 	add.w	r3, r2, r0, lsl #2
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 8000956:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 800095a:	68d9      	ldr	r1, [r3, #12]
 800095c:	f8d2 9054 	ldr.w	r9, [r2, #84]	; 0x54
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 8000960:	4680      	mov	r8, r0
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000962:	6948      	ldr	r0, [r1, #20]
 8000964:	e9d0 3700 	ldrd	r3, r7, [r0]
 8000968:	42bb      	cmp	r3, r7
 800096a:	d928      	bls.n	80009be <otg_txfifo_handler.constprop.0+0x6e>
      return false;

#if STM32_USB_OTGFIFO_FILL_BASEPRI
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 800096c:	f108 0401 	add.w	r4, r8, #1
    if (n > usbp->epc[ep]->in_maxsize)
 8000970:	f8b1 e010 	ldrh.w	lr, [r1, #16]
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8000974:	eb09 3404 	add.w	r4, r9, r4, lsl #12
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8000978:	eb09 1c48 	add.w	ip, r9, r8, lsl #5
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 800097c:	1bde      	subs	r6, r3, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800097e:	f8dc 2918 	ldr.w	r2, [ip, #2328]	; 0x918
 8000982:	4576      	cmp	r6, lr
 8000984:	bf28      	it	cs
 8000986:	4676      	movcs	r6, lr
 8000988:	b293      	uxth	r3, r2
 800098a:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 800098e:	d821      	bhi.n	80009d4 <otg_txfifo_handler.constprop.0+0x84>
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8000990:	6885      	ldr	r5, [r0, #8]
    if (n <= 4) {
 8000992:	2e04      	cmp	r6, #4
    *fifop = *((uint32_t *)buf);
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	6023      	str	r3, [r4, #0]
    if (n <= 4) {
 8000998:	d90a      	bls.n	80009b0 <otg_txfifo_handler.constprop.0+0x60>
 800099a:	1f71      	subs	r1, r6, #5
 800099c:	f021 0103 	bic.w	r1, r1, #3
 80009a0:	3104      	adds	r1, #4
 80009a2:	4429      	add	r1, r5
 80009a4:	462b      	mov	r3, r5
    *fifop = *((uint32_t *)buf);
 80009a6:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80009aa:	6022      	str	r2, [r4, #0]
    if (n <= 4) {
 80009ac:	4299      	cmp	r1, r3
 80009ae:	d1fa      	bne.n	80009a6 <otg_txfifo_handler.constprop.0+0x56>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80009b0:	6803      	ldr	r3, [r0, #0]
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
    usbp->epc[ep]->in_state->txcnt += n;
 80009b2:	4437      	add	r7, r6
    usbp->epc[ep]->in_state->txbuf += n;
 80009b4:	4435      	add	r5, r6
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80009b6:	42bb      	cmp	r3, r7
    usbp->epc[ep]->in_state->txcnt += n;
 80009b8:	e9c0 7501 	strd	r7, r5, [r0, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80009bc:	d8de      	bhi.n	800097c <otg_txfifo_handler.constprop.0+0x2c>
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
 80009be:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
 80009c2:	2001      	movs	r0, #1
 80009c4:	fa00 f808 	lsl.w	r8, r0, r8
 80009c8:	ea23 0308 	bic.w	r3, r3, r8
 80009cc:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
  }
}
 80009d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
 80009d4:	2000      	movs	r0, #0
}
 80009d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009da:	bf00      	nop
 80009dc:	20001868 	.word	0x20001868

080009e0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80009e0:	b430      	push	{r4, r5}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80009e2:	2320      	movs	r3, #32
 80009e4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80009e8:	4c0b      	ldr	r4, [pc, #44]	; (8000a18 <chCoreAllocFromTop+0x38>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80009ea:	e9d4 3500 	ldrd	r3, r5, [r4]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80009ee:	4249      	negs	r1, r1
 80009f0:	1a28      	subs	r0, r5, r0
 80009f2:	4008      	ands	r0, r1
  prev = p - offset;
 80009f4:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d307      	bcc.n	8000a0a <chCoreAllocFromTop+0x2a>
 80009fa:	4295      	cmp	r5, r2
 80009fc:	d305      	bcc.n	8000a0a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 80009fe:	6062      	str	r2, [r4, #4]
 8000a00:	2300      	movs	r3, #0
 8000a02:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000a06:	bc30      	pop	{r4, r5}
 8000a08:	4770      	bx	lr
    return NULL;
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f383 8811 	msr	BASEPRI, r3
}
 8000a12:	bc30      	pop	{r4, r5}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20001a68 	.word	0x20001a68
 8000a1c:	00000000 	.word	0x00000000

08000a20 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000a20:	4a02      	ldr	r2, [pc, #8]	; (8000a2c <notify1+0xc>)
 8000a22:	68d3      	ldr	r3, [r2, #12]
 8000a24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000a28:	60d3      	str	r3, [r2, #12]
}
 8000a2a:	4770      	bx	lr
 8000a2c:	40011000 	.word	0x40011000

08000a30 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000a30:	4a02      	ldr	r2, [pc, #8]	; (8000a3c <notify2+0xc>)
 8000a32:	68d3      	ldr	r3, [r2, #12]
 8000a34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000a38:	60d3      	str	r3, [r2, #12]
}
 8000a3a:	4770      	bx	lr
 8000a3c:	40004400 	.word	0x40004400

08000a40 <notify6>:

#if STM32_SERIAL_USE_USART6 || defined(__DOXYGEN__)
static void notify6(io_queue_t *qp) {

  (void)qp;
  USART6->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000a40:	4a02      	ldr	r2, [pc, #8]	; (8000a4c <notify6+0xc>)
 8000a42:	68d3      	ldr	r3, [r2, #12]
 8000a44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000a48:	60d3      	str	r3, [r2, #12]
}
 8000a4a:	4770      	bx	lr
 8000a4c:	40011400 	.word	0x40011400

08000a50 <select_chip>:

static void write_byte(uint8_t data);
static uint8_t read_byte(void);

void select_chip(uint8_t chip){
  switch(chip&0x0f){
 8000a50:	3801      	subs	r0, #1
void select_chip(uint8_t chip){
 8000a52:	b430      	push	{r4, r5}
 8000a54:	280e      	cmp	r0, #14
 8000a56:	f200 80e4 	bhi.w	8000c22 <select_chip+0x1d2>
 8000a5a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8000a5e:	001e      	.short	0x001e
 8000a60:	003a002c 	.word	0x003a002c
 8000a64:	00560048 	.word	0x00560048
 8000a68:	00720064 	.word	0x00720064
 8000a6c:	008e0080 	.word	0x008e0080
 8000a70:	00aa009c 	.word	0x00aa009c
 8000a74:	00c600b8 	.word	0x00c600b8
 8000a78:	000f00d4 	.word	0x000f00d4
      palSetLine(SEL1);
      palSetLine(SEL2);
      palSetLine(SEL4);
      break;
  case 15:
      palSetLine(SEL0);
 8000a7c:	4b70      	ldr	r3, [pc, #448]	; (8000c40 <select_chip+0x1f0>)
      palSetLine(SEL1);
      palSetLine(SEL2);
      palSetLine(SEL4);
 8000a7e:	4a71      	ldr	r2, [pc, #452]	; (8000c44 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000a80:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000a84:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000a88:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000a8c:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000a8e:	831d      	strh	r5, [r3, #24]
      palSetLine(SEL1);
 8000a90:	831c      	strh	r4, [r3, #24]
      palSetLine(SEL2);
 8000a92:	8318      	strh	r0, [r3, #24]
      palSetLine(SEL4);
 8000a94:	8311      	strh	r1, [r2, #24]
      break;
  }
}
 8000a96:	bc30      	pop	{r4, r5}
 8000a98:	4770      	bx	lr
      palSetLine(SEL0);
 8000a9a:	4b69      	ldr	r3, [pc, #420]	; (8000c40 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000a9c:	4a69      	ldr	r2, [pc, #420]	; (8000c44 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000a9e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000aa2:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000aa6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000aaa:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000aac:	831d      	strh	r5, [r3, #24]
      palClearLine(SEL1);
 8000aae:	835c      	strh	r4, [r3, #26]
      palClearLine(SEL2);
 8000ab0:	8358      	strh	r0, [r3, #26]
      palClearLine(SEL4);
 8000ab2:	8351      	strh	r1, [r2, #26]
      break;
 8000ab4:	e7ef      	b.n	8000a96 <select_chip+0x46>
      palClearLine(SEL0);
 8000ab6:	4b62      	ldr	r3, [pc, #392]	; (8000c40 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000ab8:	4a62      	ldr	r2, [pc, #392]	; (8000c44 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000aba:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000abe:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000ac2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000ac6:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000ac8:	835d      	strh	r5, [r3, #26]
      palSetLine(SEL1);
 8000aca:	831c      	strh	r4, [r3, #24]
      palClearLine(SEL2);
 8000acc:	8358      	strh	r0, [r3, #26]
      palClearLine(SEL4);
 8000ace:	8351      	strh	r1, [r2, #26]
      break;
 8000ad0:	e7e1      	b.n	8000a96 <select_chip+0x46>
      palSetLine(SEL0);
 8000ad2:	4b5b      	ldr	r3, [pc, #364]	; (8000c40 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000ad4:	4a5b      	ldr	r2, [pc, #364]	; (8000c44 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000ad6:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000ada:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000ade:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000ae2:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000ae4:	831d      	strh	r5, [r3, #24]
      palSetLine(SEL1);
 8000ae6:	831c      	strh	r4, [r3, #24]
      palClearLine(SEL2);
 8000ae8:	8358      	strh	r0, [r3, #26]
      palClearLine(SEL4);
 8000aea:	8351      	strh	r1, [r2, #26]
      break;
 8000aec:	e7d3      	b.n	8000a96 <select_chip+0x46>
      palClearLine(SEL0);
 8000aee:	4b54      	ldr	r3, [pc, #336]	; (8000c40 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000af0:	4a54      	ldr	r2, [pc, #336]	; (8000c44 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000af2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000af6:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000afa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000afe:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000b00:	835d      	strh	r5, [r3, #26]
      palClearLine(SEL1);
 8000b02:	835c      	strh	r4, [r3, #26]
      palSetLine(SEL2);
 8000b04:	8318      	strh	r0, [r3, #24]
      palClearLine(SEL4);
 8000b06:	8351      	strh	r1, [r2, #26]
      break;
 8000b08:	e7c5      	b.n	8000a96 <select_chip+0x46>
      palSetLine(SEL0);
 8000b0a:	4b4d      	ldr	r3, [pc, #308]	; (8000c40 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000b0c:	4a4d      	ldr	r2, [pc, #308]	; (8000c44 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000b0e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000b12:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000b16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000b1a:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000b1c:	831d      	strh	r5, [r3, #24]
      palClearLine(SEL1);
 8000b1e:	835c      	strh	r4, [r3, #26]
      palSetLine(SEL2);
 8000b20:	8318      	strh	r0, [r3, #24]
      palClearLine(SEL4);
 8000b22:	8351      	strh	r1, [r2, #26]
      break;
 8000b24:	e7b7      	b.n	8000a96 <select_chip+0x46>
      palClearLine(SEL0);
 8000b26:	4b46      	ldr	r3, [pc, #280]	; (8000c40 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000b28:	4a46      	ldr	r2, [pc, #280]	; (8000c44 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000b2a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000b2e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000b32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000b36:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000b38:	835d      	strh	r5, [r3, #26]
      palSetLine(SEL1);
 8000b3a:	831c      	strh	r4, [r3, #24]
      palSetLine(SEL2);
 8000b3c:	8318      	strh	r0, [r3, #24]
      palClearLine(SEL4);
 8000b3e:	8351      	strh	r1, [r2, #26]
      break;
 8000b40:	e7a9      	b.n	8000a96 <select_chip+0x46>
      palSetLine(SEL0);
 8000b42:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000b44:	4a3f      	ldr	r2, [pc, #252]	; (8000c44 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000b46:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000b4a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000b4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000b52:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000b54:	831d      	strh	r5, [r3, #24]
      palSetLine(SEL1);
 8000b56:	831c      	strh	r4, [r3, #24]
      palSetLine(SEL2);
 8000b58:	8318      	strh	r0, [r3, #24]
      palClearLine(SEL4);
 8000b5a:	8351      	strh	r1, [r2, #26]
      break;
 8000b5c:	e79b      	b.n	8000a96 <select_chip+0x46>
      palClearLine(SEL0);
 8000b5e:	4b38      	ldr	r3, [pc, #224]	; (8000c40 <select_chip+0x1f0>)
      palSetLine(SEL4);
 8000b60:	4a38      	ldr	r2, [pc, #224]	; (8000c44 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000b62:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000b66:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000b6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000b6e:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000b70:	835d      	strh	r5, [r3, #26]
      palClearLine(SEL1);
 8000b72:	835c      	strh	r4, [r3, #26]
      palClearLine(SEL2);
 8000b74:	8358      	strh	r0, [r3, #26]
      palSetLine(SEL4);
 8000b76:	8311      	strh	r1, [r2, #24]
      break;
 8000b78:	e78d      	b.n	8000a96 <select_chip+0x46>
      palSetLine(SEL0);
 8000b7a:	4b31      	ldr	r3, [pc, #196]	; (8000c40 <select_chip+0x1f0>)
      palSetLine(SEL4);
 8000b7c:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000b7e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000b82:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000b86:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000b8a:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000b8c:	831d      	strh	r5, [r3, #24]
      palClearLine(SEL1);
 8000b8e:	835c      	strh	r4, [r3, #26]
      palClearLine(SEL2);
 8000b90:	8358      	strh	r0, [r3, #26]
      palSetLine(SEL4);
 8000b92:	8311      	strh	r1, [r2, #24]
      break;
 8000b94:	e77f      	b.n	8000a96 <select_chip+0x46>
      palClearLine(SEL0);
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <select_chip+0x1f0>)
      palSetLine(SEL4);
 8000b98:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000b9a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000b9e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000ba2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000ba6:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000ba8:	835d      	strh	r5, [r3, #26]
      palSetLine(SEL1);
 8000baa:	831c      	strh	r4, [r3, #24]
      palClearLine(SEL2);
 8000bac:	8358      	strh	r0, [r3, #26]
      palSetLine(SEL4);
 8000bae:	8311      	strh	r1, [r2, #24]
      break;
 8000bb0:	e771      	b.n	8000a96 <select_chip+0x46>
      palSetLine(SEL0);
 8000bb2:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <select_chip+0x1f0>)
      palSetLine(SEL4);
 8000bb4:	4a23      	ldr	r2, [pc, #140]	; (8000c44 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000bb6:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000bba:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000bbe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000bc2:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000bc4:	831d      	strh	r5, [r3, #24]
      palSetLine(SEL1);
 8000bc6:	831c      	strh	r4, [r3, #24]
      palClearLine(SEL2);
 8000bc8:	8358      	strh	r0, [r3, #26]
      palSetLine(SEL4);
 8000bca:	8311      	strh	r1, [r2, #24]
      break;
 8000bcc:	e763      	b.n	8000a96 <select_chip+0x46>
      palClearLine(SEL0);
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <select_chip+0x1f0>)
      palSetLine(SEL4);
 8000bd0:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000bd2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000bd6:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000bda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000bde:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000be0:	835d      	strh	r5, [r3, #26]
      palClearLine(SEL1);
 8000be2:	835c      	strh	r4, [r3, #26]
      palSetLine(SEL2);
 8000be4:	8318      	strh	r0, [r3, #24]
      palSetLine(SEL4);
 8000be6:	8311      	strh	r1, [r2, #24]
      break;
 8000be8:	e755      	b.n	8000a96 <select_chip+0x46>
      palSetLine(SEL0);
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <select_chip+0x1f0>)
      palSetLine(SEL4);
 8000bec:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <select_chip+0x1f4>)
      palSetLine(SEL0);
 8000bee:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000bf2:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000bf6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000bfa:	2102      	movs	r1, #2
      palSetLine(SEL0);
 8000bfc:	831d      	strh	r5, [r3, #24]
      palClearLine(SEL1);
 8000bfe:	835c      	strh	r4, [r3, #26]
      palSetLine(SEL2);
 8000c00:	8318      	strh	r0, [r3, #24]
      palSetLine(SEL4);
 8000c02:	8311      	strh	r1, [r2, #24]
      break;
 8000c04:	e747      	b.n	8000a96 <select_chip+0x46>
      palClearLine(SEL0);
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <select_chip+0x1f0>)
      palSetLine(SEL4);
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000c0a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palSetLine(SEL1);
 8000c0e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palSetLine(SEL2);
 8000c12:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palSetLine(SEL4);
 8000c16:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000c18:	835d      	strh	r5, [r3, #26]
      palSetLine(SEL1);
 8000c1a:	831c      	strh	r4, [r3, #24]
      palSetLine(SEL2);
 8000c1c:	8318      	strh	r0, [r3, #24]
      palSetLine(SEL4);
 8000c1e:	8311      	strh	r1, [r2, #24]
      break;
 8000c20:	e739      	b.n	8000a96 <select_chip+0x46>
      palClearLine(SEL0);
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <select_chip+0x1f0>)
      palClearLine(SEL4);
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <select_chip+0x1f4>)
      palClearLine(SEL0);
 8000c26:	f44f 5500 	mov.w	r5, #8192	; 0x2000
      palClearLine(SEL1);
 8000c2a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      palClearLine(SEL2);
 8000c2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      palClearLine(SEL4);
 8000c32:	2102      	movs	r1, #2
      palClearLine(SEL0);
 8000c34:	835d      	strh	r5, [r3, #26]
      palClearLine(SEL1);
 8000c36:	835c      	strh	r4, [r3, #26]
      palClearLine(SEL2);
 8000c38:	8358      	strh	r0, [r3, #26]
      palClearLine(SEL4);
 8000c3a:	8351      	strh	r1, [r2, #26]
      break;
 8000c3c:	e72b      	b.n	8000a96 <select_chip+0x46>
 8000c3e:	bf00      	nop
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40020000 	.word	0x40020000
	...

08000c50 <gptcb>:
  BUS_in_use = 0;
 8000c50:	4903      	ldr	r1, [pc, #12]	; (8000c60 <gptcb+0x10>)
  DEBUG_HI;
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <gptcb+0x14>)
  BUS_in_use = 0;
 8000c54:	2000      	movs	r0, #0
  DEBUG_HI;
 8000c56:	2201      	movs	r2, #1
  BUS_in_use = 0;
 8000c58:	7008      	strb	r0, [r1, #0]
  DEBUG_HI;
 8000c5a:	831a      	strh	r2, [r3, #24]
}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000c48 	.word	0x20000c48
 8000c64:	40020400 	.word	0x40020400
	...

08000c70 <requests_hook>:
 * Handling messages not implemented in the default handler nor in the
 * SerialUSB handler.
 */
static bool requests_hook(USBDriver *usbp) {

  if (((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE) &&
 8000c70:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
static bool requests_hook(USBDriver *usbp) {
 8000c74:	4603      	mov	r3, r0
  if (((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE) &&
 8000c76:	f002 001f 	and.w	r0, r2, #31
 8000c7a:	2801      	cmp	r0, #1
 8000c7c:	d103      	bne.n	8000c86 <requests_hook+0x16>
 8000c7e:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8000c82:	290b      	cmp	r1, #11
 8000c84:	d01b      	beq.n	8000cbe <requests_hook+0x4e>
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8000c86:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8000c8a:	2a20      	cmp	r2, #32
 8000c8c:	d001      	beq.n	8000c92 <requests_hook+0x22>
      return true;
    default:
      return false;
    }
  }
  return false;
 8000c8e:	2000      	movs	r0, #0
      (usbp->setup[1] == USB_REQ_SET_INTERFACE)) {
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  }
  return sduRequestsHook(usbp);
}
 8000c90:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8000c92:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8000c96:	2a21      	cmp	r2, #33	; 0x21
 8000c98:	d809      	bhi.n	8000cae <requests_hook+0x3e>
 8000c9a:	2a1f      	cmp	r2, #31
 8000c9c:	d9f7      	bls.n	8000c8e <requests_hook+0x1e>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <requests_hook+0x58>)
 8000ca0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ca2:	2107      	movs	r1, #7
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e9c3 120f 	strd	r1, r2, [r3, #60]	; 0x3c
      return true;
 8000caa:	2001      	movs	r0, #1
 8000cac:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8000cae:	2a22      	cmp	r2, #34	; 0x22
 8000cb0:	d1ed      	bne.n	8000c8e <requests_hook+0x1e>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8000cb8:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4770      	bx	lr
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8000cc4:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8000cc6:	4770      	bx	lr
 8000cc8:	20000800 	.word	0x20000800
 8000ccc:	00000000 	.word	0x00000000

08000cd0 <get_descriptor>:
  switch (dtype) {
 8000cd0:	2902      	cmp	r1, #2
 8000cd2:	d006      	beq.n	8000ce2 <get_descriptor+0x12>
 8000cd4:	2903      	cmp	r1, #3
 8000cd6:	d006      	beq.n	8000ce6 <get_descriptor+0x16>
 8000cd8:	2901      	cmp	r1, #1
    return &vcom_device_descriptor;
 8000cda:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <get_descriptor+0x28>)
 8000cdc:	bf18      	it	ne
 8000cde:	2000      	movne	r0, #0
 8000ce0:	4770      	bx	lr
  switch (dtype) {
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <get_descriptor+0x2c>)
 8000ce4:	4770      	bx	lr
    if (dindex < 4)
 8000ce6:	2a03      	cmp	r2, #3
 8000ce8:	d803      	bhi.n	8000cf2 <get_descriptor+0x22>
      return &vcom_strings[dindex];
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <get_descriptor+0x30>)
 8000cec:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8000cf0:	4770      	bx	lr
  return NULL;
 8000cf2:	2000      	movs	r0, #0
}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	08009b0c 	.word	0x08009b0c
 8000cfc:	08009ab8 	.word	0x08009ab8
 8000d00:	08009b94 	.word	0x08009b94
	...

08000d10 <sym_to_val>:
#include "chscanf.h"
#include "memstreams.h"

static long sym_to_val(char sym, int base)
{
  sym = tolower(sym);
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <sym_to_val+0x54>)
 8000d12:	5cc3      	ldrb	r3, [r0, r3]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	bf04      	itt	eq
 8000d1c:	f100 0320 	addeq.w	r3, r0, #32
 8000d20:	b2d8      	uxtbeq	r0, r3
  if (sym <= '7' && sym >= '0') {
 8000d22:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
  sym = tolower(sym);
 8000d26:	bf18      	it	ne
 8000d28:	4603      	movne	r3, r0
  if (sym <= '7' && sym >= '0') {
 8000d2a:	2a07      	cmp	r2, #7
 8000d2c:	d912      	bls.n	8000d54 <sym_to_val+0x44>
    return sym - '0';
  }
  switch (base) {
 8000d2e:	290a      	cmp	r1, #10
 8000d30:	d008      	beq.n	8000d44 <sym_to_val+0x34>
 8000d32:	2910      	cmp	r1, #16
 8000d34:	d002      	beq.n	8000d3c <sym_to_val+0x2c>
 8000d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d3a:	4770      	bx	lr
  case 16:
    if (sym <= 'f' && sym >= 'a') {
 8000d3c:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
 8000d40:	2a05      	cmp	r2, #5
 8000d42:	d90a      	bls.n	8000d5a <sym_to_val+0x4a>
      return (sym - 'a' + 0xa);
    }
    /* fallthrough */
  case 10:
    if (sym == '8') {
 8000d44:	2838      	cmp	r0, #56	; 0x38
 8000d46:	d00b      	beq.n	8000d60 <sym_to_val+0x50>
      return 8;
    }
    if (sym == '9') {
      return 9;
 8000d48:	2839      	cmp	r0, #57	; 0x39
 8000d4a:	bf14      	ite	ne
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d50:	2009      	moveq	r0, #9
 8000d52:	4770      	bx	lr
    return sym - '0';
 8000d54:	b2d8      	uxtb	r0, r3
 8000d56:	3830      	subs	r0, #48	; 0x30
 8000d58:	4770      	bx	lr
      return (sym - 'a' + 0xa);
 8000d5a:	b2d8      	uxtb	r0, r3
 8000d5c:	3857      	subs	r0, #87	; 0x57
 8000d5e:	4770      	bx	lr
      return 8;
 8000d60:	2008      	movs	r0, #8
    }
    /* fallthrough */
  default:
    return -1;
  }
}
 8000d62:	4770      	bx	lr
 8000d64:	08009c09 	.word	0x08009c09
	...

08000d70 <_port_irq_epilogue>:
 8000d70:	2320      	movs	r3, #32
 8000d72:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <_port_irq_epilogue+0x3c>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000d7e:	d102      	bne.n	8000d86 <_port_irq_epilogue+0x16>
 8000d80:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000d84:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000d86:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 8000d8a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8000d8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d90:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000d92:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000d96:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <_port_irq_epilogue+0x40>)
 8000d98:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8000d9a:	6952      	ldr	r2, [r2, #20]
    if (chSchIsPreemptionRequired()) {
 8000d9c:	6889      	ldr	r1, [r1, #8]
 8000d9e:	6892      	ldr	r2, [r2, #8]
 8000da0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000da2:	bf8c      	ite	hi
 8000da4:	4a03      	ldrhi	r2, [pc, #12]	; (8000db4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000da6:	4a04      	ldrls	r2, [pc, #16]	; (8000db8 <_port_irq_epilogue+0x48>)
 8000da8:	619a      	str	r2, [r3, #24]
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00
 8000db0:	200018d0 	.word	0x200018d0
 8000db4:	08000303 	.word	0x08000303
 8000db8:	08000306 	.word	0x08000306
 8000dbc:	00000000 	.word	0x00000000

08000dc0 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000dc0:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000dc2:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000dc4:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000dc8:	4249      	negs	r1, r1
 8000dca:	1a20      	subs	r0, r4, r0
 8000dcc:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d304      	bcc.n	8000ddc <chCoreAllocAlignedI+0x1c>
 8000dd2:	4284      	cmp	r4, r0
 8000dd4:	d302      	bcc.n	8000ddc <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000dd6:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8000dd8:	6050      	str	r0, [r2, #4]
 8000dda:	4770      	bx	lr
    return NULL;
 8000ddc:	2000      	movs	r0, #0
 8000dde:	bc10      	pop	{r4}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20001a68 	.word	0x20001a68
	...

08000df0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <chTMStopMeasurementX+0x40>)
 8000df4:	6852      	ldr	r2, [r2, #4]
 8000df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  tmp->last = (now - tmp->last) - offset;
 8000df8:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000dfa:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 8000dfc:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 8000dfe:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8000e02:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000e04:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8000e06:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 8000e08:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 8000e0a:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8000e0c:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 8000e0e:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8000e10:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000e12:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000e16:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8000e18:	bf88      	it	hi
 8000e1a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8000e1c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000e1e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8000e22:	bf38      	it	cc
 8000e24:	6003      	strcc	r3, [r0, #0]
}
 8000e26:	bc30      	pop	{r4, r5}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e0001000 	.word	0xe0001000
 8000e30:	200018d0 	.word	0x200018d0
	...

08000e40 <chTMStartMeasurementX>:
 8000e40:	4b01      	ldr	r3, [pc, #4]	; (8000e48 <chTMStartMeasurementX+0x8>)
 8000e42:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8000e44:	6083      	str	r3, [r0, #8]
}
 8000e46:	4770      	bx	lr
 8000e48:	e0001000 	.word	0xe0001000
 8000e4c:	00000000 	.word	0x00000000

08000e50 <chThdCreateSuspendedI>:
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000e50:	6883      	ldr	r3, [r0, #8]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8000e52:	6841      	ldr	r1, [r0, #4]
  REG_INSERT(tp);
 8000e54:	4a1a      	ldr	r2, [pc, #104]	; (8000ec0 <chThdCreateSuspendedI+0x70>)
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8000e56:	b4f0      	push	{r4, r5, r6, r7}
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000e58:	e9d0 7504 	ldrd	r7, r5, [r0, #16]
  tp->state     = CH_STATE_WTSTART;
 8000e5c:	2602      	movs	r6, #2
  tp->wabase = tdp->wbase;
 8000e5e:	f843 1c2c 	str.w	r1, [r3, #-44]
  tp->refs      = (trefs_t)1;
 8000e62:	2401      	movs	r4, #1
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000e64:	2100      	movs	r1, #0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000e66:	e943 751b 	strd	r7, r5, [r3, #-108]	; 0x6c

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 8000e6a:	6805      	ldr	r5, [r0, #0]
 8000e6c:	68c0      	ldr	r0, [r0, #12]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000e6e:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 8000e72:	f803 6c28 	strb.w	r6, [r3, #-40]
  tp->refs      = (trefs_t)1;
 8000e76:	f803 4c26 	strb.w	r4, [r3, #-38]
  REG_INSERT(tp);
 8000e7a:	f843 2c3c 	str.w	r2, [r3, #-60]
 8000e7e:	6914      	ldr	r4, [r2, #16]
  tp->prio      = prio;
 8000e80:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
 8000e84:	f843 0c0c 	str.w	r0, [r3, #-12]
  tp->name      = name;
 8000e88:	f843 5c30 	str.w	r5, [r3, #-48]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000e8c:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 8000e90:	4d0c      	ldr	r5, [pc, #48]	; (8000ec4 <chThdCreateSuspendedI+0x74>)
 8000e92:	f843 0c34 	str.w	r0, [r3, #-52]
  tp->epending  = (eventmask_t)0;
 8000e96:	e943 1105 	strd	r1, r1, [r3, #-20]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000e9a:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000e9e:	f843 5c4c 	str.w	r5, [r3, #-76]
  queue_init(&tp->msgqueue);
 8000ea2:	f1a3 011c 	sub.w	r1, r3, #28
  list_init(&tp->waiting);
 8000ea6:	f1a3 0520 	sub.w	r5, r3, #32
  REG_INSERT(tp);
 8000eaa:	f843 4c38 	str.w	r4, [r3, #-56]
 8000eae:	60e0      	str	r0, [r4, #12]
 8000eb0:	6110      	str	r0, [r2, #16]
  tqp->next = (thread_t *)tqp;
 8000eb2:	e943 5108 	strd	r5, r1, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8000eb6:	f843 1c18 	str.w	r1, [r3, #-24]
}
 8000eba:	bcf0      	pop	{r4, r5, r6, r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	200018d0 	.word	0x200018d0
 8000ec4:	080002f1 	.word	0x080002f1
	...

08000ed0 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000ed0:	2320      	movs	r3, #32
 8000ed2:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8000ed6:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000eda:	2b07      	cmp	r3, #7
 8000edc:	d80d      	bhi.n	8000efa <wakeup+0x2a>
 8000ede:	e8df f003 	tbb	[pc, r3]
 8000ee2:	0c27      	.short	0x0c27
 8000ee4:	0408230c 	.word	0x0408230c
 8000ee8:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 8000eea:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000eec:	6893      	ldr	r3, [r2, #8]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000ef2:	e9d0 3200 	ldrd	r3, r2, [r0]
 8000ef6:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000ef8:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 8000efa:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 8000efc:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000efe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 8000f02:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8000f06:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8000f08:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8000f0c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	428a      	cmp	r2, r1
 8000f12:	d2fb      	bcs.n	8000f0c <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	2100      	movs	r1, #0
 8000f18:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000f1c:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000f1e:	6058      	str	r0, [r3, #4]
 8000f20:	f381 8811 	msr	BASEPRI, r1
}
 8000f24:	bc10      	pop	{r4}
 8000f26:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8000f28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
    break;
 8000f2e:	e7e4      	b.n	8000efa <wakeup+0x2a>
 8000f30:	2300      	movs	r3, #0
 8000f32:	f383 8811 	msr	BASEPRI, r3
 8000f36:	4770      	bx	lr
 8000f38:	200018d0 	.word	0x200018d0
 8000f3c:	00000000 	.word	0x00000000

08000f40 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8000f40:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8000f42:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 8000f46:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8000f4a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	428a      	cmp	r2, r1
 8000f50:	d2fb      	bcs.n	8000f4a <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000f58:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000f5a:	6058      	str	r0, [r3, #4]
}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	200018d0 	.word	0x200018d0
	...

08000f70 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8000f70:	b538      	push	{r3, r4, r5, lr}
 8000f72:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000f74:	6800      	ldr	r0, [r0, #0]

  while (queue_notempty(tqp)) {
 8000f76:	4284      	cmp	r4, r0
 8000f78:	d00a      	beq.n	8000f90 <chThdDequeueAllI.constprop.0+0x20>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000f7a:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 8000f7e:	6803      	ldr	r3, [r0, #0]
 8000f80:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000f82:	605c      	str	r4, [r3, #4]
 8000f84:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000f86:	f7ff ffdb 	bl	8000f40 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000f8a:	6820      	ldr	r0, [r4, #0]
 8000f8c:	42a0      	cmp	r0, r4
 8000f8e:	d1f6      	bne.n	8000f7e <chThdDequeueAllI.constprop.0+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8000f90:	bd38      	pop	{r3, r4, r5, pc}
 8000f92:	bf00      	nop
	...

08000fa0 <chThdDequeueNextI.constprop.0>:
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	6800      	ldr	r0, [r0, #0]
  if (queue_notempty(tqp)) {
 8000fa4:	4283      	cmp	r3, r0
 8000fa6:	d006      	beq.n	8000fb6 <chThdDequeueNextI.constprop.0+0x16>
  tqp->next             = tp->queue.next;
 8000fa8:	6802      	ldr	r2, [r0, #0]
 8000faa:	601a      	str	r2, [r3, #0]
  tp->u.rdymsg = msg;
 8000fac:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8000fae:	6053      	str	r3, [r2, #4]
 8000fb0:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000fb2:	f7ff bfc5 	b.w	8000f40 <chSchReadyI>
}
 8000fb6:	4770      	bx	lr
	...

08000fc0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000fc2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000fc4:	42a0      	cmp	r0, r4
 8000fc6:	d021      	beq.n	800100c <chEvtBroadcastFlagsI+0x4c>
 8000fc8:	4607      	mov	r7, r0
 8000fca:	460d      	mov	r5, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000fcc:	2600      	movs	r6, #0
 8000fce:	e004      	b.n	8000fda <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000fd0:	2a0b      	cmp	r2, #11
 8000fd2:	d01c      	beq.n	800100e <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
 8000fd4:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000fd6:	42a7      	cmp	r7, r4
 8000fd8:	d018      	beq.n	800100c <chEvtBroadcastFlagsI+0x4c>
    elp->flags |= flags;
 8000fda:	68e3      	ldr	r3, [r4, #12]
 8000fdc:	432b      	orrs	r3, r5
 8000fde:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000fe0:	b115      	cbz	r5, 8000fe8 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000fe2:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8000fe4:	421d      	tst	r5, r3
 8000fe6:	d0f5      	beq.n	8000fd4 <chEvtBroadcastFlagsI+0x14>
  tp->epending |= events;
 8000fe8:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 8000fec:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000fee:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8000ff2:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000ff4:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8000ff6:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000ff8:	d1ea      	bne.n	8000fd0 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000ffa:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000ffc:	4213      	tst	r3, r2
 8000ffe:	d0e9      	beq.n	8000fd4 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
 8001000:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001002:	f7ff ff9d 	bl	8000f40 <chSchReadyI>
    elp = elp->next;
 8001006:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001008:	42a7      	cmp	r7, r4
 800100a:	d1e6      	bne.n	8000fda <chEvtBroadcastFlagsI+0x1a>
}
 800100c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800100e:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8001010:	ea32 0303 	bics.w	r3, r2, r3
 8001014:	d1de      	bne.n	8000fd4 <chEvtBroadcastFlagsI+0x14>
 8001016:	e7f3      	b.n	8001000 <chEvtBroadcastFlagsI+0x40>
	...

08001020 <chSysPolledDelayX>:
 8001020:	4a03      	ldr	r2, [pc, #12]	; (8001030 <chSysPolledDelayX+0x10>)
 8001022:	6851      	ldr	r1, [r2, #4]
 8001024:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)(((rtcnt_t)cnt - (rtcnt_t)start) <
 8001026:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8001028:	4298      	cmp	r0, r3
 800102a:	d8fb      	bhi.n	8001024 <chSysPolledDelayX+0x4>
  }
}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e0001000 	.word	0xe0001000
	...

08001040 <_idle_thread>:
}
 8001040:	e7fe      	b.n	8001040 <_idle_thread>
 8001042:	bf00      	nop
	...

08001050 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
 8001050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8001054:	f8d0 6254 	ldr.w	r6, [r0, #596]	; 0x254
  uint16_t cr1 = u->CR1;
 8001058:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 800105c:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 800105e:	05da      	lsls	r2, r3, #23
static void serve_interrupt(SerialDriver *sdp) {
 8001060:	4605      	mov	r5, r0
  uint16_t sr = u->SR;
 8001062:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8001064:	d475      	bmi.n	8001152 <serve_interrupt+0x102>
 8001066:	2320      	movs	r3, #32
 8001068:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800106c:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001070:	d045      	beq.n	80010fe <serve_interrupt+0xae>
  chnAddFlagsI(sdp, sts);
 8001072:	1d2f      	adds	r7, r5, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8001074:	f105 080c 	add.w	r8, r5, #12
 8001078:	e008      	b.n	800108c <serve_interrupt+0x3c>
    if (sr & USART_SR_RXNE)
 800107a:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800107c:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8001080:	d41e      	bmi.n	80010c0 <serve_interrupt+0x70>
    sr = u->SR;
 8001082:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001084:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8001088:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800108a:	d038      	beq.n	80010fe <serve_interrupt+0xae>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800108c:	0723      	lsls	r3, r4, #28
 800108e:	d0f4      	beq.n	800107a <serve_interrupt+0x2a>
    sts |= SD_OVERRUN_ERROR;
 8001090:	f014 0f08 	tst.w	r4, #8
 8001094:	bf0c      	ite	eq
 8001096:	2100      	moveq	r1, #0
 8001098:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800109a:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 800109c:	bf48      	it	mi
 800109e:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 80010a2:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 80010a4:	bf48      	it	mi
 80010a6:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 80010aa:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 80010ac:	bf48      	it	mi
 80010ae:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80010b2:	4638      	mov	r0, r7
 80010b4:	f7ff ff84 	bl	8000fc0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 80010b8:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80010ba:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 80010be:	d5e0      	bpl.n	8001082 <serve_interrupt+0x32>
  if (iqIsEmptyI(&sdp->iqueue))
 80010c0:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 80010c2:	f895 4258 	ldrb.w	r4, [r5, #600]	; 0x258
 80010c6:	b39b      	cbz	r3, 8001130 <serve_interrupt+0xe0>
  if (!iqIsFullI(iqp)) {
 80010c8:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d037      	beq.n	8001140 <serve_interrupt+0xf0>
    iqp->q_counter++;
 80010d0:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 80010d2:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 80010d4:	3201      	adds	r2, #1
 80010d6:	ea04 0a0a 	and.w	sl, r4, sl
 80010da:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 80010dc:	6229      	str	r1, [r5, #32]
 80010de:	f883 a000 	strb.w	sl, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 80010e2:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d301      	bcc.n	80010ee <serve_interrupt+0x9e>
      iqp->q_wrptr = iqp->q_buffer;
 80010ea:	69ab      	ldr	r3, [r5, #24]
 80010ec:	622b      	str	r3, [r5, #32]
  chThdDequeueNextI(tqp, msg);
 80010ee:	4640      	mov	r0, r8
 80010f0:	f7ff ff56 	bl	8000fa0 <chThdDequeueNextI.constprop.0>
    sr = u->SR;
 80010f4:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80010f6:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 80010fa:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80010fc:	d1c6      	bne.n	800108c <serve_interrupt+0x3c>
 80010fe:	2300      	movs	r3, #0
 8001100:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001104:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001108:	d001      	beq.n	800110e <serve_interrupt+0xbe>
 800110a:	0622      	lsls	r2, r4, #24
 800110c:	d430      	bmi.n	8001170 <serve_interrupt+0x120>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800110e:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001112:	d00b      	beq.n	800112c <serve_interrupt+0xdc>
 8001114:	0663      	lsls	r3, r4, #25
 8001116:	d509      	bpl.n	800112c <serve_interrupt+0xdc>
 8001118:	2320      	movs	r3, #32
 800111a:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 800111e:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8001122:	429a      	cmp	r2, r3
 8001124:	d03f      	beq.n	80011a6 <serve_interrupt+0x156>
 8001126:	2300      	movs	r3, #0
 8001128:	f383 8811 	msr	BASEPRI, r3
}
 800112c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chEvtBroadcastFlagsI(esp, flags);
 8001130:	2104      	movs	r1, #4
 8001132:	4638      	mov	r0, r7
 8001134:	f7ff ff44 	bl	8000fc0 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 8001138:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 800113c:	4293      	cmp	r3, r2
 800113e:	d1c7      	bne.n	80010d0 <serve_interrupt+0x80>
 8001140:	696a      	ldr	r2, [r5, #20]
 8001142:	2a00      	cmp	r2, #0
 8001144:	d0c4      	beq.n	80010d0 <serve_interrupt+0x80>
 8001146:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800114a:	4638      	mov	r0, r7
 800114c:	f7ff ff38 	bl	8000fc0 <chEvtBroadcastFlagsI>
 8001150:	e797      	b.n	8001082 <serve_interrupt+0x32>
 8001152:	2320      	movs	r3, #32
 8001154:	f383 8811 	msr	BASEPRI, r3
 8001158:	f44f 7100 	mov.w	r1, #512	; 0x200
 800115c:	3004      	adds	r0, #4
 800115e:	f7ff ff2f 	bl	8000fc0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8001162:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8001166:	6033      	str	r3, [r6, #0]
 8001168:	2300      	movs	r3, #0
 800116a:	f383 8811 	msr	BASEPRI, r3
 800116e:	e77a      	b.n	8001066 <serve_interrupt+0x16>
 8001170:	2320      	movs	r3, #32
 8001172:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8001176:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 800117a:	429a      	cmp	r2, r3
 800117c:	d020      	beq.n	80011c0 <serve_interrupt+0x170>
    uint8_t b;

    oqp->q_counter++;
 800117e:	6baa      	ldr	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
 8001180:	6c29      	ldr	r1, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8001182:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 8001184:	3201      	adds	r2, #1
 8001186:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8001188:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 800118a:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 800118c:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 800118e:	d301      	bcc.n	8001194 <serve_interrupt+0x144>
      oqp->q_rdptr = oqp->q_buffer;
 8001190:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001192:	64ab      	str	r3, [r5, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 8001194:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8001198:	f7ff ff02 	bl	8000fa0 <chThdDequeueNextI.constprop.0>
      u->DR = b;
 800119c:	6077      	str	r7, [r6, #4]
 800119e:	2300      	movs	r3, #0
 80011a0:	f383 8811 	msr	BASEPRI, r3
 80011a4:	e7b3      	b.n	800110e <serve_interrupt+0xbe>
    if (oqIsEmptyI(&sdp->oqueue)) {
 80011a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0bc      	beq.n	8001126 <serve_interrupt+0xd6>
  chEvtBroadcastFlagsI(esp, flags);
 80011ac:	1d28      	adds	r0, r5, #4
 80011ae:	2110      	movs	r1, #16
 80011b0:	f7ff ff06 	bl	8000fc0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 80011b4:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80011b8:	ea09 0303 	and.w	r3, r9, r3
 80011bc:	60f3      	str	r3, [r6, #12]
 80011be:	e7b2      	b.n	8001126 <serve_interrupt+0xd6>
  if (!oqIsEmptyI(oqp)) {
 80011c0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	d0db      	beq.n	800117e <serve_interrupt+0x12e>
 80011c6:	2108      	movs	r1, #8
 80011c8:	1d28      	adds	r0, r5, #4
 80011ca:	f7ff fef9 	bl	8000fc0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80011ce:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80011d2:	ea09 0303 	and.w	r3, r9, r3
 80011d6:	60f3      	str	r3, [r6, #12]
 80011d8:	e7e1      	b.n	800119e <serve_interrupt+0x14e>
 80011da:	bf00      	nop
 80011dc:	0000      	movs	r0, r0
	...

080011e0 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80011e0:	f011 0f0c 	tst.w	r1, #12
 80011e4:	d100      	bne.n	80011e8 <spi_lld_serve_tx_interrupt+0x8>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 80011e6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 80011ea:	4b02      	ldr	r3, [pc, #8]	; (80011f4 <spi_lld_serve_tx_interrupt+0x14>)
 80011ec:	4a02      	ldr	r2, [pc, #8]	; (80011f8 <spi_lld_serve_tx_interrupt+0x18>)
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
 80011f0:	e7fe      	b.n	80011f0 <spi_lld_serve_tx_interrupt+0x10>
 80011f2:	bf00      	nop
 80011f4:	200018d0 	.word	0x200018d0
 80011f8:	08009310 	.word	0x08009310
 80011fc:	00000000 	.word	0x00000000

08001200 <spi_lld_serve_rx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001200:	f011 0f0c 	tst.w	r1, #12
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8001204:	b538      	push	{r3, r4, r5, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001206:	d14f      	bne.n	80012a8 <spi_lld_serve_rx_interrupt+0xa8>
  if (spip->config->circular) {
 8001208:	460d      	mov	r5, r1
 800120a:	6841      	ldr	r1, [r0, #4]
 800120c:	780b      	ldrb	r3, [r1, #0]
 800120e:	4604      	mov	r4, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d133      	bne.n	800127c <spi_lld_serve_rx_interrupt+0x7c>
    dmaStreamDisable(spip->dmatx);
 8001214:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001216:	682a      	ldr	r2, [r5, #0]
 8001218:	6813      	ldr	r3, [r2, #0]
 800121a:	f023 031f 	bic.w	r3, r3, #31
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	6813      	ldr	r3, [r2, #0]
 8001222:	07d8      	lsls	r0, r3, #31
 8001224:	d4fc      	bmi.n	8001220 <spi_lld_serve_rx_interrupt+0x20>
 8001226:	7a6a      	ldrb	r2, [r5, #9]
    dmaStreamDisable(spip->dmarx);
 8001228:	6a20      	ldr	r0, [r4, #32]
    dmaStreamDisable(spip->dmatx);
 800122a:	686d      	ldr	r5, [r5, #4]
 800122c:	233d      	movs	r3, #61	; 0x3d
 800122e:	4093      	lsls	r3, r2
    dmaStreamDisable(spip->dmarx);
 8001230:	6802      	ldr	r2, [r0, #0]
    dmaStreamDisable(spip->dmatx);
 8001232:	602b      	str	r3, [r5, #0]
    dmaStreamDisable(spip->dmarx);
 8001234:	6813      	ldr	r3, [r2, #0]
 8001236:	f023 031f 	bic.w	r3, r3, #31
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	6813      	ldr	r3, [r2, #0]
 800123e:	07db      	lsls	r3, r3, #31
 8001240:	d4fc      	bmi.n	800123c <spi_lld_serve_rx_interrupt+0x3c>
 8001242:	7a45      	ldrb	r5, [r0, #9]
    _spi_isr_code(spip);
 8001244:	684a      	ldr	r2, [r1, #4]
    dmaStreamDisable(spip->dmarx);
 8001246:	6841      	ldr	r1, [r0, #4]
 8001248:	233d      	movs	r3, #61	; 0x3d
 800124a:	40ab      	lsls	r3, r5
 800124c:	600b      	str	r3, [r1, #0]
    _spi_isr_code(spip);
 800124e:	2a00      	cmp	r2, #0
 8001250:	d02f      	beq.n	80012b2 <spi_lld_serve_rx_interrupt+0xb2>
 8001252:	2304      	movs	r3, #4
 8001254:	7023      	strb	r3, [r4, #0]
 8001256:	4620      	mov	r0, r4
 8001258:	4790      	blx	r2
 800125a:	7823      	ldrb	r3, [r4, #0]
 800125c:	2b04      	cmp	r3, #4
 800125e:	d028      	beq.n	80012b2 <spi_lld_serve_rx_interrupt+0xb2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001260:	2320      	movs	r3, #32
 8001262:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001266:	68a0      	ldr	r0, [r4, #8]
 8001268:	b120      	cbz	r0, 8001274 <spi_lld_serve_rx_interrupt+0x74>
    *trp = NULL;
 800126a:	2300      	movs	r3, #0
 800126c:	60a3      	str	r3, [r4, #8]
    tp->u.rdymsg = msg;
 800126e:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001270:	f7ff fe66 	bl	8000f40 <chSchReadyI>
 8001274:	2300      	movs	r3, #0
 8001276:	f383 8811 	msr	BASEPRI, r3
}
 800127a:	bd38      	pop	{r3, r4, r5, pc}
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 800127c:	06eb      	lsls	r3, r5, #27
 800127e:	d503      	bpl.n	8001288 <spi_lld_serve_rx_interrupt+0x88>
      _spi_isr_half_code(spip);
 8001280:	684b      	ldr	r3, [r1, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f9      	beq.n	800127a <spi_lld_serve_rx_interrupt+0x7a>
 8001286:	4798      	blx	r3
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8001288:	06ad      	lsls	r5, r5, #26
 800128a:	d5f6      	bpl.n	800127a <spi_lld_serve_rx_interrupt+0x7a>
      _spi_isr_full_code(spip);
 800128c:	6863      	ldr	r3, [r4, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f2      	beq.n	800127a <spi_lld_serve_rx_interrupt+0x7a>
 8001294:	2204      	movs	r2, #4
 8001296:	7022      	strb	r2, [r4, #0]
 8001298:	4620      	mov	r0, r4
 800129a:	4798      	blx	r3
 800129c:	7823      	ldrb	r3, [r4, #0]
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d1eb      	bne.n	800127a <spi_lld_serve_rx_interrupt+0x7a>
 80012a2:	2303      	movs	r3, #3
 80012a4:	7023      	strb	r3, [r4, #0]
}
 80012a6:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <spi_lld_serve_rx_interrupt+0xc4>)
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <spi_lld_serve_rx_interrupt+0xc8>)
 80012ae:	629a      	str	r2, [r3, #40]	; 0x28
 80012b0:	e7fe      	b.n	80012b0 <spi_lld_serve_rx_interrupt+0xb0>
    _spi_isr_code(spip);
 80012b2:	2302      	movs	r3, #2
 80012b4:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80012b6:	2320      	movs	r3, #32
 80012b8:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80012bc:	68a0      	ldr	r0, [r4, #8]
 80012be:	2800      	cmp	r0, #0
 80012c0:	d1d3      	bne.n	800126a <spi_lld_serve_rx_interrupt+0x6a>
 80012c2:	e7d7      	b.n	8001274 <spi_lld_serve_rx_interrupt+0x74>
 80012c4:	200018d0 	.word	0x200018d0
 80012c8:	08009310 	.word	0x08009310
 80012cc:	00000000 	.word	0x00000000

080012d0 <usb_lld_start_in>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80012d0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 80012d4:	b430      	push	{r4, r5}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80012d6:	68dc      	ldr	r4, [r3, #12]
 80012d8:	6962      	ldr	r2, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 80012da:	6813      	ldr	r3, [r2, #0]
 80012dc:	60d3      	str	r3, [r2, #12]
  if (isp->txsize == 0) {
 80012de:	b9f3      	cbnz	r3, 800131e <usb_lld_start_in+0x4e>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 80012e0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80012e2:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 80012e6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012ea:	f8c3 0910 	str.w	r0, [r3, #2320]	; 0x910
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d02a      	beq.n	800134e <usb_lld_start_in+0x7e>
 80012f8:	b208      	sxth	r0, r1
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 80012fa:	eb02 1040 	add.w	r0, r2, r0, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 80012fe:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8001300:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8001304:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001308:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800130c:	f8d2 0834 	ldr.w	r0, [r2, #2100]	; 0x834
 8001310:	fa03 f101 	lsl.w	r1, r3, r1
 8001314:	4301      	orrs	r1, r0
}
 8001316:	bc30      	pop	{r4, r5}
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8001318:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
 800131c:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 800131e:	b919      	cbnz	r1, 8001328 <usb_lld_start_in+0x58>
 8001320:	2b40      	cmp	r3, #64	; 0x40
      isp->txsize = EP0_MAX_INSIZE;
 8001322:	bf84      	itt	hi
 8001324:	2340      	movhi	r3, #64	; 0x40
 8001326:	6013      	strhi	r3, [r2, #0]
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8001328:	8a25      	ldrh	r5, [r4, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800132a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800132c:	1e68      	subs	r0, r5, #1
 800132e:	4418      	add	r0, r3
 8001330:	fbb0 f0f5 	udiv	r0, r0, r5
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8001334:	eb02 1541 	add.w	r5, r2, r1, lsl #5
 8001338:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 800133c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001340:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d1d4      	bne.n	80012f8 <usb_lld_start_in+0x28>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 800134e:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 8001352:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001356:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 800135a:	b208      	sxth	r0, r1
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 800135c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8001360:	bf14      	ite	ne
 8001362:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8001366:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
 800136a:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 800136e:	e7c4      	b.n	80012fa <usb_lld_start_in+0x2a>

08001370 <otg_epin_handler.constprop.0>:
  stm32_otg_t *otgp = usbp->otg;
 8001370:	4a20      	ldr	r2, [pc, #128]	; (80013f4 <otg_epin_handler.constprop.0+0x84>)
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8001372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  stm32_otg_t *otgp = usbp->otg;
 8001374:	6d56      	ldr	r6, [r2, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8001376:	eb06 1340 	add.w	r3, r6, r0, lsl #5
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800137a:	4604      	mov	r4, r0
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800137c:	f8d3 5908 	ldr.w	r5, [r3, #2312]	; 0x908
  otgp->ie[ep].DIEPINT = epint;
 8001380:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8001384:	07e8      	lsls	r0, r5, #31
 8001386:	d503      	bpl.n	8001390 <otg_epin_handler.constprop.0+0x20>
 8001388:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 800138c:	07d9      	lsls	r1, r3, #31
 800138e:	d408      	bmi.n	80013a2 <otg_epin_handler.constprop.0+0x32>
  if ((epint & DIEPINT_TXFE) &&
 8001390:	062b      	lsls	r3, r5, #24
 8001392:	d505      	bpl.n	80013a0 <otg_epin_handler.constprop.0+0x30>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8001394:	f8d6 2834 	ldr.w	r2, [r6, #2100]	; 0x834
 8001398:	2301      	movs	r3, #1
 800139a:	40a3      	lsls	r3, r4
  if ((epint & DIEPINT_TXFE) &&
 800139c:	4213      	tst	r3, r2
 800139e:	d115      	bne.n	80013cc <otg_epin_handler.constprop.0+0x5c>
}
 80013a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80013a2:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 80013a6:	68d8      	ldr	r0, [r3, #12]
 80013a8:	6943      	ldr	r3, [r0, #20]
    if (isp->txsize < isp->totsize) {
 80013aa:	681f      	ldr	r7, [r3, #0]
 80013ac:	68d9      	ldr	r1, [r3, #12]
 80013ae:	428f      	cmp	r7, r1
 80013b0:	d311      	bcc.n	80013d6 <otg_epin_handler.constprop.0+0x66>
      _usb_isr_invoke_in_cb(usbp, ep);
 80013b2:	8913      	ldrh	r3, [r2, #8]
 80013b4:	6887      	ldr	r7, [r0, #8]
 80013b6:	2101      	movs	r1, #1
 80013b8:	40a1      	lsls	r1, r4
 80013ba:	ea23 0301 	bic.w	r3, r3, r1
 80013be:	8113      	strh	r3, [r2, #8]
 80013c0:	2f00      	cmp	r7, #0
 80013c2:	d0e5      	beq.n	8001390 <otg_epin_handler.constprop.0+0x20>
 80013c4:	4610      	mov	r0, r2
 80013c6:	4621      	mov	r1, r4
 80013c8:	47b8      	blx	r7
 80013ca:	e7e1      	b.n	8001390 <otg_epin_handler.constprop.0+0x20>
    otg_txfifo_handler(usbp, ep);
 80013cc:	4620      	mov	r0, r4
}
 80013ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    otg_txfifo_handler(usbp, ep);
 80013d2:	f7ff babd 	b.w	8000950 <otg_txfifo_handler.constprop.0>
      isp->txsize = isp->totsize - isp->txsize;
 80013d6:	1bc9      	subs	r1, r1, r7
      isp->txcnt  = 0;
 80013d8:	2700      	movs	r7, #0
 80013da:	e9c3 1700 	strd	r1, r7, [r3]
 80013de:	2320      	movs	r3, #32
 80013e0:	f383 8811 	msr	BASEPRI, r3
      usb_lld_start_in(usbp, ep);
 80013e4:	4610      	mov	r0, r2
 80013e6:	4621      	mov	r1, r4
 80013e8:	f7ff ff72 	bl	80012d0 <usb_lld_start_in>
 80013ec:	f387 8811 	msr	BASEPRI, r7
 80013f0:	e7ce      	b.n	8001390 <otg_epin_handler.constprop.0+0x20>
 80013f2:	bf00      	nop
 80013f4:	20001868 	.word	0x20001868
	...

08001400 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8001400:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8001404:	b430      	push	{r4, r5}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8001406:	68dd      	ldr	r5, [r3, #12]
 8001408:	69ab      	ldr	r3, [r5, #24]
  osp->totsize = osp->rxsize;
 800140a:	681c      	ldr	r4, [r3, #0]
 800140c:	60dc      	str	r4, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 800140e:	b919      	cbnz	r1, 8001418 <usb_lld_start_out+0x18>
 8001410:	2c40      	cmp	r4, #64	; 0x40
      osp->rxsize = EP0_MAX_OUTSIZE;
 8001412:	bf84      	itt	hi
 8001414:	2440      	movhi	r4, #64	; 0x40
 8001416:	601c      	strhi	r4, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8001418:	8a6b      	ldrh	r3, [r5, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800141a:	6d40      	ldr	r0, [r0, #84]	; 0x54
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800141c:	682d      	ldr	r5, [r5, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	4422      	add	r2, r4
 8001422:	fbb2 f2f3 	udiv	r2, r2, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 8001426:	fb02 f303 	mul.w	r3, r2, r3
 800142a:	3303      	adds	r3, #3
 800142c:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8001430:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 8001434:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001438:	f005 0203 	and.w	r2, r5, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800143c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001440:	2a01      	cmp	r2, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8001442:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001446:	d00a      	beq.n	800145e <usb_lld_start_out+0x5e>
 8001448:	b209      	sxth	r1, r1
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 800144a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 800144e:	bc30      	pop	{r4, r5}
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8001450:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8001454:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001458:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 800145c:	4770      	bx	lr
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 800145e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001462:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 8001466:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 800146a:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800146e:	bf14      	ite	ne
 8001470:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 8001474:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8001478:	b209      	sxth	r1, r1
 800147a:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 800147e:	e7e4      	b.n	800144a <usb_lld_start_out+0x4a>

08001480 <otg_epout_handler.constprop.0>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8001480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8001484:	4f24      	ldr	r7, [pc, #144]	; (8001518 <otg_epout_handler.constprop.0+0x98>)
 8001486:	6d7e      	ldr	r6, [r7, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8001488:	eb06 1340 	add.w	r3, r6, r0, lsl #5
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800148c:	4604      	mov	r4, r0
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800148e:	f8d3 5b08 	ldr.w	r5, [r3, #2824]	; 0xb08
  otgp->oe[ep].DOEPINT = epint;
 8001492:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8001496:	0728      	lsls	r0, r5, #28
 8001498:	d503      	bpl.n	80014a2 <otg_epout_handler.constprop.0+0x22>
 800149a:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 800149e:	0719      	lsls	r1, r3, #28
 80014a0:	d431      	bmi.n	8001506 <otg_epout_handler.constprop.0+0x86>
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 80014a2:	07ea      	lsls	r2, r5, #31
 80014a4:	d52d      	bpl.n	8001502 <otg_epout_handler.constprop.0+0x82>
 80014a6:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 80014aa:	07db      	lsls	r3, r3, #31
 80014ac:	d529      	bpl.n	8001502 <otg_epout_handler.constprop.0+0x82>
    osp = usbp->epc[ep]->out_state;
 80014ae:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 80014b2:	68d9      	ldr	r1, [r3, #12]
    if (ep == 0) {
 80014b4:	b95c      	cbnz	r4, 80014ce <otg_epout_handler.constprop.0+0x4e>
    osp = usbp->epc[ep]->out_state;
 80014b6:	698a      	ldr	r2, [r1, #24]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 80014b8:	8a48      	ldrh	r0, [r1, #18]
 80014ba:	6855      	ldr	r5, [r2, #4]
 80014bc:	fbb5 f3f0 	udiv	r3, r5, r0
 80014c0:	fb00 5313 	mls	r3, r0, r3, r5
 80014c4:	b91b      	cbnz	r3, 80014ce <otg_epout_handler.constprop.0+0x4e>
          (osp->rxsize < osp->totsize)) {
 80014c6:	6810      	ldr	r0, [r2, #0]
 80014c8:	68d3      	ldr	r3, [r2, #12]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 80014ca:	4298      	cmp	r0, r3
 80014cc:	d30d      	bcc.n	80014ea <otg_epout_handler.constprop.0+0x6a>
    _usb_isr_invoke_out_cb(usbp, ep);
 80014ce:	897b      	ldrh	r3, [r7, #10]
 80014d0:	68cd      	ldr	r5, [r1, #12]
 80014d2:	2201      	movs	r2, #1
 80014d4:	40a2      	lsls	r2, r4
 80014d6:	ea23 0302 	bic.w	r3, r3, r2
 80014da:	817b      	strh	r3, [r7, #10]
 80014dc:	b18d      	cbz	r5, 8001502 <otg_epout_handler.constprop.0+0x82>
 80014de:	4621      	mov	r1, r4
 80014e0:	462b      	mov	r3, r5
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <otg_epout_handler.constprop.0+0x98>)
}
 80014e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _usb_isr_invoke_out_cb(usbp, ep);
 80014e8:	4718      	bx	r3
        osp->rxsize = osp->totsize - osp->rxsize;
 80014ea:	1a1b      	subs	r3, r3, r0
        osp->rxcnt  = 0;
 80014ec:	e9c2 3400 	strd	r3, r4, [r2]
 80014f0:	2320      	movs	r3, #32
 80014f2:	f383 8811 	msr	BASEPRI, r3
        usb_lld_start_out(usbp, ep);
 80014f6:	4808      	ldr	r0, [pc, #32]	; (8001518 <otg_epout_handler.constprop.0+0x98>)
 80014f8:	4621      	mov	r1, r4
 80014fa:	f7ff ff81 	bl	8001400 <usb_lld_start_out>
 80014fe:	f384 8811 	msr	BASEPRI, r4
}
 8001502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _usb_isr_invoke_setup_cb(usbp, ep);
 8001506:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 800150a:	4621      	mov	r1, r4
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	4638      	mov	r0, r7
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4798      	blx	r3
 8001514:	e7c5      	b.n	80014a2 <otg_epout_handler.constprop.0+0x22>
 8001516:	bf00      	nop
 8001518:	20001868 	.word	0x20001868
 800151c:	00000000 	.word	0x00000000

08001520 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8001520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001524:	b083      	sub	sp, #12

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8001526:	f002 0c03 	and.w	ip, r2, #3
                           iomode_t mode) {
 800152a:	9201      	str	r2, [sp, #4]
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800152c:	4666      	mov	r6, ip
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800152e:	f3c2 05c1 	ubfx	r5, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8001532:	09d7      	lsrs	r7, r2, #7
  uint32_t bit     = 0;
 8001534:	2400      	movs	r4, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8001536:	f04f 090f 	mov.w	r9, #15
      m1 = 1 << bit;
 800153a:	f04f 0801 	mov.w	r8, #1
      m2 = 3 << (bit * 2);
 800153e:	f04f 0e03 	mov.w	lr, #3
 8001542:	e012      	b.n	800156a <_pal_lld_setgroupmode+0x4a>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8001544:	f8d0 b000 	ldr.w	fp, [r0]
 8001548:	ea03 030b 	and.w	r3, r3, fp
 800154c:	4333      	orrs	r3, r6
        if (bit < 8)
 800154e:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8001550:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8001552:	d83e      	bhi.n	80015d2 <_pal_lld_setgroupmode+0xb2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001554:	6a03      	ldr	r3, [r0, #32]
 8001556:	ea23 0202 	bic.w	r2, r3, r2
 800155a:	ea42 020a 	orr.w	r2, r2, sl
 800155e:	6202      	str	r2, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8001560:	0849      	lsrs	r1, r1, #1
 8001562:	d033      	beq.n	80015cc <_pal_lld_setgroupmode+0xac>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
 8001564:	00ad      	lsls	r5, r5, #2
    pupdr <<= 2;
    moder <<= 2;
 8001566:	00b6      	lsls	r6, r6, #2
    bit++;
 8001568:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 800156a:	07cb      	lsls	r3, r1, #31
 800156c:	d5f8      	bpl.n	8001560 <_pal_lld_setgroupmode+0x40>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800156e:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8001570:	fa08 f204 	lsl.w	r2, r8, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001574:	ea23 0302 	bic.w	r3, r3, r2
 8001578:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800157a:	6882      	ldr	r2, [r0, #8]
      m2 = 3 << (bit * 2);
 800157c:	0063      	lsls	r3, r4, #1
 800157e:	fa0e f303 	lsl.w	r3, lr, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001582:	ea22 0203 	bic.w	r2, r2, r3
 8001586:	432a      	orrs	r2, r5
 8001588:	6082      	str	r2, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800158a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 800158e:	f004 0207 	and.w	r2, r4, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001592:	ea2a 0a03 	bic.w	sl, sl, r3
      altrmask = altr << ((bit & 7) * 4);
 8001596:	0092      	lsls	r2, r2, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8001598:	f1bc 0f02 	cmp.w	ip, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800159c:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80015a0:	ea6f 0303 	mvn.w	r3, r3
      altrmask = altr << ((bit & 7) * 4);
 80015a4:	fa07 fa02 	lsl.w	sl, r7, r2
      m4 = 15 << ((bit & 7) * 4);
 80015a8:	fa09 f202 	lsl.w	r2, r9, r2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80015ac:	d1ca      	bne.n	8001544 <_pal_lld_setgroupmode+0x24>
        if (bit < 8)
 80015ae:	2c07      	cmp	r4, #7
 80015b0:	d816      	bhi.n	80015e0 <_pal_lld_setgroupmode+0xc0>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80015b2:	f8d0 b020 	ldr.w	fp, [r0, #32]
 80015b6:	ea2b 0202 	bic.w	r2, fp, r2
 80015ba:	ea42 020a 	orr.w	r2, r2, sl
 80015be:	6202      	str	r2, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 80015c0:	6802      	ldr	r2, [r0, #0]
 80015c2:	4013      	ands	r3, r2
 80015c4:	4333      	orrs	r3, r6
    if (!mask)
 80015c6:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 80015c8:	6003      	str	r3, [r0, #0]
    if (!mask)
 80015ca:	d1cb      	bne.n	8001564 <_pal_lld_setgroupmode+0x44>
  }
}
 80015cc:	b003      	add	sp, #12
 80015ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80015d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015d4:	ea23 0202 	bic.w	r2, r3, r2
 80015d8:	ea42 020a 	orr.w	r2, r2, sl
 80015dc:	6242      	str	r2, [r0, #36]	; 0x24
 80015de:	e7bf      	b.n	8001560 <_pal_lld_setgroupmode+0x40>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80015e0:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 80015e4:	ea2b 0202 	bic.w	r2, fp, r2
 80015e8:	ea42 020a 	orr.w	r2, r2, sl
 80015ec:	6242      	str	r2, [r0, #36]	; 0x24
 80015ee:	e7e7      	b.n	80015c0 <_pal_lld_setgroupmode+0xa0>

080015f0 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 80015f0:	b538      	push	{r3, r4, r5, lr}
 80015f2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80015f6:	4604      	mov	r4, r0
 80015f8:	2b15      	cmp	r3, #21
 80015fa:	d816      	bhi.n	800162a <_usb_ep0out+0x3a>
 80015fc:	e8df f003 	tbb	[pc, r3]
 8001600:	15151516 	.word	0x15151516
 8001604:	15161515 	.word	0x15161515
 8001608:	16161615 	.word	0x16161615
 800160c:	15151515 	.word	0x15151515
 8001610:	15151515 	.word	0x15151515
 8001614:	2c0b      	.short	0x2c0b
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8001616:	68c3      	ldr	r3, [r0, #12]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	b92b      	cbnz	r3, 800162a <_usb_ep0out+0x3a>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800161e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001620:	b103      	cbz	r3, 8001624 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 8001622:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001624:	2300      	movs	r3, #0
 8001626:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 800162a:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 800162c:	6d43      	ldr	r3, [r0, #84]	; 0x54
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800162e:	6841      	ldr	r1, [r0, #4]
 8001630:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001634:	680d      	ldr	r5, [r1, #0]
 8001636:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800163a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 800163e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001642:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001646:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800164a:	b10d      	cbz	r5, 8001650 <_usb_ep0out+0x60>
 800164c:	2106      	movs	r1, #6
 800164e:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8001650:	2306      	movs	r3, #6
 8001652:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001656:	bd38      	pop	{r3, r4, r5, pc}
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001658:	230b      	movs	r3, #11
 800165a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 800165e:	2320      	movs	r3, #32
 8001660:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001664:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001666:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001668:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 800166a:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800166c:	f042 0201 	orr.w	r2, r2, #1
 8001670:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8001672:	4629      	mov	r1, r5
  isp->txcnt  = 0;
 8001674:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8001678:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 800167a:	f7ff fe29 	bl	80012d0 <usb_lld_start_in>
 800167e:	f385 8811 	msr	BASEPRI, r5
}
 8001682:	bd38      	pop	{r3, r4, r5, pc}
	...

08001690 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8001690:	b538      	push	{r3, r4, r5, lr}
 8001692:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001696:	4604      	mov	r4, r0
 8001698:	2b15      	cmp	r3, #21
 800169a:	d821      	bhi.n	80016e0 <_usb_ep0in+0x50>
 800169c:	e8df f003 	tbb	[pc, r3]
 80016a0:	2020200b 	.word	0x2020200b
 80016a4:	200b2020 	.word	0x200b2020
 80016a8:	48312120 	.word	0x48312120
 80016ac:	20202020 	.word	0x20202020
 80016b0:	20202020 	.word	0x20202020
 80016b4:	0b0b      	.short	0x0b0b
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 80016b6:	6d43      	ldr	r3, [r0, #84]	; 0x54
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80016b8:	6841      	ldr	r1, [r0, #4]
 80016ba:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80016be:	680d      	ldr	r5, [r1, #0]
 80016c0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80016c4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 80016c8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80016cc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80016d0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80016d4:	b10d      	cbz	r5, 80016da <_usb_ep0in+0x4a>
 80016d6:	2106      	movs	r1, #6
 80016d8:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 80016da:	2306      	movs	r3, #6
 80016dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80016e0:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 80016e2:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 80016e6:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
    if ((usbp->ep0n < max) &&
 80016ea:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    max = (size_t)get_hword(&usbp->setup[6]);
 80016ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if ((usbp->ep0n < max) &&
 80016f0:	4299      	cmp	r1, r3
 80016f2:	d206      	bcs.n	8001702 <_usb_ep0in+0x72>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 80016f4:	68c3      	ldr	r3, [r0, #12]
 80016f6:	8a1b      	ldrh	r3, [r3, #16]
 80016f8:	fbb1 f5f3 	udiv	r5, r1, r3
 80016fc:	fb03 1515 	mls	r5, r3, r5, r1
    if ((usbp->ep0n < max) &&
 8001700:	b1ed      	cbz	r5, 800173e <_usb_ep0in+0xae>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001702:	2314      	movs	r3, #20
 8001704:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001708:	2320      	movs	r3, #32
 800170a:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 800170e:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001710:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8001712:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 8001714:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001716:	f042 0201 	orr.w	r2, r2, #1
 800171a:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800171c:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 800171e:	e9c3 5500 	strd	r5, r5, [r3]
  osp->rxbuf  = buf;
 8001722:	609d      	str	r5, [r3, #8]
  usb_lld_start_out(usbp, ep);
 8001724:	4629      	mov	r1, r5
 8001726:	f7ff fe6b 	bl	8001400 <usb_lld_start_out>
 800172a:	f385 8811 	msr	BASEPRI, r5
}
 800172e:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8001730:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001732:	b103      	cbz	r3, 8001736 <_usb_ep0in+0xa6>
      usbp->ep0endcb(usbp);
 8001734:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001736:	2300      	movs	r3, #0
 8001738:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800173c:	bd38      	pop	{r3, r4, r5, pc}
 800173e:	2320      	movs	r3, #32
 8001740:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001744:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001746:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001748:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800174a:	f042 0201 	orr.w	r2, r2, #1
 800174e:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8001750:	4629      	mov	r1, r5
  isp->txcnt  = 0;
 8001752:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8001756:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 8001758:	f7ff fdba 	bl	80012d0 <usb_lld_start_in>
 800175c:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 8001760:	230a      	movs	r3, #10
 8001762:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001766:	bd38      	pop	{r3, r4, r5, pc}
	...

08001770 <usbStartTransmitI>:
                       const uint8_t *buf, size_t n) {
 8001770:	b4f0      	push	{r4, r5, r6, r7}
  isp = usbp->epc[ep]->in_state;
 8001772:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001776:	8907      	ldrh	r7, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001778:	f8d5 c00c 	ldr.w	ip, [r5, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800177c:	2501      	movs	r5, #1
  isp = usbp->epc[ep]->in_state;
 800177e:	f8dc 6014 	ldr.w	r6, [ip, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001782:	408d      	lsls	r5, r1
 8001784:	433d      	orrs	r5, r7
  isp->txcnt  = 0;
 8001786:	2700      	movs	r7, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001788:	8105      	strh	r5, [r0, #8]
  isp->txcnt  = 0;
 800178a:	e9c6 3700 	strd	r3, r7, [r6]
  isp->txbuf  = buf;
 800178e:	60b2      	str	r2, [r6, #8]
}
 8001790:	bcf0      	pop	{r4, r5, r6, r7}
  usb_lld_start_in(usbp, ep);
 8001792:	f7ff bd9d 	b.w	80012d0 <usb_lld_start_in>
 8001796:	bf00      	nop
	...

080017a0 <usbDisableEndpointsI>:
  otg_ram_reset(usbp);
 80017a0:	6d81      	ldr	r1, [r0, #88]	; 0x58
  usbp->transmitting &= 1U;
 80017a2:	6883      	ldr	r3, [r0, #8]
void usbDisableEndpointsI(USBDriver *usbp) {
 80017a4:	b4f0      	push	{r4, r5, r6, r7}
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 80017a6:	680c      	ldr	r4, [r1, #0]
 80017a8:	65c4      	str	r4, [r0, #92]	; 0x5c
    usbp->epc[i] = NULL;
 80017aa:	2200      	movs	r2, #0
  usbp->transmitting &= 1U;
 80017ac:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80017b0:	688f      	ldr	r7, [r1, #8]
  otg_disable_ep(usbp);
 80017b2:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80017b4:	6083      	str	r3, [r0, #8]
    usbp->epc[i] = NULL;
 80017b6:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80017ba:	6182      	str	r2, [r0, #24]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80017bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80017c0:	e000      	b.n	80017c4 <usbDisableEndpointsI+0x24>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80017c2:	4632      	mov	r2, r6
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80017c4:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 80017c8:	460b      	mov	r3, r1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 80017ca:	f8d1 0900 	ldr.w	r0, [r1, #2304]	; 0x900
 80017ce:	2800      	cmp	r0, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80017d0:	f102 0601 	add.w	r6, r2, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 80017d4:	da05      	bge.n	80017e2 <usbDisableEndpointsI+0x42>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 80017d6:	f8d1 0900 	ldr.w	r0, [r1, #2304]	; 0x900
 80017da:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80017de:	f8c1 0900 	str.w	r0, [r1, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 80017e2:	f8d1 0b00 	ldr.w	r0, [r1, #2816]	; 0xb00
 80017e6:	2800      	cmp	r0, #0
 80017e8:	da05      	bge.n	80017f6 <usbDisableEndpointsI+0x56>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 80017ea:	f8d1 0b00 	ldr.w	r0, [r1, #2816]	; 0xb00
 80017ee:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80017f2:	f8c1 0b00 	str.w	r0, [r1, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80017f6:	42ba      	cmp	r2, r7
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80017f8:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80017fc:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001800:	d1df      	bne.n	80017c2 <usbDisableEndpointsI+0x22>
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8001802:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001806:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
}
 800180a:	bcf0      	pop	{r4, r5, r6, r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop

08001810 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
	...

08001820 <_ctl.lto_priv.0>:
}
 8001820:	2000      	movs	r0, #0
 8001822:	4770      	bx	lr
	...

08001830 <_ctl.lto_priv.1>:
 8001830:	2000      	movs	r0, #0
 8001832:	4770      	bx	lr
	...

08001840 <sdu_start_receive>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 8001840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001842:	f8d0 148c 	ldr.w	r1, [r0, #1164]	; 0x48c
 8001846:	680a      	ldr	r2, [r1, #0]
 8001848:	7813      	ldrb	r3, [r2, #0]
 800184a:	2b04      	cmp	r3, #4
 800184c:	d102      	bne.n	8001854 <sdu_start_receive+0x14>
 800184e:	7a03      	ldrb	r3, [r0, #8]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d001      	beq.n	8001858 <sdu_start_receive+0x18>
    return true;
 8001854:	2001      	movs	r0, #1
}
 8001856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001858:	790c      	ldrb	r4, [r1, #4]
 800185a:	8955      	ldrh	r5, [r2, #10]
 800185c:	2301      	movs	r3, #1
 800185e:	fa03 f404 	lsl.w	r4, r3, r4
 8001862:	4225      	tst	r5, r4
 8001864:	d1f6      	bne.n	8001854 <sdu_start_receive+0x14>
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8001866:	e9d0 4607 	ldrd	r4, r6, [r0, #28]
 800186a:	42b4      	cmp	r4, r6
 800186c:	d014      	beq.n	8001898 <sdu_start_receive+0x58>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800186e:	7949      	ldrb	r1, [r1, #5]
  osp = usbp->epc[ep]->out_state;
 8001870:	eb02 0381 	add.w	r3, r2, r1, lsl #2
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001874:	2001      	movs	r0, #1
  osp = usbp->epc[ep]->out_state;
 8001876:	68db      	ldr	r3, [r3, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001878:	4088      	lsls	r0, r1
  osp = usbp->epc[ep]->out_state;
 800187a:	699e      	ldr	r6, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800187c:	4305      	orrs	r5, r0
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 800187e:	1d23      	adds	r3, r4, #4
  osp->rxsize = n;
 8001880:	f44f 7780 	mov.w	r7, #256	; 0x100
  osp->rxcnt  = 0;
 8001884:	2400      	movs	r4, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001886:	8155      	strh	r5, [r2, #10]
  usb_lld_start_out(usbp, ep);
 8001888:	4610      	mov	r0, r2
  osp->rxcnt  = 0;
 800188a:	e9c6 7400 	strd	r7, r4, [r6]
  osp->rxbuf  = buf;
 800188e:	60b3      	str	r3, [r6, #8]
  usb_lld_start_out(usbp, ep);
 8001890:	f7ff fdb6 	bl	8001400 <usb_lld_start_out>
  return false;
 8001894:	4620      	mov	r0, r4
}
 8001896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ibqIsFullI(ibqp)) {
 8001898:	6980      	ldr	r0, [r0, #24]
 800189a:	2800      	cmp	r0, #0
 800189c:	d0e7      	beq.n	800186e <sdu_start_receive+0x2e>
 800189e:	e7d9      	b.n	8001854 <sdu_start_receive+0x14>

080018a0 <ibnotify>:
  (void) sdu_start_receive(sdup);
 80018a0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80018a2:	f7ff bfcd 	b.w	8001840 <sdu_start_receive>
 80018a6:	bf00      	nop
	...

080018b0 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 80018b0:	3109      	adds	r1, #9
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 80018b2:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 80018b4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 80018b8:	b194      	cbz	r4, 80018e0 <sduDataReceived+0x30>
 80018ba:	2320      	movs	r3, #32
 80018bc:	f383 8811 	msr	BASEPRI, r3
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 80018c0:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 80018c4:	6813      	ldr	r3, [r2, #0]
 80018c6:	7952      	ldrb	r2, [r2, #5]
 80018c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	685d      	ldr	r5, [r3, #4]
  if (size > (size_t)0) {
 80018d2:	b935      	cbnz	r5, 80018e2 <sduDataReceived+0x32>
  (void) sdu_start_receive(sdup);
 80018d4:	4620      	mov	r0, r4
 80018d6:	f7ff ffb3 	bl	8001840 <sdu_start_receive>
 80018da:	2300      	movs	r3, #0
 80018dc:	f383 8811 	msr	BASEPRI, r3
}
 80018e0:	bd38      	pop	{r3, r4, r5, pc}
 80018e2:	2104      	movs	r1, #4
 80018e4:	1860      	adds	r0, r4, r1
 80018e6:	f7ff fb6b 	bl	8000fc0 <chEvtBroadcastFlagsI>

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 80018ea:	69e3      	ldr	r3, [r4, #28]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 80018ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
  *((size_t *)ibqp->bwrptr) = size;
 80018ee:	601d      	str	r5, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 80018f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  ibqp->bcounter++;
 80018f2:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 80018f4:	4403      	add	r3, r0
  if (ibqp->bwrptr >= ibqp->btop) {
 80018f6:	428b      	cmp	r3, r1
  ibqp->bwrptr += ibqp->bsize;
 80018f8:	61e3      	str	r3, [r4, #28]
  ibqp->bcounter++;
 80018fa:	f102 0201 	add.w	r2, r2, #1
    ibqp->bwrptr = ibqp->buffers;
 80018fe:	bf28      	it	cs
 8001900:	6b23      	ldrcs	r3, [r4, #48]	; 0x30
  ibqp->bcounter++;
 8001902:	61a2      	str	r2, [r4, #24]
    ibqPostFullBufferI(&sdup->ibqueue, size);
 8001904:	f104 000c 	add.w	r0, r4, #12
    ibqp->bwrptr = ibqp->buffers;
 8001908:	bf28      	it	cs
 800190a:	61e3      	strcs	r3, [r4, #28]
  chThdDequeueNextI(tqp, msg);
 800190c:	f7ff fb48 	bl	8000fa0 <chThdDequeueNextI.constprop.0>
 8001910:	e7e0      	b.n	80018d4 <sduDataReceived+0x24>
 8001912:	bf00      	nop
	...

08001920 <obqGetFullBufferI>:
 * @retval NULL         if the queue is empty.
 *
 * @iclass
 */
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {
 8001920:	4603      	mov	r3, r0

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8001922:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
 8001926:	4282      	cmp	r2, r0
 8001928:	d003      	beq.n	8001932 <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 800192a:	f850 3b04 	ldr.w	r3, [r0], #4
 800192e:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 8001930:	4770      	bx	lr
  if (obqIsEmptyI(obqp)) {
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f8      	beq.n	800192a <obqGetFullBufferI+0xa>
    return NULL;
 8001938:	2000      	movs	r0, #0
 800193a:	4770      	bx	lr
 800193c:	0000      	movs	r0, r0
	...

08001940 <obnotify>:
static void obnotify(io_buffers_queue_t *bqp) {
 8001940:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8001942:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001944:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001948:	6813      	ldr	r3, [r2, #0]
 800194a:	7819      	ldrb	r1, [r3, #0]
 800194c:	2904      	cmp	r1, #4
static void obnotify(io_buffers_queue_t *bqp) {
 800194e:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001950:	d102      	bne.n	8001958 <obnotify+0x18>
 8001952:	7a21      	ldrb	r1, [r4, #8]
 8001954:	2902      	cmp	r1, #2
 8001956:	d001      	beq.n	800195c <obnotify+0x1c>
}
 8001958:	b002      	add	sp, #8
 800195a:	bd10      	pop	{r4, pc}
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800195c:	7911      	ldrb	r1, [r2, #4]
 800195e:	891a      	ldrh	r2, [r3, #8]
 8001960:	2301      	movs	r3, #1
 8001962:	408b      	lsls	r3, r1
 8001964:	4213      	tst	r3, r2
 8001966:	d1f7      	bne.n	8001958 <obnotify+0x18>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001968:	a901      	add	r1, sp, #4
 800196a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800196e:	f7ff ffd7 	bl	8001920 <obqGetFullBufferI>
 8001972:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001974:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 8001978:	9b01      	ldr	r3, [sp, #4]
 800197a:	7901      	ldrb	r1, [r0, #4]
 800197c:	6800      	ldr	r0, [r0, #0]
 800197e:	f7ff fef7 	bl	8001770 <usbStartTransmitI>
 8001982:	e7e9      	b.n	8001958 <obnotify+0x18>
	...

08001990 <sof_handler>:

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8001990:	b510      	push	{r4, lr}
 8001992:	2320      	movs	r3, #32
 8001994:	b082      	sub	sp, #8
 8001996:	f383 8811 	msr	BASEPRI, r3
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800199a:	4c1e      	ldr	r4, [pc, #120]	; (8001a14 <sof_handler+0x84>)
 800199c:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 80019a0:	6813      	ldr	r3, [r2, #0]
 80019a2:	7819      	ldrb	r1, [r3, #0]
 80019a4:	2904      	cmp	r1, #4
 80019a6:	d102      	bne.n	80019ae <sof_handler+0x1e>
 80019a8:	7a21      	ldrb	r1, [r4, #8]
 80019aa:	2902      	cmp	r1, #2
 80019ac:	d004      	beq.n	80019b8 <sof_handler+0x28>
 80019ae:	2300      	movs	r3, #0
 80019b0:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&OSTRICHPORT);
  osalSysUnlockFromISR();
}
 80019b4:	b002      	add	sp, #8
 80019b6:	bd10      	pop	{r4, pc}
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80019b8:	7911      	ldrb	r1, [r2, #4]
 80019ba:	891a      	ldrh	r2, [r3, #8]
 80019bc:	2301      	movs	r3, #1
 80019be:	408b      	lsls	r3, r1
 80019c0:	4213      	tst	r3, r2
 80019c2:	d1f4      	bne.n	80019ae <sof_handler+0x1e>

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 80019c4:	e9d4 3215 	ldrd	r3, r2, [r4, #84]	; 0x54
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d1f0      	bne.n	80019ae <sof_handler+0x1e>
 80019cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80019ce:	2a00      	cmp	r2, #0
 80019d0:	d0ed      	beq.n	80019ae <sof_handler+0x1e>
 80019d2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80019d4:	2a00      	cmp	r2, #0
 80019d6:	d0ea      	beq.n	80019ae <sof_handler+0x1e>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 80019d8:	3a04      	subs	r2, #4

    if (size > 0U) {
 80019da:	1ad2      	subs	r2, r2, r3
 80019dc:	d0e7      	beq.n	80019ae <sof_handler+0x1e>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 80019de:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
 80019e0:	e9d4 1017 	ldrd	r1, r0, [r4, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 80019e4:	4403      	add	r3, r0
      if (obqp->bwrptr >= obqp->btop) {
 80019e6:	428b      	cmp	r3, r1
      obqp->bcounter--;
 80019e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
      obqp->bwrptr += obqp->bsize;
 80019ea:	6563      	str	r3, [r4, #84]	; 0x54
        obqp->bwrptr = obqp->buffers;
 80019ec:	bf24      	itt	cs
 80019ee:	6ea3      	ldrcs	r3, [r4, #104]	; 0x68
 80019f0:	6563      	strcs	r3, [r4, #84]	; 0x54
      obqp->bcounter--;
 80019f2:	3a01      	subs	r2, #1
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 80019f4:	2300      	movs	r3, #0
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80019f6:	a901      	add	r1, sp, #4
 80019f8:	4807      	ldr	r0, [pc, #28]	; (8001a18 <sof_handler+0x88>)
      obqp->bcounter--;
 80019fa:	6522      	str	r2, [r4, #80]	; 0x50
      obqp->ptr = NULL;
 80019fc:	66e3      	str	r3, [r4, #108]	; 0x6c
 80019fe:	f7ff ff8f 	bl	8001920 <obqGetFullBufferI>
 8001a02:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001a04:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 8001a08:	9b01      	ldr	r3, [sp, #4]
 8001a0a:	7901      	ldrb	r1, [r0, #4]
 8001a0c:	6800      	ldr	r0, [r0, #0]
 8001a0e:	f7ff feaf 	bl	8001770 <usbStartTransmitI>
 8001a12:	e7cc      	b.n	80019ae <sof_handler+0x1e>
 8001a14:	200013a8 	.word	0x200013a8
 8001a18:	200013ec 	.word	0x200013ec
 8001a1c:	00000000 	.word	0x00000000

08001a20 <sduDataTransmitted>:
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001a24:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001a28:	b082      	sub	sp, #8
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001a2a:	699e      	ldr	r6, [r3, #24]
  if (sdup == NULL) {
 8001a2c:	b1f6      	cbz	r6, 8001a6c <sduDataTransmitted+0x4c>
 8001a2e:	4604      	mov	r4, r0
 8001a30:	460d      	mov	r5, r1
 8001a32:	2320      	movs	r3, #32
 8001a34:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8001a38:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 8001a3c:	1d30      	adds	r0, r6, #4
 8001a3e:	2108      	movs	r1, #8
 8001a40:	f7ff fabe 	bl	8000fc0 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	b993      	cbnz	r3, 8001a72 <sduDataTransmitted+0x52>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001a4c:	f106 0844 	add.w	r8, r6, #68	; 0x44
 8001a50:	4640      	mov	r0, r8
 8001a52:	a901      	add	r1, sp, #4
 8001a54:	f7ff ff64 	bl	8001920 <obqGetFullBufferI>
  if (buf != NULL) {
 8001a58:	4602      	mov	r2, r0
 8001a5a:	b320      	cbz	r0, 8001aa6 <sduDataTransmitted+0x86>
    usbStartTransmitI(usbp, ep, buf, n);
 8001a5c:	9b01      	ldr	r3, [sp, #4]
 8001a5e:	4629      	mov	r1, r5
 8001a60:	4620      	mov	r0, r4
 8001a62:	f7ff fe85 	bl	8001770 <usbStartTransmitI>
 8001a66:	2300      	movs	r3, #0
 8001a68:	f383 8811 	msr	BASEPRI, r3
}
 8001a6c:	b002      	add	sp, #8
 8001a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (obqp->brdptr >= obqp->btop) {
 8001a72:	e9d6 2017 	ldrd	r2, r0, [r6, #92]	; 0x5c
  obqp->brdptr += obqp->bsize;
 8001a76:	6db3      	ldr	r3, [r6, #88]	; 0x58
  obqp->bcounter++;
 8001a78:	6d31      	ldr	r1, [r6, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 8001a7a:	4403      	add	r3, r0
  if (obqp->brdptr >= obqp->btop) {
 8001a7c:	4293      	cmp	r3, r2
  obqp->brdptr += obqp->bsize;
 8001a7e:	65b3      	str	r3, [r6, #88]	; 0x58
  obqp->bcounter++;
 8001a80:	f101 0101 	add.w	r1, r1, #1
    obqp->brdptr = obqp->buffers;
 8001a84:	bf28      	it	cs
 8001a86:	6eb3      	ldrcs	r3, [r6, #104]	; 0x68
  obqp->bcounter++;
 8001a88:	6531      	str	r1, [r6, #80]	; 0x50
    obqReleaseEmptyBufferI(&sdup->obqueue);
 8001a8a:	f106 0844 	add.w	r8, r6, #68	; 0x44
    obqp->brdptr = obqp->buffers;
 8001a8e:	bf28      	it	cs
 8001a90:	65b3      	strcs	r3, [r6, #88]	; 0x58
  chThdDequeueNextI(tqp, msg);
 8001a92:	4640      	mov	r0, r8
 8001a94:	f7ff fa84 	bl	8000fa0 <chThdDequeueNextI.constprop.0>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001a98:	4640      	mov	r0, r8
 8001a9a:	a901      	add	r1, sp, #4
 8001a9c:	f7ff ff40 	bl	8001920 <obqGetFullBufferI>
  if (buf != NULL) {
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	d1da      	bne.n	8001a5c <sduDataTransmitted+0x3c>
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	2a00      	cmp	r2, #0
 8001aae:	d0da      	beq.n	8001a66 <sduDataTransmitted+0x46>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8001ab0:	8a1b      	ldrh	r3, [r3, #16]
 8001ab2:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d1d6      	bne.n	8001a66 <sduDataTransmitted+0x46>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8001ab8:	4629      	mov	r1, r5
 8001aba:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8001abe:	4620      	mov	r0, r4
 8001ac0:	f7ff fe56 	bl	8001770 <usbStartTransmitI>
 8001ac4:	e7cf      	b.n	8001a66 <sduDataTransmitted+0x46>
 8001ac6:	bf00      	nop
	...

08001ad0 <chSchWakeupS.constprop.0>:
  thread_t *otp = currp;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <chSchWakeupS.constprop.0+0x54>)
 8001ad2:	6959      	ldr	r1, [r3, #20]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001ad4:	b430      	push	{r4, r5}
  if (ntp->prio <= otp->prio) {
 8001ad6:	688d      	ldr	r5, [r1, #8]
 8001ad8:	6884      	ldr	r4, [r0, #8]
  ntp->u.rdymsg = msg;
 8001ada:	2200      	movs	r2, #0
  if (ntp->prio <= otp->prio) {
 8001adc:	42ac      	cmp	r4, r5
  ntp->u.rdymsg = msg;
 8001ade:	6242      	str	r2, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8001ae0:	d80c      	bhi.n	8001afc <chSchWakeupS.constprop.0+0x2c>
  tp->state = CH_STATE_READY;
 8001ae2:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8001ae6:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	4294      	cmp	r4, r2
 8001aec:	d9fb      	bls.n	8001ae6 <chSchWakeupS.constprop.0+0x16>
  tp->queue.prev             = cp->queue.prev;
 8001aee:	685a      	ldr	r2, [r3, #4]
}
 8001af0:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 8001af2:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8001af6:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001af8:	6058      	str	r0, [r3, #4]
}
 8001afa:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 8001afc:	f881 2020 	strb.w	r2, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8001b00:	461a      	mov	r2, r3
    cp = cp->queue.next;
 8001b02:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio > tp->prio);
 8001b04:	6894      	ldr	r4, [r2, #8]
 8001b06:	42a5      	cmp	r5, r4
 8001b08:	d3fb      	bcc.n	8001b02 <chSchWakeupS.constprop.0+0x32>
  tp->queue.prev             = cp->queue.prev;
 8001b0a:	6854      	ldr	r4, [r2, #4]
 8001b0c:	604c      	str	r4, [r1, #4]
    ntp->state = CH_STATE_CURRENT;
 8001b0e:	2501      	movs	r5, #1
  tp->queue.next             = cp;
 8001b10:	600a      	str	r2, [r1, #0]
  tp->queue.prev->queue.next = tp;
 8001b12:	6021      	str	r1, [r4, #0]
  cp->queue.prev             = tp;
 8001b14:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8001b16:	f880 5020 	strb.w	r5, [r0, #32]
}
 8001b1a:	bc30      	pop	{r4, r5}
    currp = ntp;
 8001b1c:	6158      	str	r0, [r3, #20]
    chSysSwitch(ntp, otp);
 8001b1e:	f7fe bbdf 	b.w	80002e0 <_port_switch>
 8001b22:	bf00      	nop
 8001b24:	200018d0 	.word	0x200018d0
	...

08001b30 <chSchGoSleepS>:
  thread_t *otp = currp;
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <chSchGoSleepS+0x24>)
 8001b32:	6959      	ldr	r1, [r3, #20]
  thread_t *tp = tqp->next;
 8001b34:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8001b36:	b410      	push	{r4}
  otp->state = newstate;
 8001b38:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 8001b3c:	6810      	ldr	r0, [r2, #0]
 8001b3e:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8001b40:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8001b42:	6043      	str	r3, [r0, #4]
 8001b44:	f882 4020 	strb.w	r4, [r2, #32]
}
 8001b48:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001b4a:	615a      	str	r2, [r3, #20]
  chSysSwitch(currp, otp);
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	f7fe bbc7 	b.w	80002e0 <_port_switch>
 8001b52:	bf00      	nop
 8001b54:	200018d0 	.word	0x200018d0
	...

08001b60 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001b60:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 8001b62:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001b64:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8001b66:	d049      	beq.n	8001bfc <chSchGoSleepTimeoutS+0x9c>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8001b68:	4c3f      	ldr	r4, [pc, #252]	; (8001c68 <chSchGoSleepTimeoutS+0x108>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8001b6a:	4f40      	ldr	r7, [pc, #256]	; (8001c6c <chSchGoSleepTimeoutS+0x10c>)
  vtp->par = par;
 8001b6c:	6963      	ldr	r3, [r4, #20]
 8001b6e:	9305      	str	r3, [sp, #20]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001b70:	4626      	mov	r6, r4
 8001b72:	2902      	cmp	r1, #2
 8001b74:	f856 3f18 	ldr.w	r3, [r6, #24]!
 8001b78:	4605      	mov	r5, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001b7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b7e:	bf38      	it	cc
 8001b80:	2102      	movcc	r1, #2
 8001b82:	42b3      	cmp	r3, r6
 8001b84:	6a42      	ldr	r2, [r0, #36]	; 0x24
  vtp->func = vtfunc;
 8001b86:	9704      	str	r7, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001b88:	d05b      	beq.n	8001c42 <chSchGoSleepTimeoutS+0xe2>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8001b8a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8001b8c:	1bd2      	subs	r2, r2, r7
 8001b8e:	1889      	adds	r1, r1, r2

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001b90:	d32e      	bcc.n	8001bf0 <chSchGoSleepTimeoutS+0x90>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8001b92:	6898      	ldr	r0, [r3, #8]
      p = p->next;
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
      delta -= p->delta;
 8001b98:	1a09      	subs	r1, r1, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8001b9a:	4291      	cmp	r1, r2
 8001b9c:	d904      	bls.n	8001ba8 <chSchGoSleepTimeoutS+0x48>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 8001b9e:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 8001ba0:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	428a      	cmp	r2, r1
 8001ba6:	d3fa      	bcc.n	8001b9e <chSchGoSleepTimeoutS+0x3e>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 8001bac:	af01      	add	r7, sp, #4
  vtp->next = p;
 8001bae:	9301      	str	r3, [sp, #4]
  vtp->prev->next = vtp;
 8001bb0:	6017      	str	r7, [r2, #0]
  p->prev = vtp;
 8001bb2:	605f      	str	r7, [r3, #4]
  vtp->delta = delta;
 8001bb4:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	1a51      	subs	r1, r2, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8001bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 8001bbe:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001bc0:	6222      	str	r2, [r4, #32]
    chSchGoSleepS(newstate);
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	f7ff ffb4 	bl	8001b30 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001bc8:	9b04      	ldr	r3, [sp, #16]
 8001bca:	b16b      	cbz	r3, 8001be8 <chSchGoSleepTimeoutS+0x88>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8001bcc:	69a3      	ldr	r3, [r4, #24]
 8001bce:	42bb      	cmp	r3, r7
 8001bd0:	d01b      	beq.n	8001c0a <chSchGoSleepTimeoutS+0xaa>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8001bd2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8001bd6:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8001bd8:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001bda:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
 8001bdc:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001bde:	d003      	beq.n	8001be8 <chSchGoSleepTimeoutS+0x88>
      vtp->next->delta += vtp->delta;
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	9903      	ldr	r1, [sp, #12]
 8001be4:	440a      	add	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 8001be8:	6963      	ldr	r3, [r4, #20]
}
 8001bea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001bec:	b007      	add	sp, #28
 8001bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	4291      	cmp	r1, r2
 8001bf4:	d2d1      	bcs.n	8001b9a <chSchGoSleepTimeoutS+0x3a>
  return systime + (systime_t)interval;
 8001bf6:	440f      	add	r7, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001bf8:	6347      	str	r7, [r0, #52]	; 0x34
 8001bfa:	e7ce      	b.n	8001b9a <chSchGoSleepTimeoutS+0x3a>
    chSchGoSleepS(newstate);
 8001bfc:	4c1a      	ldr	r4, [pc, #104]	; (8001c68 <chSchGoSleepTimeoutS+0x108>)
 8001bfe:	f7ff ff97 	bl	8001b30 <chSchGoSleepS>
  return currp->u.rdymsg;
 8001c02:	6963      	ldr	r3, [r4, #20]
}
 8001c04:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001c06:	b007      	add	sp, #28
 8001c08:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8001c0a:	9b01      	ldr	r3, [sp, #4]
 8001c0c:	61a3      	str	r3, [r4, #24]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 8001c0e:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001c10:	42b3      	cmp	r3, r6
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001c12:	605e      	str	r6, [r3, #4]
  vtp->func = NULL;
 8001c14:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001c16:	d022      	beq.n	8001c5e <chSchGoSleepTimeoutS+0xfe>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8001c1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  ch.vtlist.next->delta += vtp->delta;
 8001c1e:	4402      	add	r2, r0
  return (systime_t)STM32_ST_TIM->CNT;
 8001c20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001c28:	1a58      	subs	r0, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8001c2a:	4282      	cmp	r2, r0
 8001c2c:	d9dc      	bls.n	8001be8 <chSchGoSleepTimeoutS+0x88>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8001c2e:	1acb      	subs	r3, r1, r3
 8001c30:	4413      	add	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001c32:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001c34:	bf98      	it	ls
 8001c36:	1c82      	addls	r2, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8001c3c:	440a      	add	r2, r1
 8001c3e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c40:	e7d2      	b.n	8001be8 <chSchGoSleepTimeoutS+0x88>
 8001c42:	188b      	adds	r3, r1, r2
      ch.vtlist.next = vtp;
 8001c44:	af01      	add	r7, sp, #4
      ch.vtlist.lasttime = now;
 8001c46:	6262      	str	r2, [r4, #36]	; 0x24
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8001c48:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
 8001c4c:	e9c4 7706 	strd	r7, r7, [r4, #24]
      vtp->delta = delay;
 8001c50:	9103      	str	r1, [sp, #12]
  STM32_ST_TIM->SR     = 0;
 8001c52:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001c54:	6343      	str	r3, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001c56:	2302      	movs	r3, #2
  STM32_ST_TIM->SR     = 0;
 8001c58:	6102      	str	r2, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001c5a:	60c3      	str	r3, [r0, #12]
 8001c5c:	e7b1      	b.n	8001bc2 <chSchGoSleepTimeoutS+0x62>
  STM32_ST_TIM->DIER = 0U;
 8001c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c62:	60da      	str	r2, [r3, #12]
    return;
 8001c64:	e7c0      	b.n	8001be8 <chSchGoSleepTimeoutS+0x88>
 8001c66:	bf00      	nop
 8001c68:	200018d0 	.word	0x200018d0
 8001c6c:	08000ed1 	.word	0x08000ed1

08001c70 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8001c70:	b161      	cbz	r1, 8001c8c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8001c74:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8001c76:	6952      	ldr	r2, [r2, #20]
  tp->queue.prev             = tqp->prev;
 8001c78:	6844      	ldr	r4, [r0, #4]
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001c80:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8001c82:	6022      	str	r2, [r4, #0]
}
 8001c84:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8001c86:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001c88:	f7ff bf6a 	b.w	8001b60 <chSchGoSleepTimeoutS>
}
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	200018d0 	.word	0x200018d0
	...

08001ca0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	460f      	mov	r7, r1
 8001ca6:	4616      	mov	r6, r2
 8001ca8:	2320      	movs	r3, #32
 8001caa:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8001cae:	e003      	b.n	8001cb8 <oqPutTimeout+0x18>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8001cb0:	f7ff ffde 	bl	8001c70 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	db18      	blt.n	8001cea <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8001cb8:	68a5      	ldr	r5, [r4, #8]
 8001cba:	4631      	mov	r1, r6
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	2d00      	cmp	r5, #0
 8001cc0:	d0f6      	beq.n	8001cb0 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8001cc2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001cc4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001cc6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8001cc8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8001cca:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8001ccc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001cce:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001cd0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8001cd4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001cd6:	bf24      	itt	cs
 8001cd8:	68e3      	ldrcs	r3, [r4, #12]
 8001cda:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8001cdc:	69e3      	ldr	r3, [r4, #28]
 8001cde:	b103      	cbz	r3, 8001ce2 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8001ce0:	4798      	blx	r3
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f380 8811 	msr	BASEPRI, r0
}
 8001ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cea:	f385 8811 	msr	BASEPRI, r5
 8001cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001cf0 <_putt.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001cf0:	3030      	adds	r0, #48	; 0x30
 8001cf2:	f7ff bfd5 	b.w	8001ca0 <oqPutTimeout>
 8001cf6:	bf00      	nop
	...

08001d00 <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001d00:	3030      	adds	r0, #48	; 0x30
 8001d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d06:	f7ff bfcb 	b.w	8001ca0 <oqPutTimeout>
 8001d0a:	bf00      	nop
 8001d0c:	0000      	movs	r0, r0
	...

08001d10 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	2320      	movs	r3, #32
 8001d14:	4605      	mov	r5, r0
 8001d16:	460e      	mov	r6, r1
 8001d18:	f383 8811 	msr	BASEPRI, r3
 8001d1c:	e003      	b.n	8001d26 <iqGetTimeout+0x16>
 8001d1e:	f7ff ffa7 	bl	8001c70 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001d22:	2800      	cmp	r0, #0
 8001d24:	db1a      	blt.n	8001d5c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8001d26:	68ac      	ldr	r4, [r5, #8]
 8001d28:	4631      	mov	r1, r6
 8001d2a:	4628      	mov	r0, r5
 8001d2c:	2c00      	cmp	r4, #0
 8001d2e:	d0f6      	beq.n	8001d1e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8001d30:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 8001d32:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001d34:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 8001d36:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8001d38:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001d3a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8001d3c:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 8001d3e:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001d40:	bf28      	it	cs
 8001d42:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 8001d44:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8001d46:	bf28      	it	cs
 8001d48:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 8001d4a:	69eb      	ldr	r3, [r5, #28]
 8001d4c:	b10b      	cbz	r3, 8001d52 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8001d4e:	4628      	mov	r0, r5
 8001d50:	4798      	blx	r3
 8001d52:	2300      	movs	r3, #0
 8001d54:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8001d58:	4620      	mov	r0, r4
}
 8001d5a:	bd70      	pop	{r4, r5, r6, pc}
 8001d5c:	f384 8811 	msr	BASEPRI, r4
 8001d60:	bd70      	pop	{r4, r5, r6, pc}
 8001d62:	bf00      	nop
	...

08001d70 <_gett.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001d70:	300c      	adds	r0, #12
 8001d72:	f7ff bfcd 	b.w	8001d10 <iqGetTimeout>
 8001d76:	bf00      	nop
	...

08001d80 <_get.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001d80:	300c      	adds	r0, #12
 8001d82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d86:	f7ff bfc3 	b.w	8001d10 <iqGetTimeout>
 8001d8a:	bf00      	nop
 8001d8c:	0000      	movs	r0, r0
	...

08001d90 <obqGetEmptyBufferTimeoutS>:
                                sysinterval_t timeout) {
 8001d90:	b538      	push	{r3, r4, r5, lr}
 8001d92:	4604      	mov	r4, r0
 8001d94:	460d      	mov	r5, r1
 8001d96:	e005      	b.n	8001da4 <obqGetEmptyBufferTimeoutS+0x14>
    if (obqp->suspended) {
 8001d98:	7a23      	ldrb	r3, [r4, #8]
 8001d9a:	b983      	cbnz	r3, 8001dbe <obqGetEmptyBufferTimeoutS+0x2e>
 8001d9c:	f7ff ff68 	bl	8001c70 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001da0:	2800      	cmp	r0, #0
 8001da2:	db0b      	blt.n	8001dbc <obqGetEmptyBufferTimeoutS+0x2c>
  while (obqIsFullI(obqp)) {
 8001da4:	68e3      	ldr	r3, [r4, #12]
 8001da6:	4629      	mov	r1, r5
 8001da8:	4620      	mov	r0, r4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f4      	beq.n	8001d98 <obqGetEmptyBufferTimeoutS+0x8>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001dae:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001db0:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001db2:	1d1a      	adds	r2, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001db4:	440b      	add	r3, r1
 8001db6:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 8001dba:	2000      	movs	r0, #0
}
 8001dbc:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 8001dbe:	f06f 0001 	mvn.w	r0, #1
}
 8001dc2:	bd38      	pop	{r3, r4, r5, pc}
	...

08001dd0 <obqPutTimeout>:
                    sysinterval_t timeout) {
 8001dd0:	b570      	push	{r4, r5, r6, lr}
 8001dd2:	2320      	movs	r3, #32
 8001dd4:	460d      	mov	r5, r1
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	f383 8811 	msr	BASEPRI, r3
  if (obqp->ptr == NULL) {
 8001ddc:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8001dde:	b1fe      	cbz	r6, 8001e20 <obqPutTimeout+0x50>
  *obqp->ptr = b;
 8001de0:	7035      	strb	r5, [r6, #0]
  if (obqp->ptr >= obqp->top) {
 8001de2:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 8001de6:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 8001de8:	4293      	cmp	r3, r2
  obqp->ptr++;
 8001dea:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 8001dec:	d314      	bcc.n	8001e18 <obqPutTimeout+0x48>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001dee:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 8001df0:	6923      	ldr	r3, [r4, #16]
  if (obqp->bwrptr >= obqp->btop) {
 8001df2:	69a1      	ldr	r1, [r4, #24]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001df4:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8001df6:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 8001df8:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 8001dfa:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 8001dfc:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 8001dfe:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 8001e00:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 8001e02:	bf24      	itt	cs
 8001e04:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8001e06:	6123      	strcs	r3, [r4, #16]
  obqp->bcounter--;
 8001e08:	3a01      	subs	r2, #1
  if (obqp->notify != NULL) {
 8001e0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 8001e0c:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 8001e0e:	2200      	movs	r2, #0
 8001e10:	62a2      	str	r2, [r4, #40]	; 0x28
  if (obqp->notify != NULL) {
 8001e12:	b10b      	cbz	r3, 8001e18 <obqPutTimeout+0x48>
    obqp->notify(obqp);
 8001e14:	4620      	mov	r0, r4
 8001e16:	4798      	blx	r3
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f380 8811 	msr	BASEPRI, r0
}
 8001e1e:	bd70      	pop	{r4, r5, r6, pc}
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8001e20:	4611      	mov	r1, r2
 8001e22:	f7ff ffb5 	bl	8001d90 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8001e26:	b908      	cbnz	r0, 8001e2c <obqPutTimeout+0x5c>
 8001e28:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001e2a:	e7d9      	b.n	8001de0 <obqPutTimeout+0x10>
 8001e2c:	f386 8811 	msr	BASEPRI, r6
}
 8001e30:	bd70      	pop	{r4, r5, r6, pc}
 8001e32:	bf00      	nop
	...

08001e40 <_putt.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 8001e40:	3044      	adds	r0, #68	; 0x44
 8001e42:	f7ff bfc5 	b.w	8001dd0 <obqPutTimeout>
 8001e46:	bf00      	nop
	...

08001e50 <_put.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8001e50:	3044      	adds	r0, #68	; 0x44
 8001e52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e56:	f7ff bfbb 	b.w	8001dd0 <obqPutTimeout>
 8001e5a:	bf00      	nop
 8001e5c:	0000      	movs	r0, r0
	...

08001e60 <ibqGetFullBufferTimeoutS>:
                                 sysinterval_t timeout) {
 8001e60:	b538      	push	{r3, r4, r5, lr}
 8001e62:	4604      	mov	r4, r0
 8001e64:	460d      	mov	r5, r1
 8001e66:	e005      	b.n	8001e74 <ibqGetFullBufferTimeoutS+0x14>
    if (ibqp->suspended) {
 8001e68:	7a23      	ldrb	r3, [r4, #8]
 8001e6a:	b983      	cbnz	r3, 8001e8e <ibqGetFullBufferTimeoutS+0x2e>
 8001e6c:	f7ff ff00 	bl	8001c70 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001e70:	2800      	cmp	r0, #0
 8001e72:	db0b      	blt.n	8001e8c <ibqGetFullBufferTimeoutS+0x2c>
  while (ibqIsEmptyI(ibqp)) {
 8001e74:	68e3      	ldr	r3, [r4, #12]
 8001e76:	4629      	mov	r1, r5
 8001e78:	4620      	mov	r0, r4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f4      	beq.n	8001e68 <ibqGetFullBufferTimeoutS+0x8>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001e7e:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001e80:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001e82:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001e84:	441a      	add	r2, r3
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001e86:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001e8a:	2000      	movs	r0, #0
}
 8001e8c:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 8001e8e:	f06f 0001 	mvn.w	r0, #1
}
 8001e92:	bd38      	pop	{r3, r4, r5, pc}
	...

08001ea0 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr == NULL) {
 8001eaa:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8001eac:	b1e5      	cbz	r5, 8001ee8 <ibqGetTimeout+0x48>
  msg = (msg_t)*ibqp->ptr;
 8001eae:	f815 6b01 	ldrb.w	r6, [r5], #1
  if (ibqp->ptr >= ibqp->top) {
 8001eb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  ibqp->ptr++;
 8001eb4:	62a5      	str	r5, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 8001eb6:	4295      	cmp	r5, r2
 8001eb8:	d311      	bcc.n	8001ede <ibqGetTimeout+0x3e>
  if (ibqp->brdptr >= ibqp->btop) {
 8001eba:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 8001ebe:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8001ec0:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8001ec2:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 8001ec4:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 8001ec6:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 8001ec8:	bf24      	itt	cs
 8001eca:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8001ecc:	6163      	strcs	r3, [r4, #20]
  ibqp->bcounter--;
 8001ece:	3a01      	subs	r2, #1
  if (ibqp->notify != NULL) {
 8001ed0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 8001ed2:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	62a2      	str	r2, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
 8001ed8:	b10b      	cbz	r3, 8001ede <ibqGetTimeout+0x3e>
    ibqp->notify(ibqp);
 8001eda:	4620      	mov	r0, r4
 8001edc:	4798      	blx	r3
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f383 8811 	msr	BASEPRI, r3
}
 8001ee4:	4630      	mov	r0, r6
 8001ee6:	bd70      	pop	{r4, r5, r6, pc}
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8001ee8:	f7ff ffba 	bl	8001e60 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 8001eec:	4606      	mov	r6, r0
 8001eee:	b908      	cbnz	r0, 8001ef4 <ibqGetTimeout+0x54>
 8001ef0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001ef2:	e7dc      	b.n	8001eae <ibqGetTimeout+0xe>
 8001ef4:	f385 8811 	msr	BASEPRI, r5
      return msg;
 8001ef8:	e7f4      	b.n	8001ee4 <ibqGetTimeout+0x44>
 8001efa:	bf00      	nop
 8001efc:	0000      	movs	r0, r0
	...

08001f00 <_gett.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8001f00:	300c      	adds	r0, #12
 8001f02:	f7ff bfcd 	b.w	8001ea0 <ibqGetTimeout>
 8001f06:	bf00      	nop
	...

08001f10 <_get.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8001f10:	300c      	adds	r0, #12
 8001f12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f16:	f7ff bfc3 	b.w	8001ea0 <ibqGetTimeout>
 8001f1a:	bf00      	nop
 8001f1c:	0000      	movs	r0, r0
	...

08001f20 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8001f20:	b508      	push	{r3, lr}
 8001f22:	4601      	mov	r1, r0
 8001f24:	2320      	movs	r3, #32
 8001f26:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8001f2a:	2008      	movs	r0, #8
 8001f2c:	f7ff fe18 	bl	8001b60 <chSchGoSleepTimeoutS>
 8001f30:	2300      	movs	r3, #0
 8001f32:	f383 8811 	msr	BASEPRI, r3
}
 8001f36:	bd08      	pop	{r3, pc}
	...

08001f40 <read_byte>:
  latch_data_in();
  CNTOE_INACTIVE;
  chSysUnlock();
}

static uint8_t read_byte(void){
 8001f40:	b5f0      	push	{r4, r5, r6, r7, lr}
  CPR_ACTIVE;
 8001f42:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <read_byte+0xb4>)
 8001f44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
static uint8_t read_byte(void){
 8001f48:	b083      	sub	sp, #12
  CPR_ACTIVE;
 8001f4a:	835a      	strh	r2, [r3, #26]
  __NOP();
 8001f4c:	bf00      	nop
 8001f4e:	2120      	movs	r1, #32
  CPR_INACTIVE;
 8001f50:	831a      	strh	r2, [r3, #24]
 8001f52:	f381 8811 	msr	BASEPRI, r1
  if (BUS_in_use == 0){
 8001f56:	4a28      	ldr	r2, [pc, #160]	; (8001ff8 <read_byte+0xb8>)
 8001f58:	7812      	ldrb	r2, [r2, #0]
 8001f5a:	b132      	cbz	r2, 8001f6a <read_byte+0x2a>
  while (palReadLine(BUSFREE) == PAL_LOW);
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	0592      	lsls	r2, r2, #22
 8001f60:	d5fc      	bpl.n	8001f5c <read_byte+0x1c>
  while (palReadLine(BUSFREE) == PAL_HIGH);
 8001f62:	4a24      	ldr	r2, [pc, #144]	; (8001ff4 <read_byte+0xb4>)
 8001f64:	6913      	ldr	r3, [r2, #16]
 8001f66:	059b      	lsls	r3, r3, #22
 8001f68:	d4fc      	bmi.n	8001f64 <read_byte+0x24>
  latch_address();
//  DEBUG_LOW;
  chSysLock();
  wait_for_busfree(); // this adds about 130ns after falling edge of BUSFREE
//  DEBUG_HI;
  CNTOE_ACTIVE;
 8001f6a:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <read_byte+0xb4>)
 8001f6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f70:	835a      	strh	r2, [r3, #26]
  __NOP();
 8001f72:	bf00      	nop
  __NOP();
 8001f74:	bf00      	nop
  RAMOE_ACTIVE;
 8001f76:	4921      	ldr	r1, [pc, #132]	; (8001ffc <read_byte+0xbc>)
 8001f78:	2010      	movs	r0, #16
 8001f7a:	8348      	strh	r0, [r1, #26]
//  __NOP();
  __NOP();
 8001f7c:	bf00      	nop
  __NOP();
 8001f7e:	bf00      	nop
//  __NOP();
  PLD_LOAD;
 8001f80:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001f84:	835c      	strh	r4, [r3, #26]
//  __NOP();
  __NOP();
 8001f86:	bf00      	nop
 8001f88:	2500      	movs	r5, #0
  PLD_IDLE;
 8001f8a:	831c      	strh	r4, [r3, #24]
  RAMOE_INACTIVE;
 8001f8c:	8308      	strh	r0, [r1, #24]
  CNTOE_INACTIVE;
 8001f8e:	831a      	strh	r2, [r3, #24]
 8001f90:	f385 8811 	msr	BASEPRI, r5
 8001f94:	2320      	movs	r3, #32
 8001f96:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartReceiveI(spip, n, rxbuf);
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <read_byte+0xc0>)

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8001f9c:	f8df c068 	ldr.w	ip, [pc, #104]	; 8002008 <read_byte+0xc8>
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8001fa0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8001fa2:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8001fa4:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 8001fa8:	2003      	movs	r0, #3
 8001faa:	7018      	strb	r0, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8001fac:	6809      	ldr	r1, [r1, #0]
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8001fae:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8001fb0:	f10d 0607 	add.w	r6, sp, #7
 8001fb4:	60ce      	str	r6, [r1, #12]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8001fb6:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8001fba:	2601      	movs	r6, #1
 8001fbc:	604e      	str	r6, [r1, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8001fbe:	600c      	str	r4, [r1, #0]
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8001fc0:	f8c2 c00c 	str.w	ip, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8001fc4:	6056      	str	r6, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8001fc6:	6017      	str	r7, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 8001fc8:	680c      	ldr	r4, [r1, #0]
  return ch.rlist.current;
 8001fca:	4e0e      	ldr	r6, [pc, #56]	; (8002004 <read_byte+0xc4>)
 8001fcc:	f044 0401 	orr.w	r4, r4, #1
 8001fd0:	600c      	str	r4, [r1, #0]
  dmaStreamEnable(spip->dmatx);
 8001fd2:	6811      	ldr	r1, [r2, #0]
 8001fd4:	6974      	ldr	r4, [r6, #20]
 8001fd6:	f041 0101 	orr.w	r1, r1, #1
 8001fda:	6011      	str	r1, [r2, #0]
  *trp = tp;
 8001fdc:	f843 4f08 	str.w	r4, [r3, #8]!
  tp->u.wttrp = trp;
 8001fe0:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8001fe2:	f7ff fda5 	bl	8001b30 <chSchGoSleepS>
 8001fe6:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  spiReceive(SPI_DRIVER, 1, &ret);
  return ret;
}
 8001fea:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001fee:	b003      	add	sp, #12
 8001ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	20000c48 	.word	0x20000c48
 8001ffc:	40020000 	.word	0x40020000
 8002000:	20001838 	.word	0x20001838
 8002004:	200018d0 	.word	0x200018d0
 8002008:	08009964 	.word	0x08009964
 800200c:	00000000 	.word	0x00000000

08002010 <spiSend.constprop.0>:
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8002010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002012:	4605      	mov	r5, r0
 8002014:	2320      	movs	r3, #32
 8002016:	f383 8811 	msr	BASEPRI, r3
  spiStartSendI(spip, n, txbuf);
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <spiSend.constprop.0+0x54>)
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800201c:	4e12      	ldr	r6, [pc, #72]	; (8002068 <spiSend.constprop.0+0x58>)
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800201e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8002020:	6a9f      	ldr	r7, [r3, #40]	; 0x28
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002022:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 8002026:	2003      	movs	r0, #3
 8002028:	7018      	strb	r0, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800202a:	6809      	ldr	r1, [r1, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800202c:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800202e:	60ce      	str	r6, [r1, #12]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002030:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002034:	2601      	movs	r6, #1
 8002036:	604e      	str	r6, [r1, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8002038:	600f      	str	r7, [r1, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800203a:	60d5      	str	r5, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800203c:	6056      	str	r6, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800203e:	6014      	str	r4, [r2, #0]
  dmaStreamEnable(spip->dmarx);
 8002040:	680c      	ldr	r4, [r1, #0]
 8002042:	4d0a      	ldr	r5, [pc, #40]	; (800206c <spiSend.constprop.0+0x5c>)
 8002044:	4334      	orrs	r4, r6
 8002046:	600c      	str	r4, [r1, #0]
  dmaStreamEnable(spip->dmatx);
 8002048:	6811      	ldr	r1, [r2, #0]
 800204a:	696c      	ldr	r4, [r5, #20]
 800204c:	4331      	orrs	r1, r6
 800204e:	6011      	str	r1, [r2, #0]
  *trp = tp;
 8002050:	f843 4f08 	str.w	r4, [r3, #8]!
  tp->u.wttrp = trp;
 8002054:	6263      	str	r3, [r4, #36]	; 0x24
 8002056:	f7ff fd6b 	bl	8001b30 <chSchGoSleepS>
 800205a:	2300      	movs	r3, #0
 800205c:	f383 8811 	msr	BASEPRI, r3
}
 8002060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002062:	bf00      	nop
 8002064:	20001838 	.word	0x20001838
 8002068:	20001b24 	.word	0x20001b24
 800206c:	200018d0 	.word	0x200018d0

08002070 <write_byte>:
static void write_byte(uint8_t data){
 8002070:	b510      	push	{r4, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	4603      	mov	r3, r0
  spiSend(SPI_DRIVER, 1, buf);
 8002076:	a801      	add	r0, sp, #4
  buf[0] = data;
 8002078:	f88d 3004 	strb.w	r3, [sp, #4]
  spiSend(SPI_DRIVER, 1, buf);
 800207c:	f7ff ffc8 	bl	8002010 <spiSend.constprop.0>
  CPR_ACTIVE;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <write_byte+0x58>)
 8002082:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002086:	835a      	strh	r2, [r3, #26]
  __NOP();
 8002088:	bf00      	nop
 800208a:	2120      	movs	r1, #32
  CPR_INACTIVE;
 800208c:	831a      	strh	r2, [r3, #24]
 800208e:	f381 8811 	msr	BASEPRI, r1
  if (BUS_in_use == 0){
 8002092:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <write_byte+0x5c>)
 8002094:	7812      	ldrb	r2, [r2, #0]
 8002096:	b132      	cbz	r2, 80020a6 <write_byte+0x36>
  while (palReadLine(BUSFREE) == PAL_LOW);
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	0592      	lsls	r2, r2, #22
 800209c:	d5fc      	bpl.n	8002098 <write_byte+0x28>
  while (palReadLine(BUSFREE) == PAL_HIGH);
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <write_byte+0x58>)
 80020a0:	6913      	ldr	r3, [r2, #16]
 80020a2:	059b      	lsls	r3, r3, #22
 80020a4:	d4fc      	bmi.n	80020a0 <write_byte+0x30>
  CNTOE_ACTIVE;
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <write_byte+0x58>)
 80020a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ac:	835a      	strh	r2, [r3, #26]
  __NOP();
 80020ae:	bf00      	nop
  WE_ACTIVE;
 80020b0:	4907      	ldr	r1, [pc, #28]	; (80020d0 <write_byte+0x60>)
 80020b2:	2001      	movs	r0, #1
 80020b4:	8348      	strh	r0, [r1, #26]
  __NOP();
 80020b6:	bf00      	nop
 80020b8:	2400      	movs	r4, #0
  WE_INACTIVE;
 80020ba:	8308      	strh	r0, [r1, #24]
  CNTOE_INACTIVE;
 80020bc:	831a      	strh	r2, [r3, #24]
 80020be:	f384 8811 	msr	BASEPRI, r4
}
 80020c2:	b002      	add	sp, #8
 80020c4:	bd10      	pop	{r4, pc}
 80020c6:	bf00      	nop
 80020c8:	40020400 	.word	0x40020400
 80020cc:	20000c48 	.word	0x20000c48
 80020d0:	40020000 	.word	0x40020000
	...

080020e0 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 80020e0:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 80020e2:	4b2e      	ldr	r3, [pc, #184]	; (800219c <chMtxLockS+0xbc>)
void chMtxLockS(mutex_t *mp) {
 80020e4:	4604      	mov	r4, r0

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 80020e6:	6880      	ldr	r0, [r0, #8]
  thread_t *ctp = currp;
 80020e8:	695d      	ldr	r5, [r3, #20]
  if (mp->owner != NULL) {
 80020ea:	b330      	cbz	r0, 800213a <chMtxLockS+0x5a>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 80020ec:	68aa      	ldr	r2, [r5, #8]
 80020ee:	6883      	ldr	r3, [r0, #8]
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d207      	bcs.n	8002104 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 80020f4:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 80020f8:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	d035      	beq.n	800216a <chMtxLockS+0x8a>
 80020fe:	2b07      	cmp	r3, #7
 8002100:	d020      	beq.n	8002144 <chMtxLockS+0x64>
 8002102:	b19b      	cbz	r3, 800212c <chMtxLockS+0x4c>
  thread_t *cp = (thread_t *)tqp;
 8002104:	4623      	mov	r3, r4
 8002106:	e003      	b.n	8002110 <chMtxLockS+0x30>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002108:	6899      	ldr	r1, [r3, #8]
 800210a:	68aa      	ldr	r2, [r5, #8]
 800210c:	4291      	cmp	r1, r2
 800210e:	d302      	bcc.n	8002116 <chMtxLockS+0x36>
    cp = cp->queue.next;
 8002110:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002112:	429c      	cmp	r4, r3
 8002114:	d1f8      	bne.n	8002108 <chMtxLockS+0x28>
  tp->queue.prev             = cp->queue.prev;
 8002116:	685a      	ldr	r2, [r3, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8002118:	2006      	movs	r0, #6
 800211a:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 800211e:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8002120:	605d      	str	r5, [r3, #4]
      ctp->u.wtmtxp = mp;
 8002122:	626c      	str	r4, [r5, #36]	; 0x24
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
    ctp->mtxlist = mp;
  }
}
 8002124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 8002128:	f7ff bd02 	b.w	8001b30 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 800212c:	e9d0 3200 	ldrd	r3, r2, [r0]
 8002130:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8002132:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 8002134:	f7fe ff04 	bl	8000f40 <chSchReadyI>
          break;
 8002138:	e7e4      	b.n	8002104 <chMtxLockS+0x24>
    mp->next = ctp->mtxlist;
 800213a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800213c:	e9c4 5302 	strd	r5, r3, [r4, #8]
    ctp->mtxlist = mp;
 8002140:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8002142:	bd70      	pop	{r4, r5, r6, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8002144:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8002148:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800214a:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800214c:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 800214e:	4633      	mov	r3, r6
 8002150:	e002      	b.n	8002158 <chMtxLockS+0x78>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002152:	6899      	ldr	r1, [r3, #8]
 8002154:	428a      	cmp	r2, r1
 8002156:	d802      	bhi.n	800215e <chMtxLockS+0x7e>
    cp = cp->queue.next;
 8002158:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800215a:	429e      	cmp	r6, r3
 800215c:	d1f9      	bne.n	8002152 <chMtxLockS+0x72>
  tp->queue.prev             = cp->queue.prev;
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8002164:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8002166:	6058      	str	r0, [r3, #4]
 8002168:	e7cc      	b.n	8002104 <chMtxLockS+0x24>
  tp->queue.prev->queue.next = tp->queue.next;
 800216a:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800216e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002170:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8002172:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 8002174:	4633      	mov	r3, r6
 8002176:	e002      	b.n	800217e <chMtxLockS+0x9e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002178:	6899      	ldr	r1, [r3, #8]
 800217a:	428a      	cmp	r2, r1
 800217c:	d802      	bhi.n	8002184 <chMtxLockS+0xa4>
    cp = cp->queue.next;
 800217e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002180:	429e      	cmp	r6, r3
 8002182:	d1f9      	bne.n	8002178 <chMtxLockS+0x98>
  tp->queue.prev             = cp->queue.prev;
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800218a:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800218c:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 800218e:	68b0      	ldr	r0, [r6, #8]
      while (tp->prio < ctp->prio) {
 8002190:	68aa      	ldr	r2, [r5, #8]
 8002192:	6883      	ldr	r3, [r0, #8]
 8002194:	4293      	cmp	r3, r2
 8002196:	d3ad      	bcc.n	80020f4 <chMtxLockS+0x14>
 8002198:	e7b4      	b.n	8002104 <chMtxLockS+0x24>
 800219a:	bf00      	nop
 800219c:	200018d0 	.word	0x200018d0

080021a0 <chThdExitS>:
void chThdExitS(msg_t msg) {
 80021a0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <chThdExitS+0x44>)
 80021a4:	695c      	ldr	r4, [r3, #20]
  return (bool)(tlp->next != (thread_t *)tlp);
 80021a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 80021a8:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 80021aa:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80021ae:	42ab      	cmp	r3, r5
 80021b0:	d007      	beq.n	80021c2 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fec2 	bl	8000f40 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 80021bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 80021be:	42ab      	cmp	r3, r5
 80021c0:	d1f7      	bne.n	80021b2 <chThdExitS+0x12>
  if ((tp->refs == (trefs_t)0) &&
 80021c2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80021c6:	b93b      	cbnz	r3, 80021d8 <chThdExitS+0x38>
 80021c8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80021cc:	079b      	lsls	r3, r3, #30
 80021ce:	d103      	bne.n	80021d8 <chThdExitS+0x38>
    REG_REMOVE(tp);
 80021d0:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 80021d4:	60d3      	str	r3, [r2, #12]
 80021d6:	611a      	str	r2, [r3, #16]
}
 80021d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 80021dc:	200f      	movs	r0, #15
 80021de:	f7ff bca7 	b.w	8001b30 <chSchGoSleepS>
 80021e2:	bf00      	nop
 80021e4:	200018d0 	.word	0x200018d0
	...

080021f0 <chscanf.constprop.0>:
 *                      a failure (either matching or input) occurs before any
 *                      parameters are assigned, the function will return 0.
 *
 * @api
 */
int chscanf(BaseBufferedStream *chp, const char *fmt, ...)
 80021f0:	b40e      	push	{r1, r2, r3}
 80021f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c = streamGet(chp);
 80021f6:	6803      	ldr	r3, [r0, #0]
int chscanf(BaseBufferedStream *chp, const char *fmt, ...)
 80021f8:	b088      	sub	sp, #32
 80021fa:	4682      	mov	sl, r0
  c = streamGet(chp);
 80021fc:	691b      	ldr	r3, [r3, #16]
{
  va_list ap;
  int     retval;

  va_start(ap, fmt);
 80021fe:	ad12      	add	r5, sp, #72	; 0x48
 8002200:	9507      	str	r5, [sp, #28]
  c = streamGet(chp);
 8002202:	4798      	blx	r3
  streamPut(chp, (uint8_t)c); //ROB
 8002204:	f8da 1000 	ldr.w	r1, [sl]
  c = streamGet(chp);
 8002208:	4681      	mov	r9, r0
  streamPut(chp, (uint8_t)c); //ROB
 800220a:	68cc      	ldr	r4, [r1, #12]
 800220c:	b2c1      	uxtb	r1, r0
 800220e:	4650      	mov	r0, sl
 8002210:	47a0      	blx	r4
  while (c != STM_RESET && f != 0) {
 8002212:	f119 0f02 	cmn.w	r9, #2
 8002216:	f000 81ff 	beq.w	8002618 <chscanf.constprop.0+0x428>
 800221a:	46a8      	mov	r8, r5
  f = *fmt++;
 800221c:	4cab      	ldr	r4, [pc, #684]	; (80024cc <chscanf.constprop.0+0x2dc>)
 800221e:	4dac      	ldr	r5, [pc, #688]	; (80024d0 <chscanf.constprop.0+0x2e0>)
 8002220:	4657      	mov	r7, sl
  int   n = 0;
 8002222:	f04f 0b00 	mov.w	fp, #0
  f = *fmt++;
 8002226:	2125      	movs	r1, #37	; 0x25
 8002228:	46c2      	mov	sl, r8
    if (isspace(f)) {
 800222a:	5c6b      	ldrb	r3, [r5, r1]
 800222c:	f013 0008 	ands.w	r0, r3, #8
 8002230:	f040 80d4 	bne.w	80023dc <chscanf.constprop.0+0x1ec>
    if (f != '%') {
 8002234:	2925      	cmp	r1, #37	; 0x25
 8002236:	d011      	beq.n	800225c <chscanf.constprop.0+0x6c>
      if (f != c) {
 8002238:	4549      	cmp	r1, r9
 800223a:	f000 8081 	beq.w	8002340 <chscanf.constprop.0+0x150>
 800223e:	46ba      	mov	sl, r7
 8002240:	fa5f f989 	uxtb.w	r9, r9
  streamUnget(chp, c);
 8002244:	f8da 3000 	ldr.w	r3, [sl]
 8002248:	4649      	mov	r1, r9
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	4650      	mov	r0, sl
 800224e:	4798      	blx	r3
  retval = chvscanf(chp, fmt, ap);
  va_end(ap);

  return retval;
}
 8002250:	4658      	mov	r0, fp
 8002252:	b008      	add	sp, #32
 8002254:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002258:	b003      	add	sp, #12
 800225a:	4770      	bx	lr
    f = *fmt++;
 800225c:	7823      	ldrb	r3, [r4, #0]
    if (f == '%') {
 800225e:	2b25      	cmp	r3, #37	; 0x25
 8002260:	d10a      	bne.n	8002278 <chscanf.constprop.0+0x88>
      if (f != c) {
 8002262:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
 8002266:	d1ea      	bne.n	800223e <chscanf.constprop.0+0x4e>
        c = streamGet(chp);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	4638      	mov	r0, r7
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	4798      	blx	r3
        f = *fmt++;
 8002270:	1ca6      	adds	r6, r4, #2
 8002272:	7861      	ldrb	r1, [r4, #1]
        c = streamGet(chp);
 8002274:	4681      	mov	r9, r0
 8002276:	e06b      	b.n	8002350 <chscanf.constprop.0+0x160>
    if (f == '*') {
 8002278:	2b2a      	cmp	r3, #42	; 0x2a
 800227a:	f000 81c4 	beq.w	8002606 <chscanf.constprop.0+0x416>
      buf = va_arg(ap, void*);
 800227e:	f85a 2b04 	ldr.w	r2, [sl], #4
 8002282:	9201      	str	r2, [sp, #4]
    f = *fmt++;
 8002284:	1c66      	adds	r6, r4, #1
    while (isdigit(f)) {
 8002286:	5ce9      	ldrb	r1, [r5, r3]
 8002288:	074c      	lsls	r4, r1, #29
 800228a:	f140 81ca 	bpl.w	8002622 <chscanf.constprop.0+0x432>
    width = 0;
 800228e:	2400      	movs	r4, #0
      width = (width * 10) + (f - '0');
 8002290:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
      f     = *fmt++;
 8002294:	f816 3b01 	ldrb.w	r3, [r6], #1
    while (isdigit(f)) {
 8002298:	5ce9      	ldrb	r1, [r5, r3]
      width = (width * 10) + (f - '0');
 800229a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    while (isdigit(f)) {
 800229e:	0748      	lsls	r0, r1, #29
      width = (width * 10) + (f - '0');
 80022a0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
    while (isdigit(f)) {
 80022a4:	d4f4      	bmi.n	8002290 <chscanf.constprop.0+0xa0>
      width = -1;
 80022a6:	2c00      	cmp	r4, #0
 80022a8:	bf08      	it	eq
 80022aa:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
    if (f == 'l' || f == 'L') {
 80022ae:	f003 00df 	and.w	r0, r3, #223	; 0xdf
 80022b2:	284c      	cmp	r0, #76	; 0x4c
 80022b4:	f000 80a2 	beq.w	80023fc <chscanf.constprop.0+0x20c>
      is_long = isupper(f);
 80022b8:	f001 0103 	and.w	r1, r1, #3
 80022bc:	f1a1 0201 	sub.w	r2, r1, #1
 80022c0:	fab2 f282 	clz	r2, r2
 80022c4:	0952      	lsrs	r2, r2, #5
 80022c6:	e9cd 6202 	strd	r6, r2, [sp, #8]
 80022ca:	3b44      	subs	r3, #68	; 0x44
 80022cc:	2b34      	cmp	r3, #52	; 0x34
 80022ce:	f200 809c 	bhi.w	800240a <chscanf.constprop.0+0x21a>
 80022d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80022d6:	0164      	.short	0x0164
 80022d8:	009a009a 	.word	0x009a009a
 80022dc:	009a009a 	.word	0x009a009a
 80022e0:	009a0139 	.word	0x009a0139
 80022e4:	009a009a 	.word	0x009a009a
 80022e8:	009a009a 	.word	0x009a009a
 80022ec:	00a1011e 	.word	0x00a1011e
 80022f0:	009a009a 	.word	0x009a009a
 80022f4:	009a009a 	.word	0x009a009a
 80022f8:	009a0103 	.word	0x009a0103
 80022fc:	00a1009a 	.word	0x00a1009a
 8002300:	009a009a 	.word	0x009a009a
 8002304:	009a009a 	.word	0x009a009a
 8002308:	009a009a 	.word	0x009a009a
 800230c:	009a009a 	.word	0x009a009a
 8002310:	009a009a 	.word	0x009a009a
 8002314:	0164017d 	.word	0x0164017d
 8002318:	009a009a 	.word	0x009a009a
 800231c:	009a009a 	.word	0x009a009a
 8002320:	009a0139 	.word	0x009a0139
 8002324:	009a009a 	.word	0x009a009a
 8002328:	009a009a 	.word	0x009a009a
 800232c:	00a1011e 	.word	0x00a1011e
 8002330:	009a009a 	.word	0x009a009a
 8002334:	009a004e 	.word	0x009a004e
 8002338:	009a0103 	.word	0x009a0103
 800233c:	00a1009a 	.word	0x00a1009a
        c = streamGet(chp);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	4638      	mov	r0, r7
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	4798      	blx	r3
        f = *fmt++;
 8002348:	4626      	mov	r6, r4
        c = streamGet(chp);
 800234a:	4681      	mov	r9, r0
        f = *fmt++;
 800234c:	f816 1b01 	ldrb.w	r1, [r6], #1
  while (c != STM_RESET && f != 0) {
 8002350:	f119 0f02 	cmn.w	r9, #2
 8002354:	f000 80be 	beq.w	80024d4 <chscanf.constprop.0+0x2e4>
 8002358:	2900      	cmp	r1, #0
 800235a:	f43f af70 	beq.w	800223e <chscanf.constprop.0+0x4e>
 800235e:	4634      	mov	r4, r6
 8002360:	e763      	b.n	800222a <chscanf.constprop.0+0x3a>
        c = streamGet(chp);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	4798      	blx	r3
        if (c == STM_RESET) {
 8002368:	f110 0f02 	cmn.w	r0, #2
        c = streamGet(chp);
 800236c:	4681      	mov	r9, r0
        if (c == STM_RESET) {
 800236e:	f43f af6f 	beq.w	8002250 <chscanf.constprop.0+0x60>
      while (isspace(c)) {
 8002372:	f815 3009 	ldrb.w	r3, [r5, r9]
 8002376:	f013 0308 	ands.w	r3, r3, #8
        c = streamGet(chp);
 800237a:	4638      	mov	r0, r7
      while (isspace(c)) {
 800237c:	d1f1      	bne.n	8002362 <chscanf.constprop.0+0x172>
      for (i = 0; i < width; ++i) {
 800237e:	2c00      	cmp	r4, #0
 8002380:	bfc8      	it	gt
 8002382:	461e      	movgt	r6, r3
 8002384:	f340 8196 	ble.w	80026b4 <chscanf.constprop.0+0x4c4>
        if (buf) {
 8002388:	9b01      	ldr	r3, [sp, #4]
        c = streamGet(chp);
 800238a:	4638      	mov	r0, r7
        if (buf) {
 800238c:	b10b      	cbz	r3, 8002392 <chscanf.constprop.0+0x1a2>
          ((char*)buf)[i] = c;
 800238e:	f803 9006 	strb.w	r9, [r3, r6]
        c = streamGet(chp);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	4798      	blx	r3
 8002398:	4681      	mov	r9, r0
        if (c == STM_RESET) {
 800239a:	f119 0f02 	cmn.w	r9, #2
        streamPut(chp, (uint8_t)c); //ROB
 800239e:	b2c1      	uxtb	r1, r0
      for (i = 0; i < width; ++i) {
 80023a0:	f106 0601 	add.w	r6, r6, #1
        streamPut(chp, (uint8_t)c); //ROB
 80023a4:	4638      	mov	r0, r7
        if (c == STM_RESET) {
 80023a6:	f43f af53 	beq.w	8002250 <chscanf.constprop.0+0x60>
        streamPut(chp, (uint8_t)c); //ROB
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	4798      	blx	r3
      for (i = 0; i < width; ++i) {
 80023b0:	42b4      	cmp	r4, r6
 80023b2:	f000 8182 	beq.w	80026ba <chscanf.constprop.0+0x4ca>
        if (isspace(c)) {
 80023b6:	f815 3009 	ldrb.w	r3, [r5, r9]
 80023ba:	0718      	lsls	r0, r3, #28
 80023bc:	d5e4      	bpl.n	8002388 <chscanf.constprop.0+0x198>
          if (buf) {
 80023be:	9b01      	ldr	r3, [sp, #4]
 80023c0:	b133      	cbz	r3, 80023d0 <chscanf.constprop.0+0x1e0>
            ((char*)buf)[i] = 0;
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	559a      	strb	r2, [r3, r6]
          ((char*)buf)[width] = 0;
 80023c8:	9b01      	ldr	r3, [sp, #4]
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	551a      	strb	r2, [r3, r4]
      f = *fmt++;
 80023d0:	9e02      	ldr	r6, [sp, #8]
      ++n;
 80023d2:	f10b 0b01 	add.w	fp, fp, #1
      f = *fmt++;
 80023d6:	f816 1b01 	ldrb.w	r1, [r6], #1
 80023da:	e7bd      	b.n	8002358 <chscanf.constprop.0+0x168>
      while (isspace(c)) {
 80023dc:	f815 3009 	ldrb.w	r3, [r5, r9]
 80023e0:	071b      	lsls	r3, r3, #28
 80023e2:	d507      	bpl.n	80023f4 <chscanf.constprop.0+0x204>
        c = streamGet(chp);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4638      	mov	r0, r7
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	4798      	blx	r3
      while (isspace(c)) {
 80023ec:	5c2b      	ldrb	r3, [r5, r0]
 80023ee:	071e      	lsls	r6, r3, #28
 80023f0:	d4f8      	bmi.n	80023e4 <chscanf.constprop.0+0x1f4>
 80023f2:	4681      	mov	r9, r0
      f = *fmt++;
 80023f4:	4626      	mov	r6, r4
 80023f6:	f816 1b01 	ldrb.w	r1, [r6], #1
 80023fa:	e7a9      	b.n	8002350 <chscanf.constprop.0+0x160>
      f       = *fmt++;
 80023fc:	4632      	mov	r2, r6
      is_long = true;
 80023fe:	2301      	movs	r3, #1
 8002400:	9303      	str	r3, [sp, #12]
      f       = *fmt++;
 8002402:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002406:	9202      	str	r2, [sp, #8]
 8002408:	e75f      	b.n	80022ca <chscanf.constprop.0+0xda>
      streamUnget(chp, c);
 800240a:	6838      	ldr	r0, [r7, #0]
 800240c:	fa5f f189 	uxtb.w	r1, r9
 8002410:	6943      	ldr	r3, [r0, #20]
 8002412:	4638      	mov	r0, r7
 8002414:	4798      	blx	r3
 8002416:	e71b      	b.n	8002250 <chscanf.constprop.0+0x60>
      while (isspace(c)) {
 8002418:	f815 3009 	ldrb.w	r3, [r5, r9]
 800241c:	0718      	lsls	r0, r3, #28
 800241e:	d507      	bpl.n	8002430 <chscanf.constprop.0+0x240>
        c = streamGet(chp);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4638      	mov	r0, r7
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	4798      	blx	r3
      while (isspace(c)) {
 8002428:	5c2b      	ldrb	r3, [r5, r0]
 800242a:	0719      	lsls	r1, r3, #28
 800242c:	d4f8      	bmi.n	8002420 <chscanf.constprop.0+0x230>
 800242e:	4681      	mov	r9, r0
      if (c == '+') {
 8002430:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 8002434:	f000 8108 	beq.w	8002648 <chscanf.constprop.0+0x458>
      } else if (c == '-') {
 8002438:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 800243c:	f000 8167 	beq.w	800270e <chscanf.constprop.0+0x51e>
    is_positive = true;
 8002440:	2301      	movs	r3, #1
 8002442:	9304      	str	r3, [sp, #16]
      if (c == '0') {
 8002444:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8002448:	d10d      	bne.n	8002466 <chscanf.constprop.0+0x276>
        if (--width == 0) {
 800244a:	1e66      	subs	r6, r4, #1
 800244c:	f000 818c 	beq.w	8002768 <chscanf.constprop.0+0x578>
        c = streamGet(chp);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4638      	mov	r0, r7
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	4798      	blx	r3
        if (c == 'x' || c == 'X') {
 8002458:	f020 0320 	bic.w	r3, r0, #32
 800245c:	2b58      	cmp	r3, #88	; 0x58
        c = streamGet(chp);
 800245e:	4681      	mov	r9, r0
        if (c == 'x' || c == 'X') {
 8002460:	f000 8130 	beq.w	80026c4 <chscanf.constprop.0+0x4d4>
 8002464:	4634      	mov	r4, r6
      is_signed = false;
 8002466:	2300      	movs	r3, #0
 8002468:	9305      	str	r3, [sp, #20]
      base      = 16;
 800246a:	f04f 0810 	mov.w	r8, #16
    if (sym_to_val(c, base) == -1) {
 800246e:	fa5f f989 	uxtb.w	r9, r9
 8002472:	4641      	mov	r1, r8
 8002474:	4648      	mov	r0, r9
 8002476:	f7fe fc4b 	bl	8000d10 <sym_to_val>
 800247a:	1c41      	adds	r1, r0, #1
 800247c:	4603      	mov	r3, r0
 800247e:	f000 8171 	beq.w	8002764 <chscanf.constprop.0+0x574>
 8002482:	3c02      	subs	r4, #2
    vall = 0UL;
 8002484:	2600      	movs	r6, #0
      c    = streamGet(chp);
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	4638      	mov	r0, r7
 800248a:	6912      	ldr	r2, [r2, #16]
      vall = (vall * base) + digit;
 800248c:	fb06 3608 	mla	r6, r6, r8, r3
      c    = streamGet(chp);
 8002490:	4790      	blx	r2
    while (width--) {
 8002492:	1c63      	adds	r3, r4, #1
      c    = streamGet(chp);
 8002494:	4681      	mov	r9, r0
      digit = sym_to_val(c, base);
 8002496:	4641      	mov	r1, r8
 8002498:	b2c0      	uxtb	r0, r0
 800249a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    while (width--) {
 800249e:	d004      	beq.n	80024aa <chscanf.constprop.0+0x2ba>
      digit = sym_to_val(c, base);
 80024a0:	f7fe fc36 	bl	8000d10 <sym_to_val>
      if (digit == -1) {
 80024a4:	1c42      	adds	r2, r0, #1
      digit = sym_to_val(c, base);
 80024a6:	4603      	mov	r3, r0
      if (digit == -1) {
 80024a8:	d1ed      	bne.n	8002486 <chscanf.constprop.0+0x296>
    if (!is_positive) {
 80024aa:	9b04      	ldr	r3, [sp, #16]
 80024ac:	b903      	cbnz	r3, 80024b0 <chscanf.constprop.0+0x2c0>
      vall = -1 * vall;
 80024ae:	4276      	negs	r6, r6
    if (buf) {
 80024b0:	9b01      	ldr	r3, [sp, #4]
 80024b2:	b12b      	cbz	r3, 80024c0 <chscanf.constprop.0+0x2d0>
      if (is_long && is_signed) {
 80024b4:	9a03      	ldr	r2, [sp, #12]
 80024b6:	2a00      	cmp	r2, #0
 80024b8:	f040 80a9 	bne.w	800260e <chscanf.constprop.0+0x41e>
        *((unsigned int*)buf) = vall;
 80024bc:	9b01      	ldr	r3, [sp, #4]
 80024be:	601e      	str	r6, [r3, #0]
    f = *fmt++;
 80024c0:	9e02      	ldr	r6, [sp, #8]
    ++n;
 80024c2:	f10b 0b01 	add.w	fp, fp, #1
    f = *fmt++;
 80024c6:	f816 1b01 	ldrb.w	r1, [r6], #1
 80024ca:	e741      	b.n	8002350 <chscanf.constprop.0+0x160>
 80024cc:	0800931d 	.word	0x0800931d
 80024d0:	08009c09 	.word	0x08009c09
 80024d4:	46ba      	mov	sl, r7
  while (c != STM_RESET && f != 0) {
 80024d6:	f04f 09fe 	mov.w	r9, #254	; 0xfe
 80024da:	e6b3      	b.n	8002244 <chscanf.constprop.0+0x54>
      while (isspace(c)) {
 80024dc:	f815 3009 	ldrb.w	r3, [r5, r9]
 80024e0:	071e      	lsls	r6, r3, #28
 80024e2:	d507      	bpl.n	80024f4 <chscanf.constprop.0+0x304>
        c = streamGet(chp);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4638      	mov	r0, r7
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	4798      	blx	r3
      while (isspace(c)) {
 80024ec:	5c2b      	ldrb	r3, [r5, r0]
 80024ee:	071a      	lsls	r2, r3, #28
 80024f0:	d4f8      	bmi.n	80024e4 <chscanf.constprop.0+0x2f4>
 80024f2:	4681      	mov	r9, r0
      if (c == '+') {
 80024f4:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80024f8:	f000 8122 	beq.w	8002740 <chscanf.constprop.0+0x550>
      } else if (c == '-') {
 80024fc:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 8002500:	f000 80bc 	beq.w	800267c <chscanf.constprop.0+0x48c>
      is_signed = false;
 8002504:	2601      	movs	r6, #1
 8002506:	2300      	movs	r3, #0
 8002508:	e9cd 6304 	strd	r6, r3, [sp, #16]
    base        = 10;
 800250c:	f04f 080a 	mov.w	r8, #10
 8002510:	e7ad      	b.n	800246e <chscanf.constprop.0+0x27e>
      while (isspace(c)) {
 8002512:	f815 3009 	ldrb.w	r3, [r5, r9]
 8002516:	0719      	lsls	r1, r3, #28
 8002518:	d507      	bpl.n	800252a <chscanf.constprop.0+0x33a>
        c = streamGet(chp);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	4638      	mov	r0, r7
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	4798      	blx	r3
      while (isspace(c)) {
 8002522:	5c2b      	ldrb	r3, [r5, r0]
 8002524:	071b      	lsls	r3, r3, #28
 8002526:	d4f8      	bmi.n	800251a <chscanf.constprop.0+0x32a>
 8002528:	4681      	mov	r9, r0
      if (c == '+') {
 800252a:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 800252e:	f000 8110 	beq.w	8002752 <chscanf.constprop.0+0x562>
      } else if (c == '-') {
 8002532:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 8002536:	f000 80af 	beq.w	8002698 <chscanf.constprop.0+0x4a8>
      is_signed = false;
 800253a:	2001      	movs	r0, #1
 800253c:	2300      	movs	r3, #0
 800253e:	e9cd 0304 	strd	r0, r3, [sp, #16]
      base      = 8;
 8002542:	f04f 0808 	mov.w	r8, #8
 8002546:	e792      	b.n	800246e <chscanf.constprop.0+0x27e>
      while (isspace(c)) {
 8002548:	f815 3009 	ldrb.w	r3, [r5, r9]
 800254c:	071a      	lsls	r2, r3, #28
 800254e:	d507      	bpl.n	8002560 <chscanf.constprop.0+0x370>
        c = streamGet(chp);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4638      	mov	r0, r7
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	4798      	blx	r3
      while (isspace(c)) {
 8002558:	5c2b      	ldrb	r3, [r5, r0]
 800255a:	071b      	lsls	r3, r3, #28
 800255c:	d4f8      	bmi.n	8002550 <chscanf.constprop.0+0x360>
 800255e:	4681      	mov	r9, r0
      if (c == '+') {
 8002560:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 8002564:	d065      	beq.n	8002632 <chscanf.constprop.0+0x442>
      } else if (c == '-') {
 8002566:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 800256a:	f000 80c5 	beq.w	80026f8 <chscanf.constprop.0+0x508>
    is_positive = true;
 800256e:	2301      	movs	r3, #1
 8002570:	9304      	str	r3, [sp, #16]
      if (c == '0') {
 8002572:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8002576:	d157      	bne.n	8002628 <chscanf.constprop.0+0x438>
        if (--width == 0) {
 8002578:	1e66      	subs	r6, r4, #1
 800257a:	f000 80f5 	beq.w	8002768 <chscanf.constprop.0+0x578>
        c = streamGet(chp);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	4638      	mov	r0, r7
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	4798      	blx	r3
        if (c == 'x' || c == 'X') {
 8002586:	f020 0320 	bic.w	r3, r0, #32
 800258a:	2b58      	cmp	r3, #88	; 0x58
        c = streamGet(chp);
 800258c:	4681      	mov	r9, r0
        if (c == 'x' || c == 'X') {
 800258e:	f000 80a6 	beq.w	80026de <chscanf.constprop.0+0x4ee>
    is_signed   = true;
 8002592:	2301      	movs	r3, #1
        if (c == 'x' || c == 'X') {
 8002594:	4634      	mov	r4, r6
    is_signed   = true;
 8002596:	9305      	str	r3, [sp, #20]
          base = 8;
 8002598:	f04f 0808 	mov.w	r8, #8
 800259c:	e767      	b.n	800246e <chscanf.constprop.0+0x27e>
      while (isspace(c)) {
 800259e:	f815 3009 	ldrb.w	r3, [r5, r9]
 80025a2:	071b      	lsls	r3, r3, #28
 80025a4:	d507      	bpl.n	80025b6 <chscanf.constprop.0+0x3c6>
        c = streamGet(chp);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	4638      	mov	r0, r7
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	4798      	blx	r3
      while (isspace(c)) {
 80025ae:	5c2b      	ldrb	r3, [r5, r0]
 80025b0:	071e      	lsls	r6, r3, #28
 80025b2:	d4f8      	bmi.n	80025a6 <chscanf.constprop.0+0x3b6>
 80025b4:	4681      	mov	r9, r0
      if (c == '+') {
 80025b6:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80025ba:	f000 80b3 	beq.w	8002724 <chscanf.constprop.0+0x534>
      } else if (c == '-') {
 80025be:	f1b9 0f2d 	cmp.w	r9, #45	; 0x2d
 80025c2:	d04c      	beq.n	800265e <chscanf.constprop.0+0x46e>
    is_positive = true;
 80025c4:	2301      	movs	r3, #1
    is_signed   = true;
 80025c6:	e9cd 3304 	strd	r3, r3, [sp, #16]
    base        = 10;
 80025ca:	f04f 080a 	mov.w	r8, #10
 80025ce:	e74e      	b.n	800246e <chscanf.constprop.0+0x27e>
      for (i = 0; i < width; ++i) {
 80025d0:	2c00      	cmp	r4, #0
 80025d2:	f77f aefd 	ble.w	80023d0 <chscanf.constprop.0+0x1e0>
 80025d6:	9b01      	ldr	r3, [sp, #4]
 80025d8:	46b8      	mov	r8, r7
 80025da:	441c      	add	r4, r3
 80025dc:	461e      	mov	r6, r3
 80025de:	461f      	mov	r7, r3
        c = streamGet(chp);
 80025e0:	4640      	mov	r0, r8
        if (buf) {
 80025e2:	b10f      	cbz	r7, 80025e8 <chscanf.constprop.0+0x3f8>
          ((char*)buf)[i] = c;
 80025e4:	f886 9000 	strb.w	r9, [r6]
        c = streamGet(chp);
 80025e8:	f8d8 3000 	ldr.w	r3, [r8]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	4798      	blx	r3
        if (c == STM_RESET) {
 80025f0:	f110 0f02 	cmn.w	r0, #2
        c = streamGet(chp);
 80025f4:	4681      	mov	r9, r0
 80025f6:	f106 0601 	add.w	r6, r6, #1
        if (c == STM_RESET) {
 80025fa:	f43f ae29 	beq.w	8002250 <chscanf.constprop.0+0x60>
      for (i = 0; i < width; ++i) {
 80025fe:	42b4      	cmp	r4, r6
 8002600:	d1ee      	bne.n	80025e0 <chscanf.constprop.0+0x3f0>
 8002602:	4647      	mov	r7, r8
 8002604:	e6e4      	b.n	80023d0 <chscanf.constprop.0+0x1e0>
      f   = *fmt++;
 8002606:	7863      	ldrb	r3, [r4, #1]
      buf = NULL;
 8002608:	9001      	str	r0, [sp, #4]
      f   = *fmt++;
 800260a:	1ca6      	adds	r6, r4, #2
 800260c:	e63b      	b.n	8002286 <chscanf.constprop.0+0x96>
      if (is_long && is_signed) {
 800260e:	9a05      	ldr	r2, [sp, #20]
 8002610:	2a00      	cmp	r2, #0
 8002612:	f43f af53 	beq.w	80024bc <chscanf.constprop.0+0x2cc>
 8002616:	e752      	b.n	80024be <chscanf.constprop.0+0x2ce>
  while (c != STM_RESET && f != 0) {
 8002618:	f04f 09fe 	mov.w	r9, #254	; 0xfe
  int   n = 0;
 800261c:	f04f 0b00 	mov.w	fp, #0
 8002620:	e610      	b.n	8002244 <chscanf.constprop.0+0x54>
      width = -1;
 8002622:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002626:	e642      	b.n	80022ae <chscanf.constprop.0+0xbe>
    is_signed   = true;
 8002628:	2301      	movs	r3, #1
 800262a:	9305      	str	r3, [sp, #20]
    base        = 10;
 800262c:	f04f 080a 	mov.w	r8, #10
 8002630:	e71d      	b.n	800246e <chscanf.constprop.0+0x27e>
        if (--width == 0) {
 8002632:	3c01      	subs	r4, #1
 8002634:	f43f ae0c 	beq.w	8002250 <chscanf.constprop.0+0x60>
        c = streamGet(chp);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4638      	mov	r0, r7
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	4798      	blx	r3
    is_positive = true;
 8002640:	2301      	movs	r3, #1
        c = streamGet(chp);
 8002642:	4681      	mov	r9, r0
    is_positive = true;
 8002644:	9304      	str	r3, [sp, #16]
 8002646:	e794      	b.n	8002572 <chscanf.constprop.0+0x382>
        if (--width == 0) {
 8002648:	3c01      	subs	r4, #1
 800264a:	f43f ae01 	beq.w	8002250 <chscanf.constprop.0+0x60>
        c = streamGet(chp);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	4638      	mov	r0, r7
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	4798      	blx	r3
    is_positive = true;
 8002656:	2301      	movs	r3, #1
        c = streamGet(chp);
 8002658:	4681      	mov	r9, r0
    is_positive = true;
 800265a:	9304      	str	r3, [sp, #16]
 800265c:	e6f2      	b.n	8002444 <chscanf.constprop.0+0x254>
        if (--width == 0) {
 800265e:	3c01      	subs	r4, #1
 8002660:	f43f adf6 	beq.w	8002250 <chscanf.constprop.0+0x60>
        c           = streamGet(chp);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4638      	mov	r0, r7
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	4798      	blx	r3
    is_signed   = true;
 800266c:	2301      	movs	r3, #1
        c           = streamGet(chp);
 800266e:	4681      	mov	r9, r0
    is_signed   = true;
 8002670:	2000      	movs	r0, #0
 8002672:	e9cd 0304 	strd	r0, r3, [sp, #16]
    base        = 10;
 8002676:	f04f 080a 	mov.w	r8, #10
 800267a:	e6f8      	b.n	800246e <chscanf.constprop.0+0x27e>
        if (--width == 0) {
 800267c:	3c01      	subs	r4, #1
 800267e:	f43f ade7 	beq.w	8002250 <chscanf.constprop.0+0x60>
        c           = streamGet(chp);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	4638      	mov	r0, r7
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	4798      	blx	r3
        is_positive = false;
 800268a:	2300      	movs	r3, #0
 800268c:	9304      	str	r3, [sp, #16]
        c           = streamGet(chp);
 800268e:	4681      	mov	r9, r0
      is_signed = false;
 8002690:	9305      	str	r3, [sp, #20]
    base        = 10;
 8002692:	f04f 080a 	mov.w	r8, #10
 8002696:	e6ea      	b.n	800246e <chscanf.constprop.0+0x27e>
        if (--width == 0) {
 8002698:	3c01      	subs	r4, #1
 800269a:	f43f add9 	beq.w	8002250 <chscanf.constprop.0+0x60>
        c           = streamGet(chp);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	4638      	mov	r0, r7
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	4798      	blx	r3
        is_positive = false;
 80026a6:	2300      	movs	r3, #0
 80026a8:	9304      	str	r3, [sp, #16]
        c           = streamGet(chp);
 80026aa:	4681      	mov	r9, r0
      is_signed = false;
 80026ac:	9305      	str	r3, [sp, #20]
      base      = 8;
 80026ae:	f04f 0808 	mov.w	r8, #8
 80026b2:	e6dc      	b.n	800246e <chscanf.constprop.0+0x27e>
      if (width != -1) {
 80026b4:	1c61      	adds	r1, r4, #1
 80026b6:	f43f ae8b 	beq.w	80023d0 <chscanf.constprop.0+0x1e0>
        if (buf) {
 80026ba:	9b01      	ldr	r3, [sp, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f47f ae83 	bne.w	80023c8 <chscanf.constprop.0+0x1d8>
 80026c2:	e685      	b.n	80023d0 <chscanf.constprop.0+0x1e0>
          if (--width == 0) {
 80026c4:	3c02      	subs	r4, #2
 80026c6:	f43f adc3 	beq.w	8002250 <chscanf.constprop.0+0x60>
          c = streamGet(chp);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	4638      	mov	r0, r7
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	4798      	blx	r3
      is_signed = false;
 80026d2:	2300      	movs	r3, #0
          c = streamGet(chp);
 80026d4:	4681      	mov	r9, r0
      is_signed = false;
 80026d6:	9305      	str	r3, [sp, #20]
      base      = 16;
 80026d8:	f04f 0810 	mov.w	r8, #16
 80026dc:	e6c7      	b.n	800246e <chscanf.constprop.0+0x27e>
          if (--width == 0) {
 80026de:	3c02      	subs	r4, #2
 80026e0:	f43f adb6 	beq.w	8002250 <chscanf.constprop.0+0x60>
          c = streamGet(chp);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4638      	mov	r0, r7
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	4798      	blx	r3
    is_signed   = true;
 80026ec:	2301      	movs	r3, #1
          c = streamGet(chp);
 80026ee:	4681      	mov	r9, r0
    is_signed   = true;
 80026f0:	9305      	str	r3, [sp, #20]
          base = 16;
 80026f2:	f04f 0810 	mov.w	r8, #16
 80026f6:	e6ba      	b.n	800246e <chscanf.constprop.0+0x27e>
        if (--width == 0) {
 80026f8:	3c01      	subs	r4, #1
 80026fa:	f43f ada9 	beq.w	8002250 <chscanf.constprop.0+0x60>
        c           = streamGet(chp);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	4638      	mov	r0, r7
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	4798      	blx	r3
        is_positive = false;
 8002706:	2300      	movs	r3, #0
        c           = streamGet(chp);
 8002708:	4681      	mov	r9, r0
        is_positive = false;
 800270a:	9304      	str	r3, [sp, #16]
 800270c:	e731      	b.n	8002572 <chscanf.constprop.0+0x382>
        if (--width == 0) {
 800270e:	3c01      	subs	r4, #1
 8002710:	f43f ad9e 	beq.w	8002250 <chscanf.constprop.0+0x60>
        c           = streamGet(chp);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	4638      	mov	r0, r7
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	4798      	blx	r3
        is_positive = false;
 800271c:	2300      	movs	r3, #0
        c           = streamGet(chp);
 800271e:	4681      	mov	r9, r0
        is_positive = false;
 8002720:	9304      	str	r3, [sp, #16]
 8002722:	e68f      	b.n	8002444 <chscanf.constprop.0+0x254>
        if (--width == 0) {
 8002724:	3c01      	subs	r4, #1
 8002726:	f43f ad93 	beq.w	8002250 <chscanf.constprop.0+0x60>
        c = streamGet(chp);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	4638      	mov	r0, r7
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	4798      	blx	r3
    is_positive = true;
 8002732:	2301      	movs	r3, #1
 8002734:	9304      	str	r3, [sp, #16]
        c = streamGet(chp);
 8002736:	4681      	mov	r9, r0
    is_signed   = true;
 8002738:	9305      	str	r3, [sp, #20]
    base        = 10;
 800273a:	f04f 080a 	mov.w	r8, #10
 800273e:	e696      	b.n	800246e <chscanf.constprop.0+0x27e>
        if (--width == 0) {
 8002740:	3c01      	subs	r4, #1
 8002742:	f43f ad85 	beq.w	8002250 <chscanf.constprop.0+0x60>
        c = streamGet(chp);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	4638      	mov	r0, r7
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	4798      	blx	r3
 800274e:	4681      	mov	r9, r0
 8002750:	e6d8      	b.n	8002504 <chscanf.constprop.0+0x314>
        if (--width == 0) {
 8002752:	3c01      	subs	r4, #1
 8002754:	f43f ad7c 	beq.w	8002250 <chscanf.constprop.0+0x60>
        c = streamGet(chp);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4638      	mov	r0, r7
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	4798      	blx	r3
 8002760:	4681      	mov	r9, r0
 8002762:	e6ea      	b.n	800253a <chscanf.constprop.0+0x34a>
 8002764:	46ba      	mov	sl, r7
 8002766:	e56d      	b.n	8002244 <chscanf.constprop.0+0x54>
          return ++n;
 8002768:	f10b 0b01 	add.w	fp, fp, #1
 800276c:	e570      	b.n	8002250 <chscanf.constprop.0+0x60>
 800276e:	bf00      	nop

08002770 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002770:	b40e      	push	{r1, r2, r3}
 8002772:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	ab0f      	add	r3, sp, #60	; 0x3c
 800277a:	f853 4b04 	ldr.w	r4, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800277e:	9302      	str	r3, [sp, #8]
    c = *fmt++;
 8002780:	4625      	mov	r5, r4
 8002782:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 8002786:	2900      	cmp	r1, #0
 8002788:	f000 823b 	beq.w	8002c02 <chprintf+0x492>
 800278c:	4607      	mov	r7, r0
 800278e:	4699      	mov	r9, r3
  int n = 0;
 8002790:	f04f 0800 	mov.w	r8, #0
 8002794:	e00c      	b.n	80027b0 <chprintf+0x40>
      streamPut(chp, (uint8_t)c);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	4638      	mov	r0, r7
 800279a:	68db      	ldr	r3, [r3, #12]
      n++;
 800279c:	f108 0801 	add.w	r8, r8, #1
 80027a0:	462c      	mov	r4, r5
      streamPut(chp, (uint8_t)c);
 80027a2:	4798      	blx	r3
    c = *fmt++;
 80027a4:	4625      	mov	r5, r4
 80027a6:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 80027aa:	2900      	cmp	r1, #0
 80027ac:	f000 80be 	beq.w	800292c <chprintf+0x1bc>
    if (c != '%') {
 80027b0:	2925      	cmp	r1, #37	; 0x25
 80027b2:	d1f0      	bne.n	8002796 <chprintf+0x26>
    if (*fmt == '-') {
 80027b4:	7863      	ldrb	r3, [r4, #1]
 80027b6:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 80027b8:	bf04      	itt	eq
 80027ba:	1ca5      	addeq	r5, r4, #2
      left_align = true;
 80027bc:	2001      	moveq	r0, #1
    if (*fmt == '+') {
 80027be:	782b      	ldrb	r3, [r5, #0]
    left_align = false;
 80027c0:	bf18      	it	ne
 80027c2:	2000      	movne	r0, #0
    if (*fmt == '+') {
 80027c4:	2b2b      	cmp	r3, #43	; 0x2b
 80027c6:	bf03      	ittte	eq
 80027c8:	786b      	ldrbeq	r3, [r5, #1]
      do_sign = true;
 80027ca:	f04f 0e01 	moveq.w	lr, #1
      fmt++;
 80027ce:	4475      	addeq	r5, lr
    do_sign = false;
 80027d0:	f04f 0e00 	movne.w	lr, #0
    if (*fmt == '0') {
 80027d4:	2b30      	cmp	r3, #48	; 0x30
      filler = '0';
 80027d6:	bf05      	ittet	eq
 80027d8:	461e      	moveq	r6, r3
      fmt++;
 80027da:	786b      	ldrbeq	r3, [r5, #1]
    filler = ' ';
 80027dc:	2620      	movne	r6, #32
      fmt++;
 80027de:	3501      	addeq	r5, #1
    if ( *fmt == '*') {
 80027e0:	2b2a      	cmp	r3, #42	; 0x2a
 80027e2:	f040 80ac 	bne.w	800293e <chprintf+0x1ce>
      width = va_arg(ap, int);
 80027e6:	f859 1b04 	ldr.w	r1, [r9], #4
      c = *fmt++;
 80027ea:	786b      	ldrb	r3, [r5, #1]
 80027ec:	1cac      	adds	r4, r5, #2
    if (c == '.') {
 80027ee:	2b2e      	cmp	r3, #46	; 0x2e
 80027f0:	f000 8130 	beq.w	8002a54 <chprintf+0x2e4>
    precision = 0;
 80027f4:	2200      	movs	r2, #0
    if (c == 'l' || c == 'L') {
 80027f6:	f003 05df 	and.w	r5, r3, #223	; 0xdf
 80027fa:	2d4c      	cmp	r5, #76	; 0x4c
 80027fc:	f000 80b2 	beq.w	8002964 <chprintf+0x1f4>
      is_long = (c >= 'A') && (c <= 'Z');
 8002800:	f1a3 0c44 	sub.w	ip, r3, #68	; 0x44
    switch (c) {
 8002804:	f1bc 0f34 	cmp.w	ip, #52	; 0x34
 8002808:	f200 8198 	bhi.w	8002b3c <chprintf+0x3cc>
 800280c:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8002810:	0196015e 	.word	0x0196015e
 8002814:	01960196 	.word	0x01960196
 8002818:	015e0196 	.word	0x015e0196
 800281c:	01960196 	.word	0x01960196
 8002820:	01960196 	.word	0x01960196
 8002824:	019a0196 	.word	0x019a0196
 8002828:	01960035 	.word	0x01960035
 800282c:	01960196 	.word	0x01960196
 8002830:	00940196 	.word	0x00940196
 8002834:	01960196 	.word	0x01960196
 8002838:	01960035 	.word	0x01960035
 800283c:	01960196 	.word	0x01960196
 8002840:	01960196 	.word	0x01960196
 8002844:	01960196 	.word	0x01960196
 8002848:	01960196 	.word	0x01960196
 800284c:	014d0196 	.word	0x014d0196
 8002850:	0196015e 	.word	0x0196015e
 8002854:	01960196 	.word	0x01960196
 8002858:	015e0196 	.word	0x015e0196
 800285c:	01960196 	.word	0x01960196
 8002860:	01960196 	.word	0x01960196
 8002864:	019a0196 	.word	0x019a0196
 8002868:	01960035 	.word	0x01960035
 800286c:	012d0196 	.word	0x012d0196
 8002870:	00940196 	.word	0x00940196
 8002874:	01960196 	.word	0x01960196
 8002878:	0035      	.short	0x0035
      if (c == 0) {
 800287a:	f04f 0e10 	mov.w	lr, #16
        l = va_arg(ap, unsigned int);
 800287e:	f859 5b04 	ldr.w	r5, [r9], #4
  q = p + MAX_FILLER;
 8002882:	f10d 0317 	add.w	r3, sp, #23
 8002886:	e000      	b.n	800288a <chprintf+0x11a>
  } while ((ll /= radix) != 0);
 8002888:	4663      	mov	r3, ip
    i = (int)(l % radix);
 800288a:	46aa      	mov	sl, r5
 800288c:	fbb5 f5fe 	udiv	r5, r5, lr
 8002890:	fb0e ab15 	mls	fp, lr, r5, sl
    i += '0';
 8002894:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    if (i > '9') {
 8002898:	2a39      	cmp	r2, #57	; 0x39
      i += 'A' - '0' - 10;
 800289a:	bfc8      	it	gt
 800289c:	f10b 0237 	addgt.w	r2, fp, #55	; 0x37
    *--q = i;
 80028a0:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 80028a2:	45f2      	cmp	sl, lr
    *--q = i;
 80028a4:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 80028a8:	f803 2c01 	strb.w	r2, [r3, #-1]
  } while ((ll /= radix) != 0);
 80028ac:	d2ec      	bcs.n	8002888 <chprintf+0x118>
  i = (int)(p + MAX_FILLER - q);
 80028ae:	f10d 0a0c 	add.w	sl, sp, #12
 80028b2:	f10d 0517 	add.w	r5, sp, #23
 80028b6:	eba5 050c 	sub.w	r5, r5, ip
 80028ba:	46d6      	mov	lr, sl
 80028bc:	f10d 0c17 	add.w	ip, sp, #23
 80028c0:	e001      	b.n	80028c6 <chprintf+0x156>
 80028c2:	f813 2b01 	ldrb.w	r2, [r3], #1
    *p++ = *q++;
 80028c6:	f80e 2b01 	strb.w	r2, [lr], #1
  while (--i);
 80028ca:	4563      	cmp	r3, ip
 80028cc:	d1f9      	bne.n	80028c2 <chprintf+0x152>
 80028ce:	1b49      	subs	r1, r1, r5
 80028d0:	3d01      	subs	r5, #1
    if ((width -= i) < 0) {
 80028d2:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 80028d6:	b920      	cbnz	r0, 80028e2 <chprintf+0x172>
    if (width < 0) {
 80028d8:	2900      	cmp	r1, #0
      width = -width;
 80028da:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 80028de:	f300 8145 	bgt.w	8002b6c <chprintf+0x3fc>
    while (--i >= 0) {
 80028e2:	2d00      	cmp	r5, #0
 80028e4:	db0f      	blt.n	8002906 <chprintf+0x196>
 80028e6:	1c6b      	adds	r3, r5, #1
 80028e8:	4453      	add	r3, sl
 80028ea:	9401      	str	r4, [sp, #4]
 80028ec:	461c      	mov	r4, r3
      streamPut(chp, (uint8_t)*s++);
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80028f4:	68d2      	ldr	r2, [r2, #12]
 80028f6:	4638      	mov	r0, r7
 80028f8:	4790      	blx	r2
    while (--i >= 0) {
 80028fa:	45a2      	cmp	sl, r4
 80028fc:	d1f7      	bne.n	80028ee <chprintf+0x17e>
 80028fe:	f108 0801 	add.w	r8, r8, #1
 8002902:	9c01      	ldr	r4, [sp, #4]
 8002904:	44a8      	add	r8, r5
    while (width) {
 8002906:	f1bb 0f00 	cmp.w	fp, #0
 800290a:	f43f af4b 	beq.w	80027a4 <chprintf+0x34>
 800290e:	465d      	mov	r5, fp
      streamPut(chp, (uint8_t)filler);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4631      	mov	r1, r6
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4638      	mov	r0, r7
 8002918:	4798      	blx	r3
    while (width) {
 800291a:	3d01      	subs	r5, #1
 800291c:	d1f8      	bne.n	8002910 <chprintf+0x1a0>
    c = *fmt++;
 800291e:	4625      	mov	r5, r4
 8002920:	44d8      	add	r8, fp
 8002922:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 8002926:	2900      	cmp	r1, #0
 8002928:	f47f af42 	bne.w	80027b0 <chprintf+0x40>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 800292c:	4640      	mov	r0, r8
 800292e:	b006      	add	sp, #24
 8002930:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002934:	b003      	add	sp, #12
 8002936:	4770      	bx	lr
      if (c == 0) {
 8002938:	f04f 0e0a 	mov.w	lr, #10
 800293c:	e79f      	b.n	800287e <chprintf+0x10e>
        c = *fmt++;
 800293e:	1c6c      	adds	r4, r5, #1
        if (c == 0) {
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f3      	beq.n	800292c <chprintf+0x1bc>
      width = 0;
 8002944:	2100      	movs	r1, #0
        if (c >= '0' && c <= '9') {
 8002946:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	2a09      	cmp	r2, #9
          width = width * 10 + c;
 800294e:	eb01 0581 	add.w	r5, r1, r1, lsl #2
        if (c >= '0' && c <= '9') {
 8002952:	f63f af4c 	bhi.w	80027ee <chprintf+0x7e>
        c = *fmt++;
 8002956:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 800295a:	eb02 0145 	add.w	r1, r2, r5, lsl #1
        if (c == 0) {
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f1      	bne.n	8002946 <chprintf+0x1d6>
 8002962:	e7e3      	b.n	800292c <chprintf+0x1bc>
      c = *fmt++;
 8002964:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == 0) {
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0df      	beq.n	800292c <chprintf+0x1bc>
    switch (c) {
 800296c:	f1a3 0544 	sub.w	r5, r3, #68	; 0x44
 8002970:	2d34      	cmp	r5, #52	; 0x34
 8002972:	f200 80e3 	bhi.w	8002b3c <chprintf+0x3cc>
 8002976:	f20f 0c08 	addw	ip, pc, #8
 800297a:	f85c f025 	ldr.w	pc, [ip, r5, lsl #2]
 800297e:	bf00      	nop
 8002980:	08002acd 	.word	0x08002acd
 8002984:	08002b3d 	.word	0x08002b3d
 8002988:	08002b3d 	.word	0x08002b3d
 800298c:	08002b3d 	.word	0x08002b3d
 8002990:	08002b3d 	.word	0x08002b3d
 8002994:	08002acd 	.word	0x08002acd
 8002998:	08002b3d 	.word	0x08002b3d
 800299c:	08002b3d 	.word	0x08002b3d
 80029a0:	08002b3d 	.word	0x08002b3d
 80029a4:	08002b3d 	.word	0x08002b3d
 80029a8:	08002b3d 	.word	0x08002b3d
 80029ac:	08002b45 	.word	0x08002b45
 80029b0:	0800287b 	.word	0x0800287b
 80029b4:	08002b3d 	.word	0x08002b3d
 80029b8:	08002b3d 	.word	0x08002b3d
 80029bc:	08002b3d 	.word	0x08002b3d
 80029c0:	08002b3d 	.word	0x08002b3d
 80029c4:	08002939 	.word	0x08002939
 80029c8:	08002b3d 	.word	0x08002b3d
 80029cc:	08002b3d 	.word	0x08002b3d
 80029d0:	0800287b 	.word	0x0800287b
 80029d4:	08002b3d 	.word	0x08002b3d
 80029d8:	08002b3d 	.word	0x08002b3d
 80029dc:	08002b3d 	.word	0x08002b3d
 80029e0:	08002b3d 	.word	0x08002b3d
 80029e4:	08002b3d 	.word	0x08002b3d
 80029e8:	08002b3d 	.word	0x08002b3d
 80029ec:	08002b3d 	.word	0x08002b3d
 80029f0:	08002b3d 	.word	0x08002b3d
 80029f4:	08002b3d 	.word	0x08002b3d
 80029f8:	08002b3d 	.word	0x08002b3d
 80029fc:	08002aab 	.word	0x08002aab
 8002a00:	08002acd 	.word	0x08002acd
 8002a04:	08002b3d 	.word	0x08002b3d
 8002a08:	08002b3d 	.word	0x08002b3d
 8002a0c:	08002b3d 	.word	0x08002b3d
 8002a10:	08002b3d 	.word	0x08002b3d
 8002a14:	08002acd 	.word	0x08002acd
 8002a18:	08002b3d 	.word	0x08002b3d
 8002a1c:	08002b3d 	.word	0x08002b3d
 8002a20:	08002b3d 	.word	0x08002b3d
 8002a24:	08002b3d 	.word	0x08002b3d
 8002a28:	08002b3d 	.word	0x08002b3d
 8002a2c:	08002b45 	.word	0x08002b45
 8002a30:	0800287b 	.word	0x0800287b
 8002a34:	08002b3d 	.word	0x08002b3d
 8002a38:	08002b3d 	.word	0x08002b3d
 8002a3c:	08002a6b 	.word	0x08002a6b
 8002a40:	08002b3d 	.word	0x08002b3d
 8002a44:	08002939 	.word	0x08002939
 8002a48:	08002b3d 	.word	0x08002b3d
 8002a4c:	08002b3d 	.word	0x08002b3d
 8002a50:	0800287b 	.word	0x0800287b
      c = *fmt++;
 8002a54:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f43f af68 	beq.w	800292c <chprintf+0x1bc>
      if (c == '*') {
 8002a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a5e:	d174      	bne.n	8002b4a <chprintf+0x3da>
        c = *fmt++;
 8002a60:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 8002a62:	f859 2b04 	ldr.w	r2, [r9], #4
        c = *fmt++;
 8002a66:	3402      	adds	r4, #2
 8002a68:	e6c5      	b.n	80027f6 <chprintf+0x86>
      if ((s = va_arg(ap, char *)) == 0) {
 8002a6a:	f859 ab04 	ldr.w	sl, [r9], #4
 8002a6e:	f1ba 0f00 	cmp.w	sl, #0
 8002a72:	f000 80bc 	beq.w	8002bee <chprintf+0x47e>
 8002a76:	f89a 3000 	ldrb.w	r3, [sl]
      if (precision == 0) {
 8002a7a:	2a00      	cmp	r2, #0
 8002a7c:	f040 80aa 	bne.w	8002bd4 <chprintf+0x464>
      for (p = s; *p && (--precision >= 0); p++)
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80ab 	beq.w	8002bdc <chprintf+0x46c>
 8002a86:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8002a8a:	4655      	mov	r5, sl
 8002a8c:	e001      	b.n	8002a92 <chprintf+0x322>
 8002a8e:	42d3      	cmn	r3, r2
 8002a90:	d405      	bmi.n	8002a9e <chprintf+0x32e>
 8002a92:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002a96:	ebaa 0305 	sub.w	r3, sl, r5
 8002a9a:	2e00      	cmp	r6, #0
 8002a9c:	d1f7      	bne.n	8002a8e <chprintf+0x31e>
 8002a9e:	eba5 050a 	sub.w	r5, r5, sl
 8002aa2:	1b49      	subs	r1, r1, r5
      filler = ' ';
 8002aa4:	2620      	movs	r6, #32
 8002aa6:	3d01      	subs	r5, #1
 8002aa8:	e713      	b.n	80028d2 <chprintf+0x162>
      *p++ = va_arg(ap, int);
 8002aaa:	f859 3b04 	ldr.w	r3, [r9], #4
 8002aae:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8002ab2:	3901      	subs	r1, #1
      filler = ' ';
 8002ab4:	2620      	movs	r6, #32
    if ((width -= i) < 0) {
 8002ab6:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8002aba:	b918      	cbnz	r0, 8002ac4 <chprintf+0x354>
    if (width < 0) {
 8002abc:	2900      	cmp	r1, #0
      width = -width;
 8002abe:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8002ac2:	dc72      	bgt.n	8002baa <chprintf+0x43a>
    if (left_align == false) {
 8002ac4:	2500      	movs	r5, #0
 8002ac6:	f10d 0a0c 	add.w	sl, sp, #12
 8002aca:	e70c      	b.n	80028e6 <chprintf+0x176>
        l = va_arg(ap, int);
 8002acc:	f859 cb04 	ldr.w	ip, [r9], #4
      if (l < 0) {
 8002ad0:	f1bc 0f00 	cmp.w	ip, #0
 8002ad4:	db5f      	blt.n	8002b96 <chprintf+0x426>
        if (do_sign) {
 8002ad6:	f1be 0f00 	cmp.w	lr, #0
 8002ada:	f000 808e 	beq.w	8002bfa <chprintf+0x48a>
          *p++ = '+';
 8002ade:	232b      	movs	r3, #43	; 0x2b
 8002ae0:	f88d 300c 	strb.w	r3, [sp, #12]
 8002ae4:	f10d 050d 	add.w	r5, sp, #13
 8002ae8:	f10d 0a0c 	add.w	sl, sp, #12
  q = p + MAX_FILLER;
 8002aec:	f105 030b 	add.w	r3, r5, #11
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	461a      	mov	r2, r3
    i = (int)(l % radix);
 8002af4:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <chprintf+0x4a4>)
 8002af6:	fba3 e30c 	umull	lr, r3, r3, ip
 8002afa:	08db      	lsrs	r3, r3, #3
 8002afc:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8002b00:	469e      	mov	lr, r3
 8002b02:	ebac 034b 	sub.w	r3, ip, fp, lsl #1
    i += '0';
 8002b06:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 8002b08:	46e3      	mov	fp, ip
    *--q = i;
 8002b0a:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8002b0c:	f1bb 0f09 	cmp.w	fp, #9
    *--q = i;
 8002b10:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 8002b14:	46f4      	mov	ip, lr
  } while ((ll /= radix) != 0);
 8002b16:	dced      	bgt.n	8002af4 <chprintf+0x384>
 8002b18:	469e      	mov	lr, r3
  i = (int)(p + MAX_FILLER - q);
 8002b1a:	9b01      	ldr	r3, [sp, #4]
 8002b1c:	eba3 0c02 	sub.w	ip, r3, r2
 8002b20:	44ac      	add	ip, r5
 8002b22:	4673      	mov	r3, lr
 8002b24:	e001      	b.n	8002b2a <chprintf+0x3ba>
 8002b26:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 8002b2a:	f805 3b01 	strb.w	r3, [r5], #1
  while (--i);
 8002b2e:	4565      	cmp	r5, ip
 8002b30:	d1f9      	bne.n	8002b26 <chprintf+0x3b6>
 8002b32:	eba5 050a 	sub.w	r5, r5, sl
 8002b36:	1b49      	subs	r1, r1, r5
 8002b38:	3d01      	subs	r5, #1
 8002b3a:	e6ca      	b.n	80028d2 <chprintf+0x162>
      *p++ = c;
 8002b3c:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8002b40:	3901      	subs	r1, #1
 8002b42:	e7b8      	b.n	8002ab6 <chprintf+0x346>
      if (c == 0) {
 8002b44:	f04f 0e08 	mov.w	lr, #8
 8002b48:	e699      	b.n	800287e <chprintf+0x10e>
      c = *fmt++;
 8002b4a:	3401      	adds	r4, #1
    precision = 0;
 8002b4c:	2200      	movs	r2, #0
        while (c >= '0' && c <= '9') {
 8002b4e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8002b52:	b2ed      	uxtb	r5, r5
 8002b54:	2d09      	cmp	r5, #9
          precision = precision * 10 + c;
 8002b56:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
        while (c >= '0' && c <= '9') {
 8002b5a:	f63f ae4c 	bhi.w	80027f6 <chprintf+0x86>
          c = *fmt++;
 8002b5e:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 8002b62:	eb05 024c 	add.w	r2, r5, ip, lsl #1
          if (c == 0) {
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f1      	bne.n	8002b4e <chprintf+0x3de>
 8002b6a:	e6df      	b.n	800292c <chprintf+0x1bc>
      width = -width;
 8002b6c:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8002b70:	f89a 1000 	ldrb.w	r1, [sl]
 8002b74:	292d      	cmp	r1, #45	; 0x2d
 8002b76:	d021      	beq.n	8002bbc <chprintf+0x44c>
        streamPut(chp, (uint8_t)filler);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4631      	mov	r1, r6
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	4638      	mov	r0, r7
 8002b80:	4798      	blx	r3
      } while (++width != 0);
 8002b82:	f11b 0b01 	adds.w	fp, fp, #1
 8002b86:	d1f7      	bne.n	8002b78 <chprintf+0x408>
 8002b88:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 8002b8a:	2d00      	cmp	r5, #0
 8002b8c:	eba8 0803 	sub.w	r8, r8, r3
 8002b90:	f6bf aea9 	bge.w	80028e6 <chprintf+0x176>
 8002b94:	e606      	b.n	80027a4 <chprintf+0x34>
        *p++ = '-';
 8002b96:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002b98:	f1cc 0c00 	rsb	ip, ip, #0
        *p++ = '-';
 8002b9c:	f88d 300c 	strb.w	r3, [sp, #12]
 8002ba0:	f10d 050d 	add.w	r5, sp, #13
 8002ba4:	f10d 0a0c 	add.w	sl, sp, #12
 8002ba8:	e7a0      	b.n	8002aec <chprintf+0x37c>
      if (*s == '-' && filler == '0') {
 8002baa:	f89d 100c 	ldrb.w	r1, [sp, #12]
      width = -width;
 8002bae:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8002bb2:	292d      	cmp	r1, #45	; 0x2d
    if (width < 0) {
 8002bb4:	f10d 0a0c 	add.w	sl, sp, #12
 8002bb8:	4605      	mov	r5, r0
      if (*s == '-' && filler == '0') {
 8002bba:	d1dd      	bne.n	8002b78 <chprintf+0x408>
 8002bbc:	2e30      	cmp	r6, #48	; 0x30
 8002bbe:	d1db      	bne.n	8002b78 <chprintf+0x408>
        streamPut(chp, (uint8_t)*s++);
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	4638      	mov	r0, r7
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	4790      	blx	r2
 8002bc8:	f10a 0a01 	add.w	sl, sl, #1
        n++;
 8002bcc:	f108 0801 	add.w	r8, r8, #1
        i--;
 8002bd0:	3d01      	subs	r5, #1
 8002bd2:	e7d1      	b.n	8002b78 <chprintf+0x408>
      for (p = s; *p && (--precision >= 0); p++)
 8002bd4:	b113      	cbz	r3, 8002bdc <chprintf+0x46c>
 8002bd6:	3a01      	subs	r2, #1
 8002bd8:	f57f af57 	bpl.w	8002a8a <chprintf+0x31a>
    if ((width -= i) < 0) {
 8002bdc:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8002be0:	b918      	cbnz	r0, 8002bea <chprintf+0x47a>
    if (width < 0) {
 8002be2:	2900      	cmp	r1, #0
      width = -width;
 8002be4:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8002be8:	dc0d      	bgt.n	8002c06 <chprintf+0x496>
    if (left_align == false) {
 8002bea:	2620      	movs	r6, #32
 8002bec:	e68b      	b.n	8002906 <chprintf+0x196>
        s = "(null)";
 8002bee:	f8df a028 	ldr.w	sl, [pc, #40]	; 8002c18 <chprintf+0x4a8>
      if (precision == 0) {
 8002bf2:	2a00      	cmp	r2, #0
 8002bf4:	f43f af47 	beq.w	8002a86 <chprintf+0x316>
 8002bf8:	e7ed      	b.n	8002bd6 <chprintf+0x466>
    p = tmpbuf;
 8002bfa:	f10d 0a0c 	add.w	sl, sp, #12
 8002bfe:	4655      	mov	r5, sl
 8002c00:	e774      	b.n	8002aec <chprintf+0x37c>
  int n = 0;
 8002c02:	4688      	mov	r8, r1
  return formatted_bytes;
 8002c04:	e692      	b.n	800292c <chprintf+0x1bc>
      width = -width;
 8002c06:	f8cd b004 	str.w	fp, [sp, #4]
    if (width < 0) {
 8002c0a:	2620      	movs	r6, #32
 8002c0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002c10:	e7ae      	b.n	8002b70 <chprintf+0x400>
 8002c12:	bf00      	nop
 8002c14:	cccccccd 	.word	0xcccccccd
 8002c18:	08009324 	.word	0x08009324
 8002c1c:	00000000 	.word	0x00000000

08002c20 <check_BUS>:
static void check_BUS(void){
 8002c20:	b538      	push	{r3, r4, r5, lr}
  BUS_in_use = 1;
 8002c22:	4a21      	ldr	r2, [pc, #132]	; (8002ca8 <check_BUS+0x88>)
  DEBUG_LOW;
 8002c24:	4b21      	ldr	r3, [pc, #132]	; (8002cac <check_BUS+0x8c>)
 8002c26:	2101      	movs	r1, #1
 8002c28:	8359      	strh	r1, [r3, #26]
 8002c2a:	2320      	movs	r3, #32
  BUS_in_use = 1;
 8002c2c:	7011      	strb	r1, [r2, #0]
 8002c2e:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
 8002c32:	4c1f      	ldr	r4, [pc, #124]	; (8002cb0 <check_BUS+0x90>)

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is why the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8002c34:	6860      	ldr	r0, [r4, #4]
  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 8002c36:	68e3      	ldr	r3, [r4, #12]
  if (NULL != gptp->config->callback)
 8002c38:	6840      	ldr	r0, [r0, #4]
  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 8002c3a:	f240 35e7 	movw	r5, #999	; 0x3e7
 8002c3e:	62dd      	str	r5, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
 8002c40:	6159      	str	r1, [r3, #20]
 8002c42:	2503      	movs	r5, #3
  gptp->tim->CNT = 0;                           /* Reset counter.           */
 8002c44:	2100      	movs	r1, #0
 8002c46:	6259      	str	r1, [r3, #36]	; 0x24
 8002c48:	7025      	strb	r5, [r4, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8002c4a:	6119      	str	r1, [r3, #16]
  if (NULL != gptp->config->callback)
 8002c4c:	b118      	cbz	r0, 8002c56 <check_BUS+0x36>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
 8002c4e:	68d9      	ldr	r1, [r3, #12]
 8002c50:	f041 0101 	orr.w	r1, r1, #1
 8002c54:	60d9      	str	r1, [r3, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8002c56:	2185      	movs	r1, #133	; 0x85
 8002c58:	6019      	str	r1, [r3, #0]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f383 8811 	msr	BASEPRI, r3
  while ((palReadLine(BUSFREE) == PAL_LOW) && BUS_in_use == 1);
 8002c60:	4912      	ldr	r1, [pc, #72]	; (8002cac <check_BUS+0x8c>)
 8002c62:	e002      	b.n	8002c6a <check_BUS+0x4a>
 8002c64:	7813      	ldrb	r3, [r2, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d102      	bne.n	8002c70 <check_BUS+0x50>
 8002c6a:	690b      	ldr	r3, [r1, #16]
 8002c6c:	059b      	lsls	r3, r3, #22
 8002c6e:	d5f9      	bpl.n	8002c64 <check_BUS+0x44>
      if (BUS_in_use == 0){
 8002c70:	7813      	ldrb	r3, [r2, #0]
 8002c72:	b99b      	cbnz	r3, 8002c9c <check_BUS+0x7c>
        chprintf(dbg, "BUSFREE is staying Low.\r\n");
 8002c74:	490f      	ldr	r1, [pc, #60]	; (8002cb4 <check_BUS+0x94>)
 8002c76:	4810      	ldr	r0, [pc, #64]	; (8002cb8 <check_BUS+0x98>)
 8002c78:	f7ff fd7a 	bl	8002770 <chprintf>
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 8002c82:	68e3      	ldr	r3, [r4, #12]
 8002c84:	2200      	movs	r2, #0
  osalDbgCheck(gptp != NULL);
  osalDbgAssert((gptp->state == GPT_READY) || (gptp->state == GPT_CONTINUOUS) ||
                (gptp->state == GPT_ONESHOT),
                "invalid state");

  gptp->state = GPT_READY;
 8002c86:	2102      	movs	r1, #2
 8002c88:	7021      	strb	r1, [r4, #0]
 8002c8a:	601a      	str	r2, [r3, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8002c8c:	611a      	str	r2, [r3, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8002c8e:	68d9      	ldr	r1, [r3, #12]
 8002c90:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002c94:	60d9      	str	r1, [r3, #12]
 8002c96:	f382 8811 	msr	BASEPRI, r2
}
 8002c9a:	bd38      	pop	{r3, r4, r5, pc}
        chprintf(dbg, "BUSFREE is changing.\r\n");
 8002c9c:	4907      	ldr	r1, [pc, #28]	; (8002cbc <check_BUS+0x9c>)
 8002c9e:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <check_BUS+0x98>)
 8002ca0:	f7ff fd66 	bl	8002770 <chprintf>
 8002ca4:	e7ea      	b.n	8002c7c <check_BUS+0x5c>
 8002ca6:	bf00      	nop
 8002ca8:	20000c48 	.word	0x20000c48
 8002cac:	40020400 	.word	0x40020400
 8002cb0:	20000c4c 	.word	0x20000c4c
 8002cb4:	0800932c 	.word	0x0800932c
 8002cb8:	20000ef0 	.word	0x20000ef0
 8002cbc:	08009348 	.word	0x08009348

08002cc0 <read_single_byte.constprop.0>:
    TRESET_INACTIVE;
    BUS_in_use = 1;
  }
}

uint8_t read_single_byte(int32_t address, uint8_t reset){
 8002cc0:	b508      	push	{r3, lr}
  MRC_ACTIVE;  // Reset '590
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <read_single_byte.constprop.0+0x34>)
 8002cc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002cc8:	835a      	strh	r2, [r3, #26]
  __NOP();
 8002cca:	bf00      	nop
  for (i=0; i<address; i++){
 8002ccc:	2800      	cmp	r0, #0
  MRC_INACTIVE;
 8002cce:	831a      	strh	r2, [r3, #24]
  for (i=0; i<address; i++){
 8002cd0:	dd0a      	ble.n	8002ce8 <read_single_byte.constprop.0+0x28>
  CNT_ACTIVE;
 8002cd2:	4909      	ldr	r1, [pc, #36]	; (8002cf8 <read_single_byte.constprop.0+0x38>)
  for (i=0; i<address; i++){
 8002cd4:	2300      	movs	r3, #0
  CNT_ACTIVE;
 8002cd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cda:	830a      	strh	r2, [r1, #24]
  __NOP();
 8002cdc:	bf00      	nop
  CNT_INACTIVE;
 8002cde:	834a      	strh	r2, [r1, #26]
  __NOP();
 8002ce0:	bf00      	nop
  for (i=0; i<address; i++){
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	4283      	cmp	r3, r0
 8002ce6:	d1f8      	bne.n	8002cda <read_single_byte.constprop.0+0x1a>
  uint8_t data = 0;
  setup_address(address);
  check_BUS();
 8002ce8:	f7ff ff9a 	bl	8002c20 <check_BUS>
  if (reset){
    TRESET_INACTIVE;
    BUS_in_use = 1;
  }
  return data;
}
 8002cec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  data = read_byte();
 8002cf0:	f7ff b926 	b.w	8001f40 <read_byte>
 8002cf4:	40020400 	.word	0x40020400
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	00000000 	.word	0x00000000

08002d00 <write_block.constprop.0>:
    TRESET_INACTIVE;
    BUS_in_use = 1;
  }
}

void write_block(int32_t address, int32_t len, uint8_t * data, uint8_t reset){
 8002d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d04:	4606      	mov	r6, r0
  int32_t l = len;
  select_chip(15);
 8002d06:	200f      	movs	r0, #15
void write_block(int32_t address, int32_t len, uint8_t * data, uint8_t reset){
 8002d08:	4617      	mov	r7, r2
 8002d0a:	4688      	mov	r8, r1
  select_chip(15);
 8002d0c:	f7fd fea0 	bl	8000a50 <select_chip>
  MRC_ACTIVE;  // Reset '590
 8002d10:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <write_block.constprop.0+0x6c>)
 8002d12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d16:	835a      	strh	r2, [r3, #26]
  __NOP();
 8002d18:	bf00      	nop
  for (i=0; i<address; i++){
 8002d1a:	2e00      	cmp	r6, #0
  MRC_INACTIVE;
 8002d1c:	831a      	strh	r2, [r3, #24]
  for (i=0; i<address; i++){
 8002d1e:	dd0a      	ble.n	8002d36 <write_block.constprop.0+0x36>
  CNT_ACTIVE;
 8002d20:	4d13      	ldr	r5, [pc, #76]	; (8002d70 <write_block.constprop.0+0x70>)
  for (i=0; i<address; i++){
 8002d22:	2300      	movs	r3, #0
  CNT_ACTIVE;
 8002d24:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002d28:	832c      	strh	r4, [r5, #24]
  __NOP();
 8002d2a:	bf00      	nop
  CNT_INACTIVE;
 8002d2c:	836c      	strh	r4, [r5, #26]
  __NOP();
 8002d2e:	bf00      	nop
  for (i=0; i<address; i++){
 8002d30:	3301      	adds	r3, #1
 8002d32:	42b3      	cmp	r3, r6
 8002d34:	d1f8      	bne.n	8002d28 <write_block.constprop.0+0x28>
  check_BUS();
  if (reset){
    TRESET_ACTIVE;
    BUS_in_use = 0;
  }
  write_byte(*data++);
 8002d36:	463c      	mov	r4, r7
  check_BUS();
 8002d38:	f7ff ff72 	bl	8002c20 <check_BUS>
  write_byte(*data++);
 8002d3c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002d40:	f7ff f996 	bl	8002070 <write_byte>
  l--;
  while(l--){
 8002d44:	f1b8 0f01 	cmp.w	r8, #1
 8002d48:	d00d      	beq.n	8002d66 <write_block.constprop.0+0x66>
  CNT_ACTIVE;
 8002d4a:	4e09      	ldr	r6, [pc, #36]	; (8002d70 <write_block.constprop.0+0x70>)
 8002d4c:	4447      	add	r7, r8
 8002d4e:	f44f 7580 	mov.w	r5, #256	; 0x100
 8002d52:	8335      	strh	r5, [r6, #24]
  __NOP();
 8002d54:	bf00      	nop
  CNT_INACTIVE;
 8002d56:	8375      	strh	r5, [r6, #26]
  __NOP();
 8002d58:	bf00      	nop
    increment_address();
    write_byte(*data++);
 8002d5a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002d5e:	f7ff f987 	bl	8002070 <write_byte>
  while(l--){
 8002d62:	42bc      	cmp	r4, r7
 8002d64:	d1f5      	bne.n	8002d52 <write_block.constprop.0+0x52>
  }
  if (reset){
    TRESET_INACTIVE;
    BUS_in_use = 1;
  }
}
 8002d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40020400 	.word	0x40020400
 8002d70:	40020000 	.word	0x40020000
	...

08002d80 <read_block.constprop.0>:
void read_block(int32_t address, int32_t len, uint8_t * data, uint8_t reset){
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MRC_ACTIVE;  // Reset '590
 8002d82:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <read_block.constprop.0+0x50>)
 8002d84:	f44f 4500 	mov.w	r5, #32768	; 0x8000
void read_block(int32_t address, int32_t len, uint8_t * data, uint8_t reset){
 8002d88:	460f      	mov	r7, r1
 8002d8a:	4614      	mov	r4, r2
  MRC_ACTIVE;  // Reset '590
 8002d8c:	835d      	strh	r5, [r3, #26]
  __NOP();
 8002d8e:	bf00      	nop
  for (i=0; i<address; i++){
 8002d90:	2800      	cmp	r0, #0
  MRC_INACTIVE;
 8002d92:	831d      	strh	r5, [r3, #24]
  for (i=0; i<address; i++){
 8002d94:	dd0a      	ble.n	8002dac <read_block.constprop.0+0x2c>
  CNT_ACTIVE;
 8002d96:	4d0f      	ldr	r5, [pc, #60]	; (8002dd4 <read_block.constprop.0+0x54>)
  for (i=0; i<address; i++){
 8002d98:	2300      	movs	r3, #0
  CNT_ACTIVE;
 8002d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d9e:	832a      	strh	r2, [r5, #24]
  __NOP();
 8002da0:	bf00      	nop
  CNT_INACTIVE;
 8002da2:	836a      	strh	r2, [r5, #26]
  __NOP();
 8002da4:	bf00      	nop
  for (i=0; i<address; i++){
 8002da6:	3301      	adds	r3, #1
 8002da8:	4283      	cmp	r3, r0
 8002daa:	d1f8      	bne.n	8002d9e <read_block.constprop.0+0x1e>
  check_BUS();
 8002dac:	f7ff ff38 	bl	8002c20 <check_BUS>
  while(l--){
 8002db0:	b16f      	cbz	r7, 8002dce <read_block.constprop.0+0x4e>
  CNT_ACTIVE;
 8002db2:	4e08      	ldr	r6, [pc, #32]	; (8002dd4 <read_block.constprop.0+0x54>)
 8002db4:	4427      	add	r7, r4
 8002db6:	f44f 7580 	mov.w	r5, #256	; 0x100
    *data++ = read_byte();
 8002dba:	f7ff f8c1 	bl	8001f40 <read_byte>
 8002dbe:	f804 0b01 	strb.w	r0, [r4], #1
  CNT_ACTIVE;
 8002dc2:	8335      	strh	r5, [r6, #24]
  __NOP();
 8002dc4:	bf00      	nop
  CNT_INACTIVE;
 8002dc6:	8375      	strh	r5, [r6, #26]
  __NOP();
 8002dc8:	bf00      	nop
  while(l--){
 8002dca:	42bc      	cmp	r4, r7
 8002dcc:	d1f5      	bne.n	8002dba <read_block.constprop.0+0x3a>
}
 8002dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dd0:	40020400 	.word	0x40020400
 8002dd4:	40020000 	.word	0x40020000
	...

08002de0 <CharacterInputThread>:
  }
}

//extern uint8_t buffer[256];
static THD_WORKING_AREA(waCharacterInputThread, 512);
static THD_FUNCTION(CharacterInputThread, arg) {
 8002de0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  uint8_t c;
  uint8_t tbuf[256];
  uint8_t serial[]={10,1,2,3,4,5,6,7,8};
 8002de4:	4b92      	ldr	r3, [pc, #584]	; (8003030 <CharacterInputThread+0x250>)
 8002de6:	4c93      	ldr	r4, [pc, #588]	; (8003034 <CharacterInputThread+0x254>)
  WE_ACTIVE;
 8002de8:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8003048 <CharacterInputThread+0x268>
 8002dec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
static THD_FUNCTION(CharacterInputThread, arg) {
 8002df0:	b0d3      	sub	sp, #332	; 0x14c
  uint8_t serial[]={10,1,2,3,4,5,6,7,8};
 8002df2:	ab0f      	add	r3, sp, #60	; 0x3c
 8002df4:	c303      	stmia	r3!, {r0, r1}
static THD_FUNCTION(CharacterInputThread, arg) {
 8002df6:	2500      	movs	r5, #0
 8002df8:	950a      	str	r5, [sp, #40]	; 0x28
  uint8_t serial[]={10,1,2,3,4,5,6,7,8};
 8002dfa:	701a      	strb	r2, [r3, #0]
#ifdef OSTRICHUSB
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
#else
    if (1){
#endif
      c=streamGet(&OSTRICHPORT);
 8002dfc:	46a3      	mov	fp, r4
 8002dfe:	46c1      	mov	r9, r8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002e00:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	f040 81c2 	bne.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 8002e0e:	6823      	ldr	r3, [r4, #0]
 8002e10:	4658      	mov	r0, fp
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	4798      	blx	r3
 8002e16:	2320      	movs	r3, #32
 8002e18:	b2c0      	uxtb	r0, r0
 8002e1a:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 8002e1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e22:	2200      	movs	r2, #0
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	f382 8811 	msr	BASEPRI, r2
      start = chVTGetSystemTime();

      if (start > end){
 8002e2a:	4599      	cmp	r9, r3
 8002e2c:	f0c0 80bf 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 8002e30:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8002e34:	3d01      	subs	r5, #1
 8002e36:	f109 0908 	add.w	r9, r9, #8
      //sdAsynchronousRead(&OSTRICHPORT, (uint8_t *)&c, 1);
      if (state == IDLE){
        debug_print_state("------------ State0: ------------ ", state);
      }

      switch (state){
 8002e3a:	2d25      	cmp	r5, #37	; 0x25
 8002e3c:	f200 80bb 	bhi.w	8002fb6 <CharacterInputThread+0x1d6>
 8002e40:	e8df f015 	tbh	[pc, r5, lsl #1]
 8002e44:	0ab4030e 	.word	0x0ab4030e
 8002e48:	071b0614 	.word	0x071b0614
 8002e4c:	068906c4 	.word	0x068906c4
 8002e50:	0847003a 	.word	0x0847003a
 8002e54:	09cb07c9 	.word	0x09cb07c9
 8002e58:	038a007a 	.word	0x038a007a
 8002e5c:	027803c0 	.word	0x027803c0
 8002e60:	035902bd 	.word	0x035902bd
 8002e64:	058505ee 	.word	0x058505ee
 8002e68:	054705a8 	.word	0x054705a8
 8002e6c:	01980171 	.word	0x01980171
 8002e70:	050a04e6 	.word	0x050a04e6
 8002e74:	049c011f 	.word	0x049c011f
 8002e78:	098408e7 	.word	0x098408e7
 8002e7c:	046c092e 	.word	0x046c092e
 8002e80:	0a3108a5 	.word	0x0a3108a5
 8002e84:	07730a6f 	.word	0x07730a6f
 8002e88:	0a0801c8 	.word	0x0a0801c8
 8002e8c:	065d041b 	.word	0x065d041b
      c=streamGet(&OSTRICHPORT);
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	4658      	mov	r0, fp
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	4798      	blx	r3
 8002e98:	2320      	movs	r3, #32
 8002e9a:	b2c0      	uxtb	r0, r0
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8002eac:	454b      	cmp	r3, r9
 8002eae:	d87e      	bhi.n	8002fae <CharacterInputThread+0x1ce>
 8002eb0:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8002eb4:	f109 0908 	add.w	r9, r9, #8
          chprintf(dbg, "Checksum ERROR\r\n");
        }
        break;
        //---------------------------------------------------------
      case BANK_BE:
        cs += c;
 8002eb8:	4a5f      	ldr	r2, [pc, #380]	; (8003038 <CharacterInputThread+0x258>)
 8002eba:	7813      	ldrb	r3, [r2, #0]
        if ((c == 'E') || (c == 'R')){                   // B E E or B E R
 8002ebc:	2845      	cmp	r0, #69	; 0x45
        cs += c;
 8002ebe:	4403      	add	r3, r0
 8002ec0:	7013      	strb	r3, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002ec2:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
        if ((c == 'E') || (c == 'R')){                   // B E E or B E R
 8002ec6:	f000 87d4 	beq.w	8003e72 <CharacterInputThread+0x1092>
 8002eca:	2852      	cmp	r0, #82	; 0x52
 8002ecc:	f000 87d1 	beq.w	8003e72 <CharacterInputThread+0x1092>
          state = BANK_BEE;
          debug_print_state("State2: ", state);
        }
        else if (c == 'S'){                                       // B E S
 8002ed0:	2853      	cmp	r0, #83	; 0x53
 8002ed2:	f002 8319 	beq.w	8005508 <CharacterInputThread+0x2728>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002ed6:	681b      	ldr	r3, [r3, #0]
          debug_print_state("State2: ", state);
        }
        else{                             // B E + n
          state = BANK_BEn;
          debug_print_state("State2: ", state);
          temp = c;                     // Bank Number
 8002ed8:	4a58      	ldr	r2, [pc, #352]	; (800303c <CharacterInputThread+0x25c>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002eda:	781b      	ldrb	r3, [r3, #0]
          temp = c;                     // Bank Number
 8002edc:	7010      	strb	r0, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	f002 810e 	beq.w	8005100 <CharacterInputThread+0x2320>
        state = IDLE;
        break;
      }
    }
    else{
      chThdSleepMilliseconds(100);
 8002ee4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ee8:	f7ff f81a 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002eec:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	f002 8103 	beq.w	8005100 <CharacterInputThread+0x2320>
      chThdSleepMilliseconds(100);
 8002efa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002efe:	f7ff f80f 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002f02:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	f042 8609 	bne.w	8005b22 <CharacterInputThread+0x2d42>
      c=streamGet(&OSTRICHPORT);
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	4658      	mov	r0, fp
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	4798      	blx	r3
 8002f18:	2320      	movs	r3, #32
 8002f1a:	b2c0      	uxtb	r0, r0
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f24:	2200      	movs	r2, #0
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8002f2c:	4599      	cmp	r9, r3
 8002f2e:	d33e      	bcc.n	8002fae <CharacterInputThread+0x1ce>
 8002f30:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8002f34:	f109 0908 	add.w	r9, r9, #8
        if (c == cs){                   // B E + n + CS
 8002f38:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <CharacterInputThread+0x258>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	4283      	cmp	r3, r0
 8002f3e:	f041 831f 	bne.w	8004580 <CharacterInputThread+0x17a0>
          if (temp <= 8){
 8002f42:	4b3e      	ldr	r3, [pc, #248]	; (800303c <CharacterInputThread+0x25c>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	f201 8758 	bhi.w	8004dfc <CharacterInputThread+0x201c>
            bankemv = temp;
 8002f4c:	4a3c      	ldr	r2, [pc, #240]	; (8003040 <CharacterInputThread+0x260>)
            chprintf(ost, "O");
 8002f4e:	493d      	ldr	r1, [pc, #244]	; (8003044 <CharacterInputThread+0x264>)
            bankemv = temp;
 8002f50:	7013      	strb	r3, [r2, #0]
            chprintf(ost, "O");
 8002f52:	4658      	mov	r0, fp
 8002f54:	f7ff fc0c 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002f58:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	f002 83ce 	beq.w	8005702 <CharacterInputThread+0x2922>
      chThdSleepMilliseconds(100);
 8002f66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f6a:	f7fe ffd9 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002f6e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	f002 852b 	beq.w	80059d2 <CharacterInputThread+0x2bf2>
      chThdSleepMilliseconds(100);
 8002f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f80:	f7fe ffce 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002f84:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	f041 8245 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	4658      	mov	r0, fp
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	4798      	blx	r3
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	b2c0      	uxtb	r0, r0
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	f382 8811 	msr	BASEPRI, r2
 8002fae:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8002fb2:	f109 0908 	add.w	r9, r9, #8
 8002fb6:	2620      	movs	r6, #32
 8002fb8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
        cs = c;
 8002fbc:	4a1e      	ldr	r2, [pc, #120]	; (8003038 <CharacterInputThread+0x258>)
 8002fbe:	f1a0 0342 	sub.w	r3, r0, #66	; 0x42
 8002fc2:	7010      	strb	r0, [r2, #0]
        switch (c){
 8002fc4:	2b18      	cmp	r3, #24
 8002fc6:	d81a      	bhi.n	8002ffe <CharacterInputThread+0x21e>
 8002fc8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002fcc:	00e8016a 	.word	0x00e8016a
 8002fd0:	00190019 	.word	0x00190019
 8002fd4:	00190019 	.word	0x00190019
 8002fd8:	00190019 	.word	0x00190019
 8002fdc:	00190019 	.word	0x00190019
 8002fe0:	00190019 	.word	0x00190019
 8002fe4:	00190198 	.word	0x00190198
 8002fe8:	00190019 	.word	0x00190019
 8002fec:	02aa0091 	.word	0x02aa0091
 8002ff0:	00190019 	.word	0x00190019
 8002ff4:	0279022e 	.word	0x0279022e
 8002ff8:	00190019 	.word	0x00190019
 8002ffc:	0040      	.short	0x0040
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8002ffe:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b04      	cmp	r3, #4
      c=streamGet(&OSTRICHPORT);
 8003008:	4658      	mov	r0, fp
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800300a:	f041 8207 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	4798      	blx	r3
 8003014:	b2c0      	uxtb	r0, r0
 8003016:	f386 8811 	msr	BASEPRI, r6
 800301a:	2200      	movs	r2, #0
 800301c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800301e:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003022:	4599      	cmp	r9, r3
 8003024:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003028:	d3c1      	bcc.n	8002fae <CharacterInputThread+0x1ce>
 800302a:	f109 0908 	add.w	r9, r9, #8
      switch (state){
 800302e:	e7c5      	b.n	8002fbc <CharacterInputThread+0x1dc>
 8003030:	080094bc 	.word	0x080094bc
 8003034:	200013a8 	.word	0x200013a8
 8003038:	20001a82 	.word	0x20001a82
 800303c:	20001d78 	.word	0x20001d78
 8003040:	200018ca 	.word	0x200018ca
 8003044:	08009394 	.word	0x08009394
 8003048:	40020000 	.word	0x40020000
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800304c:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b04      	cmp	r3, #4
 8003056:	f041 81ed 	bne.w	8004434 <CharacterInputThread+0x1654>
      c=streamGet(&OSTRICHPORT);
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	4658      	mov	r0, fp
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	4798      	blx	r3
 8003062:	2320      	movs	r3, #32
 8003064:	b2c0      	uxtb	r0, r0
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800306e:	2200      	movs	r2, #0
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003076:	4599      	cmp	r9, r3
 8003078:	d399      	bcc.n	8002fae <CharacterInputThread+0x1ce>
 800307a:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 800307e:	f109 0908 	add.w	r9, r9, #8
            cs += c;
 8003082:	4a9c      	ldr	r2, [pc, #624]	; (80032f4 <CharacterInputThread+0x514>)
 8003084:	7813      	ldrb	r3, [r2, #0]
 8003086:	2852      	cmp	r0, #82	; 0x52
 8003088:	4403      	add	r3, r0
 800308a:	7013      	strb	r3, [r2, #0]
            switch (c){
 800308c:	f000 835a 	beq.w	8003744 <CharacterInputThread+0x964>
 8003090:	2857      	cmp	r0, #87	; 0x57
 8003092:	f000 8327 	beq.w	80036e4 <CharacterInputThread+0x904>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003096:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b04      	cmp	r3, #4
 80030a0:	f002 80f6 	beq.w	8005290 <CharacterInputThread+0x24b0>
      chThdSleepMilliseconds(100);
 80030a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030a8:	f7fe ff3a 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80030ac:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	f002 83be 	beq.w	8005836 <CharacterInputThread+0x2a56>
      chThdSleepMilliseconds(100);
 80030ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030be:	f7fe ff2f 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80030c2:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	f041 81a6 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	4658      	mov	r0, fp
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	4798      	blx	r3
 80030d8:	2320      	movs	r3, #32
 80030da:	b2c0      	uxtb	r0, r0
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030e4:	2200      	movs	r2, #0
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80030ec:	e75f      	b.n	8002fae <CharacterInputThread+0x1ce>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80030ee:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	f041 8199 	bne.w	800442e <CharacterInputThread+0x164e>
      c=streamGet(&OSTRICHPORT);
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	4658      	mov	r0, fp
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	4798      	blx	r3
 8003104:	2320      	movs	r3, #32
 8003106:	b2c0      	uxtb	r0, r0
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003110:	2200      	movs	r2, #0
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003118:	4599      	cmp	r9, r3
 800311a:	f4ff af48 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 800311e:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003122:	f109 0908 	add.w	r9, r9, #8
          cs += c;
 8003126:	4a73      	ldr	r2, [pc, #460]	; (80032f4 <CharacterInputThread+0x514>)
 8003128:	7813      	ldrb	r3, [r2, #0]
 800312a:	4403      	add	r3, r0
 800312c:	7013      	strb	r3, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800312e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
          if (c == 0){
 8003132:	2800      	cmp	r0, #0
 8003134:	f041 8212 	bne.w	800455c <CharacterInputThread+0x177c>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003138:	681b      	ldr	r3, [r3, #0]
            count = 256;
 800313a:	496f      	ldr	r1, [pc, #444]	; (80032f8 <CharacterInputThread+0x518>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800313c:	781b      	ldrb	r3, [r3, #0]
            count = 256;
 800313e:	f44f 7280 	mov.w	r2, #256	; 0x100
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003142:	2b04      	cmp	r3, #4
            count = 256;
 8003144:	800a      	strh	r2, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003146:	f041 8210 	bne.w	800456a <CharacterInputThread+0x178a>
      c=streamGet(&OSTRICHPORT);
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	4658      	mov	r0, fp
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	4798      	blx	r3
 8003152:	2320      	movs	r3, #32
 8003154:	b2c0      	uxtb	r0, r0
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800315e:	2200      	movs	r2, #0
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003166:	454b      	cmp	r3, r9
 8003168:	f63f af21 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 800316c:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003170:	f109 0908 	add.w	r9, r9, #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003174:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
          cs += c;
 8003178:	495e      	ldr	r1, [pc, #376]	; (80032f4 <CharacterInputThread+0x514>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800317a:	6812      	ldr	r2, [r2, #0]
          cs += c;
 800317c:	780b      	ldrb	r3, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800317e:	7812      	ldrb	r2, [r2, #0]
          cs += c;
 8003180:	4403      	add	r3, r0
 8003182:	700b      	strb	r3, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003184:	2a04      	cmp	r2, #4
          address *= 256;
 8003186:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800318a:	9308      	str	r3, [sp, #32]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800318c:	f000 832b 	beq.w	80037e6 <CharacterInputThread+0xa06>
          state = READ_nML;
 8003190:	2517      	movs	r5, #23
      chThdSleepMilliseconds(100);
 8003192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003196:	f7fe fec3 	bl	8001f20 <chThdSleep>
 800319a:	e631      	b.n	8002e00 <CharacterInputThread+0x20>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800319c:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	f041 813f 	bne.w	8004428 <CharacterInputThread+0x1648>
      c=streamGet(&OSTRICHPORT);
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	4658      	mov	r0, fp
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	4798      	blx	r3
 80031b2:	2320      	movs	r3, #32
 80031b4:	b2c0      	uxtb	r0, r0
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031be:	2200      	movs	r2, #0
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80031c6:	4599      	cmp	r9, r3
 80031c8:	f4ff aef1 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 80031cc:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 80031d0:	f109 0908 	add.w	r9, r9, #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80031d4:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
        cs += c;
 80031d8:	4946      	ldr	r1, [pc, #280]	; (80032f4 <CharacterInputThread+0x514>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80031da:	6812      	ldr	r2, [r2, #0]
        cs += c;
 80031dc:	780b      	ldrb	r3, [r1, #0]
        count = (uint16_t)c;
 80031de:	4d46      	ldr	r5, [pc, #280]	; (80032f8 <CharacterInputThread+0x518>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80031e0:	7812      	ldrb	r2, [r2, #0]
        count = (uint16_t)c;
 80031e2:	8028      	strh	r0, [r5, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80031e4:	2a04      	cmp	r2, #4
        cs += c;
 80031e6:	4418      	add	r0, r3
 80031e8:	7008      	strb	r0, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80031ea:	f001 8158 	beq.w	800449e <CharacterInputThread+0x16be>
      chThdSleepMilliseconds(100);
 80031ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031f2:	f7fe fe95 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80031f6:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b04      	cmp	r3, #4
 8003200:	f001 814d 	beq.w	800449e <CharacterInputThread+0x16be>
      chThdSleepMilliseconds(100);
 8003204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003208:	f7fe fe8a 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800320c:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b04      	cmp	r3, #4
 8003216:	f042 82ba 	bne.w	800578e <CharacterInputThread+0x29ae>
      c=streamGet(&OSTRICHPORT);
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	4658      	mov	r0, fp
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	4798      	blx	r3
 8003222:	2320      	movs	r3, #32
 8003224:	b2c0      	uxtb	r0, r0
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800322e:	2200      	movs	r2, #0
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003236:	4599      	cmp	r9, r3
        cntdwn = 0;
 8003238:	920a      	str	r2, [sp, #40]	; 0x28
      if (start > end){
 800323a:	f4ff aeb8 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 800323e:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003242:	f109 0908 	add.w	r9, r9, #8
        cntdwn = 0;
 8003246:	4613      	mov	r3, r2
 8003248:	2620      	movs	r6, #32
 800324a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
        cs += c;
 800324e:	4a29      	ldr	r2, [pc, #164]	; (80032f4 <CharacterInputThread+0x514>)
        if (cntdwn == count){
 8003250:	4f29      	ldr	r7, [pc, #164]	; (80032f8 <CharacterInputThread+0x518>)
        cs += c;
 8003252:	7811      	ldrb	r1, [r2, #0]
        if (cntdwn == count){
 8003254:	883a      	ldrh	r2, [r7, #0]
        tbuf[cntdwn++] = c;
 8003256:	af12      	add	r7, sp, #72	; 0x48
 8003258:	54f8      	strb	r0, [r7, r3]
 800325a:	1c5f      	adds	r7, r3, #1
 800325c:	b2bf      	uxth	r7, r7
        cs += c;
 800325e:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <CharacterInputThread+0x514>)
 8003260:	4408      	add	r0, r1
        if (cntdwn == count){
 8003262:	42ba      	cmp	r2, r7
        cs += c;
 8003264:	7018      	strb	r0, [r3, #0]
        if (cntdwn == count){
 8003266:	f000 81eb 	beq.w	8003640 <CharacterInputThread+0x860>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800326a:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b04      	cmp	r3, #4
      c=streamGet(&OSTRICHPORT);
 8003274:	4658      	mov	r0, fp
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003276:	f041 8543 	bne.w	8004d00 <CharacterInputThread+0x1f20>
      c=streamGet(&OSTRICHPORT);
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	4798      	blx	r3
 8003280:	b2c0      	uxtb	r0, r0
 8003282:	f386 8811 	msr	BASEPRI, r6
 8003286:	2200      	movs	r2, #0
 8003288:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800328a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800328e:	4599      	cmp	r9, r3
 8003290:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003294:	f0c2 8065 	bcc.w	8005362 <CharacterInputThread+0x2582>
 8003298:	f109 0908 	add.w	r9, r9, #8
 800329c:	463b      	mov	r3, r7
 800329e:	e7d6      	b.n	800324e <CharacterInputThread+0x46e>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80032a0:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	f001 806a 	beq.w	8004382 <CharacterInputThread+0x15a2>
      chThdSleepMilliseconds(100);
 80032ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032b2:	f7fe fe35 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80032b6:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	f001 80c4 	beq.w	800444c <CharacterInputThread+0x166c>
      chThdSleepMilliseconds(100);
 80032c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032c8:	f7fe fe2a 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80032cc:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	f001 80b9 	beq.w	800444c <CharacterInputThread+0x166c>
      chThdSleepMilliseconds(100);
 80032da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032de:	f7fe fe1f 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80032e2:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	f001 80ae 	beq.w	800444c <CharacterInputThread+0x166c>
          state = BANK;
 80032f0:	2502      	movs	r5, #2
 80032f2:	e74e      	b.n	8003192 <CharacterInputThread+0x3b2>
 80032f4:	20001a82 	.word	0x20001a82
 80032f8:	20001a80 	.word	0x20001a80
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80032fc:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b04      	cmp	r3, #4
 8003306:	f041 808c 	bne.w	8004422 <CharacterInputThread+0x1642>
      c=streamGet(&OSTRICHPORT);
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	4658      	mov	r0, fp
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	4798      	blx	r3
 8003312:	2320      	movs	r3, #32
 8003314:	b2c0      	uxtb	r0, r0
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800331e:	2200      	movs	r2, #0
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003326:	4599      	cmp	r9, r3
 8003328:	f4ff ae41 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 800332c:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003330:	f109 0908 	add.w	r9, r9, #8
        cs += c;
 8003334:	4abe      	ldr	r2, [pc, #760]	; (8003630 <CharacterInputThread+0x850>)
 8003336:	7813      	ldrb	r3, [r2, #0]
        if (c == 'S'){                   // N S
 8003338:	2853      	cmp	r0, #83	; 0x53
        cs += c;
 800333a:	4403      	add	r3, r0
 800333c:	f04f 0620 	mov.w	r6, #32
 8003340:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8003344:	7013      	strb	r3, [r2, #0]
        if (c == 'S'){                   // N S
 8003346:	d01e      	beq.n	8003386 <CharacterInputThread+0x5a6>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003348:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b04      	cmp	r3, #4
      c=streamGet(&OSTRICHPORT);
 8003352:	4658      	mov	r0, fp
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003354:	f041 8065 	bne.w	8004422 <CharacterInputThread+0x1642>
      c=streamGet(&OSTRICHPORT);
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	4798      	blx	r3
 800335e:	b2c0      	uxtb	r0, r0
 8003360:	f386 8811 	msr	BASEPRI, r6
 8003364:	2200      	movs	r2, #0
 8003366:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003368:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800336c:	454b      	cmp	r3, r9
 800336e:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003372:	f63f ae1c 	bhi.w	8002fae <CharacterInputThread+0x1ce>
        cs += c;
 8003376:	4aae      	ldr	r2, [pc, #696]	; (8003630 <CharacterInputThread+0x850>)
 8003378:	7813      	ldrb	r3, [r2, #0]
        if (c == 'S'){                   // N S
 800337a:	2853      	cmp	r0, #83	; 0x53
        cs += c;
 800337c:	4403      	add	r3, r0
 800337e:	f109 0908 	add.w	r9, r9, #8
 8003382:	7013      	strb	r3, [r2, #0]
        if (c == 'S'){                   // N S
 8003384:	d1e0      	bne.n	8003348 <CharacterInputThread+0x568>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003386:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b04      	cmp	r3, #4
 8003390:	f041 87d1 	bne.w	8005336 <CharacterInputThread+0x2556>
      c=streamGet(&OSTRICHPORT);
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	4658      	mov	r0, fp
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	4798      	blx	r3
 800339c:	2320      	movs	r3, #32
 800339e:	b2c0      	uxtb	r0, r0
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033a8:	2200      	movs	r2, #0
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80033b0:	454b      	cmp	r3, r9
 80033b2:	f63f adfc 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 80033b6:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 80033ba:	f109 0908 	add.w	r9, r9, #8
        if (c == cs){                   // N S + CS
 80033be:	4b9c      	ldr	r3, [pc, #624]	; (8003630 <CharacterInputThread+0x850>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	4283      	cmp	r3, r0
 80033c4:	f001 84a0 	beq.w	8004d08 <CharacterInputThread+0x1f28>
          chprintf(dbg, "Checksum ERROR\r\n");
 80033c8:	499a      	ldr	r1, [pc, #616]	; (8003634 <CharacterInputThread+0x854>)
 80033ca:	489b      	ldr	r0, [pc, #620]	; (8003638 <CharacterInputThread+0x858>)
 80033cc:	f7ff f9d0 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80033d0:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	f001 8238 	beq.w	800484e <CharacterInputThread+0x1a6e>
      chThdSleepMilliseconds(100);
 80033de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033e2:	f7fe fd9d 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80033e6:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	f001 872c 	beq.w	800524c <CharacterInputThread+0x246c>
      chThdSleepMilliseconds(100);
 80033f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033f8:	f7fe fd92 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80033fc:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b04      	cmp	r3, #4
 8003406:	f041 8009 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	4658      	mov	r0, fp
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	4798      	blx	r3
 8003412:	2320      	movs	r3, #32
 8003414:	b2c0      	uxtb	r0, r0
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800341e:	2200      	movs	r2, #0
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003426:	e5c2      	b.n	8002fae <CharacterInputThread+0x1ce>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003428:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b04      	cmp	r3, #4
 8003432:	f041 8008 	bne.w	8004446 <CharacterInputThread+0x1666>
      c=streamGet(&OSTRICHPORT);
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	4658      	mov	r0, fp
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	4798      	blx	r3
 800343e:	2320      	movs	r3, #32
 8003440:	b2c0      	uxtb	r0, r0
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800344a:	2200      	movs	r2, #0
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003452:	4599      	cmp	r9, r3
 8003454:	f4ff adab 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 8003458:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 800345c:	f109 0908 	add.w	r9, r9, #8
        if (c == 'V'){
 8003460:	2856      	cmp	r0, #86	; 0x56
 8003462:	f001 8660 	beq.w	8005126 <CharacterInputThread+0x2346>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003466:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b04      	cmp	r3, #4
 8003470:	f001 81dd 	beq.w	800482e <CharacterInputThread+0x1a4e>
      chThdSleepMilliseconds(100);
 8003474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003478:	f7fe fd52 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800347c:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b04      	cmp	r3, #4
 8003486:	f001 8681 	beq.w	800518c <CharacterInputThread+0x23ac>
      chThdSleepMilliseconds(100);
 800348a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800348e:	f7fe fd47 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003492:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b04      	cmp	r3, #4
 800349c:	f040 87be 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	4658      	mov	r0, fp
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	4798      	blx	r3
 80034a8:	2320      	movs	r3, #32
 80034aa:	b2c0      	uxtb	r0, r0
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034b4:	2200      	movs	r2, #0
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80034bc:	e577      	b.n	8002fae <CharacterInputThread+0x1ce>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80034be:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	f040 87ba 	bne.w	8004440 <CharacterInputThread+0x1660>
      c=streamGet(&OSTRICHPORT);
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	4658      	mov	r0, fp
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	4798      	blx	r3
 80034d4:	2320      	movs	r3, #32
 80034d6:	b2c0      	uxtb	r0, r0
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034e0:	2200      	movs	r2, #0
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80034e8:	4599      	cmp	r9, r3
 80034ea:	f4ff ad60 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 80034ee:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 80034f2:	f109 0908 	add.w	r9, r9, #8
          cs += c;
 80034f6:	4a4e      	ldr	r2, [pc, #312]	; (8003630 <CharacterInputThread+0x850>)
 80034f8:	7813      	ldrb	r3, [r2, #0]
 80034fa:	4403      	add	r3, r0
 80034fc:	7013      	strb	r3, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80034fe:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
          if (c == 0){
 8003502:	2800      	cmp	r0, #0
 8003504:	f040 87f0 	bne.w	80044e8 <CharacterInputThread+0x1708>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003508:	681b      	ldr	r3, [r3, #0]
            count = 256;
 800350a:	494c      	ldr	r1, [pc, #304]	; (800363c <CharacterInputThread+0x85c>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800350c:	781b      	ldrb	r3, [r3, #0]
            count = 256;
 800350e:	f44f 7280 	mov.w	r2, #256	; 0x100
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003512:	2b04      	cmp	r3, #4
            count = 256;
 8003514:	800a      	strh	r2, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003516:	f000 826d 	beq.w	80039f4 <CharacterInputThread+0xc14>
          cntdwn = 0;
 800351a:	900a      	str	r0, [sp, #40]	; 0x28
          state = WRITE_nM;
 800351c:	2511      	movs	r5, #17
 800351e:	e638      	b.n	8003192 <CharacterInputThread+0x3b2>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003520:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b04      	cmp	r3, #4
 800352a:	f040 8786 	bne.w	800443a <CharacterInputThread+0x165a>
      c=streamGet(&OSTRICHPORT);
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	4658      	mov	r0, fp
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	4798      	blx	r3
 8003536:	2320      	movs	r3, #32
 8003538:	b2c0      	uxtb	r0, r0
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003542:	2200      	movs	r2, #0
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800354a:	4599      	cmp	r9, r3
 800354c:	f4ff ad2f 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 8003550:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003554:	f109 0908 	add.w	r9, r9, #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003558:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
        cs += c;
 800355c:	4934      	ldr	r1, [pc, #208]	; (8003630 <CharacterInputThread+0x850>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800355e:	6812      	ldr	r2, [r2, #0]
        cs += c;
 8003560:	780b      	ldrb	r3, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003562:	7812      	ldrb	r2, [r2, #0]
        cs += c;
 8003564:	4418      	add	r0, r3
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003566:	2a04      	cmp	r2, #4
        cs += c;
 8003568:	7008      	strb	r0, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800356a:	f000 8785 	beq.w	8004478 <CharacterInputThread+0x1698>
      chThdSleepMilliseconds(100);
 800356e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003572:	f7fe fcd5 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003576:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b04      	cmp	r3, #4
 8003580:	f000 877a 	beq.w	8004478 <CharacterInputThread+0x1698>
      chThdSleepMilliseconds(100);
 8003584:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003588:	f7fe fcca 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800358c:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b04      	cmp	r3, #4
 8003596:	f042 80f7 	bne.w	8005788 <CharacterInputThread+0x29a8>
      c=streamGet(&OSTRICHPORT);
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	4658      	mov	r0, fp
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	4798      	blx	r3
 80035a2:	2320      	movs	r3, #32
 80035a4:	b2c0      	uxtb	r0, r0
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035ae:	2200      	movs	r2, #0
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80035b6:	4599      	cmp	r9, r3
 80035b8:	f4ff acf9 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 80035bc:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 80035c0:	f109 0908 	add.w	r9, r9, #8
        if (cs == c){
 80035c4:	4b1a      	ldr	r3, [pc, #104]	; (8003630 <CharacterInputThread+0x850>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	4283      	cmp	r3, r0
 80035ca:	f001 8368 	beq.w	8004c9e <CharacterInputThread+0x1ebe>
          chprintf(dbg, "Checksum ERROR\r\n");
 80035ce:	4919      	ldr	r1, [pc, #100]	; (8003634 <CharacterInputThread+0x854>)
 80035d0:	4819      	ldr	r0, [pc, #100]	; (8003638 <CharacterInputThread+0x858>)
 80035d2:	f7ff f8cd 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80035d6:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b04      	cmp	r3, #4
 80035e0:	f001 834d 	beq.w	8004c7e <CharacterInputThread+0x1e9e>
      chThdSleepMilliseconds(100);
 80035e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035e8:	f7fe fc9a 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80035ec:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	f001 866b 	beq.w	80052d0 <CharacterInputThread+0x24f0>
      chThdSleepMilliseconds(100);
 80035fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035fe:	f7fe fc8f 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003602:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b04      	cmp	r3, #4
 800360c:	f040 8706 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	4658      	mov	r0, fp
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	4798      	blx	r3
 8003618:	2320      	movs	r3, #32
 800361a:	b2c0      	uxtb	r0, r0
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003624:	2200      	movs	r2, #0
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800362c:	e4bf      	b.n	8002fae <CharacterInputThread+0x1ce>
 800362e:	bf00      	nop
 8003630:	20001a82 	.word	0x20001a82
 8003634:	08009398 	.word	0x08009398
 8003638:	20000ef0 	.word	0x20000ef0
 800363c:	20001a80 	.word	0x20001a80
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003640:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003644:	970a      	str	r7, [sp, #40]	; 0x28
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b04      	cmp	r3, #4
 800364c:	f041 861d 	bne.w	800528a <CharacterInputThread+0x24aa>
      c=streamGet(&OSTRICHPORT);
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	4658      	mov	r0, fp
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	4798      	blx	r3
 8003658:	2320      	movs	r3, #32
 800365a:	b2c0      	uxtb	r0, r0
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003664:	2200      	movs	r2, #0
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800366c:	454b      	cmp	r3, r9
 800366e:	f63f ac9e 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8003672:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003676:	f109 0908 	add.w	r9, r9, #8
        if (c == cs){
 800367a:	4ba6      	ldr	r3, [pc, #664]	; (8003914 <CharacterInputThread+0xb34>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	4283      	cmp	r3, r0
 8003680:	f001 8157 	beq.w	8004932 <CharacterInputThread+0x1b52>
          chprintf(dbg, "Checksum ERROR\r\n");
 8003684:	49a4      	ldr	r1, [pc, #656]	; (8003918 <CharacterInputThread+0xb38>)
 8003686:	48a5      	ldr	r0, [pc, #660]	; (800391c <CharacterInputThread+0xb3c>)
 8003688:	f7ff f872 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800368c:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b04      	cmp	r3, #4
 8003696:	f001 813c 	beq.w	8004912 <CharacterInputThread+0x1b32>
      chThdSleepMilliseconds(100);
 800369a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800369e:	f7fe fc3f 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80036a2:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	f001 8633 	beq.w	8005316 <CharacterInputThread+0x2536>
      chThdSleepMilliseconds(100);
 80036b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036b4:	f7fe fc34 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80036b8:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	f040 86ab 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	4658      	mov	r0, fp
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	4798      	blx	r3
 80036ce:	2320      	movs	r3, #32
 80036d0:	b2c0      	uxtb	r0, r0
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036da:	2200      	movs	r2, #0
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80036e2:	e464      	b.n	8002fae <CharacterInputThread+0x1ce>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80036e4:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	f041 86f5 	bne.w	80054dc <CharacterInputThread+0x26fc>
      c=streamGet(&OSTRICHPORT);
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	4658      	mov	r0, fp
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	4798      	blx	r3
 80036fa:	2320      	movs	r3, #32
 80036fc:	b2c0      	uxtb	r0, r0
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003706:	2200      	movs	r2, #0
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800370e:	454b      	cmp	r3, r9
 8003710:	f63f ac4d 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8003714:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003718:	f109 0908 	add.w	r9, r9, #8
            cs += c;
 800371c:	4a7d      	ldr	r2, [pc, #500]	; (8003914 <CharacterInputThread+0xb34>)
 800371e:	7813      	ldrb	r3, [r2, #0]
 8003720:	4403      	add	r3, r0
 8003722:	7013      	strb	r3, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003724:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
            if (c == 0){
 8003728:	2800      	cmp	r0, #0
 800372a:	f040 86e9 	bne.w	8004500 <CharacterInputThread+0x1720>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800372e:	681b      	ldr	r3, [r3, #0]
              count = 256;
 8003730:	497b      	ldr	r1, [pc, #492]	; (8003920 <CharacterInputThread+0xb40>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003732:	781b      	ldrb	r3, [r3, #0]
              count = 256;
 8003734:	f44f 7280 	mov.w	r2, #256	; 0x100
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003738:	2b04      	cmp	r3, #4
              count = 256;
 800373a:	800a      	strh	r2, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800373c:	f000 8412 	beq.w	8003f64 <CharacterInputThread+0x1184>
            state = BULK_ZWnB;
 8003740:	251f      	movs	r5, #31
 8003742:	e526      	b.n	8003192 <CharacterInputThread+0x3b2>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003744:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b04      	cmp	r3, #4
 800374e:	f041 86c8 	bne.w	80054e2 <CharacterInputThread+0x2702>
      c=streamGet(&OSTRICHPORT);
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	4658      	mov	r0, fp
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	4798      	blx	r3
 800375a:	2320      	movs	r3, #32
 800375c:	b2c0      	uxtb	r0, r0
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003766:	2200      	movs	r2, #0
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800376e:	454b      	cmp	r3, r9
 8003770:	f63f ac1d 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8003774:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003778:	f109 0908 	add.w	r9, r9, #8
            cs += c;
 800377c:	4a65      	ldr	r2, [pc, #404]	; (8003914 <CharacterInputThread+0xb34>)
 800377e:	7813      	ldrb	r3, [r2, #0]
 8003780:	4403      	add	r3, r0
 8003782:	7013      	strb	r3, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003784:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
            if (c == 0){
 8003788:	2800      	cmp	r0, #0
 800378a:	f040 8426 	bne.w	8003fda <CharacterInputThread+0x11fa>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800378e:	681b      	ldr	r3, [r3, #0]
              count = 256;
 8003790:	4963      	ldr	r1, [pc, #396]	; (8003920 <CharacterInputThread+0xb40>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003792:	781b      	ldrb	r3, [r3, #0]
              count = 256;
 8003794:	f44f 7280 	mov.w	r2, #256	; 0x100
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003798:	2b04      	cmp	r3, #4
              count = 256;
 800379a:	800a      	strh	r2, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800379c:	f000 8424 	beq.w	8003fe8 <CharacterInputThread+0x1208>
      chThdSleepMilliseconds(100);
 80037a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037a4:	f7fe fbbc 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80037a8:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	f000 8419 	beq.w	8003fe8 <CharacterInputThread+0x1208>
      chThdSleepMilliseconds(100);
 80037b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037ba:	f7fe fbb1 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80037be:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	f001 8500 	beq.w	80051cc <CharacterInputThread+0x23ec>
      chThdSleepMilliseconds(100);
 80037cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037d0:	f7fe fba6 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80037d4:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b04      	cmp	r3, #4
 80037de:	f001 84f5 	beq.w	80051cc <CharacterInputThread+0x23ec>
            state = BULK_ZRnB;
 80037e2:	251b      	movs	r5, #27
 80037e4:	e4d5      	b.n	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	4658      	mov	r0, fp
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	4798      	blx	r3
 80037ee:	2320      	movs	r3, #32
 80037f0:	b2c0      	uxtb	r0, r0
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037fa:	2200      	movs	r2, #0
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003802:	454b      	cmp	r3, r9
 8003804:	f63f abd3 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8003808:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 800380c:	f109 0908 	add.w	r9, r9, #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003810:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
          cs += c;
 8003814:	493f      	ldr	r1, [pc, #252]	; (8003914 <CharacterInputThread+0xb34>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003816:	6812      	ldr	r2, [r2, #0]
          cs += c;
 8003818:	780b      	ldrb	r3, [r1, #0]
          address += c;
 800381a:	9d08      	ldr	r5, [sp, #32]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800381c:	7812      	ldrb	r2, [r2, #0]
          cs += c;
 800381e:	4403      	add	r3, r0
          address += c;
 8003820:	4405      	add	r5, r0
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003822:	2a04      	cmp	r2, #4
          address += c;
 8003824:	9508      	str	r5, [sp, #32]
          cs += c;
 8003826:	700b      	strb	r3, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003828:	d001      	beq.n	800382e <CharacterInputThread+0xa4e>
          state = READ_nMLCs;
 800382a:	2518      	movs	r5, #24
 800382c:	e4b1      	b.n	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	4658      	mov	r0, fp
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	4798      	blx	r3
 8003836:	2320      	movs	r3, #32
 8003838:	b2c0      	uxtb	r0, r0
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003842:	2200      	movs	r2, #0
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800384a:	454b      	cmp	r3, r9
 800384c:	f63f abaf 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8003850:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003854:	f109 0908 	add.w	r9, r9, #8
          if (c == cs){
 8003858:	4b2e      	ldr	r3, [pc, #184]	; (8003914 <CharacterInputThread+0xb34>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	4283      	cmp	r3, r0
 800385e:	f001 8583 	beq.w	8005368 <CharacterInputThread+0x2588>
            chprintf(dbg, "Checksum ERROR\r\n");
 8003862:	492d      	ldr	r1, [pc, #180]	; (8003918 <CharacterInputThread+0xb38>)
 8003864:	482d      	ldr	r0, [pc, #180]	; (800391c <CharacterInputThread+0xb3c>)
 8003866:	f7fe ff83 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800386a:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b04      	cmp	r3, #4
 8003874:	f040 85d2 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	4658      	mov	r0, fp
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	4798      	blx	r3
 8003880:	2320      	movs	r3, #32
 8003882:	b2c0      	uxtb	r0, r0
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800388c:	2200      	movs	r2, #0
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003894:	f7ff bb8b 	b.w	8002fae <CharacterInputThread+0x1ce>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003898:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800389c:	970a      	str	r7, [sp, #40]	; 0x28
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	f041 8534 	bne.w	8005310 <CharacterInputThread+0x2530>
      c=streamGet(&OSTRICHPORT);
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	4658      	mov	r0, fp
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	4798      	blx	r3
 80038b0:	2320      	movs	r3, #32
 80038b2:	b2c0      	uxtb	r0, r0
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038bc:	2200      	movs	r2, #0
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80038c4:	454b      	cmp	r3, r9
 80038c6:	f63f ab72 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 80038ca:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 80038ce:	f109 0908 	add.w	r9, r9, #8
          if (c == cs){
 80038d2:	4b10      	ldr	r3, [pc, #64]	; (8003914 <CharacterInputThread+0xb34>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	4283      	cmp	r3, r0
 80038d8:	f001 80fa 	beq.w	8004ad0 <CharacterInputThread+0x1cf0>
            chprintf(dbg, "Checksum ERROR\r\n");
 80038dc:	490e      	ldr	r1, [pc, #56]	; (8003918 <CharacterInputThread+0xb38>)
 80038de:	480f      	ldr	r0, [pc, #60]	; (800391c <CharacterInputThread+0xb3c>)
 80038e0:	f7fe ff46 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80038e4:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	f040 8595 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	4658      	mov	r0, fp
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	4798      	blx	r3
 80038fa:	2320      	movs	r3, #32
 80038fc:	b2c0      	uxtb	r0, r0
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003906:	2200      	movs	r2, #0
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800390e:	f7ff bb4e 	b.w	8002fae <CharacterInputThread+0x1ce>
 8003912:	bf00      	nop
 8003914:	20001a82 	.word	0x20001a82
 8003918:	08009398 	.word	0x08009398
 800391c:	20000ef0 	.word	0x20000ef0
 8003920:	20001a80 	.word	0x20001a80
      c=streamGet(&OSTRICHPORT);
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	4658      	mov	r0, fp
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	4798      	blx	r3
 800392c:	2320      	movs	r3, #32
 800392e:	b2c0      	uxtb	r0, r0
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003938:	2200      	movs	r2, #0
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003940:	454b      	cmp	r3, r9
 8003942:	f63f ab34 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8003946:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 800394a:	f109 0908 	add.w	r9, r9, #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800394e:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
          cs += c;
 8003952:	49ba      	ldr	r1, [pc, #744]	; (8003c3c <CharacterInputThread+0xe5c>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003954:	6812      	ldr	r2, [r2, #0]
          cs += c;
 8003956:	780b      	ldrb	r3, [r1, #0]
          address += c;
 8003958:	9d08      	ldr	r5, [sp, #32]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800395a:	7812      	ldrb	r2, [r2, #0]
          cs += c;
 800395c:	4403      	add	r3, r0
          address += c;
 800395e:	4405      	add	r5, r0
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003960:	2a04      	cmp	r2, #4
          address += c;
 8003962:	9508      	str	r5, [sp, #32]
          cs += c;
 8003964:	700b      	strb	r3, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003966:	f040 8584 	bne.w	8004472 <CharacterInputThread+0x1692>
      c=streamGet(&OSTRICHPORT);
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	4658      	mov	r0, fp
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	4798      	blx	r3
 8003972:	2320      	movs	r3, #32
 8003974:	b2c0      	uxtb	r0, r0
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800397e:	2200      	movs	r2, #0
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003986:	454b      	cmp	r3, r9
 8003988:	f63f ab11 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 800398c:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003990:	f109 0908 	add.w	r9, r9, #8
        case WRITE_nMLB:  //19 Here are the Bytes coming
 8003994:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003996:	2620      	movs	r6, #32
 8003998:	463a      	mov	r2, r7
 800399a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
          cs += c;
 800399e:	4ba7      	ldr	r3, [pc, #668]	; (8003c3c <CharacterInputThread+0xe5c>)
 80039a0:	7819      	ldrb	r1, [r3, #0]
          if (cntdwn == count){
 80039a2:	4ba7      	ldr	r3, [pc, #668]	; (8003c40 <CharacterInputThread+0xe60>)
          tbuf[cntdwn++] = c;
 80039a4:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
          if (cntdwn == count){
 80039a8:	881b      	ldrh	r3, [r3, #0]
          tbuf[cntdwn++] = c;
 80039aa:	f80c 0002 	strb.w	r0, [ip, r2]
 80039ae:	3701      	adds	r7, #1
          cs += c;
 80039b0:	4aa2      	ldr	r2, [pc, #648]	; (8003c3c <CharacterInputThread+0xe5c>)
          tbuf[cntdwn++] = c;
 80039b2:	b2bf      	uxth	r7, r7
          cs += c;
 80039b4:	4408      	add	r0, r1
          if (cntdwn == count){
 80039b6:	42bb      	cmp	r3, r7
          cs += c;
 80039b8:	7010      	strb	r0, [r2, #0]
          if (cntdwn == count){
 80039ba:	f43f af6d 	beq.w	8003898 <CharacterInputThread+0xab8>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80039be:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b04      	cmp	r3, #4
      c=streamGet(&OSTRICHPORT);
 80039c8:	4658      	mov	r0, fp
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80039ca:	f040 8551 	bne.w	8004470 <CharacterInputThread+0x1690>
      c=streamGet(&OSTRICHPORT);
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	4798      	blx	r3
 80039d4:	b2c0      	uxtb	r0, r0
 80039d6:	f386 8811 	msr	BASEPRI, r6
 80039da:	2200      	movs	r2, #0
 80039dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039de:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80039e2:	454b      	cmp	r3, r9
 80039e4:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 80039e8:	f201 84b8 	bhi.w	800535c <CharacterInputThread+0x257c>
 80039ec:	f109 0908 	add.w	r9, r9, #8
 80039f0:	463a      	mov	r2, r7
 80039f2:	e7d4      	b.n	800399e <CharacterInputThread+0xbbe>
      c=streamGet(&OSTRICHPORT);
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	4658      	mov	r0, fp
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	4798      	blx	r3
 80039fc:	2320      	movs	r3, #32
 80039fe:	b2c0      	uxtb	r0, r0
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a08:	2200      	movs	r2, #0
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003a10:	454b      	cmp	r3, r9
          cntdwn = 0;
 8003a12:	920a      	str	r2, [sp, #40]	; 0x28
      if (start > end){
 8003a14:	f63f aacb 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8003a18:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003a1c:	f109 0908 	add.w	r9, r9, #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a20:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
          cs += c;
 8003a24:	4985      	ldr	r1, [pc, #532]	; (8003c3c <CharacterInputThread+0xe5c>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a26:	6812      	ldr	r2, [r2, #0]
          cs += c;
 8003a28:	780b      	ldrb	r3, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a2a:	7812      	ldrb	r2, [r2, #0]
          cs += c;
 8003a2c:	4403      	add	r3, r0
 8003a2e:	700b      	strb	r3, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a30:	2a04      	cmp	r2, #4
          address *= 256;
 8003a32:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8003a36:	9308      	str	r3, [sp, #32]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a38:	f43f af74 	beq.w	8003924 <CharacterInputThread+0xb44>
          state = WRITE_nML;
 8003a3c:	2512      	movs	r5, #18
 8003a3e:	f7ff bba8 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	4658      	mov	r0, fp
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	4798      	blx	r3
 8003a4a:	2320      	movs	r3, #32
 8003a4c:	b2c0      	uxtb	r0, r0
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a56:	2200      	movs	r2, #0
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003a5e:	454b      	cmp	r3, r9
 8003a60:	f63f aaa5 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8003a64:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003a68:	f109 0908 	add.w	r9, r9, #8
        cs += c;
 8003a6c:	4a73      	ldr	r2, [pc, #460]	; (8003c3c <CharacterInputThread+0xe5c>)
 8003a6e:	7813      	ldrb	r3, [r2, #0]
        if (c == 'R'){                   // B R R
 8003a70:	2852      	cmp	r0, #82	; 0x52
        cs += c;
 8003a72:	4403      	add	r3, r0
 8003a74:	7013      	strb	r3, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a76:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
        if (c == 'R'){                   // B R R
 8003a7a:	f000 8721 	beq.w	80048c0 <CharacterInputThread+0x1ae0>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a7e:	681b      	ldr	r3, [r3, #0]
          btemp = c;                     // Bank Number
 8003a80:	4a70      	ldr	r2, [pc, #448]	; (8003c44 <CharacterInputThread+0xe64>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a82:	781b      	ldrb	r3, [r3, #0]
          btemp = c;                     // Bank Number
 8003a84:	7010      	strb	r0, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	f000 8190 	beq.w	8003dac <CharacterInputThread+0xfcc>
      chThdSleepMilliseconds(100);
 8003a8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a90:	f7fe fa46 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003a94:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	f000 8185 	beq.w	8003dac <CharacterInputThread+0xfcc>
      chThdSleepMilliseconds(100);
 8003aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003aa6:	f7fe fa3b 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003aaa:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	f001 8645 	beq.w	8005742 <CharacterInputThread+0x2962>
      chThdSleepMilliseconds(100);
 8003ab8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003abc:	f7fe fa30 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003ac0:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	f001 863a 	beq.w	8005742 <CharacterInputThread+0x2962>
          state = BANK_BRn;
 8003ace:	2509      	movs	r5, #9
 8003ad0:	f7ff bb5f 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	4658      	mov	r0, fp
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	4798      	blx	r3
 8003adc:	2320      	movs	r3, #32
 8003ade:	b2c0      	uxtb	r0, r0
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ae8:	2200      	movs	r2, #0
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003af0:	4599      	cmp	r9, r3
 8003af2:	f4ff aa5c 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 8003af6:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003afa:	f109 0908 	add.w	r9, r9, #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003afe:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	f040 8488 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	4658      	mov	r0, fp
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	4798      	blx	r3
 8003b14:	2320      	movs	r3, #32
 8003b16:	b2c0      	uxtb	r0, r0
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b20:	2200      	movs	r2, #0
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003b28:	f7ff ba41 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	4658      	mov	r0, fp
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	4798      	blx	r3
 8003b34:	2320      	movs	r3, #32
 8003b36:	b2c0      	uxtb	r0, r0
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b40:	2200      	movs	r2, #0
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003b48:	454b      	cmp	r3, r9
 8003b4a:	f63f aa30 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8003b4e:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003b52:	f109 0908 	add.w	r9, r9, #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b56:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
        cs += c;
 8003b5a:	4938      	ldr	r1, [pc, #224]	; (8003c3c <CharacterInputThread+0xe5c>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b5c:	6812      	ldr	r2, [r2, #0]
        cs += c;
 8003b5e:	780b      	ldrb	r3, [r1, #0]
        temp = c;                     // Bank Number
 8003b60:	4d39      	ldr	r5, [pc, #228]	; (8003c48 <CharacterInputThread+0xe68>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b62:	7812      	ldrb	r2, [r2, #0]
        temp = c;                     // Bank Number
 8003b64:	7028      	strb	r0, [r5, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b66:	2a04      	cmp	r2, #4
        cs += c;
 8003b68:	4418      	add	r0, r3
 8003b6a:	7008      	strb	r0, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b6c:	f000 8320 	beq.w	80041b0 <CharacterInputThread+0x13d0>
      chThdSleepMilliseconds(100);
 8003b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b74:	f7fe f9d4 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b78:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	f000 8674 	beq.w	800486e <CharacterInputThread+0x1a8e>
      chThdSleepMilliseconds(100);
 8003b86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b8a:	f7fe f9c9 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003b8e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	f000 8669 	beq.w	800486e <CharacterInputThread+0x1a8e>
        state = BANK_BSn;
 8003b9c:	250a      	movs	r5, #10
 8003b9e:	f7ff baf8 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	4658      	mov	r0, fp
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	4798      	blx	r3
 8003baa:	2320      	movs	r3, #32
 8003bac:	b2c0      	uxtb	r0, r0
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003bbe:	454b      	cmp	r3, r9
 8003bc0:	f63f a9f5 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8003bc4:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003bc8:	f109 0908 	add.w	r9, r9, #8
        if (c == cs){                   // B E S + CS
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <CharacterInputThread+0xe5c>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	4283      	cmp	r3, r0
 8003bd2:	f040 8506 	bne.w	80045e2 <CharacterInputThread+0x1802>
          streamPut(ost, bankemp);
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <CharacterInputThread+0xe6c>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	7811      	ldrb	r1, [r2, #0]
 8003bde:	4658      	mov	r0, fp
 8003be0:	4798      	blx	r3
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003be2:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	f001 80e6 	beq.w	8004dbc <CharacterInputThread+0x1fdc>
      chThdSleepMilliseconds(100);
 8003bf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bf4:	f7fe f994 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003bf8:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	f001 85b1 	beq.w	8005768 <CharacterInputThread+0x2988>
      chThdSleepMilliseconds(100);
 8003c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c0a:	f7fe f989 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003c0e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	f040 8400 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	4658      	mov	r0, fp
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	4798      	blx	r3
 8003c24:	2320      	movs	r3, #32
 8003c26:	b2c0      	uxtb	r0, r0
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c30:	2200      	movs	r2, #0
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003c38:	f7ff b9b9 	b.w	8002fae <CharacterInputThread+0x1ce>
 8003c3c:	20001a82 	.word	0x20001a82
 8003c40:	20001a80 	.word	0x20001a80
 8003c44:	200018cc 	.word	0x200018cc
 8003c48:	20001d78 	.word	0x20001d78
 8003c4c:	200018c9 	.word	0x200018c9
      c=streamGet(&OSTRICHPORT);
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	4658      	mov	r0, fp
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	4798      	blx	r3
 8003c58:	2320      	movs	r3, #32
 8003c5a:	b2c0      	uxtb	r0, r0
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c64:	2200      	movs	r2, #0
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003c6c:	454b      	cmp	r3, r9
 8003c6e:	f63f a99e 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8003c72:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003c76:	f109 0908 	add.w	r9, r9, #8
        if (c == cs){                   // B R R + CS
 8003c7a:	4bb2      	ldr	r3, [pc, #712]	; (8003f44 <CharacterInputThread+0x1164>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	4283      	cmp	r3, r0
 8003c80:	f040 8573 	bne.w	800476a <CharacterInputThread+0x198a>
          streamPut(ost, bankrw);
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	4ab0      	ldr	r2, [pc, #704]	; (8003f48 <CharacterInputThread+0x1168>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	7811      	ldrb	r1, [r2, #0]
 8003c8c:	4658      	mov	r0, fp
 8003c8e:	4798      	blx	r3
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003c90:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	f001 807f 	beq.w	8004d9c <CharacterInputThread+0x1fbc>
      chThdSleepMilliseconds(100);
 8003c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ca2:	f7fe f93d 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003ca6:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	f001 8488 	beq.w	80055c4 <CharacterInputThread+0x27e4>
      chThdSleepMilliseconds(100);
 8003cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cb8:	f7fe f932 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003cbc:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	f001 863e 	beq.w	8005946 <CharacterInputThread+0x2b66>
      chThdSleepMilliseconds(100);
 8003cca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cce:	f7fe f927 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003cd2:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	f040 839e 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	4658      	mov	r0, fp
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	4798      	blx	r3
 8003ce8:	2320      	movs	r3, #32
 8003cea:	b2c0      	uxtb	r0, r0
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003cfc:	f7ff b957 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	4658      	mov	r0, fp
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	4798      	blx	r3
 8003d08:	2320      	movs	r3, #32
 8003d0a:	b2c0      	uxtb	r0, r0
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d14:	2200      	movs	r2, #0
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003d1c:	454b      	cmp	r3, r9
 8003d1e:	f63f a946 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8003d22:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003d26:	f109 0908 	add.w	r9, r9, #8
            if (c == cs){
 8003d2a:	4b86      	ldr	r3, [pc, #536]	; (8003f44 <CharacterInputThread+0x1164>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	4283      	cmp	r3, r0
 8003d30:	f000 874a 	beq.w	8004bc8 <CharacterInputThread+0x1de8>
              chprintf(dbg, "Checksum ERROR\r\n");
 8003d34:	4985      	ldr	r1, [pc, #532]	; (8003f4c <CharacterInputThread+0x116c>)
 8003d36:	4886      	ldr	r0, [pc, #536]	; (8003f50 <CharacterInputThread+0x1170>)
 8003d38:	f7fe fd1a 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d3c:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	f000 871f 	beq.w	8004b88 <CharacterInputThread+0x1da8>
      chThdSleepMilliseconds(100);
 8003d4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d4e:	f7fe f8e7 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d52:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	f001 82ee 	beq.w	800533c <CharacterInputThread+0x255c>
      chThdSleepMilliseconds(100);
 8003d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d64:	f7fe f8dc 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d68:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	f001 8531 	beq.w	80057d8 <CharacterInputThread+0x29f8>
      chThdSleepMilliseconds(100);
 8003d76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d7a:	f7fe f8d1 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003d7e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	f040 8348 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	4658      	mov	r0, fp
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	4798      	blx	r3
 8003d94:	2320      	movs	r3, #32
 8003d96:	b2c0      	uxtb	r0, r0
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003da0:	2200      	movs	r2, #0
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003da8:	f7ff b901 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	4658      	mov	r0, fp
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	4798      	blx	r3
 8003db4:	2320      	movs	r3, #32
 8003db6:	b2c0      	uxtb	r0, r0
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003dc8:	454b      	cmp	r3, r9
 8003dca:	f63f a8f0 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8003dce:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003dd2:	f109 0908 	add.w	r9, r9, #8
        if (c == cs){                   // B R + n + CS
 8003dd6:	4b5b      	ldr	r3, [pc, #364]	; (8003f44 <CharacterInputThread+0x1164>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	4283      	cmp	r3, r0
 8003ddc:	f040 8463 	bne.w	80046a6 <CharacterInputThread+0x18c6>
          if (btemp <= 8){
 8003de0:	4b5c      	ldr	r3, [pc, #368]	; (8003f54 <CharacterInputThread+0x1174>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	f201 8079 	bhi.w	8004edc <CharacterInputThread+0x20fc>
            bankrw = btemp;
 8003dea:	4a57      	ldr	r2, [pc, #348]	; (8003f48 <CharacterInputThread+0x1168>)
            chprintf(ost, "O");
 8003dec:	495a      	ldr	r1, [pc, #360]	; (8003f58 <CharacterInputThread+0x1178>)
            bankrw = btemp;
 8003dee:	7013      	strb	r3, [r2, #0]
 8003df0:	4615      	mov	r5, r2
            chprintf(ost, "O");
 8003df2:	4658      	mov	r0, fp
 8003df4:	f7fe fcbc 	bl	8002770 <chprintf>
              chprintf(dbg, "Changed RW Bank to %i\r\n", bankrw);
 8003df8:	782a      	ldrb	r2, [r5, #0]
 8003dfa:	4958      	ldr	r1, [pc, #352]	; (8003f5c <CharacterInputThread+0x117c>)
 8003dfc:	4854      	ldr	r0, [pc, #336]	; (8003f50 <CharacterInputThread+0x1170>)
 8003dfe:	f7fe fcb7 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003e02:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	f001 8446 	beq.w	800569c <CharacterInputThread+0x28bc>
      chThdSleepMilliseconds(100);
 8003e10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e14:	f7fe f884 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003e18:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	f001 8570 	beq.w	8005906 <CharacterInputThread+0x2b26>
      chThdSleepMilliseconds(100);
 8003e26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e2a:	f7fe f879 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003e2e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	f001 8676 	beq.w	8005b28 <CharacterInputThread+0x2d48>
      chThdSleepMilliseconds(100);
 8003e3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e40:	f7fe f86e 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003e44:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	f040 82e5 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	4658      	mov	r0, fp
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	4798      	blx	r3
 8003e5a:	2320      	movs	r3, #32
 8003e5c:	b2c0      	uxtb	r0, r0
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e66:	2200      	movs	r2, #0
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003e6e:	f7ff b89e 	b.w	8002fae <CharacterInputThread+0x1ce>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	f000 84c6 	beq.w	8004808 <CharacterInputThread+0x1a28>
      chThdSleepMilliseconds(100);
 8003e7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e80:	f7fe f84e 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003e84:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	f000 84bb 	beq.w	8004808 <CharacterInputThread+0x1a28>
      chThdSleepMilliseconds(100);
 8003e92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e96:	f7fe f843 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003e9a:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	f041 852c 	bne.w	8005900 <CharacterInputThread+0x2b20>
      c=streamGet(&OSTRICHPORT);
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	4658      	mov	r0, fp
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	4798      	blx	r3
 8003eb0:	2320      	movs	r3, #32
 8003eb2:	b2c0      	uxtb	r0, r0
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003ec4:	4599      	cmp	r9, r3
 8003ec6:	f4ff a872 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 8003eca:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003ece:	f109 0908 	add.w	r9, r9, #8
        if (c == cs){                   // B E E + CS
 8003ed2:	4b1c      	ldr	r3, [pc, #112]	; (8003f44 <CharacterInputThread+0x1164>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	4283      	cmp	r3, r0
 8003ed8:	f040 83b4 	bne.w	8004644 <CharacterInputThread+0x1864>
          streamPut(ost, bankemv);
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	4a20      	ldr	r2, [pc, #128]	; (8003f60 <CharacterInputThread+0x1180>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	7811      	ldrb	r1, [r2, #0]
 8003ee4:	4658      	mov	r0, fp
 8003ee6:	4798      	blx	r3
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003ee8:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	f000 8773 	beq.w	8004ddc <CharacterInputThread+0x1ffc>
      chThdSleepMilliseconds(100);
 8003ef6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003efa:	f7fe f811 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003efe:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	f001 83b8 	beq.w	800567c <CharacterInputThread+0x289c>
      chThdSleepMilliseconds(100);
 8003f0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f10:	f7fe f806 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003f14:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	f040 827d 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	4658      	mov	r0, fp
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	4798      	blx	r3
 8003f2a:	2320      	movs	r3, #32
 8003f2c:	b2c0      	uxtb	r0, r0
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f36:	2200      	movs	r2, #0
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003f3e:	f7ff b836 	b.w	8002fae <CharacterInputThread+0x1ce>
 8003f42:	bf00      	nop
 8003f44:	20001a82 	.word	0x20001a82
 8003f48:	200018cb 	.word	0x200018cb
 8003f4c:	08009398 	.word	0x08009398
 8003f50:	20000ef0 	.word	0x20000ef0
 8003f54:	200018cc 	.word	0x200018cc
 8003f58:	08009394 	.word	0x08009394
 8003f5c:	08009450 	.word	0x08009450
 8003f60:	200018ca 	.word	0x200018ca
      c=streamGet(&OSTRICHPORT);
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	4658      	mov	r0, fp
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	4798      	blx	r3
 8003f6c:	2320      	movs	r3, #32
 8003f6e:	b2c0      	uxtb	r0, r0
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f78:	2200      	movs	r2, #0
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8003f80:	454b      	cmp	r3, r9
 8003f82:	f63f a814 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8003f86:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8003f8a:	f109 0908 	add.w	r9, r9, #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003f8e:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
            cs += c;
 8003f92:	49b2      	ldr	r1, [pc, #712]	; (800425c <CharacterInputThread+0x147c>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003f94:	6812      	ldr	r2, [r2, #0]
            cs += c;
 8003f96:	780b      	ldrb	r3, [r1, #0]
            bank = c;
 8003f98:	4db1      	ldr	r5, [pc, #708]	; (8004260 <CharacterInputThread+0x1480>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003f9a:	7812      	ldrb	r2, [r2, #0]
            bank = c;
 8003f9c:	7028      	strb	r0, [r5, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003f9e:	2a04      	cmp	r2, #4
            cs += c;
 8003fa0:	4418      	add	r0, r3
 8003fa2:	7008      	strb	r0, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003fa4:	f000 816a 	beq.w	800427c <CharacterInputThread+0x149c>
      chThdSleepMilliseconds(100);
 8003fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fac:	f7fd ffb8 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003fb0:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	f000 846f 	beq.w	800489c <CharacterInputThread+0x1abc>
      chThdSleepMilliseconds(100);
 8003fbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fc2:	f7fd ffad 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003fc6:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	f000 8464 	beq.w	800489c <CharacterInputThread+0x1abc>
            state = BULK_ZWnBM;
 8003fd4:	2520      	movs	r5, #32
 8003fd6:	f7ff b8dc 	b.w	8003192 <CharacterInputThread+0x3b2>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003fda:	681b      	ldr	r3, [r3, #0]
              count = (uint16_t)c;
 8003fdc:	4aa1      	ldr	r2, [pc, #644]	; (8004264 <CharacterInputThread+0x1484>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003fde:	781b      	ldrb	r3, [r3, #0]
              count = (uint16_t)c;
 8003fe0:	8010      	strh	r0, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	f47f abdc 	bne.w	80037a0 <CharacterInputThread+0x9c0>
      c=streamGet(&OSTRICHPORT);
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	4658      	mov	r0, fp
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	4798      	blx	r3
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	b2c0      	uxtb	r0, r0
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004004:	454b      	cmp	r3, r9
 8004006:	f63e afd2 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 800400a:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 800400e:	f109 0908 	add.w	r9, r9, #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004012:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
            cs += c;
 8004016:	4991      	ldr	r1, [pc, #580]	; (800425c <CharacterInputThread+0x147c>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004018:	6812      	ldr	r2, [r2, #0]
            cs += c;
 800401a:	780b      	ldrb	r3, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800401c:	7812      	ldrb	r2, [r2, #0]
            bank = c;
 800401e:	4d90      	ldr	r5, [pc, #576]	; (8004260 <CharacterInputThread+0x1480>)
            cs += c;
 8004020:	4403      	add	r3, r0
 8004022:	700b      	strb	r3, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004024:	2a04      	cmp	r2, #4
            address = (int32_t)c * 65536;
 8004026:	ea4f 4300 	mov.w	r3, r0, lsl #16
            bank = c;
 800402a:	7028      	strb	r0, [r5, #0]
            address = (int32_t)c * 65536;
 800402c:	9308      	str	r3, [sp, #32]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800402e:	d078      	beq.n	8004122 <CharacterInputThread+0x1342>
      chThdSleepMilliseconds(100);
 8004030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004034:	f7fd ff74 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004038:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b04      	cmp	r3, #4
 8004042:	d06e      	beq.n	8004122 <CharacterInputThread+0x1342>
      chThdSleepMilliseconds(100);
 8004044:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004048:	f7fd ff6a 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800404c:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b04      	cmp	r3, #4
 8004056:	f001 80e6 	beq.w	8005226 <CharacterInputThread+0x2446>
      chThdSleepMilliseconds(100);
 800405a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800405e:	f7fd ff5f 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004062:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b04      	cmp	r3, #4
 800406c:	f001 80db 	beq.w	8005226 <CharacterInputThread+0x2446>
            state = BULK_ZRnBM;
 8004070:	251c      	movs	r5, #28
 8004072:	f7ff b88e 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	4658      	mov	r0, fp
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	4798      	blx	r3
 800407e:	2320      	movs	r3, #32
 8004080:	b2c0      	uxtb	r0, r0
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800408a:	2200      	movs	r2, #0
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004092:	454b      	cmp	r3, r9
 8004094:	f63e af8b 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8004098:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 800409c:	f109 0908 	add.w	r9, r9, #8
            if (c == cs){
 80040a0:	4b6e      	ldr	r3, [pc, #440]	; (800425c <CharacterInputThread+0x147c>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	4283      	cmp	r3, r0
 80040a6:	f001 81a5 	beq.w	80053f4 <CharacterInputThread+0x2614>
              chprintf(dbg, "Checksum ERROR\r\n");
 80040aa:	496f      	ldr	r1, [pc, #444]	; (8004268 <CharacterInputThread+0x1488>)
 80040ac:	486f      	ldr	r0, [pc, #444]	; (800426c <CharacterInputThread+0x148c>)
 80040ae:	f7fe fb5f 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80040b2:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	f000 8394 	beq.w	80047e8 <CharacterInputThread+0x1a08>
      chThdSleepMilliseconds(100);
 80040c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040c4:	f7fd ff2c 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80040c8:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	f001 806b 	beq.w	80051ac <CharacterInputThread+0x23cc>
      chThdSleepMilliseconds(100);
 80040d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040da:	f7fd ff21 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80040de:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	f001 8356 	beq.w	8005798 <CharacterInputThread+0x29b8>
      chThdSleepMilliseconds(100);
 80040ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040f0:	f7fd ff16 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80040f4:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	f040 818d 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	4658      	mov	r0, fp
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	4798      	blx	r3
 800410a:	2320      	movs	r3, #32
 800410c:	b2c0      	uxtb	r0, r0
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004116:	2200      	movs	r2, #0
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800411e:	f7fe bf46 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	4658      	mov	r0, fp
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	4798      	blx	r3
 800412a:	2320      	movs	r3, #32
 800412c:	b2c0      	uxtb	r0, r0
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004136:	2200      	movs	r2, #0
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800413e:	454b      	cmp	r3, r9
 8004140:	f63e af35 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8004144:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8004148:	f109 0908 	add.w	r9, r9, #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800414c:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
            cs += c;
 8004150:	4942      	ldr	r1, [pc, #264]	; (800425c <CharacterInputThread+0x147c>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004152:	6812      	ldr	r2, [r2, #0]
            cs += c;
 8004154:	780b      	ldrb	r3, [r1, #0]
            address += (int32_t)c * 256;
 8004156:	9d08      	ldr	r5, [sp, #32]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004158:	7812      	ldrb	r2, [r2, #0]
            cs += c;
 800415a:	4403      	add	r3, r0
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800415c:	2a04      	cmp	r2, #4
            address += (int32_t)c * 256;
 800415e:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 8004162:	9008      	str	r0, [sp, #32]
            cs += c;
 8004164:	700b      	strb	r3, [r1, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004166:	d086      	beq.n	8004076 <CharacterInputThread+0x1296>
      chThdSleepMilliseconds(100);
 8004168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800416c:	f7fd fed8 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004170:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b04      	cmp	r3, #4
 800417a:	f43f af7c 	beq.w	8004076 <CharacterInputThread+0x1296>
      chThdSleepMilliseconds(100);
 800417e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004182:	f7fd fecd 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004186:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b04      	cmp	r3, #4
 8004190:	f001 8036 	beq.w	8005200 <CharacterInputThread+0x2420>
      chThdSleepMilliseconds(100);
 8004194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004198:	f7fd fec2 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800419c:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	f001 802b 	beq.w	8005200 <CharacterInputThread+0x2420>
            state = BULK_ZRnBMCs;
 80041aa:	251d      	movs	r5, #29
 80041ac:	f7fe bff1 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	4658      	mov	r0, fp
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	4798      	blx	r3
 80041b8:	2320      	movs	r3, #32
 80041ba:	b2c0      	uxtb	r0, r0
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041c4:	2200      	movs	r2, #0
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80041cc:	454b      	cmp	r3, r9
 80041ce:	f63e aeee 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 80041d2:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 80041d6:	f109 0908 	add.w	r9, r9, #8
        if (c == cs){                   // B S + n + CS
 80041da:	4b20      	ldr	r3, [pc, #128]	; (800425c <CharacterInputThread+0x147c>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	4283      	cmp	r3, r0
 80041e0:	f040 8292 	bne.w	8004708 <CharacterInputThread+0x1928>
          if (temp <= 8){
 80041e4:	4b22      	ldr	r3, [pc, #136]	; (8004270 <CharacterInputThread+0x1490>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	f200 8638 	bhi.w	8004e5e <CharacterInputThread+0x207e>
            bankemp = temp;
 80041ee:	4a21      	ldr	r2, [pc, #132]	; (8004274 <CharacterInputThread+0x1494>)
            chprintf(ost, "O");
 80041f0:	4921      	ldr	r1, [pc, #132]	; (8004278 <CharacterInputThread+0x1498>)
            bankemp = temp;
 80041f2:	7013      	strb	r3, [r2, #0]
            chprintf(ost, "O");
 80041f4:	4658      	mov	r0, fp
 80041f6:	f7fe fabb 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80041fa:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b04      	cmp	r3, #4
 8004204:	f001 828d 	beq.w	8005722 <CharacterInputThread+0x2942>
      chThdSleepMilliseconds(100);
 8004208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800420c:	f7fd fe88 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004210:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b04      	cmp	r3, #4
 800421a:	f001 8384 	beq.w	8005926 <CharacterInputThread+0x2b46>
      chThdSleepMilliseconds(100);
 800421e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004222:	f7fd fe7d 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004226:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b04      	cmp	r3, #4
 8004230:	f040 80f4 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	4658      	mov	r0, fp
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	4798      	blx	r3
 800423c:	2320      	movs	r3, #32
 800423e:	b2c0      	uxtb	r0, r0
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004248:	2200      	movs	r2, #0
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004250:	f7fe bead 	b.w	8002fae <CharacterInputThread+0x1ce>
 8004254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004256:	f7fe bff7 	b.w	8003248 <CharacterInputThread+0x468>
 800425a:	bf00      	nop
 800425c:	20001a82 	.word	0x20001a82
 8004260:	200018c8 	.word	0x200018c8
 8004264:	20001a80 	.word	0x20001a80
 8004268:	08009398 	.word	0x08009398
 800426c:	20000ef0 	.word	0x20000ef0
 8004270:	20001d78 	.word	0x20001d78
 8004274:	200018c9 	.word	0x200018c9
 8004278:	08009394 	.word	0x08009394
      c=streamGet(&OSTRICHPORT);
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	4658      	mov	r0, fp
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	4798      	blx	r3
 8004284:	2320      	movs	r3, #32
 8004286:	b2c0      	uxtb	r0, r0
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004290:	2200      	movs	r2, #0
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004298:	454b      	cmp	r3, r9
 800429a:	f63e ae88 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 800429e:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 80042a2:	f109 0908 	add.w	r9, r9, #8
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80042a6:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
            cs += c;
 80042aa:	4db1      	ldr	r5, [pc, #708]	; (8004570 <CharacterInputThread+0x1790>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80042ac:	6819      	ldr	r1, [r3, #0]
            address += 0x10000*bank;
 80042ae:	4bb1      	ldr	r3, [pc, #708]	; (8004574 <CharacterInputThread+0x1794>)
            cs += c;
 80042b0:	782a      	ldrb	r2, [r5, #0]
            address += 0x10000*bank;
 80042b2:	781b      	ldrb	r3, [r3, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80042b4:	7809      	ldrb	r1, [r1, #0]
            address += 0x10000*bank;
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	eb03 2300 	add.w	r3, r3, r0, lsl #8
            cs += c;
 80042bc:	4402      	add	r2, r0
            address += 0x10000*bank;
 80042be:	9308      	str	r3, [sp, #32]
            zoff = 0;
 80042c0:	4bad      	ldr	r3, [pc, #692]	; (8004578 <CharacterInputThread+0x1798>)
            cs += c;
 80042c2:	702a      	strb	r2, [r5, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80042c4:	2904      	cmp	r1, #4
            zoff = 0;
 80042c6:	f04f 0500 	mov.w	r5, #0
 80042ca:	801d      	strh	r5, [r3, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80042cc:	f000 80fb 	beq.w	80044c6 <CharacterInputThread+0x16e6>
      chThdSleepMilliseconds(100);
 80042d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042d4:	f7fd fe24 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80042d8:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d00a      	beq.n	80042fa <CharacterInputThread+0x151a>
      chThdSleepMilliseconds(100);
 80042e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042e8:	f7fd fe1a 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80042ec:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	f040 8274 	bne.w	80047e2 <CharacterInputThread+0x1a02>
      c=streamGet(&OSTRICHPORT);
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	4658      	mov	r0, fp
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	4798      	blx	r3
 8004302:	2320      	movs	r3, #32
 8004304:	b2c0      	uxtb	r0, r0
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	f385 8811 	msr	BASEPRI, r5
      if (start > end){
 8004314:	4599      	cmp	r9, r3
 8004316:	f4fe ae4a 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 800431a:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 800431e:	f109 0908 	add.w	r9, r9, #8
 8004322:	2620      	movs	r6, #32
 8004324:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
            tbuf[zoff++] = c;
 8004328:	4f93      	ldr	r7, [pc, #588]	; (8004578 <CharacterInputThread+0x1798>)
            cs += c;
 800432a:	4a91      	ldr	r2, [pc, #580]	; (8004570 <CharacterInputThread+0x1790>)
            tbuf[zoff++] = c;
 800432c:	883b      	ldrh	r3, [r7, #0]
            cs += c;
 800432e:	7811      	ldrb	r1, [r2, #0]
            if (zoff == count){
 8004330:	4a92      	ldr	r2, [pc, #584]	; (800457c <CharacterInputThread+0x179c>)
            tbuf[zoff++] = c;
 8004332:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
            if (zoff == count){
 8004336:	8812      	ldrh	r2, [r2, #0]
            tbuf[zoff++] = c;
 8004338:	f80c 0003 	strb.w	r0, [ip, r3]
 800433c:	3301      	adds	r3, #1
 800433e:	b29b      	uxth	r3, r3
            cs += c;
 8004340:	4408      	add	r0, r1
 8004342:	498b      	ldr	r1, [pc, #556]	; (8004570 <CharacterInputThread+0x1790>)
            tbuf[zoff++] = c;
 8004344:	803b      	strh	r3, [r7, #0]
            if (zoff == count){
 8004346:	429a      	cmp	r2, r3
            cs += c;
 8004348:	7008      	strb	r0, [r1, #0]
            if (zoff == count){
 800434a:	f000 83f2 	beq.w	8004b32 <CharacterInputThread+0x1d52>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800434e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b04      	cmp	r3, #4
      c=streamGet(&OSTRICHPORT);
 8004358:	4658      	mov	r0, fp
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800435a:	f040 8242 	bne.w	80047e2 <CharacterInputThread+0x1a02>
      c=streamGet(&OSTRICHPORT);
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	4798      	blx	r3
 8004364:	b2c0      	uxtb	r0, r0
 8004366:	f386 8811 	msr	BASEPRI, r6
 800436a:	2200      	movs	r2, #0
 800436c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800436e:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004372:	454b      	cmp	r3, r9
 8004374:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 8004378:	f63e ae19 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 800437c:	f109 0908 	add.w	r9, r9, #8
      switch (state){
 8004380:	e7d2      	b.n	8004328 <CharacterInputThread+0x1548>
      c=streamGet(&OSTRICHPORT);
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	4658      	mov	r0, fp
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	4798      	blx	r3
 800438a:	2320      	movs	r3, #32
 800438c:	b2c0      	uxtb	r0, r0
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004396:	2200      	movs	r2, #0
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800439e:	454b      	cmp	r3, r9
 80043a0:	f63e ae05 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 80043a4:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
 80043a8:	f109 0908 	add.w	r9, r9, #8
        cs += c;
 80043ac:	4a70      	ldr	r2, [pc, #448]	; (8004570 <CharacterInputThread+0x1790>)
 80043ae:	7813      	ldrb	r3, [r2, #0]
 80043b0:	2852      	cmp	r0, #82	; 0x52
 80043b2:	4403      	add	r3, r0
 80043b4:	7013      	strb	r3, [r2, #0]
        switch (c){
 80043b6:	f000 8638 	beq.w	800502a <CharacterInputThread+0x224a>
 80043ba:	2853      	cmp	r0, #83	; 0x53
 80043bc:	f000 860a 	beq.w	8004fd4 <CharacterInputThread+0x21f4>
 80043c0:	2845      	cmp	r0, #69	; 0x45
 80043c2:	f000 85dc 	beq.w	8004f7e <CharacterInputThread+0x219e>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80043c6:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	f001 8184 	beq.w	80056dc <CharacterInputThread+0x28fc>
      chThdSleepMilliseconds(100);
 80043d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043d8:	f7fd fda2 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80043dc:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	f001 8278 	beq.w	80058da <CharacterInputThread+0x2afa>
      chThdSleepMilliseconds(100);
 80043ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043ee:	f7fd fd97 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80043f2:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	f43f ab6a 	beq.w	8003ad4 <CharacterInputThread+0xcf4>
      chThdSleepMilliseconds(100);
 8004400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004404:	f7fd fd8c 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004408:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b04      	cmp	r3, #4
 8004412:	f43f ab5f 	beq.w	8003ad4 <CharacterInputThread+0xcf4>
          state = UNHANDLED;
 8004416:	2526      	movs	r5, #38	; 0x26
 8004418:	f7fe bebb 	b.w	8003192 <CharacterInputThread+0x3b2>
        state = IDLE;
 800441c:	2500      	movs	r5, #0
 800441e:	f7fe beb8 	b.w	8003192 <CharacterInputThread+0x3b2>
          state = SERIAL;
 8004422:	250e      	movs	r5, #14
 8004424:	f7fe beb5 	b.w	8003192 <CharacterInputThread+0x3b2>
          state = CONFIG_C;
 8004428:	2523      	movs	r5, #35	; 0x23
 800442a:	f7fe beb2 	b.w	8003192 <CharacterInputThread+0x3b2>
          state = READ;
 800442e:	2515      	movs	r5, #21
 8004430:	f7fe beaf 	b.w	8003192 <CharacterInputThread+0x3b2>
          state = BULK;
 8004434:	2519      	movs	r5, #25
 8004436:	f7fe beac 	b.w	8003192 <CharacterInputThread+0x3b2>
          state = BAUD;
 800443a:	250c      	movs	r5, #12
 800443c:	f7fe bea9 	b.w	8003192 <CharacterInputThread+0x3b2>
          state = WRITE;
 8004440:	2510      	movs	r5, #16
 8004442:	f7fe bea6 	b.w	8003192 <CharacterInputThread+0x3b2>
          state = VERSION;
 8004446:	2501      	movs	r5, #1
 8004448:	f7fe bea3 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	4658      	mov	r0, fp
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	4798      	blx	r3
 8004454:	2320      	movs	r3, #32
 8004456:	b2c0      	uxtb	r0, r0
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004460:	2200      	movs	r2, #0
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004468:	4599      	cmp	r9, r3
 800446a:	f4fe ada0 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 800446e:	e799      	b.n	80043a4 <CharacterInputThread+0x15c4>
 8004470:	970a      	str	r7, [sp, #40]	; 0x28
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004472:	2513      	movs	r5, #19
 8004474:	f7fe be8d 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	4658      	mov	r0, fp
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	4798      	blx	r3
 8004480:	2320      	movs	r3, #32
 8004482:	b2c0      	uxtb	r0, r0
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800448c:	2200      	movs	r2, #0
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004494:	454b      	cmp	r3, r9
 8004496:	f63e ad8a 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 800449a:	f7ff b88f 	b.w	80035bc <CharacterInputThread+0x7dc>
      c=streamGet(&OSTRICHPORT);
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	4658      	mov	r0, fp
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	4798      	blx	r3
 80044a6:	2320      	movs	r3, #32
 80044a8:	b2c0      	uxtb	r0, r0
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044b2:	2200      	movs	r2, #0
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80044ba:	454b      	cmp	r3, r9
        cntdwn = 0;
 80044bc:	920a      	str	r2, [sp, #40]	; 0x28
      if (start > end){
 80044be:	f63e ad76 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 80044c2:	f7fe bebc 	b.w	800323e <CharacterInputThread+0x45e>
      c=streamGet(&OSTRICHPORT);
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	4658      	mov	r0, fp
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	4798      	blx	r3
 80044ce:	2320      	movs	r3, #32
 80044d0:	b2c0      	uxtb	r0, r0
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	f385 8811 	msr	BASEPRI, r5
      if (start > end){
 80044e0:	454b      	cmp	r3, r9
 80044e2:	f63e ad64 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 80044e6:	e718      	b.n	800431a <CharacterInputThread+0x153a>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80044e8:	681b      	ldr	r3, [r3, #0]
            count = (uint16_t)c;
 80044ea:	4a24      	ldr	r2, [pc, #144]	; (800457c <CharacterInputThread+0x179c>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80044ec:	781b      	ldrb	r3, [r3, #0]
            count = (uint16_t)c;
 80044ee:	8010      	strh	r0, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	f43f aa7f 	beq.w	80039f4 <CharacterInputThread+0xc14>
          cntdwn = 0;
 80044f6:	2300      	movs	r3, #0
          state = WRITE_nM;
 80044f8:	2511      	movs	r5, #17
          cntdwn = 0;
 80044fa:	930a      	str	r3, [sp, #40]	; 0x28
 80044fc:	f7fe be49 	b.w	8003192 <CharacterInputThread+0x3b2>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004500:	681b      	ldr	r3, [r3, #0]
              count = (uint16_t)c;
 8004502:	4a1e      	ldr	r2, [pc, #120]	; (800457c <CharacterInputThread+0x179c>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004504:	781b      	ldrb	r3, [r3, #0]
              count = (uint16_t)c;
 8004506:	8010      	strh	r0, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004508:	2b04      	cmp	r3, #4
 800450a:	f43f ad2b 	beq.w	8003f64 <CharacterInputThread+0x1184>
      chThdSleepMilliseconds(100);
 800450e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004512:	f7fd fd05 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004516:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b04      	cmp	r3, #4
 8004520:	d00a      	beq.n	8004538 <CharacterInputThread+0x1758>
      chThdSleepMilliseconds(100);
 8004522:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004526:	f7fd fcfb 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800452a:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b04      	cmp	r3, #4
 8004534:	f47f a904 	bne.w	8003740 <CharacterInputThread+0x960>
      c=streamGet(&OSTRICHPORT);
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	4658      	mov	r0, fp
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	4798      	blx	r3
 8004540:	2320      	movs	r3, #32
 8004542:	b2c0      	uxtb	r0, r0
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800454c:	2200      	movs	r2, #0
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004554:	4599      	cmp	r9, r3
 8004556:	f4fe ad2a 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 800455a:	e514      	b.n	8003f86 <CharacterInputThread+0x11a6>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800455c:	681b      	ldr	r3, [r3, #0]
            count = (uint16_t)c;
 800455e:	4a07      	ldr	r2, [pc, #28]	; (800457c <CharacterInputThread+0x179c>)
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004560:	781b      	ldrb	r3, [r3, #0]
            count = (uint16_t)c;
 8004562:	8010      	strh	r0, [r2, #0]
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004564:	2b04      	cmp	r3, #4
 8004566:	f43e adf0 	beq.w	800314a <CharacterInputThread+0x36a>
          state = READ_nM;
 800456a:	2516      	movs	r5, #22
 800456c:	f7fe be11 	b.w	8003192 <CharacterInputThread+0x3b2>
 8004570:	20001a82 	.word	0x20001a82
 8004574:	200018c8 	.word	0x200018c8
 8004578:	20002048 	.word	0x20002048
 800457c:	20001a80 	.word	0x20001a80
          chprintf(dbg, "Checksum ERROR\r\n");
 8004580:	49c4      	ldr	r1, [pc, #784]	; (8004894 <CharacterInputThread+0x1ab4>)
 8004582:	48c5      	ldr	r0, [pc, #788]	; (8004898 <CharacterInputThread+0x1ab8>)
 8004584:	f7fe f8f4 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004588:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b04      	cmp	r3, #4
 8004592:	f000 8575 	beq.w	8005080 <CharacterInputThread+0x22a0>
      chThdSleepMilliseconds(100);
 8004596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800459a:	f7fd fcc1 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800459e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	f001 803c 	beq.w	8005624 <CharacterInputThread+0x2844>
      chThdSleepMilliseconds(100);
 80045ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045b0:	f7fd fcb6 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80045b4:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b04      	cmp	r3, #4
 80045be:	f47f af2d 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	4658      	mov	r0, fp
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	4798      	blx	r3
 80045ca:	2320      	movs	r3, #32
 80045cc:	b2c0      	uxtb	r0, r0
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045d6:	2200      	movs	r2, #0
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80045de:	f7fe bce6 	b.w	8002fae <CharacterInputThread+0x1ce>
          chprintf(dbg, "Checksum ERROR\r\n");
 80045e2:	49ac      	ldr	r1, [pc, #688]	; (8004894 <CharacterInputThread+0x1ab4>)
 80045e4:	48ac      	ldr	r0, [pc, #688]	; (8004898 <CharacterInputThread+0x1ab8>)
 80045e6:	f7fe f8c3 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80045ea:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	f000 8554 	beq.w	80050a0 <CharacterInputThread+0x22c0>
      chThdSleepMilliseconds(100);
 80045f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045fc:	f7fd fc90 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004600:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b04      	cmp	r3, #4
 800460a:	f001 8027 	beq.w	800565c <CharacterInputThread+0x287c>
      chThdSleepMilliseconds(100);
 800460e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004612:	f7fd fc85 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004616:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b04      	cmp	r3, #4
 8004620:	f47f aefc 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	4658      	mov	r0, fp
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	4798      	blx	r3
 800462c:	2320      	movs	r3, #32
 800462e:	b2c0      	uxtb	r0, r0
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004638:	2200      	movs	r2, #0
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004640:	f7fe bcb5 	b.w	8002fae <CharacterInputThread+0x1ce>
          chprintf(dbg, "Checksum ERROR\r\n");
 8004644:	4993      	ldr	r1, [pc, #588]	; (8004894 <CharacterInputThread+0x1ab4>)
 8004646:	4894      	ldr	r0, [pc, #592]	; (8004898 <CharacterInputThread+0x1ab8>)
 8004648:	f7fe f892 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800464c:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b04      	cmp	r3, #4
 8004656:	f000 8533 	beq.w	80050c0 <CharacterInputThread+0x22e0>
      chThdSleepMilliseconds(100);
 800465a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800465e:	f7fd fc5f 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004662:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b04      	cmp	r3, #4
 800466c:	f000 878a 	beq.w	8005584 <CharacterInputThread+0x27a4>
      chThdSleepMilliseconds(100);
 8004670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004674:	f7fd fc54 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004678:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b04      	cmp	r3, #4
 8004682:	f47f aecb 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	4658      	mov	r0, fp
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	4798      	blx	r3
 800468e:	2320      	movs	r3, #32
 8004690:	b2c0      	uxtb	r0, r0
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800469a:	2200      	movs	r2, #0
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80046a2:	f7fe bc84 	b.w	8002fae <CharacterInputThread+0x1ce>
          chprintf(dbg, "Checksum ERROR\r\n");
 80046a6:	497b      	ldr	r1, [pc, #492]	; (8004894 <CharacterInputThread+0x1ab4>)
 80046a8:	487b      	ldr	r0, [pc, #492]	; (8004898 <CharacterInputThread+0x1ab8>)
 80046aa:	f7fe f861 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80046ae:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	f000 8451 	beq.w	8004f5e <CharacterInputThread+0x217e>
      chThdSleepMilliseconds(100);
 80046bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046c0:	f7fd fc2e 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80046c4:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	f000 87f5 	beq.w	80056bc <CharacterInputThread+0x28dc>
      chThdSleepMilliseconds(100);
 80046d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046d6:	f7fd fc23 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80046da:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	f47f ae9a 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	4658      	mov	r0, fp
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	4798      	blx	r3
 80046f0:	2320      	movs	r3, #32
 80046f2:	b2c0      	uxtb	r0, r0
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046fc:	2200      	movs	r2, #0
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004704:	f7fe bc53 	b.w	8002fae <CharacterInputThread+0x1ce>
          chprintf(dbg, "Checksum ERROR\r\n");
 8004708:	4962      	ldr	r1, [pc, #392]	; (8004894 <CharacterInputThread+0x1ab4>)
 800470a:	4863      	ldr	r0, [pc, #396]	; (8004898 <CharacterInputThread+0x1ab8>)
 800470c:	f7fe f830 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004710:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b04      	cmp	r3, #4
 800471a:	f000 84e1 	beq.w	80050e0 <CharacterInputThread+0x2300>
      chThdSleepMilliseconds(100);
 800471e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004722:	f7fd fbfd 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004726:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b04      	cmp	r3, #4
 8004730:	f000 8738 	beq.w	80055a4 <CharacterInputThread+0x27c4>
      chThdSleepMilliseconds(100);
 8004734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004738:	f7fd fbf2 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800473c:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b04      	cmp	r3, #4
 8004746:	f47f ae69 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	4658      	mov	r0, fp
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	4798      	blx	r3
 8004752:	2320      	movs	r3, #32
 8004754:	b2c0      	uxtb	r0, r0
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800475e:	2200      	movs	r2, #0
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004766:	f7fe bc22 	b.w	8002fae <CharacterInputThread+0x1ce>
          chprintf(dbg, "Checksum ERROR\r\n");
 800476a:	494a      	ldr	r1, [pc, #296]	; (8004894 <CharacterInputThread+0x1ab4>)
 800476c:	484a      	ldr	r0, [pc, #296]	; (8004898 <CharacterInputThread+0x1ab8>)
 800476e:	f7fd ffff 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004772:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b04      	cmp	r3, #4
 800477c:	f000 83df 	beq.w	8004f3e <CharacterInputThread+0x215e>
      chThdSleepMilliseconds(100);
 8004780:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004784:	f7fd fbcc 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004788:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b04      	cmp	r3, #4
 8004792:	f000 8727 	beq.w	80055e4 <CharacterInputThread+0x2804>
      chThdSleepMilliseconds(100);
 8004796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800479a:	f7fd fbc1 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800479e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	f001 8123 	beq.w	80059f2 <CharacterInputThread+0x2c12>
      chThdSleepMilliseconds(100);
 80047ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047b0:	f7fd fbb6 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80047b4:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	f47f ae2d 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	4658      	mov	r0, fp
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	4798      	blx	r3
 80047ca:	2320      	movs	r3, #32
 80047cc:	b2c0      	uxtb	r0, r0
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047d6:	2200      	movs	r2, #0
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80047de:	f7fe bbe6 	b.w	8002fae <CharacterInputThread+0x1ce>
            state = BULK_ZWnBMB;
 80047e2:	2521      	movs	r5, #33	; 0x21
 80047e4:	f7fe bcd5 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	4658      	mov	r0, fp
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	4798      	blx	r3
 80047f0:	2320      	movs	r3, #32
 80047f2:	b2c0      	uxtb	r0, r0
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047fc:	2200      	movs	r2, #0
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004804:	f7fe bbd3 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	4658      	mov	r0, fp
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	4798      	blx	r3
 8004810:	2320      	movs	r3, #32
 8004812:	b2c0      	uxtb	r0, r0
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800481c:	2200      	movs	r2, #0
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004824:	454b      	cmp	r3, r9
 8004826:	f63e abc2 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 800482a:	f7ff bb4e 	b.w	8003eca <CharacterInputThread+0x10ea>
      c=streamGet(&OSTRICHPORT);
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	4658      	mov	r0, fp
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	4798      	blx	r3
 8004836:	2320      	movs	r3, #32
 8004838:	b2c0      	uxtb	r0, r0
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004842:	2200      	movs	r2, #0
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800484a:	f7fe bbb0 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	4658      	mov	r0, fp
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	4798      	blx	r3
 8004856:	2320      	movs	r3, #32
 8004858:	b2c0      	uxtb	r0, r0
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004862:	2200      	movs	r2, #0
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800486a:	f7fe bba0 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	4658      	mov	r0, fp
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	4798      	blx	r3
 8004876:	2320      	movs	r3, #32
 8004878:	b2c0      	uxtb	r0, r0
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004882:	2200      	movs	r2, #0
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800488a:	4599      	cmp	r9, r3
 800488c:	f4fe ab8f 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 8004890:	e49f      	b.n	80041d2 <CharacterInputThread+0x13f2>
 8004892:	bf00      	nop
 8004894:	08009398 	.word	0x08009398
 8004898:	20000ef0 	.word	0x20000ef0
      c=streamGet(&OSTRICHPORT);
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	4658      	mov	r0, fp
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	4798      	blx	r3
 80048a4:	2320      	movs	r3, #32
 80048a6:	b2c0      	uxtb	r0, r0
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048b0:	2200      	movs	r2, #0
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80048b8:	4599      	cmp	r9, r3
 80048ba:	f4fe ab78 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 80048be:	e4ee      	b.n	800429e <CharacterInputThread+0x14be>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	f43f a9c3 	beq.w	8003c50 <CharacterInputThread+0xe70>
      chThdSleepMilliseconds(100);
 80048ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048ce:	f7fd fb27 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80048d2:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b04      	cmp	r3, #4
 80048dc:	f43f a9b8 	beq.w	8003c50 <CharacterInputThread+0xe70>
      chThdSleepMilliseconds(100);
 80048e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048e4:	f7fd fb1c 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80048e8:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	f001 805b 	beq.w	80059ac <CharacterInputThread+0x2bcc>
      chThdSleepMilliseconds(100);
 80048f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048fa:	f7fd fb11 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80048fe:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b04      	cmp	r3, #4
 8004908:	f001 8050 	beq.w	80059ac <CharacterInputThread+0x2bcc>
          state = BANK_BRR;
 800490c:	2504      	movs	r5, #4
 800490e:	f7fe bc40 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	4658      	mov	r0, fp
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	4798      	blx	r3
 800491a:	2320      	movs	r3, #32
 800491c:	b2c0      	uxtb	r0, r0
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004926:	2200      	movs	r2, #0
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800492e:	f7fe bb3e 	b.w	8002fae <CharacterInputThread+0x1ce>
            chprintf(dbg, "Config (C): cnt: %03d, data: %02X, %02X, %02X, %02X\r\n", count, tbuf[0], tbuf[1], tbuf[2], tbuf[3]);
 8004932:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 8004936:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 800493a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004944:	4a98      	ldr	r2, [pc, #608]	; (8004ba8 <CharacterInputThread+0x1dc8>)
 8004946:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800494a:	8812      	ldrh	r2, [r2, #0]
 800494c:	4997      	ldr	r1, [pc, #604]	; (8004bac <CharacterInputThread+0x1dcc>)
 800494e:	4898      	ldr	r0, [pc, #608]	; (8004bb0 <CharacterInputThread+0x1dd0>)
 8004950:	f7fd ff0e 	bl	8002770 <chprintf>
  out->_8h  = 0;
  out->_8hm = *in++;
  out->_8lm = *in++;
  out->_8l  = *in++;
  out->cs   = *in++;
  out->mask = *in++;
 8004954:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8004958:	9006      	str	r0, [sp, #24]
  uint8_t chip, data = 0, no_update = 0;
  uint32_t address = 0;
  st_configdata_t cfdat, nextcf;
  fill_struct(buf, &cfdat);

  TRESET_ACTIVE;
 800495a:	4896      	ldr	r0, [pc, #600]	; (8004bb4 <CharacterInputThread+0x1dd4>)
  out->cs   = *in++;
 800495c:	f89d 704b 	ldrb.w	r7, [sp, #75]	; 0x4b
  uint8_t chip, data = 0, no_update = 0;
 8004960:	2300      	movs	r3, #0
  TRESET_ACTIVE;
 8004962:	f44f 6280 	mov.w	r2, #1024	; 0x400
  uint8_t chip, data = 0, no_update = 0;
 8004966:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  TRESET_ACTIVE;
 800496a:	8302      	strh	r2, [r0, #24]
  BUS_in_use = 0;
 800496c:	4a92      	ldr	r2, [pc, #584]	; (8004bb8 <CharacterInputThread+0x1dd8>)
  MRC_ACTIVE;  // Reset '590
 800496e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  BUS_in_use = 0;
 8004972:	7013      	strb	r3, [r2, #0]
  MRC_ACTIVE;  // Reset '590
 8004974:	8341      	strh	r1, [r0, #26]
  __NOP();
 8004976:	bf00      	nop
  CPR_ACTIVE;
 8004978:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  MRC_INACTIVE;
 800497c:	8301      	strh	r1, [r0, #24]
  CPR_ACTIVE;
 800497e:	8342      	strh	r2, [r0, #26]
  __NOP();
 8004980:	bf00      	nop
  setup_address(address);
  latch_address();
  CNTOE_ACTIVE;
 8004982:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  uint32_t address = 0;
 8004986:	9307      	str	r3, [sp, #28]
  uint8_t chip, data = 0, no_update = 0;
 8004988:	461d      	mov	r5, r3
  CNTOE_ACTIVE;
 800498a:	ab12      	add	r3, sp, #72	; 0x48
  CPR_INACTIVE;
 800498c:	8302      	strh	r2, [r0, #24]
  CNTOE_ACTIVE;
 800498e:	8341      	strh	r1, [r0, #26]
 8004990:	9309      	str	r3, [sp, #36]	; 0x24
 8004992:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8004996:	f04f 0900 	mov.w	r9, #0
  WE_ACTIVE;
 800499a:	2601      	movs	r6, #1
    chprintf(dbg, "first event reached @: %06X Poking: %02X into %02X\r\n", ADDRESS, MASK, CHIP);
  }
    do {
      do { // here we go through all addresses
        for (chip = 0; chip < 15; chip++){ // write 15 RAMs chips, each one byte
          select_chip(chip);
 800499c:	fa5f f889 	uxtb.w	r8, r9
 80049a0:	4640      	mov	r0, r8
 80049a2:	f7fc f855 	bl	8000a50 <select_chip>
          if (chip == CHIP){ // check if we have to change the value
 80049a6:	4547      	cmp	r7, r8
            }
          }
          else{
            if (data != 0xFF){
              data = 0xFF; //always assume NOT selected
              spiSend(SPI_DRIVER, 1, &data);
 80049a8:	f10d 0033 	add.w	r0, sp, #51	; 0x33
          if (chip == CHIP){ // check if we have to change the value
 80049ac:	d033      	beq.n	8004a16 <CharacterInputThread+0x1c36>
            if (data != 0xFF){
 80049ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80049b2:	2bff      	cmp	r3, #255	; 0xff
 80049b4:	d005      	beq.n	80049c2 <CharacterInputThread+0x1be2>
              data = 0xFF; //always assume NOT selected
 80049b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ba:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
              spiSend(SPI_DRIVER, 1, &data);
 80049be:	f7fd fb27 	bl	8002010 <spiSend.constprop.0>
            }
            if (no_update == 0){
 80049c2:	b925      	cbnz	r5, 80049ce <CharacterInputThread+0x1bee>
  WE_ACTIVE;
 80049c4:	f8aa 601a 	strh.w	r6, [sl, #26]
  __NOP();
 80049c8:	bf00      	nop
  WE_INACTIVE;
 80049ca:	f8aa 6018 	strh.w	r6, [sl, #24]
        for (chip = 0; chip < 15; chip++){ // write 15 RAMs chips, each one byte
 80049ce:	f109 0901 	add.w	r9, r9, #1
 80049d2:	f1b9 0f0f 	cmp.w	r9, #15
 80049d6:	d1e1      	bne.n	800499c <CharacterInputThread+0x1bbc>
//                chprintf(dbg, "4address: %06X chip: %02X data: %02X nupd: %d\r\n", address, chip, data, no_update);
//              }
            }
          }
        } //--------------------------- Write chips
        if ((address + 8) <= NEXTADDRESS){
 80049d8:	9a07      	ldr	r2, [sp, #28]
 80049da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049dc:	3208      	adds	r2, #8
 80049de:	429a      	cmp	r2, r3
 80049e0:	d924      	bls.n	8004a2c <CharacterInputThread+0x1c4c>
          latch_address();
          address += 8; // CPU address is mapping ram address / 8!
          no_update = 0;
        }
        else{// we have a small window of less than 8 addresses
          no_update = 1;
 80049e2:	2501      	movs	r5, #1
        }
//        if ((address >= 0xA000) && (DEBUGLEVEL >= 2) && (address <= 0xA010)){
//          chprintf(dbg, "3address: %06X chip: %02X data: %02X nupd: %d\r\n", address, CHIP, data, no_update);
//        }
      } while (address < NEXTADDRESS); // go until next event is reached
 80049e4:	9a07      	ldr	r2, [sp, #28]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d3d5      	bcc.n	8004996 <CharacterInputThread+0x1bb6>
  out->_8hm = *in++;
 80049ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
  out->_8h  = 0;
 80049ec:	2000      	movs	r0, #0
  out->_8lm = *in++;
 80049ee:	79ba      	ldrb	r2, [r7, #6]
  out->_8l  = *in++;
 80049f0:	79fb      	ldrb	r3, [r7, #7]
  out->_8hm = *in++;
 80049f2:	7979      	ldrb	r1, [r7, #5]
  out->_8lm = *in++;
 80049f4:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  out->_8l  = *in++;
 80049f8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  out->_8h  = 0;
 80049fc:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  out->cs   = *in++;
 8004a00:	463b      	mov	r3, r7
  out->_8hm = *in++;
 8004a02:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
      buf += 5;
      fill_struct(buf, &nextcf);
      if (DEBUGLEVEL >= 2){
        chprintf(dbg, "Next event reached @: %06X Poking: %02X into %02X\r\n", address, MASK, CHIP);
      }
    } while (NEXTADDRESS); // a zero at an address (other than position 0) means stop.
 8004a06:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  out->mask = *in++;
 8004a08:	791a      	ldrb	r2, [r3, #4]
  out->cs   = *in++;
 8004a0a:	78ff      	ldrb	r7, [r7, #3]
  out->mask = *in++;
 8004a0c:	9206      	str	r2, [sp, #24]
      buf += 5;
 8004a0e:	3305      	adds	r3, #5
    } while (NEXTADDRESS); // a zero at an address (other than position 0) means stop.
 8004a10:	b316      	cbz	r6, 8004a58 <CharacterInputThread+0x1c78>
      buf += 5;
 8004a12:	9309      	str	r3, [sp, #36]	; 0x24
 8004a14:	e7bf      	b.n	8004996 <CharacterInputThread+0x1bb6>
            data = MASK;
 8004a16:	9b06      	ldr	r3, [sp, #24]
 8004a18:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
            spiSend(SPI_DRIVER, 1, &data);
 8004a1c:	f7fd faf8 	bl	8002010 <spiSend.constprop.0>
  WE_ACTIVE;
 8004a20:	f8aa 601a 	strh.w	r6, [sl, #26]
  __NOP();
 8004a24:	bf00      	nop
  WE_INACTIVE;
 8004a26:	f8aa 6018 	strh.w	r6, [sl, #24]
 8004a2a:	e7d0      	b.n	80049ce <CharacterInputThread+0x1bee>
        if ((address + 8) <= NEXTADDRESS){
 8004a2c:	2508      	movs	r5, #8
  CNT_ACTIVE;
 8004a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a32:	f8aa 3018 	strh.w	r3, [sl, #24]
  __NOP();
 8004a36:	bf00      	nop
  CNT_INACTIVE;
 8004a38:	f8aa 301a 	strh.w	r3, [sl, #26]
  __NOP();
 8004a3c:	bf00      	nop
  for (i=0; i<8; i++){
 8004a3e:	3d01      	subs	r5, #1
 8004a40:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8004a44:	d1f5      	bne.n	8004a32 <CharacterInputThread+0x1c52>
  CPR_ACTIVE;
 8004a46:	495b      	ldr	r1, [pc, #364]	; (8004bb4 <CharacterInputThread+0x1dd4>)
 8004a48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a4c:	834b      	strh	r3, [r1, #26]
  __NOP();
 8004a4e:	bf00      	nop
  CPR_INACTIVE;
 8004a50:	830b      	strh	r3, [r1, #24]
          no_update = 0;
 8004a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  CPR_INACTIVE;
 8004a54:	9207      	str	r2, [sp, #28]
 8004a56:	e7c5      	b.n	80049e4 <CharacterInputThread+0x1c04>
  CNTOE_INACTIVE;
 8004a58:	4956      	ldr	r1, [pc, #344]	; (8004bb4 <CharacterInputThread+0x1dd4>)
 8004a5a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  TRESET_INACTIVE;
 8004a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
  CNTOE_INACTIVE;
 8004a66:	830b      	strh	r3, [r1, #24]
  TRESET_INACTIVE;
 8004a68:	834a      	strh	r2, [r1, #26]
  BUS_in_use = 1;
 8004a6a:	4a53      	ldr	r2, [pc, #332]	; (8004bb8 <CharacterInputThread+0x1dd8>)
          chprintf(ost, "O");
 8004a6c:	4953      	ldr	r1, [pc, #332]	; (8004bbc <CharacterInputThread+0x1ddc>)
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4658      	mov	r0, fp
 8004a72:	7013      	strb	r3, [r2, #0]
 8004a74:	f7fd fe7c 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004a78:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	f000 83f3 	beq.w	800526c <CharacterInputThread+0x248c>
      chThdSleepMilliseconds(100);
 8004a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a8a:	f7fd fa49 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004a8e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	f000 86be 	beq.w	8005818 <CharacterInputThread+0x2a38>
      chThdSleepMilliseconds(100);
 8004a9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004aa0:	f7fd fa3e 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004aa4:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	f47f acb5 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	4658      	mov	r0, fp
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	4798      	blx	r3
 8004aba:	2320      	movs	r3, #32
 8004abc:	b2c0      	uxtb	r0, r0
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	f386 8811 	msr	BASEPRI, r6
      if (start > end){
 8004acc:	f7fe ba6f 	b.w	8002fae <CharacterInputThread+0x1ce>
            address += 0x10000*bankrw;
 8004ad0:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <CharacterInputThread+0x1de0>)
              chprintf(dbg, "Bulk Write (ML): 0x%6X, cnt: %03d, data: 0x%02X\r\n", address, count, tbuf[0]);
 8004ad2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
            address += 0x10000*bankrw;
 8004ad6:	781b      	ldrb	r3, [r3, #0]
              chprintf(dbg, "Bulk Write (ML): 0x%6X, cnt: %03d, data: 0x%02X\r\n", address, count, tbuf[0]);
 8004ad8:	9200      	str	r2, [sp, #0]
            address += 0x10000*bankrw;
 8004ada:	9a08      	ldr	r2, [sp, #32]
              chprintf(dbg, "Bulk Write (ML): 0x%6X, cnt: %03d, data: 0x%02X\r\n", address, count, tbuf[0]);
 8004adc:	4d32      	ldr	r5, [pc, #200]	; (8004ba8 <CharacterInputThread+0x1dc8>)
 8004ade:	4939      	ldr	r1, [pc, #228]	; (8004bc4 <CharacterInputThread+0x1de4>)
 8004ae0:	4833      	ldr	r0, [pc, #204]	; (8004bb0 <CharacterInputThread+0x1dd0>)
            address += 0x10000*bankrw;
 8004ae2:	eb02 4303 	add.w	r3, r2, r3, lsl #16
              chprintf(dbg, "Bulk Write (ML): 0x%6X, cnt: %03d, data: 0x%02X\r\n", address, count, tbuf[0]);
 8004ae6:	461a      	mov	r2, r3
            address += 0x10000*bankrw;
 8004ae8:	461e      	mov	r6, r3
 8004aea:	9308      	str	r3, [sp, #32]
              chprintf(dbg, "Bulk Write (ML): 0x%6X, cnt: %03d, data: 0x%02X\r\n", address, count, tbuf[0]);
 8004aec:	882b      	ldrh	r3, [r5, #0]
 8004aee:	f7fd fe3f 	bl	8002770 <chprintf>
            write_block(address, count, tbuf, 0);
 8004af2:	8829      	ldrh	r1, [r5, #0]
 8004af4:	aa12      	add	r2, sp, #72	; 0x48
 8004af6:	4630      	mov	r0, r6
 8004af8:	f7fe f902 	bl	8002d00 <write_block.constprop.0>
            chprintf(ost, "O");
 8004afc:	492f      	ldr	r1, [pc, #188]	; (8004bbc <CharacterInputThread+0x1ddc>)
 8004afe:	4658      	mov	r0, fp
 8004b00:	f7fd fe36 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004b04:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	f47f ac85 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	4658      	mov	r0, fp
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	4798      	blx	r3
 8004b1a:	2320      	movs	r3, #32
 8004b1c:	b2c0      	uxtb	r0, r0
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b26:	2200      	movs	r2, #0
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004b2e:	f7fe ba3e 	b.w	8002fae <CharacterInputThread+0x1ce>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004b32:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	f43f a8e0 	beq.w	8003d00 <CharacterInputThread+0xf20>
      chThdSleepMilliseconds(100);
 8004b40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b44:	f7fd f9ec 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004b48:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	f43f a8d5 	beq.w	8003d00 <CharacterInputThread+0xf20>
      chThdSleepMilliseconds(100);
 8004b56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b5a:	f7fd f9e1 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004b5e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	f000 86fd 	beq.w	8005966 <CharacterInputThread+0x2b86>
      chThdSleepMilliseconds(100);
 8004b6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b70:	f7fd f9d6 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004b74:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	f000 86f2 	beq.w	8005966 <CharacterInputThread+0x2b86>
              state = BULK_ZWnBMBCs;
 8004b82:	2522      	movs	r5, #34	; 0x22
 8004b84:	f7fe bb05 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	4658      	mov	r0, fp
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	4798      	blx	r3
 8004b90:	2320      	movs	r3, #32
 8004b92:	b2c0      	uxtb	r0, r0
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004ba4:	f7fe ba03 	b.w	8002fae <CharacterInputThread+0x1ce>
 8004ba8:	20001a80 	.word	0x20001a80
 8004bac:	08009484 	.word	0x08009484
 8004bb0:	20000ef0 	.word	0x20000ef0
 8004bb4:	40020400 	.word	0x40020400
 8004bb8:	20000c48 	.word	0x20000c48
 8004bbc:	08009394 	.word	0x08009394
 8004bc0:	200018cb 	.word	0x200018cb
 8004bc4:	08009360 	.word	0x08009360
                chprintf(dbg, "Bulk Write (ZW): %6X, cnt: %03d, data: %02X %02X %02X %02X ... %02X %02X\r\n", address, count, tbuf[0], tbuf[1], tbuf[2], tbuf[3], tbuf[254], tbuf[255]);
 8004bc8:	f89d 5146 	ldrb.w	r5, [sp, #326]	; 0x146
 8004bcc:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 8004bd0:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 8004bd4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8004bd8:	f89d 3147 	ldrb.w	r3, [sp, #327]	; 0x147
 8004bdc:	9e08      	ldr	r6, [sp, #32]
 8004bde:	9305      	str	r3, [sp, #20]
 8004be0:	e9cd 0503 	strd	r0, r5, [sp, #12]
 8004be4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004be8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8004bec:	4db4      	ldr	r5, [pc, #720]	; (8004ec0 <CharacterInputThread+0x20e0>)
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	882b      	ldrh	r3, [r5, #0]
 8004bf2:	49b4      	ldr	r1, [pc, #720]	; (8004ec4 <CharacterInputThread+0x20e4>)
 8004bf4:	48b4      	ldr	r0, [pc, #720]	; (8004ec8 <CharacterInputThread+0x20e8>)
 8004bf6:	4632      	mov	r2, r6
 8004bf8:	f7fd fdba 	bl	8002770 <chprintf>
              write_block(address, count, tbuf, 0);
 8004bfc:	8829      	ldrh	r1, [r5, #0]
 8004bfe:	aa12      	add	r2, sp, #72	; 0x48
 8004c00:	4630      	mov	r0, r6
 8004c02:	f7fe f87d 	bl	8002d00 <write_block.constprop.0>
              chprintf(ost, "O");            }
 8004c06:	49b1      	ldr	r1, [pc, #708]	; (8004ecc <CharacterInputThread+0x20ec>)
 8004c08:	4658      	mov	r0, fp
 8004c0a:	f7fd fdb1 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004c0e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	f000 836a 	beq.w	80052f0 <CharacterInputThread+0x2510>
      chThdSleepMilliseconds(100);
 8004c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c20:	f7fd f97e 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004c24:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	f000 8621 	beq.w	8005874 <CharacterInputThread+0x2a94>
      chThdSleepMilliseconds(100);
 8004c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c36:	f7fd f973 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004c3a:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	f000 875d 	beq.w	8005b02 <CharacterInputThread+0x2d22>
      chThdSleepMilliseconds(100);
 8004c48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c4c:	f7fd f968 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004c50:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	f47f abdf 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	4658      	mov	r0, fp
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	4798      	blx	r3
 8004c66:	2320      	movs	r3, #32
 8004c68:	b2c0      	uxtb	r0, r0
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c72:	2200      	movs	r2, #0
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004c7a:	f7fe b998 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	4658      	mov	r0, fp
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	4798      	blx	r3
 8004c86:	2320      	movs	r3, #32
 8004c88:	b2c0      	uxtb	r0, r0
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c92:	2200      	movs	r2, #0
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004c9a:	f7fe b988 	b.w	8002fae <CharacterInputThread+0x1ce>
          chprintf(ost, "O");
 8004c9e:	498b      	ldr	r1, [pc, #556]	; (8004ecc <CharacterInputThread+0x20ec>)
 8004ca0:	4658      	mov	r0, fp
 8004ca2:	f7fd fd65 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004ca6:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	f000 82fe 	beq.w	80052b0 <CharacterInputThread+0x24d0>
      chThdSleepMilliseconds(100);
 8004cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cb8:	f7fd f932 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004cbc:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	f000 8597 	beq.w	80057f8 <CharacterInputThread+0x2a18>
      chThdSleepMilliseconds(100);
 8004cca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cce:	f7fd f927 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004cd2:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	f47f ab9e 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	4658      	mov	r0, fp
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	4798      	blx	r3
 8004ce8:	2320      	movs	r3, #32
 8004cea:	b2c0      	uxtb	r0, r0
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004cfc:	f7fe b957 	b.w	8002fae <CharacterInputThread+0x1ce>
 8004d00:	970a      	str	r7, [sp, #40]	; 0x28
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004d02:	2524      	movs	r5, #36	; 0x24
 8004d04:	f7fe ba45 	b.w	8003192 <CharacterInputThread+0x3b2>
          temp=0;
 8004d08:	4a71      	ldr	r2, [pc, #452]	; (8004ed0 <CharacterInputThread+0x20f0>)
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	7013      	strb	r3, [r2, #0]
          for (i=0;i<sizeof(serial);i++){
 8004d0e:	4a71      	ldr	r2, [pc, #452]	; (8004ed4 <CharacterInputThread+0x20f4>)
 8004d10:	8013      	strh	r3, [r2, #0]
            streamPut(ost, serial[i]);
 8004d12:	6822      	ldr	r2, [r4, #0]
            temp += serial[i];
 8004d14:	4d6e      	ldr	r5, [pc, #440]	; (8004ed0 <CharacterInputThread+0x20f0>)
            streamPut(ost, serial[i]);
 8004d16:	a90f      	add	r1, sp, #60	; 0x3c
 8004d18:	4658      	mov	r0, fp
 8004d1a:	5cc9      	ldrb	r1, [r1, r3]
 8004d1c:	68d3      	ldr	r3, [r2, #12]
 8004d1e:	4798      	blx	r3
            temp += serial[i];
 8004d20:	486c      	ldr	r0, [pc, #432]	; (8004ed4 <CharacterInputThread+0x20f4>)
 8004d22:	782a      	ldrb	r2, [r5, #0]
 8004d24:	8803      	ldrh	r3, [r0, #0]
 8004d26:	a90f      	add	r1, sp, #60	; 0x3c
 8004d28:	5cc9      	ldrb	r1, [r1, r3]
          for (i=0;i<sizeof(serial);i++){
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	b29b      	uxth	r3, r3
            temp += serial[i];
 8004d2e:	4411      	add	r1, r2
 8004d30:	b2c9      	uxtb	r1, r1
          for (i=0;i<sizeof(serial);i++){
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	8003      	strh	r3, [r0, #0]
            temp += serial[i];
 8004d36:	7029      	strb	r1, [r5, #0]
          for (i=0;i<sizeof(serial);i++){
 8004d38:	d9eb      	bls.n	8004d12 <CharacterInputThread+0x1f32>
          streamPut(ost, temp);
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	4658      	mov	r0, fp
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4798      	blx	r3
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004d42:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	f000 83cc 	beq.w	80054e8 <CharacterInputThread+0x2708>
      chThdSleepMilliseconds(100);
 8004d50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d54:	f7fd f8e4 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004d58:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	f000 8613 	beq.w	800598c <CharacterInputThread+0x2bac>
      chThdSleepMilliseconds(100);
 8004d66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d6a:	f7fd f8d9 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004d6e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	f47f ab50 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	4658      	mov	r0, fp
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	4798      	blx	r3
 8004d84:	2320      	movs	r3, #32
 8004d86:	b2c0      	uxtb	r0, r0
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d90:	2200      	movs	r2, #0
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004d98:	f7fe b909 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	4658      	mov	r0, fp
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	4798      	blx	r3
 8004da4:	2320      	movs	r3, #32
 8004da6:	b2c0      	uxtb	r0, r0
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004db0:	2200      	movs	r2, #0
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004db8:	f7fe b8f9 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	4658      	mov	r0, fp
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	4798      	blx	r3
 8004dc4:	2320      	movs	r3, #32
 8004dc6:	b2c0      	uxtb	r0, r0
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004dd8:	f7fe b8e9 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	4658      	mov	r0, fp
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	4798      	blx	r3
 8004de4:	2320      	movs	r3, #32
 8004de6:	b2c0      	uxtb	r0, r0
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004df0:	2200      	movs	r2, #0
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004df8:	f7fe b8d9 	b.w	8002fae <CharacterInputThread+0x1ce>
            chprintf(dbg, "Bank > 8 ERROR\r\n");
 8004dfc:	4936      	ldr	r1, [pc, #216]	; (8004ed8 <CharacterInputThread+0x20f8>)
 8004dfe:	4832      	ldr	r0, [pc, #200]	; (8004ec8 <CharacterInputThread+0x20e8>)
 8004e00:	f7fd fcb6 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004e04:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	f000 83f9 	beq.w	8005604 <CharacterInputThread+0x2824>
      chThdSleepMilliseconds(100);
 8004e12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e16:	f7fd f883 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004e1a:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	f000 8549 	beq.w	80058ba <CharacterInputThread+0x2ada>
      chThdSleepMilliseconds(100);
 8004e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e2c:	f7fd f878 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004e30:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	f47f aaef 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	4658      	mov	r0, fp
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	4798      	blx	r3
 8004e46:	2320      	movs	r3, #32
 8004e48:	b2c0      	uxtb	r0, r0
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e52:	2200      	movs	r2, #0
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004e5a:	f7fe b8a8 	b.w	8002fae <CharacterInputThread+0x1ce>
            chprintf(dbg, "Bank > 8 ERROR\r\n");
 8004e5e:	491e      	ldr	r1, [pc, #120]	; (8004ed8 <CharacterInputThread+0x20f8>)
 8004e60:	4819      	ldr	r0, [pc, #100]	; (8004ec8 <CharacterInputThread+0x20e8>)
 8004e62:	f7fd fc85 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004e66:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	f000 8368 	beq.w	8005544 <CharacterInputThread+0x2764>
      chThdSleepMilliseconds(100);
 8004e74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e78:	f7fd f852 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004e7c:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	f000 85c4 	beq.w	8005a12 <CharacterInputThread+0x2c32>
      chThdSleepMilliseconds(100);
 8004e8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e8e:	f7fd f847 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004e92:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	f47f aabe 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	4658      	mov	r0, fp
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	4798      	blx	r3
 8004ea8:	2320      	movs	r3, #32
 8004eaa:	b2c0      	uxtb	r0, r0
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004ebc:	f7fe b877 	b.w	8002fae <CharacterInputThread+0x1ce>
 8004ec0:	20001a80 	.word	0x20001a80
 8004ec4:	080093d4 	.word	0x080093d4
 8004ec8:	20000ef0 	.word	0x20000ef0
 8004ecc:	08009394 	.word	0x08009394
 8004ed0:	20001d78 	.word	0x20001d78
 8004ed4:	20001d70 	.word	0x20001d70
 8004ed8:	08009468 	.word	0x08009468
            chprintf(dbg, "Bank > 8 ERROR\r\n");
 8004edc:	49c5      	ldr	r1, [pc, #788]	; (80051f4 <CharacterInputThread+0x2414>)
 8004ede:	48c6      	ldr	r0, [pc, #792]	; (80051f8 <CharacterInputThread+0x2418>)
 8004ee0:	f7fd fc46 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004ee4:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	f000 8339 	beq.w	8005564 <CharacterInputThread+0x2784>
      chThdSleepMilliseconds(100);
 8004ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ef6:	f7fd f813 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004efa:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	f000 8595 	beq.w	8005a32 <CharacterInputThread+0x2c52>
      chThdSleepMilliseconds(100);
 8004f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f0c:	f7fd f808 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004f10:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	f47f aa7f 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	4658      	mov	r0, fp
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	4798      	blx	r3
 8004f26:	2320      	movs	r3, #32
 8004f28:	b2c0      	uxtb	r0, r0
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f32:	2200      	movs	r2, #0
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004f3a:	f7fe b838 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	4658      	mov	r0, fp
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	4798      	blx	r3
 8004f46:	2320      	movs	r3, #32
 8004f48:	b2c0      	uxtb	r0, r0
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f52:	2200      	movs	r2, #0
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004f5a:	f7fe b828 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	4658      	mov	r0, fp
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	4798      	blx	r3
 8004f66:	2320      	movs	r3, #32
 8004f68:	b2c0      	uxtb	r0, r0
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f72:	2200      	movs	r2, #0
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8004f7a:	f7fe b818 	b.w	8002fae <CharacterInputThread+0x1ce>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004f7e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	f43d af82 	beq.w	8002e90 <CharacterInputThread+0xb0>
      chThdSleepMilliseconds(100);
 8004f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f90:	f7fc ffc6 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004f94:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	f43d af77 	beq.w	8002e90 <CharacterInputThread+0xb0>
      chThdSleepMilliseconds(100);
 8004fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fa6:	f7fc ffbb 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004faa:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	f000 856c 	beq.w	8005a90 <CharacterInputThread+0x2cb0>
      chThdSleepMilliseconds(100);
 8004fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fbc:	f7fc ffb0 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004fc0:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	f000 8561 	beq.w	8005a90 <CharacterInputThread+0x2cb0>
          state = BANK_BE;
 8004fce:	2507      	movs	r5, #7
 8004fd0:	f7fe b8df 	b.w	8003192 <CharacterInputThread+0x3b2>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004fd4:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	f43e ada5 	beq.w	8003b2c <CharacterInputThread+0xd4c>
      chThdSleepMilliseconds(100);
 8004fe2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fe6:	f7fc ff9b 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8004fea:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	f43e ad9a 	beq.w	8003b2c <CharacterInputThread+0xd4c>
      chThdSleepMilliseconds(100);
 8004ff8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ffc:	f7fc ff90 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005000:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b04      	cmp	r3, #4
 800500a:	f000 8567 	beq.w	8005adc <CharacterInputThread+0x2cfc>
      chThdSleepMilliseconds(100);
 800500e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005012:	f7fc ff85 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005016:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b04      	cmp	r3, #4
 8005020:	f000 855c 	beq.w	8005adc <CharacterInputThread+0x2cfc>
          state = BANK_BS;
 8005024:	2506      	movs	r5, #6
 8005026:	f7fe b8b4 	b.w	8003192 <CharacterInputThread+0x3b2>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800502a:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b04      	cmp	r3, #4
 8005034:	f43e ad05 	beq.w	8003a42 <CharacterInputThread+0xc62>
      chThdSleepMilliseconds(100);
 8005038:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800503c:	f7fc ff70 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005040:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b04      	cmp	r3, #4
 800504a:	f43e acfa 	beq.w	8003a42 <CharacterInputThread+0xc62>
      chThdSleepMilliseconds(100);
 800504e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005052:	f7fc ff65 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005056:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b04      	cmp	r3, #4
 8005060:	f000 8529 	beq.w	8005ab6 <CharacterInputThread+0x2cd6>
      chThdSleepMilliseconds(100);
 8005064:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005068:	f7fc ff5a 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800506c:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b04      	cmp	r3, #4
 8005076:	f000 851e 	beq.w	8005ab6 <CharacterInputThread+0x2cd6>
          state = BANK_BR;
 800507a:	2503      	movs	r5, #3
 800507c:	f7fe b889 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	4658      	mov	r0, fp
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	4798      	blx	r3
 8005088:	2320      	movs	r3, #32
 800508a:	b2c0      	uxtb	r0, r0
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005094:	2200      	movs	r2, #0
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800509c:	f7fd bf87 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	4658      	mov	r0, fp
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	4798      	blx	r3
 80050a8:	2320      	movs	r3, #32
 80050aa:	b2c0      	uxtb	r0, r0
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050b4:	2200      	movs	r2, #0
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80050bc:	f7fd bf77 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	4658      	mov	r0, fp
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	4798      	blx	r3
 80050c8:	2320      	movs	r3, #32
 80050ca:	b2c0      	uxtb	r0, r0
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050d4:	2200      	movs	r2, #0
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80050dc:	f7fd bf67 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	4658      	mov	r0, fp
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	4798      	blx	r3
 80050e8:	2320      	movs	r3, #32
 80050ea:	b2c0      	uxtb	r0, r0
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050f4:	2200      	movs	r2, #0
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80050fc:	f7fd bf57 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	4658      	mov	r0, fp
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	4798      	blx	r3
 8005108:	2320      	movs	r3, #32
 800510a:	b2c0      	uxtb	r0, r0
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005114:	2200      	movs	r2, #0
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800511c:	454b      	cmp	r3, r9
 800511e:	f63d af46 	bhi.w	8002fae <CharacterInputThread+0x1ce>
 8005122:	f7fd bf05 	b.w	8002f30 <CharacterInputThread+0x150>
          chprintf(ost, "%c%cN", VMAJOR, VMINOR);
 8005126:	2303      	movs	r3, #3
 8005128:	4934      	ldr	r1, [pc, #208]	; (80051fc <CharacterInputThread+0x241c>)
 800512a:	220a      	movs	r2, #10
 800512c:	4658      	mov	r0, fp
 800512e:	f7fd fb1f 	bl	8002770 <chprintf>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005132:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b04      	cmp	r3, #4
 800513c:	f000 833c 	beq.w	80057b8 <CharacterInputThread+0x29d8>
      chThdSleepMilliseconds(100);
 8005140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005144:	f7fc feec 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005148:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b04      	cmp	r3, #4
 8005152:	f000 848d 	beq.w	8005a70 <CharacterInputThread+0x2c90>
      chThdSleepMilliseconds(100);
 8005156:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800515a:	f7fc fee1 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800515e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b04      	cmp	r3, #4
 8005168:	f47f a958 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	4658      	mov	r0, fp
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	4798      	blx	r3
 8005174:	2320      	movs	r3, #32
 8005176:	b2c0      	uxtb	r0, r0
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005180:	2200      	movs	r2, #0
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005188:	f7fd bf11 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	4658      	mov	r0, fp
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	4798      	blx	r3
 8005194:	2320      	movs	r3, #32
 8005196:	b2c0      	uxtb	r0, r0
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051a0:	2200      	movs	r2, #0
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80051a8:	f7fd bf01 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	4658      	mov	r0, fp
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	4798      	blx	r3
 80051b4:	2320      	movs	r3, #32
 80051b6:	b2c0      	uxtb	r0, r0
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051c0:	2200      	movs	r2, #0
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80051c8:	f7fd bef1 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	4658      	mov	r0, fp
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	4798      	blx	r3
 80051d4:	2320      	movs	r3, #32
 80051d6:	b2c0      	uxtb	r0, r0
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051e0:	2200      	movs	r2, #0
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80051e8:	4599      	cmp	r9, r3
 80051ea:	f4fd aee0 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 80051ee:	f7fe bf0c 	b.w	800400a <CharacterInputThread+0x122a>
 80051f2:	bf00      	nop
 80051f4:	08009468 	.word	0x08009468
 80051f8:	20000ef0 	.word	0x20000ef0
 80051fc:	0800947c 	.word	0x0800947c
      c=streamGet(&OSTRICHPORT);
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	4658      	mov	r0, fp
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	4798      	blx	r3
 8005208:	2320      	movs	r3, #32
 800520a:	b2c0      	uxtb	r0, r0
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005214:	2200      	movs	r2, #0
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800521c:	4599      	cmp	r9, r3
 800521e:	f4fd aec6 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 8005222:	f7fe bf39 	b.w	8004098 <CharacterInputThread+0x12b8>
      c=streamGet(&OSTRICHPORT);
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	4658      	mov	r0, fp
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	4798      	blx	r3
 800522e:	2320      	movs	r3, #32
 8005230:	b2c0      	uxtb	r0, r0
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800523a:	2200      	movs	r2, #0
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005242:	4599      	cmp	r9, r3
 8005244:	f4fd aeb3 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 8005248:	f7fe bf7c 	b.w	8004144 <CharacterInputThread+0x1364>
      c=streamGet(&OSTRICHPORT);
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	4658      	mov	r0, fp
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	4798      	blx	r3
 8005254:	2320      	movs	r3, #32
 8005256:	b2c0      	uxtb	r0, r0
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005260:	2200      	movs	r2, #0
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005268:	f7fd bea1 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	4658      	mov	r0, fp
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	4798      	blx	r3
 8005274:	2320      	movs	r3, #32
 8005276:	b2c0      	uxtb	r0, r0
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	f386 8811 	msr	BASEPRI, r6
      if (start > end){
 8005286:	f7fd be92 	b.w	8002fae <CharacterInputThread+0x1ce>
          state = CONFIG_CnCs;
 800528a:	2525      	movs	r5, #37	; 0x25
 800528c:	f7fd bf81 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	4658      	mov	r0, fp
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	4798      	blx	r3
 8005298:	2320      	movs	r3, #32
 800529a:	b2c0      	uxtb	r0, r0
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052a4:	2200      	movs	r2, #0
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80052ac:	f7fd be7f 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	4658      	mov	r0, fp
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	4798      	blx	r3
 80052b8:	2320      	movs	r3, #32
 80052ba:	b2c0      	uxtb	r0, r0
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052c4:	2200      	movs	r2, #0
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80052cc:	f7fd be6f 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	4658      	mov	r0, fp
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	4798      	blx	r3
 80052d8:	2320      	movs	r3, #32
 80052da:	b2c0      	uxtb	r0, r0
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052e4:	2200      	movs	r2, #0
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80052ec:	f7fd be5f 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	4658      	mov	r0, fp
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	4798      	blx	r3
 80052f8:	2320      	movs	r3, #32
 80052fa:	b2c0      	uxtb	r0, r0
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005304:	2200      	movs	r2, #0
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800530c:	f7fd be4f 	b.w	8002fae <CharacterInputThread+0x1ce>
            state = WRITE_nMLCs;
 8005310:	2514      	movs	r5, #20
 8005312:	f7fd bf3e 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	4658      	mov	r0, fp
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	4798      	blx	r3
 800531e:	2320      	movs	r3, #32
 8005320:	b2c0      	uxtb	r0, r0
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800532a:	2200      	movs	r2, #0
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005332:	f7fd be3c 	b.w	8002fae <CharacterInputThread+0x1ce>
          state = SERIAL_NS;
 8005336:	250f      	movs	r5, #15
 8005338:	f7fd bf2b 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	4658      	mov	r0, fp
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	4798      	blx	r3
 8005344:	2320      	movs	r3, #32
 8005346:	b2c0      	uxtb	r0, r0
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005350:	2200      	movs	r2, #0
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005358:	f7fd be29 	b.w	8002fae <CharacterInputThread+0x1ce>
 800535c:	970a      	str	r7, [sp, #40]	; 0x28
 800535e:	f7fd be26 	b.w	8002fae <CharacterInputThread+0x1ce>
 8005362:	970a      	str	r7, [sp, #40]	; 0x28
 8005364:	f7fd be23 	b.w	8002fae <CharacterInputThread+0x1ce>
              chprintf(dbg, "Read (R): Addr.: %6X, count: 0x%04x\r\n", address+0x10000*bankrw, count);
 8005368:	4eb6      	ldr	r6, [pc, #728]	; (8005644 <CharacterInputThread+0x2864>)
 800536a:	4db7      	ldr	r5, [pc, #732]	; (8005648 <CharacterInputThread+0x2868>)
 800536c:	f896 c000 	ldrb.w	ip, [r6]
 8005370:	9f08      	ldr	r7, [sp, #32]
 8005372:	882b      	ldrh	r3, [r5, #0]
 8005374:	49b5      	ldr	r1, [pc, #724]	; (800564c <CharacterInputThread+0x286c>)
 8005376:	48b6      	ldr	r0, [pc, #728]	; (8005650 <CharacterInputThread+0x2870>)
 8005378:	eb07 420c 	add.w	r2, r7, ip, lsl #16
 800537c:	f7fd f9f8 	bl	8002770 <chprintf>
            read_block(address+0x10000*bankrw, count, tbuf, 0);
 8005380:	7830      	ldrb	r0, [r6, #0]
 8005382:	8829      	ldrh	r1, [r5, #0]
 8005384:	aa12      	add	r2, sp, #72	; 0x48
 8005386:	eb07 4000 	add.w	r0, r7, r0, lsl #16
 800538a:	f7fd fcf9 	bl	8002d80 <read_block.constprop.0>
            for (i=0; i<count; i++){
 800538e:	4ab1      	ldr	r2, [pc, #708]	; (8005654 <CharacterInputThread+0x2874>)
 8005390:	882d      	ldrh	r5, [r5, #0]
 8005392:	2300      	movs	r3, #0
 8005394:	8013      	strh	r3, [r2, #0]
 8005396:	b18d      	cbz	r5, 80053bc <CharacterInputThread+0x25dc>
            checksum = 0;
 8005398:	461d      	mov	r5, r3
              checksum += tbuf[i];
 800539a:	aa12      	add	r2, sp, #72	; 0x48
              streamPut(ost, tbuf[i]);
 800539c:	4658      	mov	r0, fp
              checksum += tbuf[i];
 800539e:	5cd1      	ldrb	r1, [r2, r3]
              streamPut(ost, tbuf[i]);
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
              checksum += tbuf[i];
 80053a4:	440d      	add	r5, r1
              streamPut(ost, tbuf[i]);
 80053a6:	4798      	blx	r3
            for (i=0; i<count; i++){
 80053a8:	49aa      	ldr	r1, [pc, #680]	; (8005654 <CharacterInputThread+0x2874>)
 80053aa:	4aa7      	ldr	r2, [pc, #668]	; (8005648 <CharacterInputThread+0x2868>)
 80053ac:	880b      	ldrh	r3, [r1, #0]
 80053ae:	8812      	ldrh	r2, [r2, #0]
 80053b0:	3301      	adds	r3, #1
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	429a      	cmp	r2, r3
              checksum += tbuf[i];
 80053b6:	b2ed      	uxtb	r5, r5
            for (i=0; i<count; i++){
 80053b8:	800b      	strh	r3, [r1, #0]
 80053ba:	d8ee      	bhi.n	800539a <CharacterInputThread+0x25ba>
            streamPut(ost, checksum);
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	4629      	mov	r1, r5
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	4658      	mov	r0, fp
 80053c4:	4798      	blx	r3
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80053c6:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	f47f a824 	bne.w	800441c <CharacterInputThread+0x163c>
      c=streamGet(&OSTRICHPORT);
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	4658      	mov	r0, fp
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	4798      	blx	r3
 80053dc:	2320      	movs	r3, #32
 80053de:	b2c0      	uxtb	r0, r0
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053e8:	2200      	movs	r2, #0
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80053f0:	f7fd bddd 	b.w	8002fae <CharacterInputThread+0x1ce>
                chprintf(dbg, "Bulk Read (ZR): Addr.: %6X, blocks: 0x%04x\r\n", address, count);
 80053f4:	9f08      	ldr	r7, [sp, #32]
 80053f6:	4994      	ldr	r1, [pc, #592]	; (8005648 <CharacterInputThread+0x2868>)
 80053f8:	4895      	ldr	r0, [pc, #596]	; (8005650 <CharacterInputThread+0x2870>)
 80053fa:	880b      	ldrh	r3, [r1, #0]
 80053fc:	463a      	mov	r2, r7
 80053fe:	460d      	mov	r5, r1
 8005400:	4995      	ldr	r1, [pc, #596]	; (8005658 <CharacterInputThread+0x2878>)
 8005402:	f7fd f9b5 	bl	8002770 <chprintf>
              checksum = read_single_byte(address++, 0);
 8005406:	4638      	mov	r0, r7
 8005408:	f7fd fc5a 	bl	8002cc0 <read_single_byte.constprop.0>
              streamPut(ost, checksum);
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	4601      	mov	r1, r0
 8005410:	68db      	ldr	r3, [r3, #12]
              checksum = read_single_byte(address++, 0);
 8005412:	4606      	mov	r6, r0
              streamPut(ost, checksum);
 8005414:	4658      	mov	r0, fp
 8005416:	4798      	blx	r3
              count *= 256;
 8005418:	882b      	ldrh	r3, [r5, #0]
              checksum = read_single_byte(address++, 0);
 800541a:	463a      	mov	r2, r7
              count *= 256;
 800541c:	021b      	lsls	r3, r3, #8
              checksum = read_single_byte(address++, 0);
 800541e:	3201      	adds	r2, #1
              count --;
 8005420:	3b01      	subs	r3, #1
 8005422:	802b      	strh	r3, [r5, #0]
  CNT_ACTIVE;
 8005424:	f44f 7780 	mov.w	r7, #256	; 0x100
 8005428:	4690      	mov	r8, r2
 800542a:	f8aa 7018 	strh.w	r7, [sl, #24]
  __NOP();
 800542e:	bf00      	nop
  CNT_INACTIVE;
 8005430:	f8aa 701a 	strh.w	r7, [sl, #26]
  __NOP();
 8005434:	bf00      	nop
  __NOP();
 8005436:	bf00      	nop
  data = read_byte();
 8005438:	f7fc fd82 	bl	8001f40 <read_byte>
                streamPut(ost, tbuf[0]);
 800543c:	6823      	ldr	r3, [r4, #0]
                tbuf[0] = read_next_byte();
 800543e:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
                streamPut(ost, tbuf[0]);
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	4601      	mov	r1, r0
                checksum += tbuf[0];
 8005446:	4406      	add	r6, r0
                streamPut(ost, tbuf[0]);
 8005448:	4658      	mov	r0, fp
 800544a:	4798      	blx	r3
                count--;
 800544c:	4b7e      	ldr	r3, [pc, #504]	; (8005648 <CharacterInputThread+0x2868>)
 800544e:	881d      	ldrh	r5, [r3, #0]
 8005450:	3d01      	subs	r5, #1
 8005452:	b2ad      	uxth	r5, r5
                checksum += tbuf[0];
 8005454:	b2f6      	uxtb	r6, r6
                address++;
 8005456:	f108 0801 	add.w	r8, r8, #1
                count--;
 800545a:	801d      	strh	r5, [r3, #0]
              while (count){ //Blocks of 256 Bytes
 800545c:	2d00      	cmp	r5, #0
 800545e:	d1e4      	bne.n	800542a <CharacterInputThread+0x264a>
              streamPut(ost, checksum);
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	f8cd 8020 	str.w	r8, [sp, #32]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	4631      	mov	r1, r6
 800546a:	4658      	mov	r0, fp
 800546c:	4798      	blx	r3
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800546e:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b04      	cmp	r3, #4
 8005478:	f000 81ed 	beq.w	8005856 <CharacterInputThread+0x2a76>
      chThdSleepMilliseconds(100);
 800547c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005480:	f7fc fd4e 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005484:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b04      	cmp	r3, #4
 800548e:	f000 82e0 	beq.w	8005a52 <CharacterInputThread+0x2c72>
      chThdSleepMilliseconds(100);
 8005492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005496:	f7fc fd43 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800549a:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	f000 8350 	beq.w	8005b48 <CharacterInputThread+0x2d68>
      chThdSleepMilliseconds(100);
 80054a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054ac:	f7fc fd38 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 80054b0:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	f47d ae6a 	bne.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	4658      	mov	r0, fp
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	4798      	blx	r3
 80054c6:	2320      	movs	r3, #32
 80054c8:	b2c0      	uxtb	r0, r0
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	f385 8811 	msr	BASEPRI, r5
      if (start > end){
 80054d8:	f7fd bd69 	b.w	8002fae <CharacterInputThread+0x1ce>
              state = BULK_ZWn;
 80054dc:	251e      	movs	r5, #30
 80054de:	f7fd be58 	b.w	8003192 <CharacterInputThread+0x3b2>
              state = BULK_ZRn;
 80054e2:	251a      	movs	r5, #26
 80054e4:	f7fd be55 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	4658      	mov	r0, fp
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	4798      	blx	r3
 80054f0:	2320      	movs	r3, #32
 80054f2:	b2c0      	uxtb	r0, r0
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054fc:	2200      	movs	r2, #0
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005504:	f7fd bd53 	b.w	8002fae <CharacterInputThread+0x1ce>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b04      	cmp	r3, #4
 800550e:	f43e ab48 	beq.w	8003ba2 <CharacterInputThread+0xdc2>
      chThdSleepMilliseconds(100);
 8005512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005516:	f7fc fd03 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 800551a:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b04      	cmp	r3, #4
 8005524:	f000 81b6 	beq.w	8005894 <CharacterInputThread+0x2ab4>
      chThdSleepMilliseconds(100);
 8005528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800552c:	f7fc fcf8 	bl	8001f20 <chThdSleep>
    if (OSTRICHPORT.config->usbp->state == USB_ACTIVE) {
 8005530:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b04      	cmp	r3, #4
 800553a:	f000 81ab 	beq.w	8005894 <CharacterInputThread+0x2ab4>
          state = BANK_BES;
 800553e:	2505      	movs	r5, #5
 8005540:	f7fd be27 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	4658      	mov	r0, fp
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	4798      	blx	r3
 800554c:	2320      	movs	r3, #32
 800554e:	b2c0      	uxtb	r0, r0
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005558:	2200      	movs	r2, #0
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005560:	f7fd bd25 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	4658      	mov	r0, fp
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	4798      	blx	r3
 800556c:	2320      	movs	r3, #32
 800556e:	b2c0      	uxtb	r0, r0
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005578:	2200      	movs	r2, #0
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005580:	f7fd bd15 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	4658      	mov	r0, fp
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	4798      	blx	r3
 800558c:	2320      	movs	r3, #32
 800558e:	b2c0      	uxtb	r0, r0
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005598:	2200      	movs	r2, #0
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80055a0:	f7fd bd05 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	4658      	mov	r0, fp
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	4798      	blx	r3
 80055ac:	2320      	movs	r3, #32
 80055ae:	b2c0      	uxtb	r0, r0
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055b8:	2200      	movs	r2, #0
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80055c0:	f7fd bcf5 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	4658      	mov	r0, fp
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	4798      	blx	r3
 80055cc:	2320      	movs	r3, #32
 80055ce:	b2c0      	uxtb	r0, r0
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055d8:	2200      	movs	r2, #0
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80055e0:	f7fd bce5 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	4658      	mov	r0, fp
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	4798      	blx	r3
 80055ec:	2320      	movs	r3, #32
 80055ee:	b2c0      	uxtb	r0, r0
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055f8:	2200      	movs	r2, #0
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005600:	f7fd bcd5 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	4658      	mov	r0, fp
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	4798      	blx	r3
 800560c:	2320      	movs	r3, #32
 800560e:	b2c0      	uxtb	r0, r0
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005618:	2200      	movs	r2, #0
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005620:	f7fd bcc5 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	4658      	mov	r0, fp
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	4798      	blx	r3
 800562c:	2320      	movs	r3, #32
 800562e:	b2c0      	uxtb	r0, r0
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005638:	2200      	movs	r2, #0
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005640:	f7fd bcb5 	b.w	8002fae <CharacterInputThread+0x1ce>
 8005644:	200018cb 	.word	0x200018cb
 8005648:	20001a80 	.word	0x20001a80
 800564c:	080093ac 	.word	0x080093ac
 8005650:	20000ef0 	.word	0x20000ef0
 8005654:	20001d70 	.word	0x20001d70
 8005658:	08009420 	.word	0x08009420
      c=streamGet(&OSTRICHPORT);
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	4658      	mov	r0, fp
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	4798      	blx	r3
 8005664:	2320      	movs	r3, #32
 8005666:	b2c0      	uxtb	r0, r0
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005670:	2200      	movs	r2, #0
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005678:	f7fd bc99 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	4658      	mov	r0, fp
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	4798      	blx	r3
 8005684:	2320      	movs	r3, #32
 8005686:	b2c0      	uxtb	r0, r0
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005690:	2200      	movs	r2, #0
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005698:	f7fd bc89 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	4658      	mov	r0, fp
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	4798      	blx	r3
 80056a4:	2320      	movs	r3, #32
 80056a6:	b2c0      	uxtb	r0, r0
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056b0:	2200      	movs	r2, #0
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80056b8:	f7fd bc79 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	4658      	mov	r0, fp
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	4798      	blx	r3
 80056c4:	2320      	movs	r3, #32
 80056c6:	b2c0      	uxtb	r0, r0
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056d0:	2200      	movs	r2, #0
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80056d8:	f7fd bc69 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	4658      	mov	r0, fp
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	4798      	blx	r3
 80056e4:	2320      	movs	r3, #32
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056ee:	2200      	movs	r2, #0
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80056f6:	454b      	cmp	r3, r9
 80056f8:	f67e a9fd 	bls.w	8003af6 <CharacterInputThread+0xd16>
      c=streamGet(&OSTRICHPORT);
 80056fc:	b2c0      	uxtb	r0, r0
 80056fe:	f7fd bc56 	b.w	8002fae <CharacterInputThread+0x1ce>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	4658      	mov	r0, fp
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	4798      	blx	r3
 800570a:	2320      	movs	r3, #32
 800570c:	b2c0      	uxtb	r0, r0
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005716:	2200      	movs	r2, #0
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800571e:	f7fd bc46 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	4658      	mov	r0, fp
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	4798      	blx	r3
 800572a:	2320      	movs	r3, #32
 800572c:	b2c0      	uxtb	r0, r0
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005736:	2200      	movs	r2, #0
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800573e:	f7fd bc36 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	4658      	mov	r0, fp
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	4798      	blx	r3
 800574a:	2320      	movs	r3, #32
 800574c:	b2c0      	uxtb	r0, r0
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005756:	2200      	movs	r2, #0
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 800575e:	4599      	cmp	r9, r3
 8005760:	f4fd ac25 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 8005764:	f7fe bb33 	b.w	8003dce <CharacterInputThread+0xfee>
      c=streamGet(&OSTRICHPORT);
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	4658      	mov	r0, fp
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	4798      	blx	r3
 8005770:	2320      	movs	r3, #32
 8005772:	b2c0      	uxtb	r0, r0
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800577c:	2200      	movs	r2, #0
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005784:	f7fd bc13 	b.w	8002fae <CharacterInputThread+0x1ce>
        state = BAUD_Sn;
 8005788:	250d      	movs	r5, #13
 800578a:	f7fd bd02 	b.w	8003192 <CharacterInputThread+0x3b2>
        cntdwn = 0;
 800578e:	2300      	movs	r3, #0
        state = CONFIG_Cn;
 8005790:	2524      	movs	r5, #36	; 0x24
        cntdwn = 0;
 8005792:	930a      	str	r3, [sp, #40]	; 0x28
 8005794:	f7fd bcfd 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	4658      	mov	r0, fp
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	4798      	blx	r3
 80057a0:	2320      	movs	r3, #32
 80057a2:	b2c0      	uxtb	r0, r0
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057ac:	2200      	movs	r2, #0
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80057b4:	f7fd bbfb 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	4658      	mov	r0, fp
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	4798      	blx	r3
 80057c0:	2320      	movs	r3, #32
 80057c2:	b2c0      	uxtb	r0, r0
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057cc:	2200      	movs	r2, #0
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80057d4:	f7fd bbeb 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	4658      	mov	r0, fp
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	4798      	blx	r3
 80057e0:	2320      	movs	r3, #32
 80057e2:	b2c0      	uxtb	r0, r0
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057ec:	2200      	movs	r2, #0
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80057f4:	f7fd bbdb 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	4658      	mov	r0, fp
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	4798      	blx	r3
 8005800:	2320      	movs	r3, #32
 8005802:	b2c0      	uxtb	r0, r0
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800580c:	2200      	movs	r2, #0
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005814:	f7fd bbcb 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	4658      	mov	r0, fp
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	4798      	blx	r3
 8005820:	2320      	movs	r3, #32
 8005822:	b2c0      	uxtb	r0, r0
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	f386 8811 	msr	BASEPRI, r6
      if (start > end){
 8005832:	f7fd bbbc 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	4658      	mov	r0, fp
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	4798      	blx	r3
 800583e:	2320      	movs	r3, #32
 8005840:	b2c0      	uxtb	r0, r0
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800584a:	2200      	movs	r2, #0
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005852:	f7fd bbac 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	4658      	mov	r0, fp
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	4798      	blx	r3
 800585e:	2320      	movs	r3, #32
 8005860:	b2c0      	uxtb	r0, r0
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	f385 8811 	msr	BASEPRI, r5
      if (start > end){
 8005870:	f7fd bb9d 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	4658      	mov	r0, fp
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	4798      	blx	r3
 800587c:	2320      	movs	r3, #32
 800587e:	b2c0      	uxtb	r0, r0
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005888:	2200      	movs	r2, #0
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005890:	f7fd bb8d 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	4658      	mov	r0, fp
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	4798      	blx	r3
 800589c:	2320      	movs	r3, #32
 800589e:	b2c0      	uxtb	r0, r0
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058a8:	2200      	movs	r2, #0
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80058b0:	4599      	cmp	r9, r3
 80058b2:	f4fd ab7c 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 80058b6:	f7fe b985 	b.w	8003bc4 <CharacterInputThread+0xde4>
      c=streamGet(&OSTRICHPORT);
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	4658      	mov	r0, fp
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	4798      	blx	r3
 80058c2:	2320      	movs	r3, #32
 80058c4:	b2c0      	uxtb	r0, r0
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058ce:	2200      	movs	r2, #0
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80058d6:	f7fd bb6a 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	4658      	mov	r0, fp
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	4798      	blx	r3
 80058e2:	2320      	movs	r3, #32
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058ec:	2200      	movs	r2, #0
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80058f4:	454b      	cmp	r3, r9
 80058f6:	f67e a8fe 	bls.w	8003af6 <CharacterInputThread+0xd16>
      c=streamGet(&OSTRICHPORT);
 80058fa:	b2c0      	uxtb	r0, r0
 80058fc:	f7fd bb57 	b.w	8002fae <CharacterInputThread+0x1ce>
          state = BANK_BEE;
 8005900:	2508      	movs	r5, #8
 8005902:	f7fd bc46 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	4658      	mov	r0, fp
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	4798      	blx	r3
 800590e:	2320      	movs	r3, #32
 8005910:	b2c0      	uxtb	r0, r0
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800591a:	2200      	movs	r2, #0
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005922:	f7fd bb44 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	4658      	mov	r0, fp
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	4798      	blx	r3
 800592e:	2320      	movs	r3, #32
 8005930:	b2c0      	uxtb	r0, r0
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800593a:	2200      	movs	r2, #0
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005942:	f7fd bb34 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	4658      	mov	r0, fp
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	4798      	blx	r3
 800594e:	2320      	movs	r3, #32
 8005950:	b2c0      	uxtb	r0, r0
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800595a:	2200      	movs	r2, #0
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005962:	f7fd bb24 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	4658      	mov	r0, fp
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	4798      	blx	r3
 800596e:	2320      	movs	r3, #32
 8005970:	b2c0      	uxtb	r0, r0
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800597a:	2200      	movs	r2, #0
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005982:	4599      	cmp	r9, r3
 8005984:	f4fd ab13 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 8005988:	f7fe b9cb 	b.w	8003d22 <CharacterInputThread+0xf42>
      c=streamGet(&OSTRICHPORT);
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	4658      	mov	r0, fp
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	4798      	blx	r3
 8005994:	2320      	movs	r3, #32
 8005996:	b2c0      	uxtb	r0, r0
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059a0:	2200      	movs	r2, #0
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80059a8:	f7fd bb01 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	4658      	mov	r0, fp
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	4798      	blx	r3
 80059b4:	2320      	movs	r3, #32
 80059b6:	b2c0      	uxtb	r0, r0
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059c0:	2200      	movs	r2, #0
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80059c8:	4599      	cmp	r9, r3
 80059ca:	f4fd aaf0 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 80059ce:	f7fe b950 	b.w	8003c72 <CharacterInputThread+0xe92>
      c=streamGet(&OSTRICHPORT);
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	4658      	mov	r0, fp
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	4798      	blx	r3
 80059da:	2320      	movs	r3, #32
 80059dc:	b2c0      	uxtb	r0, r0
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059e6:	2200      	movs	r2, #0
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 80059ee:	f7fd bade 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	4658      	mov	r0, fp
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	4798      	blx	r3
 80059fa:	2320      	movs	r3, #32
 80059fc:	b2c0      	uxtb	r0, r0
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a06:	2200      	movs	r2, #0
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005a0e:	f7fd bace 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	4658      	mov	r0, fp
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	4798      	blx	r3
 8005a1a:	2320      	movs	r3, #32
 8005a1c:	b2c0      	uxtb	r0, r0
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a26:	2200      	movs	r2, #0
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005a2e:	f7fd babe 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	4658      	mov	r0, fp
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	4798      	blx	r3
 8005a3a:	2320      	movs	r3, #32
 8005a3c:	b2c0      	uxtb	r0, r0
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a46:	2200      	movs	r2, #0
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005a4e:	f7fd baae 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	4658      	mov	r0, fp
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	4798      	blx	r3
 8005a5a:	2320      	movs	r3, #32
 8005a5c:	b2c0      	uxtb	r0, r0
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	f385 8811 	msr	BASEPRI, r5
      if (start > end){
 8005a6c:	f7fd ba9f 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	4658      	mov	r0, fp
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	4798      	blx	r3
 8005a78:	2320      	movs	r3, #32
 8005a7a:	b2c0      	uxtb	r0, r0
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a84:	2200      	movs	r2, #0
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005a8c:	f7fd ba8f 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	4658      	mov	r0, fp
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	4798      	blx	r3
 8005a98:	2320      	movs	r3, #32
 8005a9a:	b2c0      	uxtb	r0, r0
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005aac:	4599      	cmp	r9, r3
 8005aae:	f4fd aa7e 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 8005ab2:	f7fd b9fd 	b.w	8002eb0 <CharacterInputThread+0xd0>
      c=streamGet(&OSTRICHPORT);
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	4658      	mov	r0, fp
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	4798      	blx	r3
 8005abe:	2320      	movs	r3, #32
 8005ac0:	b2c0      	uxtb	r0, r0
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005aca:	2200      	movs	r2, #0
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005ad2:	4599      	cmp	r9, r3
 8005ad4:	f4fd aa6b 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 8005ad8:	f7fd bfc4 	b.w	8003a64 <CharacterInputThread+0xc84>
      c=streamGet(&OSTRICHPORT);
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	4658      	mov	r0, fp
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	4798      	blx	r3
 8005ae4:	2320      	movs	r3, #32
 8005ae6:	b2c0      	uxtb	r0, r0
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005af0:	2200      	movs	r2, #0
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005af8:	4599      	cmp	r9, r3
 8005afa:	f4fd aa58 	bcc.w	8002fae <CharacterInputThread+0x1ce>
 8005afe:	f7fe b826 	b.w	8003b4e <CharacterInputThread+0xd6e>
      c=streamGet(&OSTRICHPORT);
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	4658      	mov	r0, fp
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	4798      	blx	r3
 8005b0a:	2320      	movs	r3, #32
 8005b0c:	b2c0      	uxtb	r0, r0
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b16:	2200      	movs	r2, #0
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005b1e:	f7fd ba46 	b.w	8002fae <CharacterInputThread+0x1ce>
          state = BANK_BEn;
 8005b22:	250b      	movs	r5, #11
 8005b24:	f7fd bb35 	b.w	8003192 <CharacterInputThread+0x3b2>
      c=streamGet(&OSTRICHPORT);
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	4658      	mov	r0, fp
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	4798      	blx	r3
 8005b30:	2320      	movs	r3, #32
 8005b32:	b2c0      	uxtb	r0, r0
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	f382 8811 	msr	BASEPRI, r2
      if (start > end){
 8005b44:	f7fd ba33 	b.w	8002fae <CharacterInputThread+0x1ce>
      c=streamGet(&OSTRICHPORT);
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	4658      	mov	r0, fp
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	4798      	blx	r3
 8005b50:	2320      	movs	r3, #32
 8005b52:	b2c0      	uxtb	r0, r0
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	f385 8811 	msr	BASEPRI, r5
      if (start > end){
 8005b62:	f7fd ba24 	b.w	8002fae <CharacterInputThread+0x1ce>
 8005b66:	bf00      	nop
	...

08005b70 <cmd_wc>:

  write_single_byte(data, address, 0);
  chprintf(chp, "Data: %02x @ address %08x\r\n", data, address);
}

void cmd_wc(BaseSequentialStream *chp, int argc, char *argv[]){
 8005b70:	b538      	push	{r3, r4, r5, lr}
 8005b72:	460d      	mov	r5, r1
  (void)* argv;
  (void)argc;
  //uint8_t data;
  //int32_t address;
  const char * const usage = "Usage: wc\r\n";
  chprintf(chp, "Writes config data\r\n");
 8005b74:	490a      	ldr	r1, [pc, #40]	; (8005ba0 <cmd_wc+0x30>)
void cmd_wc(BaseSequentialStream *chp, int argc, char *argv[]){
 8005b76:	4604      	mov	r4, r0
  chprintf(chp, "Writes config data\r\n");
 8005b78:	f7fc fdfa 	bl	8002770 <chprintf>
  if (argc < 2) {
 8005b7c:	2d01      	cmp	r5, #1
 8005b7e:	dd05      	ble.n	8005b8c <cmd_wc+0x1c>
//    .data[12]  = 0xFF,
//    .data[13]  = 0xFF,
//    .data[14]  = 0xFF
//  };
  write_config(&cfdat[0]);
  chprintf(chp, "Done.\r\n");
 8005b80:	4620      	mov	r0, r4
 8005b82:	4908      	ldr	r1, [pc, #32]	; (8005ba4 <cmd_wc+0x34>)
}
 8005b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chprintf(chp, "Done.\r\n");
 8005b88:	f7fc bdf2 	b.w	8002770 <chprintf>
    chprintf(chp, usage);
 8005b8c:	4906      	ldr	r1, [pc, #24]	; (8005ba8 <cmd_wc+0x38>)
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f7fc fdee 	bl	8002770 <chprintf>
  chprintf(chp, "Done.\r\n");
 8005b94:	4620      	mov	r0, r4
 8005b96:	4903      	ldr	r1, [pc, #12]	; (8005ba4 <cmd_wc+0x34>)
}
 8005b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chprintf(chp, "Done.\r\n");
 8005b9c:	f7fc bde8 	b.w	8002770 <chprintf>
 8005ba0:	080094c8 	.word	0x080094c8
 8005ba4:	080094ec 	.word	0x080094ec
 8005ba8:	080094e0 	.word	0x080094e0
 8005bac:	00000000 	.word	0x00000000

08005bb0 <cmd_echo>:

#if (SHELL_CMD_ECHO_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_echo(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc != 1) {
 8005bb0:	2901      	cmp	r1, #1
 8005bb2:	d003      	beq.n	8005bbc <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 8005bb4:	4a03      	ldr	r2, [pc, #12]	; (8005bc4 <cmd_echo+0x14>)
 8005bb6:	4904      	ldr	r1, [pc, #16]	; (8005bc8 <cmd_echo+0x18>)
 8005bb8:	f7fc bdda 	b.w	8002770 <chprintf>
    return;
  }
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	4903      	ldr	r1, [pc, #12]	; (8005bcc <cmd_echo+0x1c>)
 8005bc0:	f7fc bdd6 	b.w	8002770 <chprintf>
 8005bc4:	080094f4 	.word	0x080094f4
 8005bc8:	08009504 	.word	0x08009504
 8005bcc:	08009510 	.word	0x08009510

08005bd0 <cmd_test>:

void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005bd0:	b510      	push	{r4, lr}
  (void)* argv;
  (void)argc;
  char text[10];
  uint16_t val;

  chprintf(chp, "Enter Number (<256) \r\n");
 8005bd2:	4911      	ldr	r1, [pc, #68]	; (8005c18 <cmd_test+0x48>)
void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	4604      	mov	r4, r0
  chprintf(chp, "Enter Number (<256) \r\n");
 8005bd8:	f7fc fdca 	bl	8002770 <chprintf>
//  ret = chscanf(chp, "%7s", &text);
  if (chscanf((BaseBufferedStream *)chp, "%10s", &text) != 1){
 8005bdc:	490f      	ldr	r1, [pc, #60]	; (8005c1c <cmd_test+0x4c>)
 8005bde:	4620      	mov	r0, r4
 8005be0:	aa01      	add	r2, sp, #4
 8005be2:	f7fc fb05 	bl	80021f0 <chscanf.constprop.0>
 8005be6:	2801      	cmp	r0, #1
 8005be8:	d005      	beq.n	8005bf6 <cmd_test+0x26>
    chprintf(chp, "Something went wrong\r\n");
 8005bea:	490d      	ldr	r1, [pc, #52]	; (8005c20 <cmd_test+0x50>)
 8005bec:	4620      	mov	r0, r4
 8005bee:	f7fc fdbf 	bl	8002770 <chprintf>

  chprintf(chp, "You entered text: %s Val: %04x got: %02x\r\n",
                      text, val);
  chprintf(ost, "OK\r\n");

}
 8005bf2:	b004      	add	sp, #16
 8005bf4:	bd10      	pop	{r4, pc}
  val = (uint16_t)strtol(text, NULL, 0);
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	a801      	add	r0, sp, #4
 8005bfc:	f003 f840 	bl	8008c80 <strtol>
  chprintf(chp, "You entered text: %s Val: %04x got: %02x\r\n",
 8005c00:	aa01      	add	r2, sp, #4
 8005c02:	b283      	uxth	r3, r0
 8005c04:	4907      	ldr	r1, [pc, #28]	; (8005c24 <cmd_test+0x54>)
 8005c06:	4620      	mov	r0, r4
 8005c08:	f7fc fdb2 	bl	8002770 <chprintf>
  chprintf(ost, "OK\r\n");
 8005c0c:	4906      	ldr	r1, [pc, #24]	; (8005c28 <cmd_test+0x58>)
 8005c0e:	4807      	ldr	r0, [pc, #28]	; (8005c2c <cmd_test+0x5c>)
 8005c10:	f7fc fdae 	bl	8002770 <chprintf>
}
 8005c14:	b004      	add	sp, #16
 8005c16:	bd10      	pop	{r4, pc}
 8005c18:	08009518 	.word	0x08009518
 8005c1c:	0800931c 	.word	0x0800931c
 8005c20:	08009530 	.word	0x08009530
 8005c24:	08009548 	.word	0x08009548
 8005c28:	08009574 	.word	0x08009574
 8005c2c:	200013a8 	.word	0x200013a8

08005c30 <cmd_wb>:
void cmd_wb(BaseSequentialStream *chp, int argc, char *argv[]){
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	460e      	mov	r6, r1
  chprintf(chp, "Writes byte to address\r\n");
 8005c34:	491e      	ldr	r1, [pc, #120]	; (8005cb0 <cmd_wb+0x80>)
void cmd_wb(BaseSequentialStream *chp, int argc, char *argv[]){
 8005c36:	4615      	mov	r5, r2
 8005c38:	4604      	mov	r4, r0
  chprintf(chp, "Writes byte to address\r\n");
 8005c3a:	f7fc fd99 	bl	8002770 <chprintf>
  if (argc != 2) {
 8005c3e:	2e02      	cmp	r6, #2
 8005c40:	d005      	beq.n	8005c4e <cmd_wb+0x1e>
    chprintf(chp, usage);
 8005c42:	4620      	mov	r0, r4
 8005c44:	491b      	ldr	r1, [pc, #108]	; (8005cb4 <cmd_wb+0x84>)
}
 8005c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    chprintf(chp, usage);
 8005c4a:	f7fc bd91 	b.w	8002770 <chprintf>
  address = (int32_t)strtol(argv[0], NULL, 0);
 8005c4e:	2200      	movs	r2, #0
 8005c50:	4611      	mov	r1, r2
 8005c52:	6828      	ldr	r0, [r5, #0]
 8005c54:	f003 f814 	bl	8008c80 <strtol>
  data = (uint8_t)strtol(argv[1], NULL, 0);
 8005c58:	2200      	movs	r2, #0
  address = (int32_t)strtol(argv[0], NULL, 0);
 8005c5a:	4603      	mov	r3, r0
  data = (uint8_t)strtol(argv[1], NULL, 0);
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	6868      	ldr	r0, [r5, #4]
  address = (int32_t)strtol(argv[0], NULL, 0);
 8005c60:	461d      	mov	r5, r3
  data = (uint8_t)strtol(argv[1], NULL, 0);
 8005c62:	f003 f80d 	bl	8008c80 <strtol>
  MRC_ACTIVE;  // Reset '590
 8005c66:	4b14      	ldr	r3, [pc, #80]	; (8005cb8 <cmd_wb+0x88>)
 8005c68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005c6c:	b2c6      	uxtb	r6, r0
 8005c6e:	835a      	strh	r2, [r3, #26]
  __NOP();
 8005c70:	bf00      	nop
  for (i=0; i<address; i++){
 8005c72:	2d00      	cmp	r5, #0
  MRC_INACTIVE;
 8005c74:	831a      	strh	r2, [r3, #24]
  for (i=0; i<address; i++){
 8005c76:	dd0a      	ble.n	8005c8e <cmd_wb+0x5e>
  CNT_ACTIVE;
 8005c78:	4910      	ldr	r1, [pc, #64]	; (8005cbc <cmd_wb+0x8c>)
  for (i=0; i<address; i++){
 8005c7a:	2300      	movs	r3, #0
  CNT_ACTIVE;
 8005c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c80:	830a      	strh	r2, [r1, #24]
  __NOP();
 8005c82:	bf00      	nop
  CNT_INACTIVE;
 8005c84:	834a      	strh	r2, [r1, #26]
  __NOP();
 8005c86:	bf00      	nop
  for (i=0; i<address; i++){
 8005c88:	3301      	adds	r3, #1
 8005c8a:	429d      	cmp	r5, r3
 8005c8c:	d1f8      	bne.n	8005c80 <cmd_wb+0x50>
  select_chip(15); // RAM is Chip 15
 8005c8e:	200f      	movs	r0, #15
 8005c90:	f7fa fede 	bl	8000a50 <select_chip>
  check_BUS();
 8005c94:	f7fc ffc4 	bl	8002c20 <check_BUS>
  write_byte(data);
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f7fc f9e9 	bl	8002070 <write_byte>
  chprintf(chp, "Data: %02x @ address %08x\r\n", data, address);
 8005c9e:	462b      	mov	r3, r5
 8005ca0:	4632      	mov	r2, r6
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	4906      	ldr	r1, [pc, #24]	; (8005cc0 <cmd_wb+0x90>)
}
 8005ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chprintf(chp, "Data: %02x @ address %08x\r\n", data, address);
 8005caa:	f7fc bd61 	b.w	8002770 <chprintf>
 8005cae:	bf00      	nop
 8005cb0:	0800957c 	.word	0x0800957c
 8005cb4:	08009598 	.word	0x08009598
 8005cb8:	40020400 	.word	0x40020400
 8005cbc:	40020000 	.word	0x40020000
 8005cc0:	080095b4 	.word	0x080095b4
	...

08005cd0 <cmd_rb>:
void cmd_rb(BaseSequentialStream *chp, int argc, char *argv[]){
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	460d      	mov	r5, r1
  chprintf(chp, "Reads byte from address\r\n");
 8005cd4:	490e      	ldr	r1, [pc, #56]	; (8005d10 <cmd_rb+0x40>)
void cmd_rb(BaseSequentialStream *chp, int argc, char *argv[]){
 8005cd6:	4616      	mov	r6, r2
 8005cd8:	4604      	mov	r4, r0
  chprintf(chp, "Reads byte from address\r\n");
 8005cda:	f7fc fd49 	bl	8002770 <chprintf>
  if (argc != 1) {
 8005cde:	2d01      	cmp	r5, #1
 8005ce0:	d005      	beq.n	8005cee <cmd_rb+0x1e>
    chprintf(chp, usage);
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	490b      	ldr	r1, [pc, #44]	; (8005d14 <cmd_rb+0x44>)
}
 8005ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    chprintf(chp, usage);
 8005cea:	f7fc bd41 	b.w	8002770 <chprintf>
  address = (int32_t)strtol(argv[0], NULL, 0);
 8005cee:	2200      	movs	r2, #0
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	6830      	ldr	r0, [r6, #0]
 8005cf4:	f002 ffc4 	bl	8008c80 <strtol>
 8005cf8:	4605      	mov	r5, r0
  data=read_single_byte(address, 0);
 8005cfa:	f7fc ffe1 	bl	8002cc0 <read_single_byte.constprop.0>
  chprintf(chp, "Data on %08x is %02x\r\n", address, data);
 8005cfe:	462a      	mov	r2, r5
  data=read_single_byte(address, 0);
 8005d00:	4603      	mov	r3, r0
  chprintf(chp, "Data on %08x is %02x\r\n", address, data);
 8005d02:	4905      	ldr	r1, [pc, #20]	; (8005d18 <cmd_rb+0x48>)
 8005d04:	4620      	mov	r0, r4
}
 8005d06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chprintf(chp, "Data on %08x is %02x\r\n", address, data);
 8005d0a:	f7fc bd31 	b.w	8002770 <chprintf>
 8005d0e:	bf00      	nop
 8005d10:	080095d0 	.word	0x080095d0
 8005d14:	080095ec 	.word	0x080095ec
 8005d18:	08009604 	.word	0x08009604
 8005d1c:	00000000 	.word	0x00000000

08005d20 <cmd_fill>:
void cmd_fill(BaseSequentialStream *chp, int argc, char *argv[]){
 8005d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d22:	460e      	mov	r6, r1
 8005d24:	b0c1      	sub	sp, #260	; 0x104
  chprintf(chp, "Fills block with bytes from address\r\n");
 8005d26:	4921      	ldr	r1, [pc, #132]	; (8005dac <cmd_fill+0x8c>)
void cmd_fill(BaseSequentialStream *chp, int argc, char *argv[]){
 8005d28:	4614      	mov	r4, r2
 8005d2a:	4605      	mov	r5, r0
  chprintf(chp, "Fills block with bytes from address\r\n");
 8005d2c:	f7fc fd20 	bl	8002770 <chprintf>
  if (argc != 3) {
 8005d30:	2e03      	cmp	r6, #3
 8005d32:	d005      	beq.n	8005d40 <cmd_fill+0x20>
    chprintf(chp, usage);
 8005d34:	491e      	ldr	r1, [pc, #120]	; (8005db0 <cmd_fill+0x90>)
 8005d36:	4628      	mov	r0, r5
 8005d38:	f7fc fd1a 	bl	8002770 <chprintf>
}
 8005d3c:	b041      	add	sp, #260	; 0x104
 8005d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 8005d40:	2200      	movs	r2, #0
 8005d42:	4611      	mov	r1, r2
 8005d44:	6820      	ldr	r0, [r4, #0]
 8005d46:	f002 ff9b 	bl	8008c80 <strtol>
  address = (int32_t)strtol(argv[1], NULL, 0);
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	4611      	mov	r1, r2
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 8005d4e:	4606      	mov	r6, r0
  address = (int32_t)strtol(argv[1], NULL, 0);
 8005d50:	6860      	ldr	r0, [r4, #4]
 8005d52:	f002 ff95 	bl	8008c80 <strtol>
  d  = (uint8_t)strtol(argv[2], NULL, 0);
 8005d56:	2200      	movs	r2, #0
  address = (int32_t)strtol(argv[1], NULL, 0);
 8005d58:	4607      	mov	r7, r0
  d  = (uint8_t)strtol(argv[2], NULL, 0);
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	68a0      	ldr	r0, [r4, #8]
 8005d5e:	f002 ff8f 	bl	8008c80 <strtol>
  if (lcnt > 256){
 8005d62:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
  d  = (uint8_t)strtol(argv[2], NULL, 0);
 8005d66:	4604      	mov	r4, r0
  if (lcnt > 256){
 8005d68:	dc19      	bgt.n	8005d9e <cmd_fill+0x7e>
  chprintf(chp, "Starting at: %8x blocksize: %8x \r\n", address, lcnt);
 8005d6a:	463a      	mov	r2, r7
 8005d6c:	4911      	ldr	r1, [pc, #68]	; (8005db4 <cmd_fill+0x94>)
 8005d6e:	4633      	mov	r3, r6
 8005d70:	4628      	mov	r0, r5
 8005d72:	f7fc fcfd 	bl	8002770 <chprintf>
  for (acnt = 0; acnt < lcnt; acnt ++){
 8005d76:	2e00      	cmp	r6, #0
 8005d78:	466a      	mov	r2, sp
 8005d7a:	dd06      	ble.n	8005d8a <cmd_fill+0x6a>
  d  = (uint8_t)strtol(argv[2], NULL, 0);
 8005d7c:	b2e4      	uxtb	r4, r4
 8005d7e:	4611      	mov	r1, r2
 8005d80:	1993      	adds	r3, r2, r6
    data[acnt] = d;
 8005d82:	f801 4b01 	strb.w	r4, [r1], #1
  for (acnt = 0; acnt < lcnt; acnt ++){
 8005d86:	4299      	cmp	r1, r3
 8005d88:	d1fb      	bne.n	8005d82 <cmd_fill+0x62>
  write_block(address, lcnt, data, 0);
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4638      	mov	r0, r7
 8005d8e:	f7fc ffb7 	bl	8002d00 <write_block.constprop.0>
  chprintf(chp, "OK.\r\n");
 8005d92:	4909      	ldr	r1, [pc, #36]	; (8005db8 <cmd_fill+0x98>)
 8005d94:	4628      	mov	r0, r5
 8005d96:	f7fc fceb 	bl	8002770 <chprintf>
}
 8005d9a:	b041      	add	sp, #260	; 0x104
 8005d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    chprintf(chp, "Only 256 bytes for now\r\n");
 8005d9e:	4907      	ldr	r1, [pc, #28]	; (8005dbc <cmd_fill+0x9c>)
 8005da0:	4628      	mov	r0, r5
 8005da2:	f7fc fce5 	bl	8002770 <chprintf>
}
 8005da6:	b041      	add	sp, #260	; 0x104
 8005da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005daa:	bf00      	nop
 8005dac:	0800961c 	.word	0x0800961c
 8005db0:	08009644 	.word	0x08009644
 8005db4:	08009684 	.word	0x08009684
 8005db8:	080096a8 	.word	0x080096a8
 8005dbc:	08009668 	.word	0x08009668

08005dc0 <cmd_spi>:
  if (argc != 1) {
 8005dc0:	2901      	cmp	r1, #1
 8005dc2:	d002      	beq.n	8005dca <cmd_spi+0xa>
    chprintf(chp, usage);
 8005dc4:	4908      	ldr	r1, [pc, #32]	; (8005de8 <cmd_spi+0x28>)
 8005dc6:	f7fc bcd3 	b.w	8002770 <chprintf>
 8005dca:	4613      	mov	r3, r2
void cmd_spi(BaseSequentialStream *chp, int argc, char *argv[]){
 8005dcc:	b510      	push	{r4, lr}
  val = (int32_t)strtol(argv[0], NULL, 0);
 8005dce:	2200      	movs	r2, #0
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	6818      	ldr	r0, [r3, #0]
 8005dd6:	f002 ff53 	bl	8008c80 <strtol>
  chprintf(chp, "You entered: %08x \r\n", val);
 8005dda:	4904      	ldr	r1, [pc, #16]	; (8005dec <cmd_spi+0x2c>)
  val = (int32_t)strtol(argv[0], NULL, 0);
 8005ddc:	4602      	mov	r2, r0
  chprintf(chp, "You entered: %08x \r\n", val);
 8005dde:	4620      	mov	r0, r4
}
 8005de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chprintf(chp, "You entered: %08x \r\n", val);
 8005de4:	f7fc bcc4 	b.w	8002770 <chprintf>
 8005de8:	080096b0 	.word	0x080096b0
 8005dec:	080096c4 	.word	0x080096c4

08005df0 <cmd_br>:
void cmd_br(BaseSequentialStream *chp, int argc, char *argv[]){
 8005df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	460d      	mov	r5, r1
 8005df6:	b0c5      	sub	sp, #276	; 0x114
  chprintf(chp, "Prints block of bytes from address\r\n");
 8005df8:	4948      	ldr	r1, [pc, #288]	; (8005f1c <cmd_br+0x12c>)
void cmd_br(BaseSequentialStream *chp, int argc, char *argv[]){
 8005dfa:	4614      	mov	r4, r2
 8005dfc:	4682      	mov	sl, r0
  chprintf(chp, "Prints block of bytes from address\r\n");
 8005dfe:	f7fc fcb7 	bl	8002770 <chprintf>
  if (argc != 2) {
 8005e02:	2d02      	cmp	r5, #2
 8005e04:	d006      	beq.n	8005e14 <cmd_br+0x24>
    chprintf(chp, usage);
 8005e06:	4946      	ldr	r1, [pc, #280]	; (8005f20 <cmd_br+0x130>)
 8005e08:	4650      	mov	r0, sl
 8005e0a:	f7fc fcb1 	bl	8002770 <chprintf>
}
 8005e0e:	b045      	add	sp, #276	; 0x114
 8005e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memset(data,0,256);
 8005e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e18:	2100      	movs	r1, #0
 8005e1a:	a804      	add	r0, sp, #16
 8005e1c:	f002 ff3c 	bl	8008c98 <memset>
  address = (int32_t)strtol(argv[1], NULL, 0);
 8005e20:	2200      	movs	r2, #0
 8005e22:	4611      	mov	r1, r2
 8005e24:	6860      	ldr	r0, [r4, #4]
 8005e26:	f002 ff2b 	bl	8008c80 <strtol>
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 8005e2a:	2200      	movs	r2, #0
  address = (int32_t)strtol(argv[1], NULL, 0);
 8005e2c:	4605      	mov	r5, r0
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 8005e2e:	4611      	mov	r1, r2
 8005e30:	6820      	ldr	r0, [r4, #0]
  address = (int32_t)strtol(argv[1], NULL, 0);
 8005e32:	9501      	str	r5, [sp, #4]
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 8005e34:	f002 ff24 	bl	8008c80 <strtol>
  if (lcnt > 256){
 8005e38:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  lcnt = (int32_t)strtol(argv[0], NULL, 0);
 8005e3c:	4604      	mov	r4, r0
  if (lcnt > 256){
 8005e3e:	dc66      	bgt.n	8005f0e <cmd_br+0x11e>
  chprintf(chp, "Starting at: %08x\r\n", address);
 8005e40:	9d01      	ldr	r5, [sp, #4]
 8005e42:	4938      	ldr	r1, [pc, #224]	; (8005f24 <cmd_br+0x134>)
 8005e44:	462a      	mov	r2, r5
 8005e46:	4650      	mov	r0, sl
 8005e48:	f7fc fc92 	bl	8002770 <chprintf>
  read_block(address, lcnt, data, 0);
 8005e4c:	aa04      	add	r2, sp, #16
 8005e4e:	4621      	mov	r1, r4
 8005e50:	4628      	mov	r0, r5
 8005e52:	f7fc ff95 	bl	8002d80 <read_block.constprop.0>
  for (acnt = 0; acnt < lcnt; acnt ++){
 8005e56:	2c00      	cmp	r4, #0
 8005e58:	ddd9      	ble.n	8005e0e <cmd_br+0x1e>
    chprintf(chp, "%02x, ", d);
 8005e5a:	4933      	ldr	r1, [pc, #204]	; (8005f28 <cmd_br+0x138>)
    d=data[acnt];
 8005e5c:	f89d 2010 	ldrb.w	r2, [sp, #16]
    ascii[i++] = d;
 8005e60:	f88d 2008 	strb.w	r2, [sp, #8]
    chprintf(chp, "%02x, ", d);
 8005e64:	4650      	mov	r0, sl
 8005e66:	f10d 070f 	add.w	r7, sp, #15
 8005e6a:	468b      	mov	fp, r1
    ccnt++;
 8005e6c:	2601      	movs	r6, #1
    chprintf(chp, "%02x, ", d);
 8005e6e:	f7fc fc7f 	bl	8002770 <chprintf>
        else chprintf(chp, " ");
 8005e72:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8005f38 <cmd_br+0x148>
          chprintf(chp, "%c", ascii[j]);
 8005e76:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8005f3c <cmd_br+0x14c>
 8005e7a:	193b      	adds	r3, r7, r4
 8005e7c:	9300      	str	r3, [sp, #0]
    ascii[i++] = d;
 8005e7e:	4634      	mov	r4, r6
    chprintf(chp, "%02x, ", d);
 8005e80:	ad04      	add	r5, sp, #16
    if (ccnt % 32 == 0){
 8005e82:	06f3      	lsls	r3, r6, #27
 8005e84:	d012      	beq.n	8005eac <cmd_br+0xbc>
  for (acnt = 0; acnt < lcnt; acnt ++){
 8005e86:	9b00      	ldr	r3, [sp, #0]
 8005e88:	429d      	cmp	r5, r3
 8005e8a:	d0c0      	beq.n	8005e0e <cmd_br+0x1e>
    ascii[i++] = d;
 8005e8c:	ab02      	add	r3, sp, #8
    d=data[acnt];
 8005e8e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    ascii[i++] = d;
 8005e92:	551a      	strb	r2, [r3, r4]
    chprintf(chp, "%02x, ", d);
 8005e94:	4659      	mov	r1, fp
 8005e96:	4650      	mov	r0, sl
 8005e98:	f7fc fc6a 	bl	8002770 <chprintf>
    ccnt++;
 8005e9c:	1c73      	adds	r3, r6, #1
    if (ccnt % 8 == 0){
 8005e9e:	075a      	lsls	r2, r3, #29
    ccnt++;
 8005ea0:	b2de      	uxtb	r6, r3
    if (ccnt % 8 == 0){
 8005ea2:	d01a      	beq.n	8005eda <cmd_br+0xea>
    ascii[i++] = d;
 8005ea4:	3401      	adds	r4, #1
    if (ccnt % 32 == 0){
 8005ea6:	06f3      	lsls	r3, r6, #27
    ascii[i++] = d;
 8005ea8:	b2e4      	uxtb	r4, r4
    if (ccnt % 32 == 0){
 8005eaa:	d1ec      	bne.n	8005e86 <cmd_br+0x96>
      chprintf(chp, "Address now: %08x\r\n", address+acnt+1);
 8005eac:	ab04      	add	r3, sp, #16
 8005eae:	f1c3 0201 	rsb	r2, r3, #1
 8005eb2:	9b01      	ldr	r3, [sp, #4]
 8005eb4:	491d      	ldr	r1, [pc, #116]	; (8005f2c <cmd_br+0x13c>)
 8005eb6:	441a      	add	r2, r3
 8005eb8:	442a      	add	r2, r5
 8005eba:	4650      	mov	r0, sl
 8005ebc:	f7fc fc58 	bl	8002770 <chprintf>
  for (acnt = 0; acnt < lcnt; acnt ++){
 8005ec0:	9b00      	ldr	r3, [sp, #0]
 8005ec2:	429d      	cmp	r5, r3
 8005ec4:	d0a3      	beq.n	8005e0e <cmd_br+0x1e>
    ascii[i++] = d;
 8005ec6:	ab02      	add	r3, sp, #8
    d=data[acnt];
 8005ec8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    ascii[i++] = d;
 8005ecc:	551a      	strb	r2, [r3, r4]
    chprintf(chp, "%02x, ", d);
 8005ece:	4659      	mov	r1, fp
 8005ed0:	4650      	mov	r0, sl
 8005ed2:	f7fc fc4d 	bl	8002770 <chprintf>
    ccnt++;
 8005ed6:	2601      	movs	r6, #1
 8005ed8:	e7e4      	b.n	8005ea4 <cmd_br+0xb4>
 8005eda:	f10d 0407 	add.w	r4, sp, #7
 8005ede:	e003      	b.n	8005ee8 <cmd_br+0xf8>
          chprintf(chp, "%c", ascii[j]);
 8005ee0:	f7fc fc46 	bl	8002770 <chprintf>
      for (j = 0; j<8; j++){
 8005ee4:	42a7      	cmp	r7, r4
 8005ee6:	d00c      	beq.n	8005f02 <cmd_br+0x112>
        if ((ascii[j] > 0x1F) && (ascii[j] < 0x80)){
 8005ee8:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8005eec:	f1a2 0320 	sub.w	r3, r2, #32
 8005ef0:	2b5f      	cmp	r3, #95	; 0x5f
          chprintf(chp, "%c", ascii[j]);
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	4650      	mov	r0, sl
        if ((ascii[j] > 0x1F) && (ascii[j] < 0x80)){
 8005ef6:	d9f3      	bls.n	8005ee0 <cmd_br+0xf0>
        else chprintf(chp, " ");
 8005ef8:	4649      	mov	r1, r9
 8005efa:	f7fc fc39 	bl	8002770 <chprintf>
      for (j = 0; j<8; j++){
 8005efe:	42a7      	cmp	r7, r4
 8005f00:	d1f2      	bne.n	8005ee8 <cmd_br+0xf8>
      chprintf(chp, "\r\n");
 8005f02:	490b      	ldr	r1, [pc, #44]	; (8005f30 <cmd_br+0x140>)
 8005f04:	4650      	mov	r0, sl
 8005f06:	f7fc fc33 	bl	8002770 <chprintf>
      i = 0;
 8005f0a:	2400      	movs	r4, #0
 8005f0c:	e7b9      	b.n	8005e82 <cmd_br+0x92>
    chprintf(chp, "Only 256 bytes for now\r\n");
 8005f0e:	4909      	ldr	r1, [pc, #36]	; (8005f34 <cmd_br+0x144>)
 8005f10:	4650      	mov	r0, sl
 8005f12:	f7fc fc2d 	bl	8002770 <chprintf>
}
 8005f16:	b045      	add	sp, #276	; 0x114
 8005f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f1c:	080096dc 	.word	0x080096dc
 8005f20:	08009704 	.word	0x08009704
 8005f24:	08009720 	.word	0x08009720
 8005f28:	08009734 	.word	0x08009734
 8005f2c:	08009744 	.word	0x08009744
 8005f30:	0800952c 	.word	0x0800952c
 8005f34:	08009668 	.word	0x08009668
 8005f38:	08009740 	.word	0x08009740
 8005f3c:	0800973c 	.word	0x0800973c

08005f40 <usbInitEndpointI>:
                      const USBEndpointConfig *epcp) {
 8005f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (epcp->in_state != NULL) {
 8005f44:	6953      	ldr	r3, [r2, #20]
 8005f46:	eb00 0781 	add.w	r7, r0, r1, lsl #2
                      const USBEndpointConfig *epcp) {
 8005f4a:	460c      	mov	r4, r1
  usbp->epc[ep] = epcp;
 8005f4c:	60fa      	str	r2, [r7, #12]
  if (epcp->in_state != NULL) {
 8005f4e:	fa0f f881 	sxth.w	r8, r1
 8005f52:	b123      	cbz	r3, 8005f5e <usbInitEndpointI+0x1e>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8005f54:	2100      	movs	r1, #0
 8005f56:	6019      	str	r1, [r3, #0]
 8005f58:	6059      	str	r1, [r3, #4]
 8005f5a:	6099      	str	r1, [r3, #8]
 8005f5c:	60d9      	str	r1, [r3, #12]
  if (epcp->out_state != NULL) {
 8005f5e:	6993      	ldr	r3, [r2, #24]
 8005f60:	b123      	cbz	r3, 8005f6c <usbInitEndpointI+0x2c>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	605a      	str	r2, [r3, #4]
 8005f68:	609a      	str	r2, [r3, #8]
 8005f6a:	60da      	str	r2, [r3, #12]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8005f6c:	68fb      	ldr	r3, [r7, #12]
  stm32_otg_t *otgp = usbp->otg;
 8005f6e:	6d45      	ldr	r5, [r0, #84]	; 0x54
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8005f70:	681e      	ldr	r6, [r3, #0]
  if (usbp->epc[ep]->out_state != NULL) {
 8005f72:	f8d3 c018 	ldr.w	ip, [r3, #24]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8005f76:	f006 0603 	and.w	r6, r6, #3
 8005f7a:	1e72      	subs	r2, r6, #1
 8005f7c:	2a02      	cmp	r2, #2
 8005f7e:	bf98      	it	ls
 8005f80:	04b6      	lslls	r6, r6, #18
  otgp->oe[ep].DOEPTSIZ = 0;
 8005f82:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 8005f86:	f04f 0100 	mov.w	r1, #0
 8005f8a:	bf98      	it	ls
 8005f8c:	f106 5680 	addls.w	r6, r6, #268435456	; 0x10000000
 8005f90:	f8c2 1b10 	str.w	r1, [r2, #2832]	; 0xb10
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8005f94:	bf8c      	ite	hi
 8005f96:	4e45      	ldrhi	r6, [pc, #276]	; (80060ac <usbInitEndpointI+0x16c>)
 8005f98:	f506 4600 	addls.w	r6, r6, #32768	; 0x8000
  otgp->oe[ep].DOEPTSIZ = 0;
 8005f9c:	0161      	lsls	r1, r4, #5
  if (usbp->epc[ep]->out_state != NULL) {
 8005f9e:	f1bc 0f00 	cmp.w	ip, #0
 8005fa2:	d04b      	beq.n	800603c <usbInitEndpointI+0xfc>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 8005fa4:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8005fa8:	f104 0258 	add.w	r2, r4, #88	; 0x58
 8005fac:	0152      	lsls	r2, r2, #5
 8005fae:	ea4c 0c06 	orr.w	ip, ip, r6
 8005fb2:	f845 c002 	str.w	ip, [r5, r2]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8005fb6:	f104 0e10 	add.w	lr, r4, #16
 8005fba:	f8d5 c81c 	ldr.w	ip, [r5, #2076]	; 0x81c
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	fa02 f20e 	lsl.w	r2, r2, lr
 8005fc4:	ea42 020c 	orr.w	r2, r2, ip
 8005fc8:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
 8005fcc:	186a      	adds	r2, r5, r1
  if (usbp->epc[ep]->in_state != NULL) {
 8005fce:	6959      	ldr	r1, [r3, #20]
  otgp->ie[ep].DIEPTSIZ = 0;
 8005fd0:	f04f 0c00 	mov.w	ip, #0
 8005fd4:	f8c2 c910 	str.w	ip, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_state != NULL) {
 8005fd8:	2900      	cmp	r1, #0
 8005fda:	d044      	beq.n	8006066 <usbInitEndpointI+0x126>
    if (usbp->epc[ep]->in_multiplier > 1)
 8005fdc:	8b99      	ldrh	r1, [r3, #28]
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8005fde:	8a1a      	ldrh	r2, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 8005fe0:	2901      	cmp	r1, #1
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8005fe2:	ea4f 0392 	mov.w	r3, r2, lsr #2
  next = usbp->pmnext;
 8005fe6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
      fsize *= usbp->epc[ep]->in_multiplier;
 8005fe8:	bf88      	it	hi
 8005fea:	434b      	mulhi	r3, r1
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8005fec:	f104 013f 	add.w	r1, r4, #63	; 0x3f
  usbp->pmnext += size;
 8005ff0:	eb03 0c02 	add.w	ip, r3, r2
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8005ff4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8005ff8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8005ffc:	01a2      	lsls	r2, r4, #6
 8005ffe:	f042 0220 	orr.w	r2, r2, #32
  usbp->pmnext += size;
 8006002:	f8c0 c05c 	str.w	ip, [r0, #92]	; 0x5c
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8006006:	604b      	str	r3, [r1, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8006008:	612a      	str	r2, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800600a:	692b      	ldr	r3, [r5, #16]
 800600c:	069a      	lsls	r2, r3, #26
 800600e:	d4fc      	bmi.n	800600a <usbInitEndpointI+0xca>
  chSysPolledDelayX(cycles);
 8006010:	2012      	movs	r0, #18
 8006012:	f7fb f805 	bl	8001020 <chSysPolledDelayX>
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8a1b      	ldrh	r3, [r3, #16]
    otgp->ie[ep].DIEPCTL = ctl |
 800601a:	f104 0248 	add.w	r2, r4, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 800601e:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
    otgp->ie[ep].DIEPCTL = ctl |
 8006022:	0152      	lsls	r2, r2, #5
                           DIEPCTL_TXFNUM(ep) |
 8006024:	431e      	orrs	r6, r3
    otgp->ie[ep].DIEPCTL = ctl |
 8006026:	50ae      	str	r6, [r5, r2]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8006028:	2101      	movs	r1, #1
 800602a:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 800602e:	fa01 f404 	lsl.w	r4, r1, r4
 8006032:	431c      	orrs	r4, r3
 8006034:	f8c5 481c 	str.w	r4, [r5, #2076]	; 0x81c
}
 8006038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 800603c:	eb05 1248 	add.w	r2, r5, r8, lsl #5
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8006040:	f104 0910 	add.w	r9, r4, #16
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 8006044:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 8006048:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 800604c:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8006050:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8006054:	f04f 0c01 	mov.w	ip, #1
 8006058:	fa0c fc09 	lsl.w	ip, ip, r9
 800605c:	ea22 020c 	bic.w	r2, r2, ip
 8006060:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
 8006064:	e7b2      	b.n	8005fcc <usbInitEndpointI+0x8c>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8006066:	f104 023f 	add.w	r2, r4, #63	; 0x3f
 800606a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800606e:	01a3      	lsls	r3, r4, #6
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8006070:	490f      	ldr	r1, [pc, #60]	; (80060b0 <usbInitEndpointI+0x170>)
 8006072:	6051      	str	r1, [r2, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8006074:	f043 0320 	orr.w	r3, r3, #32
 8006078:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800607a:	692b      	ldr	r3, [r5, #16]
 800607c:	069b      	lsls	r3, r3, #26
 800607e:	d4fc      	bmi.n	800607a <usbInitEndpointI+0x13a>
 8006080:	eb05 1848 	add.w	r8, r5, r8, lsl #5
 8006084:	2012      	movs	r0, #18
 8006086:	f7fa ffcb 	bl	8001020 <chSysPolledDelayX>
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 800608a:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 800608e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006092:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 8006096:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 800609a:	2101      	movs	r1, #1
 800609c:	fa01 f404 	lsl.w	r4, r1, r4
 80060a0:	ea23 0404 	bic.w	r4, r3, r4
 80060a4:	f8c5 481c 	str.w	r4, [r5, #2076]	; 0x81c
 80060a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ac:	10008000 	.word	0x10008000
 80060b0:	02000400 	.word	0x02000400
	...

080060c0 <usb_event>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
 80060c0:	b530      	push	{r4, r5, lr}
 80060c2:	b083      	sub	sp, #12
 80060c4:	2905      	cmp	r1, #5
 80060c6:	d80f      	bhi.n	80060e8 <usb_event+0x28>
 80060c8:	e8df f001 	tbb	[pc, r1]
 80060cc:	10030e10 	.word	0x10030e10
 80060d0:	2910      	.short	0x2910
 80060d2:	2320      	movs	r3, #32
 80060d4:	f383 8811 	msr	BASEPRI, r3
    if (usbp->state == USB_ACTIVE) {
 80060d8:	7803      	ldrb	r3, [r0, #0]
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d02f      	beq.n	800613e <usb_event+0x7e>
    else if (usbp->state == USB_SELECTED) {
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d059      	beq.n	8006196 <usb_event+0xd6>
 80060e2:	2300      	movs	r3, #0
 80060e4:	f383 8811 	msr	BASEPRI, r3
}
 80060e8:	b003      	add	sp, #12
 80060ea:	bd30      	pop	{r4, r5, pc}
 80060ec:	2320      	movs	r3, #32
 80060ee:	f383 8811 	msr	BASEPRI, r3
  if (bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 80060f2:	4c2a      	ldr	r4, [pc, #168]	; (800619c <usb_event+0xdc>)
 80060f4:	7d23      	ldrb	r3, [r4, #20]
 80060f6:	b11b      	cbz	r3, 8006100 <usb_event+0x40>
 80060f8:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1f0      	bne.n	80060e2 <usb_event+0x22>
  chEvtBroadcastFlagsI(esp, flags);
 8006100:	2102      	movs	r1, #2
 8006102:	4827      	ldr	r0, [pc, #156]	; (80061a0 <usb_event+0xe0>)
 8006104:	f7fa ff5c 	bl	8000fc0 <chEvtBroadcastFlagsI>
  bqSuspendI(&sdup->ibqueue);
 8006108:	2501      	movs	r5, #1
  chThdDequeueAllI(tqp, msg);
 800610a:	4826      	ldr	r0, [pc, #152]	; (80061a4 <usb_event+0xe4>)
 800610c:	7525      	strb	r5, [r4, #20]
 800610e:	f7fa ff2f 	bl	8000f70 <chThdDequeueAllI.constprop.0>
 8006112:	4825      	ldr	r0, [pc, #148]	; (80061a8 <usb_event+0xe8>)
  bqSuspendI(&sdup->obqueue);
 8006114:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8006118:	f7fa ff2a 	bl	8000f70 <chThdDequeueAllI.constprop.0>
 800611c:	e7e1      	b.n	80060e2 <usb_event+0x22>
 800611e:	2320      	movs	r3, #32
 8006120:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8006124:	4c1d      	ldr	r4, [pc, #116]	; (800619c <usb_event+0xdc>)
 8006126:	2101      	movs	r1, #1
 8006128:	1d20      	adds	r0, r4, #4
 800612a:	f7fa ff49 	bl	8000fc0 <chEvtBroadcastFlagsI>
  bqResumeX(&sdup->ibqueue);
 800612e:	2300      	movs	r3, #0
 8006130:	7523      	strb	r3, [r4, #20]
  bqResumeX(&sdup->obqueue);
 8006132:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	b003      	add	sp, #12
 800613c:	bd30      	pop	{r4, r5, pc}
  ibqp->bcounter  = 0;
 800613e:	4c17      	ldr	r4, [pc, #92]	; (800619c <usb_event+0xdc>)
      usbInitEndpointI(usbp, USB_INTERRUPT_REQUEST_EP_A, &ep1config);
 8006140:	4a1a      	ldr	r2, [pc, #104]	; (80061ac <usb_event+0xec>)
 8006142:	9001      	str	r0, [sp, #4]
 8006144:	2101      	movs	r1, #1
 8006146:	f7ff fefb 	bl	8005f40 <usbInitEndpointI>
      usbInitEndpointI(usbp, USB_DATA_REQUEST_EP_A, &ep2config);
 800614a:	2102      	movs	r1, #2
 800614c:	9801      	ldr	r0, [sp, #4]
 800614e:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <usb_event+0xf0>)
 8006150:	f7ff fef6 	bl	8005f40 <usbInitEndpointI>
 8006154:	2500      	movs	r5, #0
  ibqp->brdptr    = ibqp->buffers;
 8006156:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006158:	6223      	str	r3, [r4, #32]
  chThdDequeueAllI(tqp, msg);
 800615a:	f104 000c 	add.w	r0, r4, #12
  ibqp->bwrptr    = ibqp->buffers;
 800615e:	61e3      	str	r3, [r4, #28]
  ibqp->top       = NULL;
 8006160:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  ibqp->bcounter  = 0;
 8006164:	61a5      	str	r5, [r4, #24]
 8006166:	f7fa ff03 	bl	8000f70 <chThdDequeueAllI.constprop.0>
  obqp->brdptr    = obqp->buffers;
 800616a:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 800616e:	f104 0044 	add.w	r0, r4, #68	; 0x44
  obqp->bwrptr    = obqp->buffers;
 8006172:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  obqp->bcounter  = bqSizeX(obqp);
 8006176:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->top       = NULL;
 8006178:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  bqResumeX(&sdup->ibqueue);
 800617c:	7525      	strb	r5, [r4, #20]
 800617e:	f7fa fef7 	bl	8000f70 <chThdDequeueAllI.constprop.0>
  chEvtBroadcastFlagsI(esp, flags);
 8006182:	1d20      	adds	r0, r4, #4
 8006184:	2101      	movs	r1, #1
  bqResumeX(&sdup->obqueue);
 8006186:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 800618a:	f7fa ff19 	bl	8000fc0 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 800618e:	4620      	mov	r0, r4
 8006190:	f7fb fb56 	bl	8001840 <sdu_start_receive>
 8006194:	e7a5      	b.n	80060e2 <usb_event+0x22>
      usbDisableEndpointsI(usbp);
 8006196:	f7fb fb03 	bl	80017a0 <usbDisableEndpointsI>
 800619a:	e7a2      	b.n	80060e2 <usb_event+0x22>
 800619c:	200013a8 	.word	0x200013a8
 80061a0:	200013ac 	.word	0x200013ac
 80061a4:	200013b4 	.word	0x200013b4
 80061a8:	200013ec 	.word	0x200013ec
 80061ac:	0800998c 	.word	0x0800998c
 80061b0:	080099b0 	.word	0x080099b0
	...

080061c0 <get_history>:
    shp->sh_end -= shp->sh_size;
  *(shp->sh_buffer + shp->sh_end) = 0;
  shp->sh_cur = 0;
}

static int get_history(ShellHistory *shp, char *line, int dir) {
 80061c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (shp == NULL)
    return -1;

  /* Count the number of lines saved in the buffer */
  int idx = shp->sh_beg;
  while (idx != shp->sh_end) {
 80061c4:	e9d0 4602 	ldrd	r4, r6, [r0, #8]
 80061c8:	42b4      	cmp	r4, r6
static int get_history(ShellHistory *shp, char *line, int dir) {
 80061ca:	4607      	mov	r7, r0
 80061cc:	4688      	mov	r8, r1
  while (idx != shp->sh_end) {
 80061ce:	d053      	beq.n	8006278 <get_history+0xb8>
    idx += *(shp->sh_buffer + idx) + 1;
    if (idx >= shp->sh_size)
 80061d0:	e9d0 c000 	ldrd	ip, r0, [r0]
 80061d4:	4623      	mov	r3, r4
  int count=0;
 80061d6:	2100      	movs	r1, #0
    idx += *(shp->sh_buffer + idx) + 1;
 80061d8:	f81c 5003 	ldrb.w	r5, [ip, r3]
 80061dc:	3501      	adds	r5, #1
 80061de:	442b      	add	r3, r5
    if (idx >= shp->sh_size)
 80061e0:	4298      	cmp	r0, r3
      idx -= shp->sh_size;
 80061e2:	bfd8      	it	le
 80061e4:	1a1b      	suble	r3, r3, r0
  while (idx != shp->sh_end) {
 80061e6:	42b3      	cmp	r3, r6
    count++;
 80061e8:	f101 0101 	add.w	r1, r1, #1
  while (idx != shp->sh_end) {
 80061ec:	d1f4      	bne.n	80061d8 <get_history+0x18>
  }

  if (dir == SHELL_HIST_DIR_FW) {
 80061ee:	2a01      	cmp	r2, #1
    if (shp->sh_cur > 0)
 80061f0:	693d      	ldr	r5, [r7, #16]
  if (dir == SHELL_HIST_DIR_FW) {
 80061f2:	d03c      	beq.n	800626e <get_history+0xae>
      shp->sh_cur -= 2;
    else
      return 0;
  }

  if (count >= shp->sh_cur) {
 80061f4:	42a9      	cmp	r1, r5
 80061f6:	db53      	blt.n	80062a0 <get_history+0xe0>
    idx = shp->sh_beg;
    int i = 0;
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 80061f8:	42b4      	cmp	r4, r6
 80061fa:	d054      	beq.n	80062a6 <get_history+0xe6>
 80061fc:	1e4b      	subs	r3, r1, #1
 80061fe:	429d      	cmp	r5, r3
 8006200:	d054      	beq.n	80062ac <get_history+0xec>
      idx += *(shp->sh_buffer + idx) + 1;
      if (idx >= shp->sh_size)
 8006202:	e9d7 ec00 	ldrd	lr, ip, [r7]
    int i = 0;
 8006206:	2000      	movs	r0, #0
 8006208:	e001      	b.n	800620e <get_history+0x4e>
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 800620a:	429d      	cmp	r5, r3
 800620c:	d017      	beq.n	800623e <get_history+0x7e>
      idx += *(shp->sh_buffer + idx) + 1;
 800620e:	f81e 3004 	ldrb.w	r3, [lr, r4]
 8006212:	3301      	adds	r3, #1
 8006214:	441c      	add	r4, r3
      if (idx >= shp->sh_size)
 8006216:	45a4      	cmp	ip, r4
        idx -= shp->sh_size;
      i++;
 8006218:	f100 0001 	add.w	r0, r0, #1
        idx -= shp->sh_size;
 800621c:	bfd8      	it	le
 800621e:	eba4 040c 	suble.w	r4, r4, ip
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8006222:	43c3      	mvns	r3, r0
 8006224:	42b4      	cmp	r4, r6
 8006226:	440b      	add	r3, r1
 8006228:	d1ef      	bne.n	800620a <get_history+0x4a>
    }

    int length = *(shp->sh_buffer + idx);
 800622a:	f81e 4006 	ldrb.w	r4, [lr, r6]

    if (length > 0) {
 800622e:	b95c      	cbnz	r4, 8006248 <get_history+0x88>
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
      }
      return length;
    }
    else if (dir == SHELL_HIST_DIR_FW) {
 8006230:	2a01      	cmp	r2, #1
 8006232:	d135      	bne.n	80062a0 <get_history+0xe0>
      shp->sh_cur++;
 8006234:	3501      	adds	r5, #1
 8006236:	613d      	str	r5, [r7, #16]
      return 0;
    }
  }
  return -1;
}
 8006238:	4620      	mov	r0, r4
 800623a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 800623e:	4626      	mov	r6, r4
    int length = *(shp->sh_buffer + idx);
 8006240:	f81e 4006 	ldrb.w	r4, [lr, r6]
    if (length > 0) {
 8006244:	2c00      	cmp	r4, #0
 8006246:	d0f3      	beq.n	8006230 <get_history+0x70>
      shp->sh_cur++;
 8006248:	3501      	adds	r5, #1
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 800624a:	2240      	movs	r2, #64	; 0x40
      shp->sh_cur++;
 800624c:	613d      	str	r5, [r7, #16]
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 800624e:	2100      	movs	r1, #0
 8006250:	4640      	mov	r0, r8
 8006252:	f002 fd21 	bl	8008c98 <memset>
      if ((idx + length) < shp->sh_size) {
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	19a2      	adds	r2, r4, r6
 800625a:	429a      	cmp	r2, r3
 800625c:	da10      	bge.n	8006280 <get_history+0xc0>
        memcpy(line, (shp->sh_buffer + idx + 1), length);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	3601      	adds	r6, #1
 8006262:	4431      	add	r1, r6
 8006264:	4640      	mov	r0, r8
 8006266:	4622      	mov	r2, r4
 8006268:	f7fa f850 	bl	800030c <memcpy>
 800626c:	e7e4      	b.n	8006238 <get_history+0x78>
    if (shp->sh_cur > 0)
 800626e:	2d00      	cmp	r5, #0
 8006270:	dd04      	ble.n	800627c <get_history+0xbc>
      shp->sh_cur -= 2;
 8006272:	3d02      	subs	r5, #2
 8006274:	613d      	str	r5, [r7, #16]
 8006276:	e7bd      	b.n	80061f4 <get_history+0x34>
  int count=0;
 8006278:	2100      	movs	r1, #0
 800627a:	e7b8      	b.n	80061ee <get_history+0x2e>
      return 0;
 800627c:	2400      	movs	r4, #0
 800627e:	e7db      	b.n	8006238 <get_history+0x78>
        int part_len = shp->sh_size - idx - 1;
 8006280:	1b9b      	subs	r3, r3, r6
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 8006282:	6839      	ldr	r1, [r7, #0]
        int part_len = shp->sh_size - idx - 1;
 8006284:	1e5d      	subs	r5, r3, #1
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 8006286:	3601      	adds	r6, #1
 8006288:	4431      	add	r1, r6
 800628a:	462a      	mov	r2, r5
 800628c:	4640      	mov	r0, r8
 800628e:	f7fa f83d 	bl	800030c <memcpy>
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	eb08 0005 	add.w	r0, r8, r5
 8006298:	1b62      	subs	r2, r4, r5
 800629a:	f7fa f837 	bl	800030c <memcpy>
 800629e:	e7cb      	b.n	8006238 <get_history+0x78>
  return -1;
 80062a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80062a4:	e7c8      	b.n	8006238 <get_history+0x78>
 80062a6:	f8d7 e000 	ldr.w	lr, [r7]
 80062aa:	e7be      	b.n	800622a <get_history+0x6a>
 80062ac:	f8d7 e000 	ldr.w	lr, [r7]
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 80062b0:	4626      	mov	r6, r4
 80062b2:	e7ba      	b.n	800622a <get_history+0x6a>
	...

080062c0 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80062c0:	b570      	push	{r4, r5, r6, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 80062c2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80062c6:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 80062c8:	b113      	cbz	r3, 80062d0 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 80062ca:	2300      	movs	r3, #0
 80062cc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 80062d0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  if ((usbp->config->requests_hook_cb == NULL) ||
 80062d4:	6862      	ldr	r2, [r4, #4]
 80062d6:	68cb      	ldr	r3, [r1, #12]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	6819      	ldr	r1, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	64a3      	str	r3, [r4, #72]	; 0x48
 80062e0:	6461      	str	r1, [r4, #68]	; 0x44
 80062e2:	6893      	ldr	r3, [r2, #8]
 80062e4:	b36b      	cbz	r3, 8006342 <_usb_ep0setup+0x82>
      !(usbp->config->requests_hook_cb(usbp))) {
 80062e6:	4620      	mov	r0, r4
 80062e8:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 80062ea:	b350      	cbz	r0, 8006342 <_usb_ep0setup+0x82>
 80062ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80062ee:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  hw |= (uint16_t)*p << 8U;
 80062f2:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 80062f6:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
  max = (size_t)get_hword(&usbp->setup[6]);
 80062fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if (usbp->ep0n > max) {
 80062fe:	429a      	cmp	r2, r3
    usbp->ep0n = max;
 8006300:	bf3c      	itt	cc
 8006302:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 8006304:	4613      	movcc	r3, r2
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8006306:	0602      	lsls	r2, r0, #24
 8006308:	f100 80df 	bmi.w	80064ca <_usb_ep0setup+0x20a>
    if (usbp->ep0n != 0U) {
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 808f 	beq.w	8006430 <_usb_ep0setup+0x170>
      usbp->ep0state = USB_EP0_OUT_RX;
 8006312:	2315      	movs	r3, #21
 8006314:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8006318:	2320      	movs	r3, #32
 800631a:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 800631e:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006320:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8006322:	699b      	ldr	r3, [r3, #24]
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8006324:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006328:	f042 0201 	orr.w	r2, r2, #1
  osp->rxcnt  = 0;
 800632c:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800632e:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8006330:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8006332:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_out(usbp, ep);
 8006336:	4629      	mov	r1, r5
 8006338:	f7fb f862 	bl	8001400 <usb_lld_start_out>
 800633c:	f385 8811 	msr	BASEPRI, r5
}
 8006340:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8006342:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8006346:	f010 0660 	ands.w	r6, r0, #96	; 0x60
 800634a:	d11c      	bne.n	8006386 <_usb_ep0setup+0xc6>
           ((uint32_t)usbp->setup[1] << 8U))) {
 800634c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006350:	f000 037f 	and.w	r3, r0, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8006354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006358:	f240 3202 	movw	r2, #770	; 0x302
 800635c:	4293      	cmp	r3, r2
 800635e:	f000 8113 	beq.w	8006588 <_usb_ep0setup+0x2c8>
 8006362:	d844      	bhi.n	80063ee <_usb_ep0setup+0x12e>
 8006364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006368:	f000 8125 	beq.w	80065b6 <_usb_ep0setup+0x2f6>
 800636c:	d922      	bls.n	80063b4 <_usb_ep0setup+0xf4>
 800636e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8006372:	f000 812f 	beq.w	80065d4 <_usb_ep0setup+0x314>
 8006376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800637a:	d104      	bne.n	8006386 <_usb_ep0setup+0xc6>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800637c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006380:	2b01      	cmp	r3, #1
 8006382:	f000 80d2 	beq.w	800652a <_usb_ep0setup+0x26a>
 8006386:	6d62      	ldr	r2, [r4, #84]	; 0x54
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8006388:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800638c:	6861      	ldr	r1, [r4, #4]
 800638e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006392:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8006396:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800639a:	680d      	ldr	r5, [r1, #0]
 800639c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063a0:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 80063a4:	b115      	cbz	r5, 80063ac <_usb_ep0setup+0xec>
 80063a6:	2106      	movs	r1, #6
 80063a8:	4620      	mov	r0, r4
 80063aa:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 80063ac:	2306      	movs	r3, #6
 80063ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d060      	beq.n	800647a <_usb_ep0setup+0x1ba>
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d150      	bne.n	800645e <_usb_ep0setup+0x19e>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80063bc:	f994 1048 	ldrsb.w	r1, [r4, #72]	; 0x48
 80063c0:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80063c4:	2900      	cmp	r1, #0
  ctl = usbp->otg->ie[ep].DIEPCTL;
 80063c6:	f002 010f 	and.w	r1, r2, #15
 80063ca:	bfb4      	ite	lt
 80063cc:	3148      	addlt	r1, #72	; 0x48
  ctl = usbp->otg->oe[ep].DOEPCTL;
 80063ce:	3158      	addge	r1, #88	; 0x58
 80063d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80063d2:	0149      	lsls	r1, r1, #5
 80063d4:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 80063d6:	040d      	lsls	r5, r1, #16
 80063d8:	d5d6      	bpl.n	8006388 <_usb_ep0setup+0xc8>
  if (ctl & DOEPCTL_STALL)
 80063da:	0289      	lsls	r1, r1, #10
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 80063dc:	bf4c      	ite	mi
 80063de:	4a9c      	ldrmi	r2, [pc, #624]	; (8006650 <_usb_ep0setup+0x390>)
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 80063e0:	4a9c      	ldrpl	r2, [pc, #624]	; (8006654 <_usb_ep0setup+0x394>)
 80063e2:	63a2      	str	r2, [r4, #56]	; 0x38
 80063e4:	2102      	movs	r1, #2
 80063e6:	2200      	movs	r2, #0
 80063e8:	e9c4 120f 	strd	r1, r2, [r4, #60]	; 0x3c
        return true;
 80063ec:	e781      	b.n	80062f2 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80063ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063f2:	f000 80c2 	beq.w	800657a <_usb_ep0setup+0x2ba>
 80063f6:	d947      	bls.n	8006488 <_usb_ep0setup+0x1c8>
 80063f8:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80063fc:	d139      	bne.n	8006472 <_usb_ep0setup+0x1b2>
      if (usbp->state == USB_ACTIVE) {
 80063fe:	7823      	ldrb	r3, [r4, #0]
 8006400:	2b04      	cmp	r3, #4
 8006402:	f000 809c 	beq.w	800653e <_usb_ep0setup+0x27e>
      if (usbp->setup[2] != 0U) {
 8006406:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800640a:	b14b      	cbz	r3, 8006420 <_usb_ep0setup+0x160>
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800640c:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 800640e:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
        usbp->state = USB_ACTIVE;
 8006412:	2104      	movs	r1, #4
 8006414:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8006416:	6813      	ldr	r3, [r2, #0]
 8006418:	b113      	cbz	r3, 8006420 <_usb_ep0setup+0x160>
 800641a:	2102      	movs	r1, #2
 800641c:	4620      	mov	r0, r4
 800641e:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8006420:	2300      	movs	r3, #0
 8006422:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8006426:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800642a:	6423      	str	r3, [r4, #64]	; 0x40
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800642c:	0603      	lsls	r3, r0, #24
 800642e:	d465      	bmi.n	80064fc <_usb_ep0setup+0x23c>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8006430:	230b      	movs	r3, #11
 8006432:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8006436:	2320      	movs	r3, #32
 8006438:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 800643c:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800643e:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8006440:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 8006442:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006444:	f042 0201 	orr.w	r2, r2, #1
 8006448:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800644a:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 800644c:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8006450:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 8006452:	4629      	mov	r1, r5
 8006454:	f7fa ff3c 	bl	80012d0 <usb_lld_start_in>
 8006458:	f385 8811 	msr	BASEPRI, r5
}
 800645c:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800645e:	2b00      	cmp	r3, #0
 8006460:	d191      	bne.n	8006386 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8006462:	2202      	movs	r2, #2
 8006464:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8006468:	6423      	str	r3, [r4, #64]	; 0x40
 800646a:	e9c4 120e 	strd	r1, r2, [r4, #56]	; 0x38
 800646e:	4613      	mov	r3, r2
 8006470:	e73f      	b.n	80062f2 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006472:	f640 4202 	movw	r2, #3074	; 0xc02
 8006476:	4293      	cmp	r3, r2
 8006478:	d185      	bne.n	8006386 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800647a:	4b77      	ldr	r3, [pc, #476]	; (8006658 <_usb_ep0setup+0x398>)
 800647c:	63a3      	str	r3, [r4, #56]	; 0x38
 800647e:	2200      	movs	r2, #0
 8006480:	2302      	movs	r3, #2
 8006482:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
    return true;
 8006486:	e734      	b.n	80062f2 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006488:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800648c:	d06b      	beq.n	8006566 <_usb_ep0setup+0x2a6>
 800648e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8006492:	2b01      	cmp	r3, #1
 8006494:	f63f af77 	bhi.w	8006386 <_usb_ep0setup+0xc6>
  hw |= (uint16_t)*p << 8U;
 8006498:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800649c:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 800649e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80064a2:	684d      	ldr	r5, [r1, #4]
 80064a4:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 80064a8:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 80064ac:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80064b0:	4620      	mov	r0, r4
 80064b2:	47a8      	blx	r5
    if (dp == NULL) {
 80064b4:	2800      	cmp	r0, #0
 80064b6:	f43f af66 	beq.w	8006386 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 80064ba:	e9d0 3200 	ldrd	r3, r2, [r0]
 80064be:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80064c2:	6426      	str	r6, [r4, #64]	; 0x40
 80064c4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    return true;
 80064c8:	e713      	b.n	80062f2 <_usb_ep0setup+0x32>
    if (usbp->ep0n != 0U) {
 80064ca:	b1bb      	cbz	r3, 80064fc <_usb_ep0setup+0x23c>
      usbp->ep0state = USB_EP0_IN_TX;
 80064cc:	2309      	movs	r3, #9
 80064ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80064d2:	2320      	movs	r3, #32
 80064d4:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 80064d8:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80064da:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 80064dc:	695b      	ldr	r3, [r3, #20]
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 80064de:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80064e2:	f042 0201 	orr.w	r2, r2, #1
  isp->txcnt  = 0;
 80064e6:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80064e8:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 80064ea:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 80064ec:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_in(usbp, ep);
 80064f0:	4629      	mov	r1, r5
 80064f2:	f7fa feed 	bl	80012d0 <usb_lld_start_in>
 80064f6:	f385 8811 	msr	BASEPRI, r5
}
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 80064fc:	2314      	movs	r3, #20
 80064fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8006502:	2320      	movs	r3, #32
 8006504:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8006508:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800650a:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 800650c:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 800650e:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006510:	f042 0201 	orr.w	r2, r2, #1
 8006514:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8006516:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8006518:	e9c3 5500 	strd	r5, r5, [r3]
  osp->rxbuf  = buf;
 800651c:	609d      	str	r5, [r3, #8]
  usb_lld_start_out(usbp, ep);
 800651e:	4629      	mov	r1, r5
 8006520:	f7fa ff6e 	bl	8001400 <usb_lld_start_out>
 8006524:	f385 8811 	msr	BASEPRI, r5
}
 8006528:	bd70      	pop	{r4, r5, r6, pc}
      usbp->status |= 2U;
 800652a:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800652e:	63a6      	str	r6, [r4, #56]	; 0x38
      usbp->status |= 2U;
 8006530:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006534:	e9c4 660f 	strd	r6, r6, [r4, #60]	; 0x3c
      usbp->status |= 2U;
 8006538:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      return true;
 800653c:	e776      	b.n	800642c <_usb_ep0setup+0x16c>
 800653e:	2320      	movs	r3, #32
 8006540:	f383 8811 	msr	BASEPRI, r3
        usbDisableEndpointsI(usbp);
 8006544:	4620      	mov	r0, r4
 8006546:	f7fb f92b 	bl	80017a0 <usbDisableEndpointsI>
 800654a:	f386 8811 	msr	BASEPRI, r6
        usbp->state = USB_SELECTED;
 800654e:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8006550:	6863      	ldr	r3, [r4, #4]
        usbp->configuration = 0U;
 8006552:	f884 604f 	strb.w	r6, [r4, #79]	; 0x4f
        usbp->state = USB_SELECTED;
 8006556:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	f43f af53 	beq.w	8006406 <_usb_ep0setup+0x146>
 8006560:	4620      	mov	r0, r4
 8006562:	4798      	blx	r3
 8006564:	e74f      	b.n	8006406 <_usb_ep0setup+0x146>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 8006566:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800656a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800656e:	d048      	beq.n	8006602 <_usb_ep0setup+0x342>
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8006570:	2300      	movs	r3, #0
 8006572:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8006576:	6423      	str	r3, [r4, #64]	; 0x40
    return true;
 8006578:	e758      	b.n	800642c <_usb_ep0setup+0x16c>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800657a:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 800657e:	2301      	movs	r3, #1
 8006580:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 8006584:	6426      	str	r6, [r4, #64]	; 0x40
 8006586:	e6b4      	b.n	80062f2 <_usb_ep0setup+0x32>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8006588:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800658c:	2b00      	cmp	r3, #0
 800658e:	f47f aefa 	bne.w	8006386 <_usb_ep0setup+0xc6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8006592:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8006596:	f013 020f 	ands.w	r2, r3, #15
 800659a:	d0e9      	beq.n	8006570 <_usb_ep0setup+0x2b0>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800659c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80065a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80065a2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80065a6:	d144      	bne.n	8006632 <_usb_ep0setup+0x372>
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 80065a8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80065ac:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80065b0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80065b4:	e7dc      	b.n	8006570 <_usb_ep0setup+0x2b0>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80065b6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	f47f aee3 	bne.w	8006386 <_usb_ep0setup+0xc6>
      usbp->status &= ~2U;
 80065c0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80065c4:	63a6      	str	r6, [r4, #56]	; 0x38
      usbp->status &= ~2U;
 80065c6:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80065ca:	e9c4 660f 	strd	r6, r6, [r4, #60]	; 0x3c
      usbp->status &= ~2U;
 80065ce:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      return true;
 80065d2:	e72b      	b.n	800642c <_usb_ep0setup+0x16c>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80065d4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f47f aed4 	bne.w	8006386 <_usb_ep0setup+0xc6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80065de:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80065e2:	f013 020f 	ands.w	r2, r3, #15
 80065e6:	d0c3      	beq.n	8006570 <_usb_ep0setup+0x2b0>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80065e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80065ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80065ee:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80065f2:	d125      	bne.n	8006640 <_usb_ep0setup+0x380>
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 80065f4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80065f8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80065fc:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8006600:	e7b6      	b.n	8006570 <_usb_ep0setup+0x2b0>
  usbp->address = usbp->setup[2];
 8006602:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
  stm32_otg_t *otgp = usbp->otg;
 8006606:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006608:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 800660c:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8006610:	6865      	ldr	r5, [r4, #4]
 8006612:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006616:	682d      	ldr	r5, [r5, #0]
 8006618:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800661c:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8006620:	b125      	cbz	r5, 800662c <_usb_ep0setup+0x36c>
 8006622:	4620      	mov	r0, r4
 8006624:	2101      	movs	r1, #1
 8006626:	47a8      	blx	r5
 8006628:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  usbp->state = USB_SELECTED;
 800662c:	2303      	movs	r3, #3
 800662e:	7023      	strb	r3, [r4, #0]
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8006630:	e79e      	b.n	8006570 <_usb_ep0setup+0x2b0>
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8006632:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8006636:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800663a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800663e:	e797      	b.n	8006570 <_usb_ep0setup+0x2b0>
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8006640:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8006644:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006648:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800664c:	e790      	b.n	8006570 <_usb_ep0setup+0x2b0>
 800664e:	bf00      	nop
 8006650:	080099f0 	.word	0x080099f0
 8006654:	08009908 	.word	0x08009908
 8006658:	08009c04 	.word	0x08009c04
 800665c:	00000000 	.word	0x00000000

08006660 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8006660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006664:	b085      	sub	sp, #20
 8006666:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 800666a:	69c7      	ldr	r7, [r0, #28]
 800666c:	f04f 0920 	mov.w	r9, #32
 8006670:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8006674:	b3a2      	cbz	r2, 80066e0 <oqWriteTimeout+0x80>
 8006676:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800667a:	4604      	mov	r4, r0
 800667c:	460e      	mov	r6, r1
 800667e:	f04f 0a00 	mov.w	sl, #0
  if (n > oqGetEmptyI(oqp)) {
 8006682:	68a2      	ldr	r2, [r4, #8]
 8006684:	4593      	cmp	fp, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8006686:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 800668a:	bf8c      	ite	hi
 800668c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 800668e:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8006690:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8006694:	45a8      	cmp	r8, r5
 8006696:	d844      	bhi.n	8006722 <oqWriteTimeout+0xc2>
  else if (n > s1) {
 8006698:	d229      	bcs.n	80066ee <oqWriteTimeout+0x8e>
    s2 = n - s1;
 800669a:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 800669e:	4642      	mov	r2, r8
 80066a0:	4631      	mov	r1, r6
    s2 = n - s1;
 80066a2:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80066a4:	f7f9 fe32 	bl	800030c <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80066a8:	eb06 0108 	add.w	r1, r6, r8
 80066ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80066b0:	68e0      	ldr	r0, [r4, #12]
 80066b2:	4642      	mov	r2, r8
 80066b4:	f7f9 fe2a 	bl	800030c <memcpy>
  oqp->q_counter -= n;
 80066b8:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 80066ba:	68e1      	ldr	r1, [r4, #12]
 80066bc:	4643      	mov	r3, r8
 80066be:	18cb      	adds	r3, r1, r3
  oqp->q_counter -= n;
 80066c0:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 80066c2:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 80066c4:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80066c6:	b10f      	cbz	r7, 80066cc <oqWriteTimeout+0x6c>
        nfy(oqp);
 80066c8:	4620      	mov	r0, r4
 80066ca:	47b8      	blx	r7
 80066cc:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80066d0:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80066d4:	442e      	add	r6, r5
 80066d6:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80066da:	f1bb 0f00 	cmp.w	fp, #0
 80066de:	d1d0      	bne.n	8006682 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 80066e0:	9803      	ldr	r0, [sp, #12]
 80066e2:	2300      	movs	r3, #0
 80066e4:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 80066e8:	b005      	add	sp, #20
 80066ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80066ee:	462a      	mov	r2, r5
 80066f0:	4631      	mov	r1, r6
 80066f2:	f7f9 fe0b 	bl	800030c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80066f6:	68e2      	ldr	r2, [r4, #12]
 80066f8:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 80066fa:	68a2      	ldr	r2, [r4, #8]
 80066fc:	1b52      	subs	r2, r2, r5
 80066fe:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8006700:	2d00      	cmp	r5, #0
 8006702:	d1e0      	bne.n	80066c6 <oqWriteTimeout+0x66>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8006704:	9902      	ldr	r1, [sp, #8]
 8006706:	4620      	mov	r0, r4
 8006708:	f7fb fab2 	bl	8001c70 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800670c:	2800      	cmp	r0, #0
 800670e:	d0b8      	beq.n	8006682 <oqWriteTimeout+0x22>
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	eba3 000b 	sub.w	r0, r3, fp
 8006716:	2300      	movs	r3, #0
 8006718:	f383 8811 	msr	BASEPRI, r3
}
 800671c:	b005      	add	sp, #20
 800671e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8006722:	462a      	mov	r2, r5
 8006724:	4631      	mov	r1, r6
 8006726:	f7f9 fdf1 	bl	800030c <memcpy>
    oqp->q_wrptr += n;
 800672a:	6962      	ldr	r2, [r4, #20]
 800672c:	442a      	add	r2, r5
 800672e:	6162      	str	r2, [r4, #20]
 8006730:	e7e3      	b.n	80066fa <oqWriteTimeout+0x9a>
 8006732:	bf00      	nop
	...

08006740 <_writet.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8006740:	3030      	adds	r0, #48	; 0x30
 8006742:	f7ff bf8d 	b.w	8006660 <oqWriteTimeout>
 8006746:	bf00      	nop
	...

08006750 <_write.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8006750:	3030      	adds	r0, #48	; 0x30
 8006752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006756:	f7ff bf83 	b.w	8006660 <oqWriteTimeout>
 800675a:	bf00      	nop
 800675c:	0000      	movs	r0, r0
	...

08006760 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8006760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006764:	b085      	sub	sp, #20
 8006766:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 800676a:	69c7      	ldr	r7, [r0, #28]
 800676c:	f04f 0920 	mov.w	r9, #32
 8006770:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8006774:	2a00      	cmp	r2, #0
 8006776:	d034      	beq.n	80067e2 <iqReadTimeout+0x82>
 8006778:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800677c:	4604      	mov	r4, r0
 800677e:	460e      	mov	r6, r1
 8006780:	f04f 0a00 	mov.w	sl, #0
  if (n > iqGetFullI(iqp)) {
 8006784:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8006786:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8006788:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800678a:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 800678c:	bf8c      	ite	hi
 800678e:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8006790:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8006792:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8006796:	45a8      	cmp	r8, r5
 8006798:	d844      	bhi.n	8006824 <iqReadTimeout+0xc4>
  else if (n > s1) {
 800679a:	d229      	bcs.n	80067f0 <iqReadTimeout+0x90>
    s2 = n - s1;
 800679c:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80067a0:	4642      	mov	r2, r8
 80067a2:	4630      	mov	r0, r6
    s2 = n - s1;
 80067a4:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80067a6:	f7f9 fdb1 	bl	800030c <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80067aa:	eb06 0008 	add.w	r0, r6, r8
 80067ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80067b2:	68e1      	ldr	r1, [r4, #12]
 80067b4:	4642      	mov	r2, r8
 80067b6:	f7f9 fda9 	bl	800030c <memcpy>
  iqp->q_counter -= n;
 80067ba:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 80067bc:	68e1      	ldr	r1, [r4, #12]
 80067be:	4643      	mov	r3, r8
 80067c0:	18cb      	adds	r3, r1, r3
  iqp->q_counter -= n;
 80067c2:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 80067c4:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 80067c6:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 80067c8:	b10f      	cbz	r7, 80067ce <iqReadTimeout+0x6e>
        nfy(iqp);
 80067ca:	4620      	mov	r0, r4
 80067cc:	47b8      	blx	r7
 80067ce:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 80067d2:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80067d6:	442e      	add	r6, r5
 80067d8:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80067dc:	f1bb 0f00 	cmp.w	fp, #0
 80067e0:	d1d0      	bne.n	8006784 <iqReadTimeout+0x24>
  if (n > iqGetFullI(iqp)) {
 80067e2:	9803      	ldr	r0, [sp, #12]
 80067e4:	2300      	movs	r3, #0
 80067e6:	f383 8811 	msr	BASEPRI, r3
}
 80067ea:	b005      	add	sp, #20
 80067ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80067f0:	462a      	mov	r2, r5
 80067f2:	4630      	mov	r0, r6
 80067f4:	f7f9 fd8a 	bl	800030c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 80067f8:	68e2      	ldr	r2, [r4, #12]
 80067fa:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 80067fc:	68a2      	ldr	r2, [r4, #8]
 80067fe:	1b52      	subs	r2, r2, r5
 8006800:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8006802:	2d00      	cmp	r5, #0
 8006804:	d1e0      	bne.n	80067c8 <iqReadTimeout+0x68>
 8006806:	9902      	ldr	r1, [sp, #8]
 8006808:	4620      	mov	r0, r4
 800680a:	f7fb fa31 	bl	8001c70 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800680e:	2800      	cmp	r0, #0
 8006810:	d0b8      	beq.n	8006784 <iqReadTimeout+0x24>
 8006812:	9b03      	ldr	r3, [sp, #12]
 8006814:	eba3 000b 	sub.w	r0, r3, fp
 8006818:	2300      	movs	r3, #0
 800681a:	f383 8811 	msr	BASEPRI, r3
}
 800681e:	b005      	add	sp, #20
 8006820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8006824:	462a      	mov	r2, r5
 8006826:	4630      	mov	r0, r6
 8006828:	f7f9 fd70 	bl	800030c <memcpy>
    iqp->q_rdptr += n;
 800682c:	69a2      	ldr	r2, [r4, #24]
 800682e:	442a      	add	r2, r5
 8006830:	61a2      	str	r2, [r4, #24]
 8006832:	e7e3      	b.n	80067fc <iqReadTimeout+0x9c>
	...

08006840 <_readt.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8006840:	300c      	adds	r0, #12
 8006842:	f7ff bf8d 	b.w	8006760 <iqReadTimeout>
 8006846:	bf00      	nop
	...

08006850 <_read.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8006850:	300c      	adds	r0, #12
 8006852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006856:	f7ff bf83 	b.w	8006760 <iqReadTimeout>
 800685a:	bf00      	nop
 800685c:	0000      	movs	r0, r0
	...

08006860 <obqWriteTimeout>:
                       size_t n, sysinterval_t timeout) {
 8006860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006864:	4605      	mov	r5, r0
 8006866:	b083      	sub	sp, #12
 8006868:	460c      	mov	r4, r1
 800686a:	4692      	mov	sl, r2
 800686c:	4699      	mov	r9, r3
 800686e:	f04f 0820 	mov.w	r8, #32
 8006872:	f388 8811 	msr	BASEPRI, r8
    if (obqp->ptr == NULL) {
 8006876:	6aab      	ldr	r3, [r5, #40]	; 0x28
  size_t w = 0;
 8006878:	2600      	movs	r6, #0
  obqp->ptr = NULL;
 800687a:	4637      	mov	r7, r6
    if (obqp->ptr == NULL) {
 800687c:	2b00      	cmp	r3, #0
 800687e:	d041      	beq.n	8006904 <obqWriteTimeout+0xa4>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8006880:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    if (size > (n - w)) {
 8006882:	ebaa 0b06 	sub.w	fp, sl, r6
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8006886:	1aca      	subs	r2, r1, r3
    if (size > (n - w)) {
 8006888:	4593      	cmp	fp, r2
 800688a:	bf28      	it	cs
 800688c:	4693      	movcs	fp, r2
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 800688e:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8006892:	d940      	bls.n	8006916 <obqWriteTimeout+0xb6>
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 8006894:	4621      	mov	r1, r4
 8006896:	4618      	mov	r0, r3
 8006898:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800689c:	680c      	ldr	r4, [r1, #0]
 800689e:	684a      	ldr	r2, [r1, #4]
 80068a0:	688b      	ldr	r3, [r1, #8]
 80068a2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80068a6:	f8c0 c00c 	str.w	ip, [r0, #12]
 80068aa:	3110      	adds	r1, #16
 80068ac:	4571      	cmp	r1, lr
 80068ae:	6004      	str	r4, [r0, #0]
 80068b0:	6042      	str	r2, [r0, #4]
 80068b2:	6083      	str	r3, [r0, #8]
 80068b4:	f100 0010 	add.w	r0, r0, #16
 80068b8:	d1f0      	bne.n	800689c <obqWriteTimeout+0x3c>
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80068ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80068bc:	3340      	adds	r3, #64	; 0x40
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 80068be:	460c      	mov	r4, r1
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 80068c0:	3640      	adds	r6, #64	; 0x40
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80068c2:	62ab      	str	r3, [r5, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 80068c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d813      	bhi.n	80068f2 <obqWriteTimeout+0x92>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80068ca:	69ea      	ldr	r2, [r5, #28]
  *((size_t *)obqp->bwrptr) = size;
 80068cc:	692b      	ldr	r3, [r5, #16]
  if (obqp->bwrptr >= obqp->btop) {
 80068ce:	69a8      	ldr	r0, [r5, #24]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80068d0:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 80068d2:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 80068d4:	69e9      	ldr	r1, [r5, #28]
  obqp->bcounter--;
 80068d6:	68ea      	ldr	r2, [r5, #12]
  obqp->ptr = NULL;
 80068d8:	62af      	str	r7, [r5, #40]	; 0x28
  obqp->bwrptr += obqp->bsize;
 80068da:	440b      	add	r3, r1
  if (obqp->bwrptr >= obqp->btop) {
 80068dc:	4283      	cmp	r3, r0
  obqp->bwrptr += obqp->bsize;
 80068de:	612b      	str	r3, [r5, #16]
    obqp->bwrptr = obqp->buffers;
 80068e0:	bf24      	itt	cs
 80068e2:	6a6b      	ldrcs	r3, [r5, #36]	; 0x24
 80068e4:	612b      	strcs	r3, [r5, #16]
  if (obqp->notify != NULL) {
 80068e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  obqp->bcounter--;
 80068e8:	3a01      	subs	r2, #1
 80068ea:	60ea      	str	r2, [r5, #12]
  if (obqp->notify != NULL) {
 80068ec:	b10b      	cbz	r3, 80068f2 <obqWriteTimeout+0x92>
    obqp->notify(obqp);
 80068ee:	4628      	mov	r0, r5
 80068f0:	4798      	blx	r3
 80068f2:	f387 8811 	msr	BASEPRI, r7
    if (w >= n) {
 80068f6:	4556      	cmp	r6, sl
 80068f8:	d21a      	bcs.n	8006930 <obqWriteTimeout+0xd0>
 80068fa:	f388 8811 	msr	BASEPRI, r8
    if (obqp->ptr == NULL) {
 80068fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1bd      	bne.n	8006880 <obqWriteTimeout+0x20>
      msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8006904:	4649      	mov	r1, r9
 8006906:	4628      	mov	r0, r5
 8006908:	9301      	str	r3, [sp, #4]
 800690a:	f7fb fa41 	bl	8001d90 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 800690e:	9b01      	ldr	r3, [sp, #4]
 8006910:	b960      	cbnz	r0, 800692c <obqWriteTimeout+0xcc>
 8006912:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006914:	e7b4      	b.n	8006880 <obqWriteTimeout+0x20>
      memcpy(obqp->ptr, bp, size);
 8006916:	4618      	mov	r0, r3
 8006918:	4621      	mov	r1, r4
 800691a:	465a      	mov	r2, fp
 800691c:	f7f9 fcf6 	bl	800030c <memcpy>
      obqp->ptr += size;
 8006920:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006922:	445b      	add	r3, fp
      w         += size;
 8006924:	445e      	add	r6, fp
      bp        += size;
 8006926:	445c      	add	r4, fp
      obqp->ptr += size;
 8006928:	62ab      	str	r3, [r5, #40]	; 0x28
      w         += size;
 800692a:	e7cb      	b.n	80068c4 <obqWriteTimeout+0x64>
 800692c:	f383 8811 	msr	BASEPRI, r3
}
 8006930:	4630      	mov	r0, r6
 8006932:	b003      	add	sp, #12
 8006934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006940 <_writet.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8006940:	3044      	adds	r0, #68	; 0x44
 8006942:	f7ff bf8d 	b.w	8006860 <obqWriteTimeout>
 8006946:	bf00      	nop
	...

08006950 <_write.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 8006950:	3044      	adds	r0, #68	; 0x44
 8006952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006956:	f7ff bf83 	b.w	8006860 <obqWriteTimeout>
 800695a:	bf00      	nop
 800695c:	0000      	movs	r0, r0
	...

08006960 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	b083      	sub	sp, #12
 8006966:	4605      	mov	r5, r0
 8006968:	460f      	mov	r7, r1
 800696a:	4693      	mov	fp, r2
 800696c:	9301      	str	r3, [sp, #4]
 800696e:	f04f 0920 	mov.w	r9, #32
 8006972:	f389 8811 	msr	BASEPRI, r9
    if (ibqp->ptr == NULL) {
 8006976:	6aac      	ldr	r4, [r5, #40]	; 0x28
  size_t r = 0;
 8006978:	2600      	movs	r6, #0
  ibqp->ptr = NULL;
 800697a:	46b0      	mov	r8, r6
    if (ibqp->ptr == NULL) {
 800697c:	2c00      	cmp	r4, #0
 800697e:	d03f      	beq.n	8006a00 <ibqReadTimeout+0xa0>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8006980:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    if (size > (n - r)) {
 8006982:	ebab 0206 	sub.w	r2, fp, r6
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8006986:	1b1b      	subs	r3, r3, r4
    if (size > (n - r)) {
 8006988:	429a      	cmp	r2, r3
 800698a:	bf28      	it	cs
 800698c:	461a      	movcs	r2, r3
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 800698e:	2a40      	cmp	r2, #64	; 0x40
 8006990:	4692      	mov	sl, r2
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8006992:	4621      	mov	r1, r4
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8006994:	d93b      	bls.n	8006a0e <ibqReadTimeout+0xae>
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8006996:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800699a:	463b      	mov	r3, r7
 800699c:	680c      	ldr	r4, [r1, #0]
 800699e:	6848      	ldr	r0, [r1, #4]
 80069a0:	688a      	ldr	r2, [r1, #8]
 80069a2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80069a6:	f8c3 c00c 	str.w	ip, [r3, #12]
 80069aa:	3110      	adds	r1, #16
 80069ac:	4571      	cmp	r1, lr
 80069ae:	601c      	str	r4, [r3, #0]
 80069b0:	6058      	str	r0, [r3, #4]
 80069b2:	609a      	str	r2, [r3, #8]
 80069b4:	f103 0310 	add.w	r3, r3, #16
 80069b8:	d1f0      	bne.n	800699c <ibqReadTimeout+0x3c>
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80069ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80069bc:	3340      	adds	r3, #64	; 0x40
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 80069be:	3740      	adds	r7, #64	; 0x40
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 80069c0:	3640      	adds	r6, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80069c2:	62ab      	str	r3, [r5, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 80069c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d811      	bhi.n	80069ee <ibqReadTimeout+0x8e>
  if (ibqp->brdptr >= ibqp->btop) {
 80069ca:	e9d5 2106 	ldrd	r2, r1, [r5, #24]
  ibqp->brdptr += ibqp->bsize;
 80069ce:	696b      	ldr	r3, [r5, #20]
  ibqp->bcounter--;
 80069d0:	68e8      	ldr	r0, [r5, #12]
  ibqp->ptr = NULL;
 80069d2:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  ibqp->brdptr += ibqp->bsize;
 80069d6:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 80069d8:	4293      	cmp	r3, r2
  ibqp->brdptr += ibqp->bsize;
 80069da:	616b      	str	r3, [r5, #20]
    ibqp->brdptr = ibqp->buffers;
 80069dc:	bf24      	itt	cs
 80069de:	6a6b      	ldrcs	r3, [r5, #36]	; 0x24
 80069e0:	616b      	strcs	r3, [r5, #20]
  if (ibqp->notify != NULL) {
 80069e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  ibqp->bcounter--;
 80069e4:	3801      	subs	r0, #1
 80069e6:	60e8      	str	r0, [r5, #12]
  if (ibqp->notify != NULL) {
 80069e8:	b10b      	cbz	r3, 80069ee <ibqReadTimeout+0x8e>
    ibqp->notify(ibqp);
 80069ea:	4628      	mov	r0, r5
 80069ec:	4798      	blx	r3
 80069ee:	f388 8811 	msr	BASEPRI, r8
    if (r >= n) {
 80069f2:	455e      	cmp	r6, fp
 80069f4:	d216      	bcs.n	8006a24 <ibqReadTimeout+0xc4>
 80069f6:	f389 8811 	msr	BASEPRI, r9
    if (ibqp->ptr == NULL) {
 80069fa:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80069fc:	2c00      	cmp	r4, #0
 80069fe:	d1bf      	bne.n	8006980 <ibqReadTimeout+0x20>
      msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8006a00:	9901      	ldr	r1, [sp, #4]
 8006a02:	4628      	mov	r0, r5
 8006a04:	f7fb fa2c 	bl	8001e60 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 8006a08:	b950      	cbnz	r0, 8006a20 <ibqReadTimeout+0xc0>
 8006a0a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8006a0c:	e7b8      	b.n	8006980 <ibqReadTimeout+0x20>
      memcpy(bp, ibqp->ptr, size);
 8006a0e:	4638      	mov	r0, r7
 8006a10:	f7f9 fc7c 	bl	800030c <memcpy>
      ibqp->ptr += size;
 8006a14:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006a16:	4453      	add	r3, sl
      r         += size;
 8006a18:	4456      	add	r6, sl
      bp        += size;
 8006a1a:	4457      	add	r7, sl
      ibqp->ptr += size;
 8006a1c:	62ab      	str	r3, [r5, #40]	; 0x28
      r         += size;
 8006a1e:	e7d1      	b.n	80069c4 <ibqReadTimeout+0x64>
 8006a20:	f384 8811 	msr	BASEPRI, r4
}
 8006a24:	4630      	mov	r0, r6
 8006a26:	b003      	add	sp, #12
 8006a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2c:	0000      	movs	r0, r0
	...

08006a30 <_readt.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8006a30:	300c      	adds	r0, #12
 8006a32:	f7ff bf95 	b.w	8006960 <ibqReadTimeout>
 8006a36:	bf00      	nop
	...

08006a40 <_read.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 8006a40:	300c      	adds	r0, #12
 8006a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a46:	f7ff bf8b 	b.w	8006960 <ibqReadTimeout>
 8006a4a:	bf00      	nop
 8006a4c:	0000      	movs	r0, r0
	...

08006a50 <parse_arguments>:
static char *parse_arguments(char *str, char **saveptr) {
 8006a50:	b570      	push	{r4, r5, r6, lr}
 8006a52:	460d      	mov	r5, r1
  if (str != NULL)
 8006a54:	b1b8      	cbz	r0, 8006a86 <parse_arguments+0x36>
 8006a56:	4604      	mov	r4, r0
    *saveptr = str;
 8006a58:	6028      	str	r0, [r5, #0]
  p += strspn(p, " \t");
 8006a5a:	4912      	ldr	r1, [pc, #72]	; (8006aa4 <parse_arguments+0x54>)
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f002 f9ef 	bl	8008e40 <strspn>
  if (*p == '"') {
 8006a62:	5c21      	ldrb	r1, [r4, r0]
 8006a64:	2922      	cmp	r1, #34	; 0x22
  p += strspn(p, " \t");
 8006a66:	eb04 0600 	add.w	r6, r4, r0
  if (*p == '"') {
 8006a6a:	d012      	beq.n	8006a92 <parse_arguments+0x42>
    *saveptr = strpbrk(p, " \t");
 8006a6c:	490d      	ldr	r1, [pc, #52]	; (8006aa4 <parse_arguments+0x54>)
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f002 f9ca 	bl	8008e08 <strpbrk>
  if (*saveptr != NULL) {
 8006a74:	b198      	cbz	r0, 8006a9e <parse_arguments+0x4e>
    *(*saveptr)++ = '\0';
 8006a76:	1c42      	adds	r2, r0, #1
 8006a78:	2300      	movs	r3, #0
 8006a7a:	602a      	str	r2, [r5, #0]
 8006a7c:	7003      	strb	r3, [r0, #0]
  return *p != '\0' ? p : NULL;
 8006a7e:	7833      	ldrb	r3, [r6, #0]
 8006a80:	b123      	cbz	r3, 8006a8c <parse_arguments+0x3c>
}
 8006a82:	4630      	mov	r0, r6
 8006a84:	bd70      	pop	{r4, r5, r6, pc}
  p = *saveptr;
 8006a86:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 8006a88:	2c00      	cmp	r4, #0
 8006a8a:	d1e6      	bne.n	8006a5a <parse_arguments+0xa>
    return NULL;
 8006a8c:	2600      	movs	r6, #0
}
 8006a8e:	4630      	mov	r0, r6
 8006a90:	bd70      	pop	{r4, r5, r6, pc}
    p++;
 8006a92:	3601      	adds	r6, #1
    *saveptr = strpbrk(p, "\"");
 8006a94:	4630      	mov	r0, r6
 8006a96:	f002 f94f 	bl	8008d38 <strchr>
  if (*saveptr != NULL) {
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d1eb      	bne.n	8006a76 <parse_arguments+0x26>
 8006a9e:	6028      	str	r0, [r5, #0]
 8006aa0:	e7ed      	b.n	8006a7e <parse_arguments+0x2e>
 8006aa2:	bf00      	nop
 8006aa4:	08009758 	.word	0x08009758
	...

08006ab0 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 8006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8006ab4:	4dbc      	ldr	r5, [pc, #752]	; (8006da8 <shellThread+0x2f8>)
  int n;
  ShellConfig *scfg = p;
  BaseSequentialStream *chp = scfg->sc_channel;
 8006ab6:	f8d0 a000 	ldr.w	sl, [r0]
#if !defined(_CHIBIOS_NIL_)
  chRegSetThreadName(SHELL_THREAD_NAME);
#endif

#if SHELL_USE_HISTORY == TRUE
  *(scfg->sc_histbuf) = 0;
 8006aba:	6883      	ldr	r3, [r0, #8]
 8006abc:	696a      	ldr	r2, [r5, #20]
 8006abe:	49bb      	ldr	r1, [pc, #748]	; (8006dac <shellThread+0x2fc>)
THD_FUNCTION(shellThread, p) {
 8006ac0:	b0a7      	sub	sp, #156	; 0x9c
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	9001      	str	r0, [sp, #4]
  const ShellCommand *scp = scfg->sc_commands;
 8006ac6:	6840      	ldr	r0, [r0, #4]
 8006ac8:	9006      	str	r0, [sp, #24]
  *(scfg->sc_histbuf) = 0;
 8006aca:	2000      	movs	r0, #0
 8006acc:	6191      	str	r1, [r2, #24]
 8006ace:	7018      	strb	r0, [r3, #0]
  ShellHistory hist = {
 8006ad0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8006ad4:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 8006ad8:	49b5      	ldr	r1, [pc, #724]	; (8006db0 <shellThread+0x300>)
  ShellHistory hist = {
 8006ada:	9010      	str	r0, [sp, #64]	; 0x40
  chprintf(chp, SHELL_NEWLINE_STR);
 8006adc:	4650      	mov	r0, sl
  ShellHistory hist = {
 8006ade:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  chprintf(chp, SHELL_NEWLINE_STR);
 8006ae2:	f7fb fe45 	bl	8002770 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 8006ae6:	49b3      	ldr	r1, [pc, #716]	; (8006db4 <shellThread+0x304>)
 8006ae8:	4650      	mov	r0, sl
 8006aea:	f7fb fe41 	bl	8002770 <chprintf>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8006aee:	696b      	ldr	r3, [r5, #20]
#if !defined(_CHIBIOS_NIL_)
  while (!chThdShouldTerminateX()) {
 8006af0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006af4:	f013 0304 	ands.w	r3, r3, #4
 8006af8:	f040 8095 	bne.w	8006c26 <shellThread+0x176>
bool shellGetLine(ShellConfig *scfg, char *line, unsigned size, ShellHistory *shp) {
  char *p = line;
  BaseSequentialStream *chp = scfg->sc_channel;
#if SHELL_USE_ESC_SEQ == TRUE
  bool escape = false;
  bool bracket = false;
 8006afc:	9302      	str	r3, [sp, #8]
 8006afe:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 8006b02:	f8cd a000 	str.w	sl, [sp]
    chprintf(chp, SHELL_PROMPT_STR);
 8006b06:	49ac      	ldr	r1, [pc, #688]	; (8006db8 <shellThread+0x308>)
 8006b08:	9800      	ldr	r0, [sp, #0]
 8006b0a:	f7fb fe31 	bl	8002770 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 8006b0e:	9b01      	ldr	r3, [sp, #4]
  bool bracket = false;
 8006b10:	2500      	movs	r5, #0
  BaseSequentialStream *chp = scfg->sc_channel;
 8006b12:	681c      	ldr	r4, [r3, #0]
  bool escape = false;
 8006b14:	462f      	mov	r7, r5
  char *p = line;
 8006b16:	46c8      	mov	r8, r9
#endif

  while (true) {
    char c;

    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8006b22:	4620      	mov	r0, r4
 8006b24:	4798      	blx	r3
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d046      	beq.n	8006bb8 <shellThread+0x108>
      return true;
#if SHELL_USE_ESC_SEQ == TRUE
    if (c == 27) {
 8006b2a:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 8006b2e:	291b      	cmp	r1, #27
 8006b30:	d02a      	beq.n	8006b88 <shellThread+0xd8>
      escape = true;
      continue;
    }
    if (escape) {
 8006b32:	b15f      	cbz	r7, 8006b4c <shellThread+0x9c>
      escape = false;
      if (c == '[') {
 8006b34:	295b      	cmp	r1, #91	; 0x5b
 8006b36:	d03d      	beq.n	8006bb4 <shellThread+0x104>
        escape = true;
        bracket = true;
        continue;
      }
      if (bracket) {
 8006b38:	b135      	cbz	r5, 8006b48 <shellThread+0x98>
        bracket = false;
#if SHELL_USE_HISTORY == TRUE
        if (c == 'A') {
 8006b3a:	2941      	cmp	r1, #65	; 0x41
 8006b3c:	f000 812a 	beq.w	8006d94 <shellThread+0x2e4>
            chprintf(chp, "%s", line);
            p = line + len;
          }
          continue;
        }
        if (c == 'B') {
 8006b40:	2942      	cmp	r1, #66	; 0x42
 8006b42:	f000 810a 	beq.w	8006d5a <shellThread+0x2aa>
        bracket = false;
 8006b46:	2500      	movs	r5, #0
      escape = false;
 8006b48:	462f      	mov	r7, r5
 8006b4a:	e7e5      	b.n	8006b18 <shellThread+0x68>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
#endif
    if ((c == 8) || (c == 127)) {
 8006b4c:	2908      	cmp	r1, #8
 8006b4e:	d01d      	beq.n	8006b8c <shellThread+0xdc>
 8006b50:	297f      	cmp	r1, #127	; 0x7f
 8006b52:	d01b      	beq.n	8006b8c <shellThread+0xdc>
        streamPut(chp, 0x08);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8006b54:	290d      	cmp	r1, #13
 8006b56:	f000 8168 	beq.w	8006e2a <shellThread+0x37a>
#endif
      *p = 0;
      return false;
    }
#if SHELL_USE_COMPLETION == TRUE
    if (c == '\t') {
 8006b5a:	2909      	cmp	r1, #9
 8006b5c:	d077      	beq.n	8006c4e <shellThread+0x19e>
      }
      continue;
    }
#endif
#if SHELL_USE_HISTORY == TRUE
    if (c == 14) {
 8006b5e:	290e      	cmp	r1, #14
 8006b60:	f000 813f 	beq.w	8006de2 <shellThread+0x332>
        chprintf(chp, "%s", line);
        p = line + len;
      }
      continue;
    }
    if (c == 16) {
 8006b64:	2910      	cmp	r1, #16
 8006b66:	f000 8157 	beq.w	8006e18 <shellThread+0x368>
        p = line + len;
      }
      continue;
    }
#endif
    if (c < 0x20)
 8006b6a:	291f      	cmp	r1, #31
 8006b6c:	d9d4      	bls.n	8006b18 <shellThread+0x68>
      continue;
    if (p < line + size - 1) {
 8006b6e:	f10d 0397 	add.w	r3, sp, #151	; 0x97
 8006b72:	4598      	cmp	r8, r3
 8006b74:	d2d0      	bcs.n	8006b18 <shellThread+0x68>
      streamPut(chp, c);
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	4620      	mov	r0, r4
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	4798      	blx	r3
      *p++ = (char)c;
 8006b7e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b82:	f808 3b01 	strb.w	r3, [r8], #1
 8006b86:	e7c7      	b.n	8006b18 <shellThread+0x68>
      escape = true;
 8006b88:	2701      	movs	r7, #1
 8006b8a:	e7c5      	b.n	8006b18 <shellThread+0x68>
      if (p != line) {
 8006b8c:	45c8      	cmp	r8, r9
 8006b8e:	d0c3      	beq.n	8006b18 <shellThread+0x68>
        streamPut(chp, 0x08);
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	2108      	movs	r1, #8
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	4620      	mov	r0, r4
 8006b98:	4798      	blx	r3
        streamPut(chp, 0x20);
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	2120      	movs	r1, #32
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	4798      	blx	r3
        streamPut(chp, 0x08);
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	2108      	movs	r1, #8
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	4620      	mov	r0, r4
        p--;
 8006bac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
        streamPut(chp, 0x08);
 8006bb0:	4798      	blx	r3
 8006bb2:	e7b1      	b.n	8006b18 <shellThread+0x68>
        bracket = true;
 8006bb4:	463d      	mov	r5, r7
 8006bb6:	e7af      	b.n	8006b18 <shellThread+0x68>
  chThdSleep(delay);
 8006bb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bbc:	f7fb f9b0 	bl	8001f20 <chThdSleep>
    lp = parse_arguments(line, &tokp);
 8006bc0:	a909      	add	r1, sp, #36	; 0x24
 8006bc2:	4648      	mov	r0, r9
 8006bc4:	f7ff ff44 	bl	8006a50 <parse_arguments>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8006bc8:	a909      	add	r1, sp, #36	; 0x24
    lp = parse_arguments(line, &tokp);
 8006bca:	4605      	mov	r5, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8006bcc:	2000      	movs	r0, #0
 8006bce:	ac11      	add	r4, sp, #68	; 0x44
    n = 0;
 8006bd0:	2600      	movs	r6, #0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8006bd2:	f7ff ff3d 	bl	8006a50 <parse_arguments>
 8006bd6:	b150      	cbz	r0, 8006bee <shellThread+0x13e>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8006bd8:	2e04      	cmp	r6, #4
 8006bda:	d031      	beq.n	8006c40 <shellThread+0x190>
      args[n++] = lp;
 8006bdc:	f844 0b04 	str.w	r0, [r4], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8006be0:	a909      	add	r1, sp, #36	; 0x24
 8006be2:	2000      	movs	r0, #0
      args[n++] = lp;
 8006be4:	3601      	adds	r6, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8006be6:	f7ff ff33 	bl	8006a50 <parse_arguments>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d1f4      	bne.n	8006bd8 <shellThread+0x128>
    args[n] = NULL;
 8006bee:	ab26      	add	r3, sp, #152	; 0x98
 8006bf0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8006bf4:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8006bf8:	b175      	cbz	r5, 8006c18 <shellThread+0x168>
      if (strcmp(cmd, "help") == 0) {
 8006bfa:	4970      	ldr	r1, [pc, #448]	; (8006dbc <shellThread+0x30c>)
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f7f9 fc23 	bl	8000448 <strcmp>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f040 81bd 	bne.w	8006f82 <shellThread+0x4d2>
        if (n > 0) {
 8006c08:	2e00      	cmp	r6, #0
 8006c0a:	f000 8172 	beq.w	8006ef2 <shellThread+0x442>
          shellUsage(chp, "help");
 8006c0e:	4a6b      	ldr	r2, [pc, #428]	; (8006dbc <shellThread+0x30c>)
 8006c10:	496b      	ldr	r1, [pc, #428]	; (8006dc0 <shellThread+0x310>)
 8006c12:	9800      	ldr	r0, [sp, #0]
 8006c14:	f7fb fdac 	bl	8002770 <chprintf>
 8006c18:	4b63      	ldr	r3, [pc, #396]	; (8006da8 <shellThread+0x2f8>)
 8006c1a:	695b      	ldr	r3, [r3, #20]
  while (!chThdShouldTerminateX()) {
 8006c1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006c20:	075b      	lsls	r3, r3, #29
 8006c22:	f57f af70 	bpl.w	8006b06 <shellThread+0x56>
 8006c26:	2320      	movs	r3, #32
 8006c28:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4865      	ldr	r0, [pc, #404]	; (8006dc4 <shellThread+0x314>)
 8006c30:	f7fa f9c6 	bl	8000fc0 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 8006c34:	2000      	movs	r0, #0
 8006c36:	f7fb fab3 	bl	80021a0 <chThdExitS>
}
 8006c3a:	b027      	add	sp, #156	; 0x9c
 8006c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 8006c40:	4961      	ldr	r1, [pc, #388]	; (8006dc8 <shellThread+0x318>)
 8006c42:	9800      	ldr	r0, [sp, #0]
 8006c44:	f7fb fd94 	bl	8002770 <chprintf>
    args[n] = NULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9315      	str	r3, [sp, #84]	; 0x54
    if (cmd != NULL) {
 8006c4c:	e7e4      	b.n	8006c18 <shellThread+0x168>
      if (p < line + size - 1) {
 8006c4e:	f10d 0697 	add.w	r6, sp, #151	; 0x97
 8006c52:	45b0      	cmp	r8, r6
 8006c54:	f4bf af60 	bcs.w	8006b18 <shellThread+0x68>
  char help_cmp[] = "help";
 8006c58:	4b58      	ldr	r3, [pc, #352]	; (8006dbc <shellThread+0x30c>)
        *p = 0;
 8006c5a:	f888 7000 	strb.w	r7, [r8]
  char help_cmp[] = "help";
 8006c5e:	e893 0003 	ldmia.w	r3, {r0, r1}
  if (strstr(help_cmp, line) == help_cmp) {
 8006c62:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
  char help_cmp[] = "help";
 8006c66:	900a      	str	r0, [sp, #40]	; 0x28
 8006c68:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
  if (strstr(help_cmp, line) == help_cmp) {
 8006c6c:	4658      	mov	r0, fp
 8006c6e:	4649      	mov	r1, r9
 8006c70:	f002 fa58 	bl	8009124 <strstr>
        get_completions(scfg, line);
 8006c74:	9b01      	ldr	r3, [sp, #4]
 8006c76:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8006c7a:	685a      	ldr	r2, [r3, #4]
  if (strstr(help_cmp, line) == help_cmp) {
 8006c7c:	9203      	str	r2, [sp, #12]
 8006c7e:	4558      	cmp	r0, fp
    *scmp++ = help_cmp;
 8006c80:	f10a 0304 	add.w	r3, sl, #4
 8006c84:	bf08      	it	eq
 8006c86:	469b      	moveq	fp, r3
 8006c88:	9304      	str	r3, [sp, #16]
 8006c8a:	4b50      	ldr	r3, [pc, #320]	; (8006dcc <shellThread+0x31c>)
 8006c8c:	bf08      	it	eq
 8006c8e:	f8ca 0000 	streq.w	r0, [sl]
 8006c92:	4649      	mov	r1, r9
 8006c94:	4618      	mov	r0, r3
        get_completions(scfg, line);
 8006c96:	bf18      	it	ne
 8006c98:	46d3      	movne	fp, sl
  while (lcp->sc_name != NULL) {
 8006c9a:	f002 fa43 	bl	8009124 <strstr>
    if (strstr(lcp->sc_name, line) == lcp->sc_name) {
 8006c9e:	4b4b      	ldr	r3, [pc, #300]	; (8006dcc <shellThread+0x31c>)
 8006ca0:	9a03      	ldr	r2, [sp, #12]
 8006ca2:	4298      	cmp	r0, r3
      *scmp++ = (char *)lcp->sc_name;
 8006ca4:	465b      	mov	r3, fp
 8006ca6:	bf08      	it	eq
 8006ca8:	f843 0b04 	streq.w	r0, [r3], #4
  if (scp != NULL) {
 8006cac:	b1c2      	cbz	r2, 8006ce0 <shellThread+0x230>
    while (scp->sc_name != NULL) {
 8006cae:	f8d2 b000 	ldr.w	fp, [r2]
 8006cb2:	f1bb 0f00 	cmp.w	fp, #0
 8006cb6:	d013      	beq.n	8006ce0 <shellThread+0x230>
 8006cb8:	9403      	str	r4, [sp, #12]
 8006cba:	9505      	str	r5, [sp, #20]
 8006cbc:	465c      	mov	r4, fp
 8006cbe:	4615      	mov	r5, r2
 8006cc0:	469b      	mov	fp, r3
      if (strstr(scp->sc_name, line) == scp->sc_name) {
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	f002 fa2d 	bl	8009124 <strstr>
 8006cca:	4284      	cmp	r4, r0
        *scmp++ = (char *)scp->sc_name;
 8006ccc:	bf08      	it	eq
 8006cce:	f84b 4b04 	streq.w	r4, [fp], #4
    while (scp->sc_name != NULL) {
 8006cd2:	f855 4f08 	ldr.w	r4, [r5, #8]!
 8006cd6:	2c00      	cmp	r4, #0
 8006cd8:	d1f3      	bne.n	8006cc2 <shellThread+0x212>
 8006cda:	9c03      	ldr	r4, [sp, #12]
 8006cdc:	9d05      	ldr	r5, [sp, #20]
 8006cde:	465b      	mov	r3, fp
  *scmp = NULL;
 8006ce0:	9a02      	ldr	r2, [sp, #8]
 8006ce2:	601a      	str	r2, [r3, #0]
  if (*scmp != NULL) {
 8006ce4:	f8da b000 	ldr.w	fp, [sl]
 8006ce8:	f1bb 0f00 	cmp.w	fp, #0
 8006cec:	f43f af14 	beq.w	8006b18 <shellThread+0x68>
    if (*cmp == NULL) {
 8006cf0:	f8da 3004 	ldr.w	r3, [sl, #4]
        int len = process_completions(scfg, line, p - line, size);
 8006cf4:	eba8 0109 	sub.w	r1, r8, r9
 8006cf8:	9103      	str	r1, [sp, #12]
    if (*cmp == NULL) {
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 8170 	beq.w	8006fe0 <shellThread+0x530>
      while (*(*scmp + clen) != 0) {
 8006d00:	f89b c000 	ldrb.w	ip, [fp]
 8006d04:	f1bc 0f00 	cmp.w	ip, #0
 8006d08:	f000 81b8 	beq.w	800707c <shellThread+0x5cc>
  int clen = 0;
 8006d0c:	9405      	str	r4, [sp, #20]
 8006d0e:	9507      	str	r5, [sp, #28]
 8006d10:	4664      	mov	r4, ip
 8006d12:	9d03      	ldr	r5, [sp, #12]
 8006d14:	f8dd c010 	ldr.w	ip, [sp, #16]
      while (*(*scmp + clen) != 0) {
 8006d18:	46c6      	mov	lr, r8
  int clen = 0;
 8006d1a:	2100      	movs	r1, #0
        while ((*(*scmp + clen) == *(*cmp + clen)) &&
 8006d1c:	5c5a      	ldrb	r2, [r3, r1]
 8006d1e:	42a2      	cmp	r2, r4
 8006d20:	bf08      	it	eq
 8006d22:	4662      	moveq	r2, ip
 8006d24:	d105      	bne.n	8006d32 <shellThread+0x282>
               (*(*cmp + clen) != 0) && (*cmp != NULL)) {
 8006d26:	b13b      	cbz	r3, 8006d38 <shellThread+0x288>
        while ((*(*scmp + clen) == *(*cmp + clen)) &&
 8006d28:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006d2c:	5c58      	ldrb	r0, [r3, r1]
 8006d2e:	42a0      	cmp	r0, r4
 8006d30:	d0f9      	beq.n	8006d26 <shellThread+0x276>
        if (*cmp == NULL) {
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f040 80f0 	bne.w	8006f18 <shellThread+0x468>
          if ((c < line + size - 1) && (clen >= length))
 8006d38:	45b6      	cmp	lr, r6
 8006d3a:	d205      	bcs.n	8006d48 <shellThread+0x298>
 8006d3c:	428d      	cmp	r5, r1
            *c++ = *(*scmp + clen);
 8006d3e:	bfdc      	itt	le
 8006d40:	f80e 4b01 	strble.w	r4, [lr], #1
 8006d44:	f8da b000 	ldrle.w	fp, [sl]
          clen++;
 8006d48:	3101      	adds	r1, #1
      while (*(*scmp + clen) != 0) {
 8006d4a:	f81b 4001 	ldrb.w	r4, [fp, r1]
 8006d4e:	2c00      	cmp	r4, #0
 8006d50:	f000 8132 	beq.w	8006fb8 <shellThread+0x508>
 8006d54:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006d58:	e7e0      	b.n	8006d1c <shellThread+0x26c>
          int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	a80c      	add	r0, sp, #48	; 0x30
 8006d60:	f7ff fa2e 	bl	80061c0 <get_history>
          if (len == 0)
 8006d64:	1e06      	subs	r6, r0, #0
 8006d66:	d139      	bne.n	8006ddc <shellThread+0x32c>
            *line = 0;
 8006d68:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
            _shell_reset_cur(chp);
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	2246      	movs	r2, #70	; 0x46
 8006d70:	4917      	ldr	r1, [pc, #92]	; (8006dd0 <shellThread+0x320>)
 8006d72:	4620      	mov	r0, r4
 8006d74:	f7fb fcfc 	bl	8002770 <chprintf>
            _shell_clr_line(chp);
 8006d78:	4916      	ldr	r1, [pc, #88]	; (8006dd4 <shellThread+0x324>)
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f7fb fcf8 	bl	8002770 <chprintf>
        bracket = false;
 8006d80:	2500      	movs	r5, #0
            chprintf(chp, "%s", line);
 8006d82:	4915      	ldr	r1, [pc, #84]	; (8006dd8 <shellThread+0x328>)
 8006d84:	464a      	mov	r2, r9
 8006d86:	4620      	mov	r0, r4
 8006d88:	f7fb fcf2 	bl	8002770 <chprintf>
            p = line + len;
 8006d8c:	eb09 0806 	add.w	r8, r9, r6
      escape = false;
 8006d90:	462f      	mov	r7, r5
 8006d92:	e6c1      	b.n	8006b18 <shellThread+0x68>
          int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 8006d94:	2200      	movs	r2, #0
 8006d96:	4649      	mov	r1, r9
 8006d98:	a80c      	add	r0, sp, #48	; 0x30
 8006d9a:	f7ff fa11 	bl	80061c0 <get_history>
          if (len > 0) {
 8006d9e:	1e06      	subs	r6, r0, #0
 8006da0:	f77f aed1 	ble.w	8006b46 <shellThread+0x96>
 8006da4:	e7e2      	b.n	8006d6c <shellThread+0x2bc>
 8006da6:	bf00      	nop
 8006da8:	200018d0 	.word	0x200018d0
 8006dac:	0800975c 	.word	0x0800975c
 8006db0:	0800952c 	.word	0x0800952c
 8006db4:	08009764 	.word	0x08009764
 8006db8:	08009778 	.word	0x08009778
 8006dbc:	080097b8 	.word	0x080097b8
 8006dc0:	08009504 	.word	0x08009504
 8006dc4:	20001d74 	.word	0x20001d74
 8006dc8:	080097a0 	.word	0x080097a0
 8006dcc:	08009794 	.word	0x08009794
 8006dd0:	08009780 	.word	0x08009780
 8006dd4:	0800978c 	.word	0x0800978c
 8006dd8:	08009790 	.word	0x08009790
          if (len >= 0) {
 8006ddc:	f6ff aeb3 	blt.w	8006b46 <shellThread+0x96>
 8006de0:	e7c4      	b.n	8006d6c <shellThread+0x2bc>
      int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 8006de2:	2201      	movs	r2, #1
 8006de4:	4649      	mov	r1, r9
 8006de6:	a80c      	add	r0, sp, #48	; 0x30
 8006de8:	f7ff f9ea 	bl	80061c0 <get_history>
      if (len == 0)
 8006dec:	1e06      	subs	r6, r0, #0
 8006dee:	d178      	bne.n	8006ee2 <shellThread+0x432>
        *line = 0;
 8006df0:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
        _shell_reset_cur(chp);
 8006df4:	2304      	movs	r3, #4
 8006df6:	2246      	movs	r2, #70	; 0x46
 8006df8:	49a3      	ldr	r1, [pc, #652]	; (8007088 <shellThread+0x5d8>)
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f7fb fcb8 	bl	8002770 <chprintf>
        _shell_clr_line(chp);
 8006e00:	49a2      	ldr	r1, [pc, #648]	; (800708c <shellThread+0x5dc>)
 8006e02:	4620      	mov	r0, r4
 8006e04:	f7fb fcb4 	bl	8002770 <chprintf>
        chprintf(chp, "%s", line);
 8006e08:	49a1      	ldr	r1, [pc, #644]	; (8007090 <shellThread+0x5e0>)
 8006e0a:	464a      	mov	r2, r9
 8006e0c:	4620      	mov	r0, r4
        p = line + len;
 8006e0e:	eb09 0806 	add.w	r8, r9, r6
        chprintf(chp, "%s", line);
 8006e12:	f7fb fcad 	bl	8002770 <chprintf>
 8006e16:	e67f      	b.n	8006b18 <shellThread+0x68>
      int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 8006e18:	463a      	mov	r2, r7
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	a80c      	add	r0, sp, #48	; 0x30
 8006e1e:	f7ff f9cf 	bl	80061c0 <get_history>
      if (len > 0) {
 8006e22:	1e06      	subs	r6, r0, #0
 8006e24:	f77f ae78 	ble.w	8006b18 <shellThread+0x68>
 8006e28:	e7e4      	b.n	8006df4 <shellThread+0x344>
      chprintf(chp, SHELL_NEWLINE_STR);
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	4999      	ldr	r1, [pc, #612]	; (8007094 <shellThread+0x5e4>)
 8006e2e:	f7fb fc9f 	bl	8002770 <chprintf>
  if (length > shp->sh_size - 2)
 8006e32:	9d0d      	ldr	r5, [sp, #52]	; 0x34
      save_history(shp, line, p - line);
 8006e34:	eba8 0409 	sub.w	r4, r8, r9
  if (length > shp->sh_size - 2)
 8006e38:	1e6b      	subs	r3, r5, #1
 8006e3a:	429c      	cmp	r4, r3
 8006e3c:	da4d      	bge.n	8006eda <shellThread+0x42a>
  while ((*(line + length -1) == ' ') && (length > 0))
 8006e3e:	1e63      	subs	r3, r4, #1
 8006e40:	eb09 0203 	add.w	r2, r9, r3
 8006e44:	f819 1003 	ldrb.w	r1, [r9, r3]
 8006e48:	2920      	cmp	r1, #32
 8006e4a:	d10a      	bne.n	8006e62 <shellThread+0x3b2>
 8006e4c:	2c00      	cmp	r4, #0
 8006e4e:	dc03      	bgt.n	8006e58 <shellThread+0x3a8>
 8006e50:	e043      	b.n	8006eda <shellThread+0x42a>
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d041      	beq.n	8006eda <shellThread+0x42a>
 8006e56:	3b01      	subs	r3, #1
 8006e58:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8006e5c:	2920      	cmp	r1, #32
    length--;
 8006e5e:	461c      	mov	r4, r3
  while ((*(line + length -1) == ' ') && (length > 0))
 8006e60:	d0f7      	beq.n	8006e52 <shellThread+0x3a2>
  if (length <= 0)
 8006e62:	2c00      	cmp	r4, #0
 8006e64:	dd39      	ble.n	8006eda <shellThread+0x42a>
  if (shp->sh_end >= shp->sh_beg) {
 8006e66:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 8006e68:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8006e6c:	1af2      	subs	r2, r6, r3
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8006e6e:	1b99      	subs	r1, r3, r6
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8006e70:	3201      	adds	r2, #1
  if (shp->sh_end >= shp->sh_beg) {
 8006e72:	429e      	cmp	r6, r3
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8006e74:	eba5 0202 	sub.w	r2, r5, r2
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8006e78:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
  if (shp->sh_end >= shp->sh_beg) {
 8006e7c:	db09      	blt.n	8006e92 <shellThread+0x3e2>
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8006e7e:	42a2      	cmp	r2, r4
 8006e80:	dc09      	bgt.n	8006e96 <shellThread+0x3e6>
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 8006e82:	5cc2      	ldrb	r2, [r0, r3]
 8006e84:	4413      	add	r3, r2
 8006e86:	3301      	adds	r3, #1
  if (pos >= shp->sh_size)
 8006e88:	429d      	cmp	r5, r3
    pos -= shp->sh_size;
 8006e8a:	bfd8      	it	le
 8006e8c:	1b5b      	suble	r3, r3, r5
  shp->sh_beg = pos;
 8006e8e:	930e      	str	r3, [sp, #56]	; 0x38
 8006e90:	e7ec      	b.n	8006e6c <shellThread+0x3bc>
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8006e92:	42a1      	cmp	r1, r4
 8006e94:	ddf5      	ble.n	8006e82 <shellThread+0x3d2>
  if (length < shp->sh_size - shp->sh_end - 1)
 8006e96:	1bad      	subs	r5, r5, r6
 8006e98:	3d01      	subs	r5, #1
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8006e9a:	3601      	adds	r6, #1
  if (length < shp->sh_size - shp->sh_end - 1)
 8006e9c:	42a5      	cmp	r5, r4
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8006e9e:	4430      	add	r0, r6
  if (length < shp->sh_size - shp->sh_end - 1)
 8006ea0:	dc22      	bgt.n	8006ee8 <shellThread+0x438>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, part_len);
 8006ea2:	462a      	mov	r2, r5
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	f7f9 fa31 	bl	800030c <memcpy>
    memcpy(shp->sh_buffer, line + part_len, length - part_len);
 8006eaa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006eac:	1b62      	subs	r2, r4, r5
 8006eae:	eb09 0105 	add.w	r1, r9, r5
 8006eb2:	f7f9 fa2b 	bl	800030c <memcpy>
  *(shp->sh_buffer + shp->sh_end) = (char)length;
 8006eb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006eb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006eba:	54d4      	strb	r4, [r2, r3]
  shp->sh_end += length + 1;
 8006ebc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  if (shp->sh_end >= shp->sh_size)
 8006ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  shp->sh_end += length + 1;
 8006ec0:	3401      	adds	r4, #1
 8006ec2:	4414      	add	r4, r2
  if (shp->sh_end >= shp->sh_size)
 8006ec4:	429c      	cmp	r4, r3
  shp->sh_end += length + 1;
 8006ec6:	940f      	str	r4, [sp, #60]	; 0x3c
    shp->sh_end -= shp->sh_size;
 8006ec8:	bfa8      	it	ge
 8006eca:	1ae4      	subge	r4, r4, r3
  *(shp->sh_buffer + shp->sh_end) = 0;
 8006ecc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ece:	9a02      	ldr	r2, [sp, #8]
    shp->sh_end -= shp->sh_size;
 8006ed0:	bfa8      	it	ge
 8006ed2:	940f      	strge	r4, [sp, #60]	; 0x3c
  *(shp->sh_buffer + shp->sh_end) = 0;
 8006ed4:	551a      	strb	r2, [r3, r4]
  shp->sh_cur = 0;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9310      	str	r3, [sp, #64]	; 0x40
      *p = 0;
 8006eda:	9b02      	ldr	r3, [sp, #8]
 8006edc:	f888 3000 	strb.w	r3, [r8]
 8006ee0:	e66e      	b.n	8006bc0 <shellThread+0x110>
      if (len >= 0) {
 8006ee2:	f6ff ae19 	blt.w	8006b18 <shellThread+0x68>
 8006ee6:	e785      	b.n	8006df4 <shellThread+0x344>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8006ee8:	4622      	mov	r2, r4
 8006eea:	4649      	mov	r1, r9
 8006eec:	f7f9 fa0e 	bl	800030c <memcpy>
 8006ef0:	e7e1      	b.n	8006eb6 <shellThread+0x406>
        chprintf(chp, "Commands: help ");
 8006ef2:	9c00      	ldr	r4, [sp, #0]
 8006ef4:	4968      	ldr	r1, [pc, #416]	; (8007098 <shellThread+0x5e8>)
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f7fb fc3a 	bl	8002770 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
 8006efc:	4a67      	ldr	r2, [pc, #412]	; (800709c <shellThread+0x5ec>)
 8006efe:	4968      	ldr	r1, [pc, #416]	; (80070a0 <shellThread+0x5f0>)
 8006f00:	4620      	mov	r0, r4
 8006f02:	f7fb fc35 	bl	8002770 <chprintf>
        if (scp != NULL)
 8006f06:	9b06      	ldr	r3, [sp, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f040 8098 	bne.w	800703e <shellThread+0x58e>
        chprintf(chp, SHELL_NEWLINE_STR);
 8006f0e:	4961      	ldr	r1, [pc, #388]	; (8007094 <shellThread+0x5e4>)
 8006f10:	9800      	ldr	r0, [sp, #0]
 8006f12:	f7fb fc2d 	bl	8002770 <chprintf>
 8006f16:	e67f      	b.n	8006c18 <shellThread+0x168>
 8006f18:	9c05      	ldr	r4, [sp, #20]
 8006f1a:	9d07      	ldr	r5, [sp, #28]
 8006f1c:	eb09 0b01 	add.w	fp, r9, r1
    *(line + clen) = 0;
 8006f20:	9b02      	ldr	r3, [sp, #8]
 8006f22:	f88b 3000 	strb.w	r3, [fp]
        if (len > 0) {
 8006f26:	2900      	cmp	r1, #0
 8006f28:	f43f adf6 	beq.w	8006b18 <shellThread+0x68>
          write_completions(scfg, line, p - line);
 8006f2c:	9a01      	ldr	r2, [sp, #4]
  if (*(scmp + 1) != NULL) {
 8006f2e:	f8da 3004 	ldr.w	r3, [sl, #4]
          write_completions(scfg, line, p - line);
 8006f32:	6816      	ldr	r6, [r2, #0]
  if (*(scmp + 1) != NULL) {
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d04c      	beq.n	8006fd2 <shellThread+0x522>
    chprintf(chp, SHELL_NEWLINE_STR);
 8006f38:	4956      	ldr	r1, [pc, #344]	; (8007094 <shellThread+0x5e4>)
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f7fb fc18 	bl	8002770 <chprintf>
    while (*scmp != NULL)
 8006f40:	f8da 2000 	ldr.w	r2, [sl]
 8006f44:	b172      	cbz	r2, 8006f64 <shellThread+0x4b4>
      chprintf(chp, " %s", *scmp++);
 8006f46:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80070ac <shellThread+0x5fc>
 8006f4a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006f4e:	e001      	b.n	8006f54 <shellThread+0x4a4>
 8006f50:	f10a 0a04 	add.w	sl, sl, #4
 8006f54:	4641      	mov	r1, r8
 8006f56:	4630      	mov	r0, r6
 8006f58:	f7fb fc0a 	bl	8002770 <chprintf>
    while (*scmp != NULL)
 8006f5c:	f8da 2000 	ldr.w	r2, [sl]
 8006f60:	2a00      	cmp	r2, #0
 8006f62:	d1f5      	bne.n	8006f50 <shellThread+0x4a0>
    chprintf(chp, SHELL_NEWLINE_STR);
 8006f64:	494b      	ldr	r1, [pc, #300]	; (8007094 <shellThread+0x5e4>)
 8006f66:	4630      	mov	r0, r6
 8006f68:	f7fb fc02 	bl	8002770 <chprintf>
    chprintf(chp, SHELL_PROMPT_STR);
 8006f6c:	494d      	ldr	r1, [pc, #308]	; (80070a4 <shellThread+0x5f4>)
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f7fb fbfe 	bl	8002770 <chprintf>
    chprintf(chp, "%s", line);
 8006f74:	4946      	ldr	r1, [pc, #280]	; (8007090 <shellThread+0x5e0>)
 8006f76:	464a      	mov	r2, r9
 8006f78:	4630      	mov	r0, r6
 8006f7a:	f7fb fbf9 	bl	8002770 <chprintf>
          p = line + len;
 8006f7e:	46d8      	mov	r8, fp
 8006f80:	e5ca      	b.n	8006b18 <shellThread+0x68>
 8006f82:	4846      	ldr	r0, [pc, #280]	; (800709c <shellThread+0x5ec>)
 8006f84:	4629      	mov	r1, r5
 8006f86:	f7f9 fa5f 	bl	8000448 <strcmp>
    if (strcmp(scp->sc_name, name) == 0) {
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	d051      	beq.n	8007032 <shellThread+0x582>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 8006f8e:	9c06      	ldr	r4, [sp, #24]
 8006f90:	2c00      	cmp	r4, #0
 8006f92:	d068      	beq.n	8007066 <shellThread+0x5b6>
  while (scp->sc_name != NULL) {
 8006f94:	6820      	ldr	r0, [r4, #0]
 8006f96:	b920      	cbnz	r0, 8006fa2 <shellThread+0x4f2>
 8006f98:	e065      	b.n	8007066 <shellThread+0x5b6>
 8006f9a:	f854 0f08 	ldr.w	r0, [r4, #8]!
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d061      	beq.n	8007066 <shellThread+0x5b6>
    if (strcmp(scp->sc_name, name) == 0) {
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	f7f9 fa50 	bl	8000448 <strcmp>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d1f6      	bne.n	8006f9a <shellThread+0x4ea>
      scp->sc_function(chp, argc, argv);
 8006fac:	6863      	ldr	r3, [r4, #4]
 8006fae:	9800      	ldr	r0, [sp, #0]
 8006fb0:	4631      	mov	r1, r6
 8006fb2:	aa11      	add	r2, sp, #68	; 0x44
 8006fb4:	4798      	blx	r3
      return false;
 8006fb6:	e62f      	b.n	8006c18 <shellThread+0x168>
 8006fb8:	46a4      	mov	ip, r4
    *(line + clen) = 0;
 8006fba:	f809 c001 	strb.w	ip, [r9, r1]
          write_completions(scfg, line, p - line);
 8006fbe:	9a01      	ldr	r2, [sp, #4]
  if (*(scmp + 1) != NULL) {
 8006fc0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006fc4:	9d07      	ldr	r5, [sp, #28]
 8006fc6:	9c05      	ldr	r4, [sp, #20]
          write_completions(scfg, line, p - line);
 8006fc8:	6816      	ldr	r6, [r2, #0]
    *(line + clen) = 0;
 8006fca:	eb09 0b01 	add.w	fp, r9, r1
  if (*(scmp + 1) != NULL) {
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1b2      	bne.n	8006f38 <shellThread+0x488>
    chprintf(chp, "%s", line + pos);
 8006fd2:	4642      	mov	r2, r8
 8006fd4:	492e      	ldr	r1, [pc, #184]	; (8007090 <shellThread+0x5e0>)
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	f7fb fbca 	bl	8002770 <chprintf>
          p = line + len;
 8006fdc:	46d8      	mov	r8, fp
 8006fde:	e59b      	b.n	8006b18 <shellThread+0x68>
      clen = strlen(*scmp);
 8006fe0:	4658      	mov	r0, fp
 8006fe2:	f8cd b014 	str.w	fp, [sp, #20]
 8006fe6:	f7f9 fbab 	bl	8000740 <strlen>
      while ((c < line + clen) && (c < line + size - 1))
 8006fea:	eb09 0b00 	add.w	fp, r9, r0
 8006fee:	45d8      	cmp	r8, fp
      clen = strlen(*scmp);
 8006ff0:	4686      	mov	lr, r0
 8006ff2:	4601      	mov	r1, r0
      while ((c < line + clen) && (c < line + size - 1))
 8006ff4:	d245      	bcs.n	8007082 <shellThread+0x5d2>
 8006ff6:	9b03      	ldr	r3, [sp, #12]
 8006ff8:	9a05      	ldr	r2, [sp, #20]
 8006ffa:	eba3 0c08 	sub.w	ip, r3, r8
 8006ffe:	4643      	mov	r3, r8
 8007000:	e003      	b.n	800700a <shellThread+0x55a>
 8007002:	42b3      	cmp	r3, r6
 8007004:	d08c      	beq.n	8006f20 <shellThread+0x470>
 8007006:	f8da 2000 	ldr.w	r2, [sl]
        *c++ = *(*scmp + i++);
 800700a:	eb03 000c 	add.w	r0, r3, ip
 800700e:	5c12      	ldrb	r2, [r2, r0]
 8007010:	f803 2b01 	strb.w	r2, [r3], #1
      while ((c < line + clen) && (c < line + size - 1))
 8007014:	455b      	cmp	r3, fp
 8007016:	d1f4      	bne.n	8007002 <shellThread+0x552>
      if (c < line + size -1) {
 8007018:	45b3      	cmp	fp, r6
 800701a:	d281      	bcs.n	8006f20 <shellThread+0x470>
        clen++;
 800701c:	f10e 0e01 	add.w	lr, lr, #1
        *c = ' ';
 8007020:	2320      	movs	r3, #32
 8007022:	f88b 3000 	strb.w	r3, [fp]
    *(line + clen) = 0;
 8007026:	9b02      	ldr	r3, [sp, #8]
 8007028:	f809 300e 	strb.w	r3, [r9, lr]
 800702c:	eb09 0b0e 	add.w	fp, r9, lr
 8007030:	e77c      	b.n	8006f2c <shellThread+0x47c>
      scp->sc_function(chp, argc, argv);
 8007032:	9800      	ldr	r0, [sp, #0]
 8007034:	4631      	mov	r1, r6
 8007036:	aa11      	add	r2, sp, #68	; 0x44
 8007038:	f7fe fdba 	bl	8005bb0 <cmd_echo>
      return false;
 800703c:	e5ec      	b.n	8006c18 <shellThread+0x168>
  while (scp->sc_name != NULL) {
 800703e:	9c06      	ldr	r4, [sp, #24]
 8007040:	6822      	ldr	r2, [r4, #0]
 8007042:	2a00      	cmp	r2, #0
 8007044:	f43f af63 	beq.w	8006f0e <shellThread+0x45e>
    chprintf(chp, "%s ", scp->sc_name);
 8007048:	4d15      	ldr	r5, [pc, #84]	; (80070a0 <shellThread+0x5f0>)
 800704a:	9e00      	ldr	r6, [sp, #0]
 800704c:	4629      	mov	r1, r5
 800704e:	4630      	mov	r0, r6
 8007050:	f7fb fb8e 	bl	8002770 <chprintf>
  while (scp->sc_name != NULL) {
 8007054:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8007058:	2a00      	cmp	r2, #0
 800705a:	d1f7      	bne.n	800704c <shellThread+0x59c>
        chprintf(chp, SHELL_NEWLINE_STR);
 800705c:	490d      	ldr	r1, [pc, #52]	; (8007094 <shellThread+0x5e4>)
 800705e:	9800      	ldr	r0, [sp, #0]
 8007060:	f7fb fb86 	bl	8002770 <chprintf>
 8007064:	e5d8      	b.n	8006c18 <shellThread+0x168>
        chprintf(chp, "%s", cmd);
 8007066:	9c00      	ldr	r4, [sp, #0]
 8007068:	4909      	ldr	r1, [pc, #36]	; (8007090 <shellThread+0x5e0>)
 800706a:	462a      	mov	r2, r5
 800706c:	4620      	mov	r0, r4
 800706e:	f7fb fb7f 	bl	8002770 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 8007072:	490d      	ldr	r1, [pc, #52]	; (80070a8 <shellThread+0x5f8>)
 8007074:	4620      	mov	r0, r4
 8007076:	f7fb fb7b 	bl	8002770 <chprintf>
 800707a:	e5cd      	b.n	8006c18 <shellThread+0x168>
    *(line + clen) = 0;
 800707c:	f88d c058 	strb.w	ip, [sp, #88]	; 0x58
 8007080:	e54a      	b.n	8006b18 <shellThread+0x68>
      while ((c < line + clen) && (c < line + size - 1))
 8007082:	46c3      	mov	fp, r8
 8007084:	e7ca      	b.n	800701c <shellThread+0x56c>
 8007086:	bf00      	nop
 8007088:	08009780 	.word	0x08009780
 800708c:	0800978c 	.word	0x0800978c
 8007090:	08009790 	.word	0x08009790
 8007094:	0800952c 	.word	0x0800952c
 8007098:	080097c0 	.word	0x080097c0
 800709c:	08009794 	.word	0x08009794
 80070a0:	080097d0 	.word	0x080097d0
 80070a4:	08009778 	.word	0x08009778
 80070a8:	080097d4 	.word	0x080097d4
 80070ac:	0800979c 	.word	0x0800979c

080070b0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80070b0:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 80070b4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80070b6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80070ba:	2300      	movs	r3, #0
 80070bc:	f383 8811 	msr	BASEPRI, r3
}
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
	...

080070d0 <chThdExit>:
 80070d0:	2320      	movs	r3, #32
 80070d2:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 80070d6:	f7fb b863 	b.w	80021a0 <chThdExitS>
 80070da:	bf00      	nop
 80070dc:	0000      	movs	r0, r0
	...

080070e0 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 80070e0:	4a0d      	ldr	r2, [pc, #52]	; (8007118 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->next;
 80070e2:	6810      	ldr	r0, [r2, #0]
 80070e4:	6951      	ldr	r1, [r2, #20]
  tqp->next             = tp->queue.next;
 80070e6:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 80070e8:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80070ea:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80070ec:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 80070ee:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 80070f0:	f880 4020 	strb.w	r4, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 80070f4:	688c      	ldr	r4, [r1, #8]
  tqp->next             = tp->queue.next;
 80070f6:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80070f8:	6150      	str	r0, [r2, #20]
  tp->state = CH_STATE_READY;
 80070fa:	f881 5020 	strb.w	r5, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80070fe:	e000      	b.n	8007102 <chSchDoReschedule+0x22>
 8007100:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	4294      	cmp	r4, r2
 8007106:	d3fb      	bcc.n	8007100 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8007108:	685a      	ldr	r2, [r3, #4]
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 800710a:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 800710c:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8007110:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8007112:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 8007114:	f7f9 b8e4 	b.w	80002e0 <_port_switch>
 8007118:	200018d0 	.word	0x200018d0
 800711c:	00000000 	.word	0x00000000

08007120 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8007120:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8007122:	4d1b      	ldr	r5, [pc, #108]	; (8007190 <chMtxUnlock+0x70>)
void chMtxUnlock(mutex_t *mp) {
 8007124:	4601      	mov	r1, r0
  thread_t *ctp = currp;
 8007126:	696e      	ldr	r6, [r5, #20]
 8007128:	2320      	movs	r3, #32
 800712a:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 800712e:	6800      	ldr	r0, [r0, #0]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8007130:	68cb      	ldr	r3, [r1, #12]
 8007132:	63b3      	str	r3, [r6, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8007134:	4288      	cmp	r0, r1
 8007136:	d025      	beq.n	8007184 <chMtxUnlock+0x64>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8007138:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 800713a:	b14b      	cbz	r3, 8007150 <chMtxUnlock+0x30>
 800713c:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800713e:	4293      	cmp	r3, r2
 8007140:	d003      	beq.n	800714a <chMtxUnlock+0x2a>
 8007142:	6892      	ldr	r2, [r2, #8]
 8007144:	4294      	cmp	r4, r2
 8007146:	bf38      	it	cc
 8007148:	4614      	movcc	r4, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 800714a:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1f5      	bne.n	800713c <chMtxUnlock+0x1c>
  tqp->next             = tp->queue.next;
 8007150:	6803      	ldr	r3, [r0, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8007152:	6b82      	ldr	r2, [r0, #56]	; 0x38
      ctp->prio = newprio;
 8007154:	60b4      	str	r4, [r6, #8]
 8007156:	600b      	str	r3, [r1, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8007158:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 800715a:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 800715e:	6381      	str	r1, [r0, #56]	; 0x38

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8007160:	f7f9 feee 	bl	8000f40 <chSchReadyI>
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 8007164:	682a      	ldr	r2, [r5, #0]
 8007166:	696b      	ldr	r3, [r5, #20]
  if (chSchIsRescRequiredI()) {
 8007168:	6892      	ldr	r2, [r2, #8]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	429a      	cmp	r2, r3
 800716e:	d803      	bhi.n	8007178 <chMtxUnlock+0x58>
 8007170:	2300      	movs	r3, #0
 8007172:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 8007176:	bd70      	pop	{r4, r5, r6, pc}
    chSchDoRescheduleAhead();
 8007178:	f7ff ffb2 	bl	80070e0 <chSchDoReschedule>
 800717c:	2300      	movs	r3, #0
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 8007184:	2300      	movs	r3, #0
 8007186:	6083      	str	r3, [r0, #8]
 8007188:	2300      	movs	r3, #0
 800718a:	f383 8811 	msr	BASEPRI, r3
}
 800718e:	bd70      	pop	{r4, r5, r6, pc}
 8007190:	200018d0 	.word	0x200018d0
	...

080071a0 <chThdRelease>:
 80071a0:	2220      	movs	r2, #32
 80071a2:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 80071a6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80071aa:	3b01      	subs	r3, #1
 80071ac:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 80071b0:	6a03      	ldr	r3, [r0, #32]
 80071b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80071b6:	2b0f      	cmp	r3, #15
 80071b8:	d003      	beq.n	80071c2 <chThdRelease+0x22>
 80071ba:	2300      	movs	r3, #0
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	4770      	bx	lr
    REG_REMOVE(tp);
 80071c2:	e9d0 1303 	ldrd	r1, r3, [r0, #12]
void chThdRelease(thread_t *tp) {
 80071c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    REG_REMOVE(tp);
 80071ca:	60d9      	str	r1, [r3, #12]
 80071cc:	68c1      	ldr	r1, [r0, #12]
 80071ce:	2700      	movs	r7, #0
 80071d0:	610b      	str	r3, [r1, #16]
 80071d2:	f387 8811 	msr	BASEPRI, r7
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 80071d6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d00d      	beq.n	80071fe <chThdRelease+0x5e>
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d001      	beq.n	80071ea <chThdRelease+0x4a>
}
 80071e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 80071ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80071ec:	69c1      	ldr	r1, [r0, #28]
 80071ee:	f382 8811 	msr	BASEPRI, r2
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	600a      	str	r2, [r1, #0]
  mp->next = php;
 80071f6:	6019      	str	r1, [r3, #0]
 80071f8:	f387 8811 	msr	BASEPRI, r7
 80071fc:	e7f3      	b.n	80071e6 <chThdRelease+0x46>
      chHeapFree(chThdGetWorkingAreaX(tp));
 80071fe:	69c6      	ldr	r6, [r0, #28]
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8007200:	e956 0302 	ldrd	r0, r3, [r6, #-8]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8007204:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8007206:	08db      	lsrs	r3, r3, #3
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8007208:	f846 3c04 	str.w	r3, [r6, #-4]
  qp = &heapp->header;
 800720c:	1d05      	adds	r5, r0, #4

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 800720e:	f100 080c 	add.w	r8, r0, #12
  hp = (heap_header_t *)p - 1U;
 8007212:	f1a6 0408 	sub.w	r4, r6, #8
 8007216:	f382 8811 	msr	BASEPRI, r2
  chMtxLockS(mp);
 800721a:	4640      	mov	r0, r8
 800721c:	f7fa ff60 	bl	80020e0 <chMtxLockS>
 8007220:	f387 8811 	msr	BASEPRI, r7
  qp = &heapp->header;
 8007224:	462b      	mov	r3, r5

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 8007226:	429d      	cmp	r5, r3
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8007228:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 800722a:	d001      	beq.n	8007230 <chThdRelease+0x90>
 800722c:	429c      	cmp	r4, r3
 800722e:	d902      	bls.n	8007236 <chThdRelease+0x96>
 8007230:	b11a      	cbz	r2, 800723a <chThdRelease+0x9a>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8007232:	4294      	cmp	r4, r2
 8007234:	d301      	bcc.n	800723a <chThdRelease+0x9a>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
      }
      break;
    }
    qp = H_NEXT(qp);
 8007236:	4613      	mov	r3, r2
 8007238:	e7f5      	b.n	8007226 <chThdRelease+0x86>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800723a:	f856 1c04 	ldr.w	r1, [r6, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 800723e:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 8007242:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8007244:	1c4a      	adds	r2, r1, #1
 8007246:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800724a:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800724e:	4281      	cmp	r1, r0
 8007250:	d011      	beq.n	8007276 <chThdRelease+0xd6>
      if ((H_LIMIT(qp) == hp)) {
 8007252:	6859      	ldr	r1, [r3, #4]
 8007254:	1c4a      	adds	r2, r1, #1
 8007256:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800725a:	4294      	cmp	r4, r2
 800725c:	d004      	beq.n	8007268 <chThdRelease+0xc8>
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 800725e:	4640      	mov	r0, r8
}
 8007260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007264:	f7ff bf5c 	b.w	8007120 <chMtxUnlock>
        H_NEXT(qp) = H_NEXT(hp);
 8007268:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 800726c:	3201      	adds	r2, #1
 800726e:	4411      	add	r1, r2
        H_NEXT(qp) = H_NEXT(hp);
 8007270:	6018      	str	r0, [r3, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8007272:	6059      	str	r1, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 8007274:	e7f3      	b.n	800725e <chThdRelease+0xbe>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8007276:	e9d1 1000 	ldrd	r1, r0, [r1]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 800727a:	4402      	add	r2, r0
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 800727c:	f846 1c08 	str.w	r1, [r6, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8007280:	f846 2c04 	str.w	r2, [r6, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8007284:	e7e5      	b.n	8007252 <chThdRelease+0xb2>
 8007286:	bf00      	nop
	...

08007290 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8007290:	4b24      	ldr	r3, [pc, #144]	; (8007324 <main+0x94>)
  PWR->CR |= PWR_CR_DBP;
 8007292:	4825      	ldr	r0, [pc, #148]	; (8007328 <main+0x98>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8007294:	691a      	ldr	r2, [r3, #16]
 8007296:	f062 021f 	orn	r2, r2, #31
//}

/*
 * Application entry point.
 */
int main(void) {
 800729a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800729e:	611a      	str	r2, [r3, #16]
 80072a0:	691a      	ldr	r2, [r3, #16]
 80072a2:	f002 021f 	and.w	r2, r2, #31
 80072a6:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 80072a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80072ac:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 80072ae:	695a      	ldr	r2, [r3, #20]
 80072b0:	615c      	str	r4, [r3, #20]
 80072b2:	2100      	movs	r1, #0
 80072b4:	695a      	ldr	r2, [r3, #20]
 80072b6:	6159      	str	r1, [r3, #20]
 80072b8:	695a      	ldr	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80072ba:	6a1a      	ldr	r2, [r3, #32]
 80072bc:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 80072c0:	621a      	str	r2, [r3, #32]
 80072c2:	6a1a      	ldr	r2, [r3, #32]
 80072c4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80072c8:	621a      	str	r2, [r3, #32]
 80072ca:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 80072cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072ce:	625c      	str	r4, [r3, #36]	; 0x24
 80072d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072d2:	6259      	str	r1, [r3, #36]	; 0x24
 80072d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 80072d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40
 80072de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80072e4:	661a      	str	r2, [r3, #96]	; 0x60
 80072e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 80072e8:	6802      	ldr	r2, [r0, #0]
 80072ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072ee:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80072f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072f2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80072f6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80072fa:	b08d      	sub	sp, #52	; 0x34
 80072fc:	d003      	beq.n	8007306 <main+0x76>
    RCC->BDCR = RCC_BDCR_BDRST;
 80072fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007302:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8007304:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8007306:	4d08      	ldr	r5, [pc, #32]	; (8007328 <main+0x98>)
  dma.allocated_mask = 0U;
 8007308:	4808      	ldr	r0, [pc, #32]	; (800732c <main+0x9c>)
 800730a:	686a      	ldr	r2, [r5, #4]
 800730c:	4b08      	ldr	r3, [pc, #32]	; (8007330 <main+0xa0>)
 800730e:	4909      	ldr	r1, [pc, #36]	; (8007334 <main+0xa4>)
 8007310:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007314:	2400      	movs	r4, #0
 8007316:	606a      	str	r2, [r5, #4]
 8007318:	4602      	mov	r2, r0
 800731a:	6004      	str	r4, [r0, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 800731c:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8007320:	e00c      	b.n	800733c <main+0xac>
 8007322:	bf00      	nop
 8007324:	40023800 	.word	0x40023800
 8007328:	40007000 	.word	0x40007000
 800732c:	20001aa0 	.word	0x20001aa0
 8007330:	08009854 	.word	0x08009854
 8007334:	40026010 	.word	0x40026010
 8007338:	f853 1c0c 	ldr.w	r1, [r3, #-12]
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 800733c:	600c      	str	r4, [r1, #0]
    dma.streams[i].func = NULL;
 800733e:	330c      	adds	r3, #12
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8007340:	4298      	cmp	r0, r3
    dma.streams[i].func = NULL;
 8007342:	6054      	str	r4, [r2, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8007344:	f102 0208 	add.w	r2, r2, #8
 8007348:	d1f6      	bne.n	8007338 <main+0xa8>
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800734a:	4ac2      	ldr	r2, [pc, #776]	; (8007654 <main+0x3c4>)
  gptp->config = NULL;
 800734c:	4ec2      	ldr	r6, [pc, #776]	; (8007658 <main+0x3c8>)
  DMA1->LIFCR = 0xFFFFFFFFU;
 800734e:	4bc3      	ldr	r3, [pc, #780]	; (800765c <main+0x3cc>)
  DMA2->LIFCR = 0xFFFFFFFFU;
 8007350:	4dc3      	ldr	r5, [pc, #780]	; (8007660 <main+0x3d0>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8007352:	f8df 8380 	ldr.w	r8, [pc, #896]	; 80076d4 <main+0x444>
  GPTD5.tim = STM32_TIM5;
 8007356:	4fc3      	ldr	r7, [pc, #780]	; (8007664 <main+0x3d4>)
  i2cp->config = NULL;
 8007358:	6054      	str	r4, [r2, #4]
  DMA1->LIFCR = 0xFFFFFFFFU;
 800735a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800735e:	f8c3 9008 	str.w	r9, [r3, #8]
 8007362:	2160      	movs	r1, #96	; 0x60
 8007364:	6074      	str	r4, [r6, #4]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007366:	f04f 0c40 	mov.w	ip, #64	; 0x40
  DMA1->HIFCR = 0xFFFFFFFFU;
 800736a:	f8c3 900c 	str.w	r9, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 800736e:	f8c5 9008 	str.w	r9, [r5, #8]
 8007372:	2380      	movs	r3, #128	; 0x80
 8007374:	60f7      	str	r7, [r6, #12]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8007376:	f8c5 900c 	str.w	r9, [r5, #12]
 800737a:	f44f 7780 	mov.w	r7, #256	; 0x100
 800737e:	f44f 7500 	mov.w	r5, #512	; 0x200
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8007382:	f888 1306 	strb.w	r1, [r8, #774]	; 0x306
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007386:	f8c8 c180 	str.w	ip, [r8, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800738a:	f8c8 c000 	str.w	ip, [r8]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800738e:	f888 1307 	strb.w	r1, [r8, #775]	; 0x307
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007392:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8007396:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800739a:	f8c8 3000 	str.w	r3, [r8]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800739e:	f888 1308 	strb.w	r1, [r8, #776]	; 0x308
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80073a2:	f8c8 7180 	str.w	r7, [r8, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80073a6:	f8c8 7000 	str.w	r7, [r8]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80073aa:	f888 1309 	strb.w	r1, [r8, #777]	; 0x309
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80073ae:	f8c8 5180 	str.w	r5, [r8, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80073b2:	f8c8 5000 	str.w	r5, [r8]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80073b6:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80073ba:	f888 130a 	strb.w	r1, [r8, #778]	; 0x30a
  gptp->state  = GPT_STOP;
 80073be:	f04f 0b01 	mov.w	fp, #1
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80073c2:	f8c8 c180 	str.w	ip, [r8, #384]	; 0x180
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 80073c6:	f8df e310 	ldr.w	lr, [pc, #784]	; 80076d8 <main+0x448>
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80073ca:	f8c8 c000 	str.w	ip, [r8]
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 80073ce:	48a6      	ldr	r0, [pc, #664]	; (8007668 <main+0x3d8>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80073d0:	f888 1317 	strb.w	r1, [r8, #791]	; 0x317
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80073d4:	f8c8 5180 	str.w	r5, [r8, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80073d8:	f8c8 5000 	str.w	r5, [r8]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80073dc:	f888 1328 	strb.w	r1, [r8, #808]	; 0x328
  tqp->next = (thread_t *)tqp;
 80073e0:	f102 050c 	add.w	r5, r2, #12
 80073e4:	49a1      	ldr	r1, [pc, #644]	; (800766c <main+0x3dc>)
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80073e6:	f8c8 7184 	str.w	r7, [r8, #388]	; 0x184
 80073ea:	60d5      	str	r5, [r2, #12]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80073ec:	f8c8 7004 	str.w	r7, [r8, #4]
  tqp->prev = (thread_t *)tqp;
 80073f0:	6115      	str	r5, [r2, #16]
  i2cp->state  = I2C_STOP;
 80073f2:	f882 b000 	strb.w	fp, [r2]
 80073f6:	f886 b000 	strb.w	fp, [r6]
  mp->owner = NULL;
 80073fa:	6154      	str	r4, [r2, #20]
 80073fc:	f8c2 e034 	str.w	lr, [r2, #52]	; 0x34
  I2CD1.dmarx  = NULL;
  I2CD1.dmatx  = NULL;
 8007400:	e9c2 440b 	strd	r4, r4, [r2, #44]	; 0x2c
  I2CD1.thread = NULL;
 8007404:	61d4      	str	r4, [r2, #28]
 8007406:	f7f9 fa0b 	bl	8000820 <sdObjectInit.constprop.0>
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 800740a:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 80076dc <main+0x44c>
  sdObjectInit(&SD5, NULL, notify5);
  SD5.usart = UART5;
#endif

#if STM32_SERIAL_USE_USART6
  sdObjectInit(&SD6, NULL, notify6);
 800740e:	4d98      	ldr	r5, [pc, #608]	; (8007670 <main+0x3e0>)
  SD1.usart = USART1;
 8007410:	4a98      	ldr	r2, [pc, #608]	; (8007674 <main+0x3e4>)
 8007412:	f8c0 2254 	str.w	r2, [r0, #596]	; 0x254
  sdObjectInit(&SD2, NULL, notify2);
 8007416:	4998      	ldr	r1, [pc, #608]	; (8007678 <main+0x3e8>)
  spip->state = SPI_STOP;
 8007418:	4e98      	ldr	r6, [pc, #608]	; (800767c <main+0x3ec>)
  usbp->state        = USB_STOP;
 800741a:	4f99      	ldr	r7, [pc, #612]	; (8007680 <main+0x3f0>)
 800741c:	4650      	mov	r0, sl
 800741e:	f7f9 f9ff 	bl	8000820 <sdObjectInit.constprop.0>
  SD2.usart = USART2;
 8007422:	4a98      	ldr	r2, [pc, #608]	; (8007684 <main+0x3f4>)
  sdObjectInit(&SD6, NULL, notify6);
 8007424:	4998      	ldr	r1, [pc, #608]	; (8007688 <main+0x3f8>)
  SD2.usart = USART2;
 8007426:	f8ca 2254 	str.w	r2, [sl, #596]	; 0x254
  sdObjectInit(&SD6, NULL, notify6);
 800742a:	4628      	mov	r0, r5
 800742c:	f7f9 f9f8 	bl	8000820 <sdObjectInit.constprop.0>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8007430:	4a96      	ldr	r2, [pc, #600]	; (800768c <main+0x3fc>)
 8007432:	f886 b000 	strb.w	fp, [r6]
 8007436:	f887 b000 	strb.w	fp, [r7]
 800743a:	6c11      	ldr	r1, [r2, #64]	; 0x40
  SD6.usart = USART6;
 800743c:	4894      	ldr	r0, [pc, #592]	; (8007690 <main+0x400>)
 800743e:	f8c5 0254 	str.w	r0, [r5, #596]	; 0x254
 8007442:	ea41 010b 	orr.w	r1, r1, fp
 8007446:	6411      	str	r1, [r2, #64]	; 0x40
 8007448:	6e15      	ldr	r5, [r2, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800744a:	4892      	ldr	r0, [pc, #584]	; (8007694 <main+0x404>)
  spip->config = NULL;
 800744c:	6074      	str	r4, [r6, #4]
  ST_ENABLE_CLOCK();
 800744e:	ea45 050b 	orr.w	r5, r5, fp
 8007452:	6615      	str	r5, [r2, #96]	; 0x60
  SPID1.spi       = SPI1;
 8007454:	4990      	ldr	r1, [pc, #576]	; (8007698 <main+0x408>)
 8007456:	6e12      	ldr	r2, [r2, #96]	; 0x60
  ST_ENABLE_STOP();
 8007458:	6882      	ldr	r2, [r0, #8]
 800745a:	61f1      	str	r1, [r6, #28]
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800745c:	498f      	ldr	r1, [pc, #572]	; (800769c <main+0x40c>)
 800745e:	62b1      	str	r1, [r6, #40]	; 0x28
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8007460:	3130      	adds	r1, #48	; 0x30
 8007462:	62f1      	str	r1, [r6, #44]	; 0x2c
  USBD1.otg       = OTG_FS;
 8007464:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8007468:	6579      	str	r1, [r7, #84]	; 0x54
 800746a:	ea42 020b 	orr.w	r2, r2, fp
  USBD1.otgparams = &fsparams;
 800746e:	498c      	ldr	r1, [pc, #560]	; (80076a0 <main+0x410>)
  tqp->next = (thread_t *)tqp;
 8007470:	4d8c      	ldr	r5, [pc, #560]	; (80076a4 <main+0x414>)
 8007472:	65b9      	str	r1, [r7, #88]	; 0x58
  SPID1.dmatx     = NULL;
 8007474:	e9c6 4408 	strd	r4, r4, [r6, #32]
  usbp->transmitting = 0;
 8007478:	e9c7 4401 	strd	r4, r4, [r7, #4]
  spip->thread = NULL;
 800747c:	60b4      	str	r4, [r6, #8]
 800747e:	6174      	str	r4, [r6, #20]
    usbp->in_params[i]  = NULL;
 8007480:	61fc      	str	r4, [r7, #28]
    usbp->out_params[i] = NULL;
 8007482:	62bc      	str	r4, [r7, #40]	; 0x28
    usbp->in_params[i]  = NULL;
 8007484:	623c      	str	r4, [r7, #32]
    usbp->out_params[i] = NULL;
 8007486:	62fc      	str	r4, [r7, #44]	; 0x2c
    usbp->in_params[i]  = NULL;
 8007488:	627c      	str	r4, [r7, #36]	; 0x24
    usbp->out_params[i] = NULL;
 800748a:	633c      	str	r4, [r7, #48]	; 0x30
 800748c:	6082      	str	r2, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800748e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007492:	f106 000c 	add.w	r0, r6, #12
  tqp->prev = (thread_t *)tqp;
 8007496:	e9c6 0003 	strd	r0, r0, [r6, #12]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800749a:	2380      	movs	r3, #128	; 0x80
 800749c:	f242 00cf 	movw	r0, #8399	; 0x20cf
 80074a0:	6290      	str	r0, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80074a2:	f8c2 902c 	str.w	r9, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80074a6:	6194      	str	r4, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80074a8:	6354      	str	r4, [r2, #52]	; 0x34
 80074aa:	606d      	str	r5, [r5, #4]
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 80074ac:	60d4      	str	r4, [r2, #12]
  ch.rlist.prio = NOPRIO;
 80074ae:	60ac      	str	r4, [r5, #8]
  STM32_ST_TIM->CR2    = 0;
 80074b0:	6054      	str	r4, [r2, #4]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 80074b2:	60ed      	str	r5, [r5, #12]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80074b4:	f8c2 b014 	str.w	fp, [r2, #20]
  ch.rlist.older = (thread_t *)&ch.rlist;
 80074b8:	612d      	str	r5, [r5, #16]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80074ba:	f8c2 b000 	str.w	fp, [r2]
 80074be:	f888 331c 	strb.w	r3, [r8, #796]	; 0x31c
  tqp->next = (thread_t *)tqp;
 80074c2:	4b79      	ldr	r3, [pc, #484]	; (80076a8 <main+0x418>)
 80074c4:	4979      	ldr	r1, [pc, #484]	; (80076ac <main+0x41c>)
  default_heap.provider = chCoreAllocAlignedWithOffset;
 80074c6:	4a7a      	ldr	r2, [pc, #488]	; (80076b0 <main+0x420>)
  ch_memcore.basemem = __heap_base__;
 80074c8:	f8df c214 	ldr.w	ip, [pc, #532]	; 80076e0 <main+0x450>
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80074cc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80074d0:	f103 0e0c 	add.w	lr, r3, #12
 80074d4:	f8c8 0180 	str.w	r0, [r8, #384]	; 0x180
  ch.vtlist.delta = (sysinterval_t)-1;
 80074d8:	f8c5 9020 	str.w	r9, [r5, #32]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80074dc:	f8c8 0000 	str.w	r0, [r8]
  tqp->prev = (thread_t *)tqp;
 80074e0:	e9c3 ee03 	strd	lr, lr, [r3, #12]
 80074e4:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 80074e6:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 80076e4 <main+0x454>
 80074ea:	615c      	str	r4, [r3, #20]
  H_PAGES(&default_heap.header) = 0;
 80074ec:	e9c3 4401 	strd	r4, r4, [r3, #4]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 80074f0:	f101 0010 	add.w	r0, r1, #16
  mp->object_size = size;
 80074f4:	2214      	movs	r2, #20
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80074f6:	f105 0318 	add.w	r3, r5, #24
 80074fa:	e9c1 0404 	strd	r0, r4, [r1, #16]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80074fe:	e9c5 3306 	strd	r3, r3, [r5, #24]
  mp->align = align;
 8007502:	2004      	movs	r0, #4
  ch_memcore.topmem  = __heap_end__;
 8007504:	4b6b      	ldr	r3, [pc, #428]	; (80076b4 <main+0x424>)
  mp->object_size = size;
 8007506:	618a      	str	r2, [r1, #24]
  ch_memcore.basemem = __heap_base__;
 8007508:	4a6b      	ldr	r2, [pc, #428]	; (80076b8 <main+0x428>)
 800750a:	f8cc 2000 	str.w	r2, [ip]
  ch_memcore.topmem  = __heap_end__;
 800750e:	f8cc 3004 	str.w	r3, [ip, #4]
  mp->align = align;
 8007512:	61c8      	str	r0, [r1, #28]
  tmp->cumulative = (rttime_t)0;
 8007514:	2200      	movs	r2, #0
 8007516:	2300      	movs	r3, #0
 8007518:	e9c1 1100 	strd	r1, r1, [r1]
  tqp->next = (thread_t *)tqp;
 800751c:	602d      	str	r5, [r5, #0]
  ch.vtlist.lasttime = (systime_t)0;
 800751e:	626c      	str	r4, [r5, #36]	; 0x24
 8007520:	608c      	str	r4, [r1, #8]
 8007522:	4680      	mov	r8, r0
  mp->provider = provider;
 8007524:	f8c1 e020 	str.w	lr, [r1, #32]
 8007528:	e9c1 0e0d 	strd	r0, lr, [r1, #52]	; 0x34
 800752c:	f101 0e3c 	add.w	lr, r1, #60	; 0x3c
 8007530:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8007534:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  tmp->last       = (rtcnt_t)0;
 8007538:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800753c:	f101 0224 	add.w	r2, r1, #36	; 0x24
 8007540:	e9c1 e00f 	strd	lr, r0, [r1, #60]	; 0x3c
 8007544:	f101 0328 	add.w	r3, r1, #40	; 0x28
  mp->object_size = size;
 8007548:	f04f 0c1c 	mov.w	ip, #28
 800754c:	624a      	str	r2, [r1, #36]	; 0x24
 800754e:	f101 0244 	add.w	r2, r1, #68	; 0x44
  tmp->best       = (rtcnt_t)-1;
 8007552:	f8cd 9018 	str.w	r9, [sp, #24]
  mp->next = NULL;
 8007556:	62cc      	str	r4, [r1, #44]	; 0x2c
  ch.tm.offset = (rtcnt_t)0;
 8007558:	672c      	str	r4, [r5, #112]	; 0x70
  tmp->n          = (ucnt_t)0;
 800755a:	9409      	str	r4, [sp, #36]	; 0x24
 800755c:	628b      	str	r3, [r1, #40]	; 0x28
  mp->object_size = size;
 800755e:	f8c1 c030 	str.w	ip, [r1, #48]	; 0x30
 8007562:	644a      	str	r2, [r1, #68]	; 0x44
    chTMStartMeasurementX(&tm);
 8007564:	a806      	add	r0, sp, #24
 8007566:	f7f9 fc6b 	bl	8000e40 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800756a:	a806      	add	r0, sp, #24
 800756c:	f7f9 fc40 	bl	8000df0 <chTMStopMeasurementX>
  } while (i > 0U);
 8007570:	f1b8 0801 	subs.w	r8, r8, #1
 8007574:	d1f6      	bne.n	8007564 <main+0x2d4>
  REG_INSERT(tp);
 8007576:	4b51      	ldr	r3, [pc, #324]	; (80076bc <main+0x42c>)
 8007578:	6928      	ldr	r0, [r5, #16]
  ch.tm.offset = tm.best;
 800757a:	9906      	ldr	r1, [sp, #24]
  tp->name      = name;
 800757c:	4a50      	ldr	r2, [pc, #320]	; (80076c0 <main+0x430>)
 800757e:	6729      	str	r1, [r5, #112]	; 0x70
  tp->prio      = prio;
 8007580:	2480      	movs	r4, #128	; 0x80
  tp->refs      = (trefs_t)1;
 8007582:	2101      	movs	r1, #1
  tp->prio      = prio;
 8007584:	636c      	str	r4, [r5, #52]	; 0x34
  tp->realprio  = prio;
 8007586:	66ac      	str	r4, [r5, #104]	; 0x68
  tp->name      = name;
 8007588:	646a      	str	r2, [r5, #68]	; 0x44
  tlp->next = (thread_t *)tlp;
 800758a:	f103 0428 	add.w	r4, r3, #40	; 0x28
  tqp->next = (thread_t *)tqp;
 800758e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
  tp->epending  = (eventmask_t)0;
 8007592:	e9c5 8818 	strd	r8, r8, [r5, #96]	; 0x60
  REG_INSERT(tp);
 8007596:	e9c5 500e 	strd	r5, r0, [r5, #56]	; 0x38
  tp->flags     = CH_FLAG_MODE_STATIC;
 800759a:	f885 804d 	strb.w	r8, [r5, #77]	; 0x4d
  tp->refs      = (trefs_t)1;
 800759e:	f885 104e 	strb.w	r1, [r5, #78]	; 0x4e
  REG_INSERT(tp);
 80075a2:	60c3      	str	r3, [r0, #12]
 80075a4:	e9c5 4215 	strd	r4, r2, [r5, #84]	; 0x54
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80075a8:	e9c5 3304 	strd	r3, r3, [r5, #16]
  currp->state = CH_STATE_CURRENT;
 80075ac:	f885 104c 	strb.w	r1, [r5, #76]	; 0x4c
  currp->wabase = NULL;
 80075b0:	f8c5 8048 	str.w	r8, [r5, #72]	; 0x48
  tqp->prev = (thread_t *)tqp;
 80075b4:	65ea      	str	r2, [r5, #92]	; 0x5c
 80075b6:	2420      	movs	r4, #32
 80075b8:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 80075bc:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075be:	4b41      	ldr	r3, [pc, #260]	; (80076c4 <main+0x434>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80075c0:	4a41      	ldr	r2, [pc, #260]	; (80076c8 <main+0x438>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075c2:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075c4:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 80075c8:	4001      	ands	r1, r0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80075ca:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 80075ce:	430a      	orrs	r2, r1
 80075d0:	f6a0 300f 	subw	r0, r0, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80075d4:	60da      	str	r2, [r3, #12]
 80075d6:	68c2      	ldr	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80075d8:	493c      	ldr	r1, [pc, #240]	; (80076cc <main+0x43c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80075da:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80075de:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80075e0:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075e2:	2010      	movs	r0, #16
 80075e4:	f042 0201 	orr.w	r2, r2, #1
 80075e8:	600a      	str	r2, [r1, #0]
 80075ea:	77d8      	strb	r0, [r3, #31]
 80075ec:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80075f0:	f388 8811 	msr	BASEPRI, r8
  __ASM volatile ("cpsie i" : : : "memory");
 80075f4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80075f6:	f384 8811 	msr	BASEPRI, r4
  tp = chThdCreateSuspendedI(tdp);
 80075fa:	4835      	ldr	r0, [pc, #212]	; (80076d0 <main+0x440>)
 80075fc:	f7f9 fc28 	bl	8000e50 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8007600:	f7fa fa66 	bl	8001ad0 <chSchWakeupS.constprop.0>
 8007604:	f388 8811 	msr	BASEPRI, r8
 8007608:	f384 8811 	msr	BASEPRI, r4
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 800760c:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d111      	bne.n	8007638 <main+0x3a8>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 8007614:	4b1d      	ldr	r3, [pc, #116]	; (800768c <main+0x3fc>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8007616:	4a2f      	ldr	r2, [pc, #188]	; (80076d4 <main+0x444>)
 8007618:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800761a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800761e:	6419      	str	r1, [r3, #64]	; 0x40
 8007620:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8007622:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8007626:	6619      	str	r1, [r3, #96]	; 0x60
 8007628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800762a:	21c0      	movs	r1, #192	; 0xc0
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800762c:	2340      	movs	r3, #64	; 0x40
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800762e:	f882 1326 	strb.w	r1, [r2, #806]	; 0x326
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007632:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007636:	6053      	str	r3, [r2, #4]
  USART_TypeDef *u = sdp->usart;
 8007638:	f8da 3254 	ldr.w	r3, [sl, #596]	; 0x254
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800763c:	4a0d      	ldr	r2, [pc, #52]	; (8007674 <main+0x3e4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	f000 838c 	beq.w	8007d5c <main+0xacc>
 8007644:	4912      	ldr	r1, [pc, #72]	; (8007690 <main+0x400>)
    fck = STM32_PCLK2 / config->speed;
 8007646:	f240 22d9 	movw	r2, #729	; 0x2d9
 800764a:	428b      	cmp	r3, r1
 800764c:	bf18      	it	ne
 800764e:	f44f 72b6 	movne.w	r2, #364	; 0x16c
 8007652:	e049      	b.n	80076e8 <main+0x458>
 8007654:	20000c5c 	.word	0x20000c5c
 8007658:	20000c4c 	.word	0x20000c4c
 800765c:	40026000 	.word	0x40026000
 8007660:	40026400 	.word	0x40026400
 8007664:	40000c00 	.word	0x40000c00
 8007668:	20000c94 	.word	0x20000c94
 800766c:	08000a21 	.word	0x08000a21
 8007670:	2000114c 	.word	0x2000114c
 8007674:	40011000 	.word	0x40011000
 8007678:	08000a31 	.word	0x08000a31
 800767c:	20001838 	.word	0x20001838
 8007680:	20001868 	.word	0x20001868
 8007684:	40004400 	.word	0x40004400
 8007688:	08000a41 	.word	0x08000a41
 800768c:	40023800 	.word	0x40023800
 8007690:	40011400 	.word	0x40011400
 8007694:	e0042000 	.word	0xe0042000
 8007698:	40013000 	.word	0x40013000
 800769c:	06010016 	.word	0x06010016
 80076a0:	080099d4 	.word	0x080099d4
 80076a4:	200018d0 	.word	0x200018d0
 80076a8:	20001a84 	.word	0x20001a84
 80076ac:	20001944 	.word	0x20001944
 80076b0:	080009e1 	.word	0x080009e1
 80076b4:	20010000 	.word	0x20010000
 80076b8:	20002050 	.word	0x20002050
 80076bc:	200018fc 	.word	0x200018fc
 80076c0:	0800990c 	.word	0x0800990c
 80076c4:	e000ed00 	.word	0xe000ed00
 80076c8:	05fa0300 	.word	0x05fa0300
 80076cc:	e0001000 	.word	0xe0001000
 80076d0:	080099f4 	.word	0x080099f4
 80076d4:	e000e100 	.word	0xe000e100
 80076d8:	40005400 	.word	0x40005400
 80076dc:	20000ef0 	.word	0x20000ef0
 80076e0:	20001a68 	.word	0x20001a68
 80076e4:	08000dc1 	.word	0x08000dc1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80076e8:	2040      	movs	r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80076ea:	f04f 0901 	mov.w	r9, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80076ee:	f242 112c 	movw	r1, #8492	; 0x212c
  u->SR = 0;
 80076f2:	2400      	movs	r4, #0
  u->BRR = fck;
 80076f4:	609a      	str	r2, [r3, #8]
  sdp->state = SD_READY;
 80076f6:	f04f 0802 	mov.w	r8, #2
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80076fa:	6118      	str	r0, [r3, #16]
 80076fc:	22ff      	movs	r2, #255	; 0xff
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80076fe:	f8c3 9014 	str.w	r9, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8007702:	60d9      	str	r1, [r3, #12]
  u->SR = 0;
 8007704:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8007706:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f88a 2258 	strb.w	r2, [sl, #600]	; 0x258
 800770e:	f88a 8008 	strb.w	r8, [sl, #8]
 8007712:	f384 8811 	msr	BASEPRI, r4
      0,
      0
  };

  sdStart(&SHELLPORT, &serial_config6);
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8007716:	48ca      	ldr	r0, [pc, #808]	; (8007a40 <main+0x7b0>)
 8007718:	f240 3282 	movw	r2, #898	; 0x382
 800771c:	2104      	movs	r1, #4
 800771e:	f7f9 feff 	bl	8001520 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 8007722:	48c7      	ldr	r0, [pc, #796]	; (8007a40 <main+0x7b0>)
 8007724:	f240 3282 	movw	r2, #898	; 0x382
 8007728:	2108      	movs	r1, #8
 800772a:	f7f9 fef9 	bl	8001520 <_pal_lld_setgroupmode>

  chprintf(dbg, "\r\nNVRAM Programmer: %i.%i \r\nSystem started. (Shell)\r\n", VMAJOR, VMINOR);
 800772e:	49c5      	ldr	r1, [pc, #788]	; (8007a44 <main+0x7b4>)
 8007730:	48c5      	ldr	r0, [pc, #788]	; (8007a48 <main+0x7b8>)
 8007732:	2303      	movs	r3, #3
 8007734:	220a      	movs	r2, #10
 8007736:	f7fb f81b 	bl	8002770 <chprintf>
  sdup->vmt = &vmt;
 800773a:	4bc4      	ldr	r3, [pc, #784]	; (8007a4c <main+0x7bc>)
 800773c:	4ac4      	ldr	r2, [pc, #784]	; (8007a50 <main+0x7c0>)
  ibqp->notify    = infy;
 800773e:	49c5      	ldr	r1, [pc, #788]	; (8007a54 <main+0x7c4>)
  obqp->notify    = onfy;
 8007740:	f8df c348 	ldr.w	ip, [pc, #840]	; 8007a8c <main+0x7fc>
  ibqp->notify    = infy;
 8007744:	63d9      	str	r1, [r3, #60]	; 0x3c
 8007746:	4618      	mov	r0, r3
  ibqp->brdptr    = bp;
 8007748:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 800774c:	f840 2b04 	str.w	r2, [r0], #4
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8007750:	f203 428c 	addw	r2, r3, #1164	; 0x48c
  tqp->next = (thread_t *)tqp;
 8007754:	f103 0e0c 	add.w	lr, r3, #12
 8007758:	65da      	str	r2, [r3, #92]	; 0x5c
  obqp->notify    = onfy;
 800775a:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800775e:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8007762:	f103 0c44 	add.w	ip, r3, #68	; 0x44
  esp->next = (event_listener_t *)esp;
 8007766:	6058      	str	r0, [r3, #4]
  ibqp->bsize     = size + sizeof (size_t);
 8007768:	f44f 7082 	mov.w	r0, #260	; 0x104
  ibqp->bcounter  = 0;
 800776c:	619c      	str	r4, [r3, #24]
  sdup->state = SDU_STOP;
 800776e:	f883 9008 	strb.w	r9, [r3, #8]
  ibqp->suspended = suspended;
 8007772:	f883 9014 	strb.w	r9, [r3, #20]
  obqp->suspended = suspended;
 8007776:	f883 904c 	strb.w	r9, [r3, #76]	; 0x4c
  ibqp->top       = NULL;
 800777a:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  obqp->top       = NULL;
 800777e:	e9c3 441b 	strd	r4, r4, [r3, #108]	; 0x6c
  tqp->prev = (thread_t *)tqp;
 8007782:	e9c3 ee03 	strd	lr, lr, [r3, #12]
  ibqp->bwrptr    = bp;
 8007786:	e9c3 1107 	strd	r1, r1, [r3, #28]
  obqp->bwrptr    = bp;
 800778a:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
 800778e:	e9c3 cc11 	strd	ip, ip, [r3, #68]	; 0x44
  ibqp->bn        = n;
 8007792:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
  obqp->bcounter  = n;
 8007796:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
  obqp->bn        = n;
 800779a:	f8c3 8064 	str.w	r8, [r3, #100]	; 0x64
  ibqp->link      = link;
 800779e:	641b      	str	r3, [r3, #64]	; 0x40
  obqp->link      = link;
 80077a0:	679b      	str	r3, [r3, #120]	; 0x78
  ibqp->buffers   = bp;
 80077a2:	6319      	str	r1, [r3, #48]	; 0x30
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80077a4:	625a      	str	r2, [r3, #36]	; 0x24
  obqp->buffers   = bp;
 80077a6:	669a      	str	r2, [r3, #104]	; 0x68
  ibqp->bsize     = size + sizeof (size_t);
 80077a8:	6298      	str	r0, [r3, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
 80077aa:	6618      	str	r0, [r3, #96]	; 0x60
 80077ac:	f04f 0920 	mov.w	r9, #32
 80077b0:	f389 8811 	msr	BASEPRI, r9
  sdup->config = config;
 80077b4:	4aa8      	ldr	r2, [pc, #672]	; (8007a58 <main+0x7c8>)
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 80077b6:	623b      	str	r3, [r7, #32]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 80077b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    usbp->in_params[config->int_in - 1U]  = sdup;
 80077ba:	61fb      	str	r3, [r7, #28]
  sdup->state = SDU_READY;
 80077bc:	f883 8008 	strb.w	r8, [r3, #8]
  sdup->config = config;
 80077c0:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
 80077c4:	f384 8811 	msr	BASEPRI, r4
  sduObjectInit(&OSTRICHPORT);
  sduStart(&OSTRICHPORT, &serusbcfg1);
//  palSetPadMode(GPIOA, 11, PAL_MODE_ALTERNATE(10));
//  palSetPadMode(GPIOA, 12, PAL_MODE_ALTERNATE(10));

  usbDisconnectBus(serusbcfg1.usbp);
 80077c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077ca:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80077cc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80077d0:	6393      	str	r3, [r2, #56]	; 0x38
  chThdSleepMilliseconds(1500);
 80077d2:	f643 2098 	movw	r0, #15000	; 0x3a98
 80077d6:	f7fa fba3 	bl	8001f20 <chThdSleep>
 80077da:	f389 8811 	msr	BASEPRI, r9
  if (usbp->state == USB_STOP) {
 80077de:	783b      	ldrb	r3, [r7, #0]
  usbp->config = config;
 80077e0:	4a9e      	ldr	r2, [pc, #632]	; (8007a5c <main+0x7cc>)
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	2b01      	cmp	r3, #1
    usbp->epc[i] = NULL;
 80077e6:	e9c7 4403 	strd	r4, r4, [r7, #12]
 80077ea:	e9c7 4405 	strd	r4, r4, [r7, #20]
 80077ee:	f000 822a 	beq.w	8007c46 <main+0x9b6>
  usbp->state = USB_READY;
 80077f2:	f04f 0302 	mov.w	r3, #2
 80077f6:	703b      	strb	r3, [r7, #0]
 80077f8:	2300      	movs	r3, #0
 80077fa:	f383 8811 	msr	BASEPRI, r3
  usbStart(serusbcfg1.usbp, &usbcfg);
  usbConnectBus(serusbcfg1.usbp);
 80077fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
//  TRESET_INACTIVE;
//  BUS_in_use = 1;
}

void SPI_init(void){
  palSetPadMode(SPI_PORT, SCK_PAD, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 8007800:	4f8f      	ldr	r7, [pc, #572]	; (8007a40 <main+0x7b0>)
 8007802:	6b93      	ldr	r3, [r2, #56]	; 0x38
  palSetPadMode(SPI_PORT, MOSI_PAD, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
  palSetPadMode(SPI_PORT, MISO_PAD, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);

  palClearLine(SEL0);
 8007804:	f8df a288 	ldr.w	sl, [pc, #648]	; 8007a90 <main+0x800>
  palClearLine(SEL1);
  palClearLine(SEL2);
  palClearLine(SEL4);

  PLD_IDLE;
 8007808:	4c95      	ldr	r4, [pc, #596]	; (8007a60 <main+0x7d0>)
 800780a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800780e:	6393      	str	r3, [r2, #56]	; 0x38
  palSetPadMode(SPI_PORT, SCK_PAD, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 8007810:	4638      	mov	r0, r7
 8007812:	f240 229a 	movw	r2, #666	; 0x29a
 8007816:	2120      	movs	r1, #32
 8007818:	f7f9 fe82 	bl	8001520 <_pal_lld_setgroupmode>
  palSetPadMode(SPI_PORT, MOSI_PAD, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 800781c:	f240 229a 	movw	r2, #666	; 0x29a
 8007820:	2180      	movs	r1, #128	; 0x80
 8007822:	f7f9 fe7d 	bl	8001520 <_pal_lld_setgroupmode>
  palSetPadMode(SPI_PORT, MISO_PAD, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 8007826:	f240 229a 	movw	r2, #666	; 0x29a
 800782a:	2140      	movs	r1, #64	; 0x40
 800782c:	f7f9 fe78 	bl	8001520 <_pal_lld_setgroupmode>
  palClearLine(SEL1);
 8007830:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  palClearLine(SEL2);
 8007834:	f44f 4900 	mov.w	r9, #32768	; 0x8000
  palClearLine(SEL0);
 8007838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  palClearLine(SEL4);
 800783c:	f04f 0c02 	mov.w	ip, #2
  palClearLine(SEL0);
 8007840:	f8aa 301a 	strh.w	r3, [sl, #26]
  palClearLine(SEL1);
 8007844:	f8aa 801a 	strh.w	r8, [sl, #26]
  palClearLine(SEL2);
 8007848:	f8aa 901a 	strh.w	r9, [sl, #26]
  palClearLine(SEL4);
 800784c:	f8a7 c01a 	strh.w	ip, [r7, #26]
  PLD_IDLE;
 8007850:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8007854:	f8a4 c018 	strh.w	ip, [r4, #24]
  WE_INACTIVE;
 8007858:	f04f 0b01 	mov.w	fp, #1
  CNT_INACTIVE;
 800785c:	f44f 7c80 	mov.w	ip, #256	; 0x100
  WE_INACTIVE;
 8007860:	f8a7 b018 	strh.w	fp, [r7, #24]
  CNT_INACTIVE;
 8007864:	f8a7 c01a 	strh.w	ip, [r7, #26]
  MRC_INACTIVE;
 8007868:	f8a4 9018 	strh.w	r9, [r4, #24]
  CPR_INACTIVE;
 800786c:	f8a4 8018 	strh.w	r8, [r4, #24]
  CNTOE_INACTIVE;
 8007870:	8323      	strh	r3, [r4, #24]
  RAMOE_INACTIVE;
 8007872:	f04f 0310 	mov.w	r3, #16
 8007876:	833b      	strh	r3, [r7, #24]
  TRESET_INACTIVE;
 8007878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800787c:	8363      	strh	r3, [r4, #26]
  DEBUG_HI;
  palSetLineMode(BUSFREE, PAL_MODE_INPUT);
 800787e:	4620      	mov	r0, r4
 8007880:	2200      	movs	r2, #0
 8007882:	f44f 7100 	mov.w	r1, #512	; 0x200
  DEBUG_HI;
 8007886:	f8a4 b018 	strh.w	fp, [r4, #24]
  palSetLineMode(BUSFREE, PAL_MODE_INPUT);
 800788a:	f7f9 fe49 	bl	8001520 <_pal_lld_setgroupmode>
  palSetLineMode(PLD, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800788e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007892:	2219      	movs	r2, #25
 8007894:	f7f9 fe44 	bl	8001520 <_pal_lld_setgroupmode>
  palSetLineMode(ON_OFF, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8007898:	4638      	mov	r0, r7
 800789a:	4659      	mov	r1, fp
 800789c:	2219      	movs	r2, #25
 800789e:	f7f9 fe3f 	bl	8001520 <_pal_lld_setgroupmode>
  palSetLineMode(CNT, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80078a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078a6:	2219      	movs	r2, #25
 80078a8:	f7f9 fe3a 	bl	8001520 <_pal_lld_setgroupmode>
  palSetLineMode(MRC, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80078ac:	4620      	mov	r0, r4
 80078ae:	4649      	mov	r1, r9
 80078b0:	2219      	movs	r2, #25
 80078b2:	f7f9 fe35 	bl	8001520 <_pal_lld_setgroupmode>
  palSetLineMode(CPR, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80078b6:	4641      	mov	r1, r8
 80078b8:	2219      	movs	r2, #25
 80078ba:	f7f9 fe31 	bl	8001520 <_pal_lld_setgroupmode>
  palSetLineMode(CNTOE, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80078be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078c2:	4619      	mov	r1, r3
 80078c4:	2219      	movs	r2, #25
 80078c6:	f7f9 fe2b 	bl	8001520 <_pal_lld_setgroupmode>
  palSetLineMode(RAMOE, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80078ca:	4638      	mov	r0, r7
 80078cc:	2110      	movs	r1, #16
 80078ce:	2219      	movs	r2, #25
 80078d0:	f7f9 fe26 	bl	8001520 <_pal_lld_setgroupmode>
  palSetLineMode(TRESET, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80078d4:	4620      	mov	r0, r4
 80078d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80078da:	2219      	movs	r2, #25
 80078dc:	f7f9 fe20 	bl	8001520 <_pal_lld_setgroupmode>
  palSetLineMode(SEL0, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80078e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078e4:	4619      	mov	r1, r3
 80078e6:	4650      	mov	r0, sl
 80078e8:	2219      	movs	r2, #25
 80078ea:	f7f9 fe19 	bl	8001520 <_pal_lld_setgroupmode>
  palSetLineMode(SEL1, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80078ee:	4641      	mov	r1, r8
 80078f0:	2219      	movs	r2, #25
 80078f2:	f7f9 fe15 	bl	8001520 <_pal_lld_setgroupmode>
  palSetLineMode(SEL2, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80078f6:	4649      	mov	r1, r9
 80078f8:	2219      	movs	r2, #25
 80078fa:	f7f9 fe11 	bl	8001520 <_pal_lld_setgroupmode>
  palSetLineMode(SEL4, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 80078fe:	4638      	mov	r0, r7
 8007900:	2102      	movs	r1, #2
 8007902:	2219      	movs	r2, #25
 8007904:	f7f9 fe0c 	bl	8001520 <_pal_lld_setgroupmode>
  palSetLineMode(DEBUG, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8007908:	4659      	mov	r1, fp
 800790a:	4620      	mov	r0, r4
 800790c:	2219      	movs	r2, #25
 800790e:	f7f9 fe07 	bl	8001520 <_pal_lld_setgroupmode>
 8007912:	2320      	movs	r3, #32
 8007914:	f383 8811 	msr	BASEPRI, r3
  if (spip->state == SPI_STOP) {
 8007918:	7833      	ldrb	r3, [r6, #0]
  spip->config = config;
 800791a:	4a52      	ldr	r2, [pc, #328]	; (8007a64 <main+0x7d4>)
 800791c:	6072      	str	r2, [r6, #4]
 800791e:	455b      	cmp	r3, fp
 8007920:	d11a      	bne.n	8007958 <main+0x6c8>
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8007922:	4951      	ldr	r1, [pc, #324]	; (8007a68 <main+0x7d8>)
 8007924:	2008      	movs	r0, #8
 8007926:	f7f8 ffab 	bl	8000880 <dmaStreamAllocI.part.0.constprop.0>
 800792a:	4950      	ldr	r1, [pc, #320]	; (8007a6c <main+0x7dc>)
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI1_RX_DMA_STREAM,
 800792c:	6230      	str	r0, [r6, #32]
 800792e:	200b      	movs	r0, #11
 8007930:	f7f8 ffa6 	bl	8000880 <dmaStreamAllocI.part.0.constprop.0>
      rccEnableSPI1(true);
 8007934:	4b4e      	ldr	r3, [pc, #312]	; (8007a70 <main+0x7e0>)
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8007936:	6a31      	ldr	r1, [r6, #32]
      rccEnableSPI1(true);
 8007938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 800793a:	680c      	ldr	r4, [r1, #0]
      rccEnableSPI1(true);
 800793c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007940:	645a      	str	r2, [r3, #68]	; 0x44
 8007942:	6e59      	ldr	r1, [r3, #100]	; 0x64
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8007944:	69f2      	ldr	r2, [r6, #28]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI1_TX_DMA_STREAM,
 8007946:	6270      	str	r0, [r6, #36]	; 0x24
      rccEnableSPI1(true);
 8007948:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800794c:	6800      	ldr	r0, [r0, #0]
      rccEnableSPI1(true);
 800794e:	6659      	str	r1, [r3, #100]	; 0x64
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8007950:	320c      	adds	r2, #12
      rccEnableSPI1(true);
 8007952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8007954:	60a2      	str	r2, [r4, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8007956:	6082      	str	r2, [r0, #8]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8007958:	6871      	ldr	r1, [r6, #4]
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 800795a:	e9d6 030a 	ldrd	r0, r3, [r6, #40]	; 0x28
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 800795e:	8a0a      	ldrh	r2, [r1, #16]
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8007960:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8007964:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8007968:	0514      	lsls	r4, r2, #20
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800796a:	bf44      	itt	mi
 800796c:	f440 5020 	orrmi.w	r0, r0, #10240	; 0x2800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8007970:	f443 5320 	orrmi.w	r3, r3, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8007974:	e9c6 030a 	strd	r0, r3, [r6, #40]	; 0x28
  if (spip->config->circular) {
 8007978:	780b      	ldrb	r3, [r1, #0]
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800797a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
  if (spip->config->circular) {
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 815a 	beq.w	8007c36 <main+0x9a6>
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8007982:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8007984:	f440 7084 	orr.w	r0, r0, #264	; 0x108
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8007988:	f443 7384 	orr.w	r3, r3, #264	; 0x108
 800798c:	e9c6 030a 	strd	r0, r3, [r6, #40]	; 0x28
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8007990:	69f3      	ldr	r3, [r6, #28]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8007992:	8a49      	ldrh	r1, [r1, #18]
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8007994:	6818      	ldr	r0, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8007996:	f041 0107 	orr.w	r1, r1, #7
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800799a:	f442 7241 	orr.w	r2, r2, #772	; 0x304
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 800799e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80079a2:	6018      	str	r0, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80079a4:	601a      	str	r2, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 80079a6:	6059      	str	r1, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 80079a8:	681a      	ldr	r2, [r3, #0]
  spip->state = SPI_READY;
 80079aa:	2102      	movs	r1, #2
 80079ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	2700      	movs	r7, #0
 80079b4:	7031      	strb	r1, [r6, #0]
 80079b6:	f387 8811 	msr	BASEPRI, r7
 80079ba:	2420      	movs	r4, #32
 80079bc:	f384 8811 	msr	BASEPRI, r4
  chMtxLockS(mp);
 80079c0:	482c      	ldr	r0, [pc, #176]	; (8007a74 <main+0x7e4>)
 80079c2:	f7fa fb8d 	bl	80020e0 <chMtxLockS>
 80079c6:	f387 8811 	msr	BASEPRI, r7
 80079ca:	f384 8811 	msr	BASEPRI, r4
  if (gptp->state == GPT_STOP) {
 80079ce:	492a      	ldr	r1, [pc, #168]	; (8007a78 <main+0x7e8>)
  gptp->config = config;
 80079d0:	4a2a      	ldr	r2, [pc, #168]	; (8007a7c <main+0x7ec>)
 80079d2:	780b      	ldrb	r3, [r1, #0]
 80079d4:	604a      	str	r2, [r1, #4]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d11e      	bne.n	8007a18 <main+0x788>
      rccEnableTIM5(true);
 80079da:	4b25      	ldr	r3, [pc, #148]	; (8007a70 <main+0x7e0>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80079dc:	4a28      	ldr	r2, [pc, #160]	; (8007a80 <main+0x7f0>)
 80079de:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80079e0:	f041 0108 	orr.w	r1, r1, #8
 80079e4:	6419      	str	r1, [r3, #64]	; 0x40
 80079e6:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80079e8:	f041 0108 	orr.w	r1, r1, #8
 80079ec:	6619      	str	r1, [r3, #96]	; 0x60
 80079ee:	6e19      	ldr	r1, [r3, #96]	; 0x60
      rccResetTIM5();
 80079f0:	6a19      	ldr	r1, [r3, #32]
 80079f2:	f041 0108 	orr.w	r1, r1, #8
 80079f6:	6219      	str	r1, [r3, #32]
 80079f8:	6a19      	ldr	r1, [r3, #32]
 80079fa:	f021 0108 	bic.w	r1, r1, #8
 80079fe:	6219      	str	r1, [r3, #32]
 8007a00:	2070      	movs	r0, #112	; 0x70
 8007a02:	6a1b      	ldr	r3, [r3, #32]
 8007a04:	f882 0332 	strb.w	r0, [r2, #818]	; 0x332
      gptp->clock = STM32_TIMCLK1;
 8007a08:	481b      	ldr	r0, [pc, #108]	; (8007a78 <main+0x7e8>)
 8007a0a:	491e      	ldr	r1, [pc, #120]	; (8007a84 <main+0x7f4>)
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007a0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007a10:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 8007a14:	6081      	str	r1, [r0, #8]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007a16:	6053      	str	r3, [r2, #4]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8007a18:	4817      	ldr	r0, [pc, #92]	; (8007a78 <main+0x7e8>)
 8007a1a:	491b      	ldr	r1, [pc, #108]	; (8007a88 <main+0x7f8>)
 8007a1c:	6883      	ldr	r3, [r0, #8]
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8007a1e:	68c2      	ldr	r2, [r0, #12]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8007a20:	fba1 1303 	umull	r1, r3, r1, r3
 8007a24:	0c9b      	lsrs	r3, r3, #18
 8007a26:	3b01      	subs	r3, #1
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8007a28:	2600      	movs	r6, #0
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8007a2a:	b29b      	uxth	r3, r3
  gptp->state = GPT_READY;
 8007a2c:	2102      	movs	r1, #2
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8007a2e:	6016      	str	r6, [r2, #0]
  gptp->tim->CR2  = gptp->config->cr2;
 8007a30:	6056      	str	r6, [r2, #4]
 8007a32:	7001      	strb	r1, [r0, #0]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 8007a34:	6293      	str	r3, [r2, #40]	; 0x28
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
 8007a36:	6116      	str	r6, [r2, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8007a38:	60d6      	str	r6, [r2, #12]
 8007a3a:	f386 8811 	msr	BASEPRI, r6
 8007a3e:	e029      	b.n	8007a94 <main+0x804>
 8007a40:	40020000 	.word	0x40020000
 8007a44:	080097dc 	.word	0x080097dc
 8007a48:	20000ef0 	.word	0x20000ef0
 8007a4c:	200013a8 	.word	0x200013a8
 8007a50:	08009bdc 	.word	0x08009bdc
 8007a54:	080018a1 	.word	0x080018a1
 8007a58:	08009a8c 	.word	0x08009a8c
 8007a5c:	08009aa8 	.word	0x08009aa8
 8007a60:	40020400 	.word	0x40020400
 8007a64:	20000808 	.word	0x20000808
 8007a68:	08001201 	.word	0x08001201
 8007a6c:	080011e1 	.word	0x080011e1
 8007a70:	40023800 	.word	0x40023800
 8007a74:	20001844 	.word	0x20001844
 8007a78:	20000c4c 	.word	0x20000c4c
 8007a7c:	080099e0 	.word	0x080099e0
 8007a80:	e000e100 	.word	0xe000e100
 8007a84:	0501bd00 	.word	0x0501bd00
 8007a88:	431bde83 	.word	0x431bde83
 8007a8c:	08001941 	.word	0x08001941
 8007a90:	40020800 	.word	0x40020800
  /*
   * Starting GPT5 driver, it is used for checking the BUSFREE Signal
   */
  gptStart(&GPTD5, &gpt5cfg1);

  BUS_in_use = 1; //assume bus is in use
 8007a94:	4bce      	ldr	r3, [pc, #824]	; (8007dd0 <main+0xb40>)
 8007a96:	2701      	movs	r7, #1
 8007a98:	701f      	strb	r7, [r3, #0]
 8007a9a:	2420      	movs	r4, #32
 8007a9c:	f384 8811 	msr	BASEPRI, r4
  tp->wabase = (stkalign_t *)wsp;
 8007aa0:	4bcc      	ldr	r3, [pc, #816]	; (8007dd4 <main+0xb44>)
  REG_INSERT(tp);
 8007aa2:	692a      	ldr	r2, [r5, #16]
  tp->state     = CH_STATE_WTSTART;
 8007aa4:	f8a3 12a0 	strh.w	r1, [r3, #672]	; 0x2a0
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8007aa8:	48cb      	ldr	r0, [pc, #812]	; (8007dd8 <main+0xb48>)
 8007aaa:	f8c3 025c 	str.w	r0, [r3, #604]	; 0x25c
 8007aae:	f503 7117 	add.w	r1, r3, #604	; 0x25c
 8007ab2:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
  REG_INSERT(tp);
 8007ab6:	f503 7020 	add.w	r0, r3, #640	; 0x280
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8007aba:	f8df e344 	ldr.w	lr, [pc, #836]	; 8007e00 <main+0xb70>
  tp->name      = name;
 8007abe:	f8df c344 	ldr.w	ip, [pc, #836]	; 8007e04 <main+0xb74>
  REG_INSERT(tp);
 8007ac2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  tp->prio      = prio;
 8007ac6:	2180      	movs	r1, #128	; 0x80
 8007ac8:	f8c3 1288 	str.w	r1, [r3, #648]	; 0x288
  tp->realprio  = prio;
 8007acc:	f8c3 12bc 	str.w	r1, [r3, #700]	; 0x2bc
  tp->epending  = (eventmask_t)0;
 8007ad0:	e9c3 66ad 	strd	r6, r6, [r3, #692]	; 0x2b4
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8007ad4:	f8c3 6260 	str.w	r6, [r3, #608]	; 0x260
  tp->refs      = (trefs_t)1;
 8007ad8:	f883 72a2 	strb.w	r7, [r3, #674]	; 0x2a2
  REG_INSERT(tp);
 8007adc:	f8c3 528c 	str.w	r5, [r3, #652]	; 0x28c
  tp->wabase = (stkalign_t *)wsp;
 8007ae0:	f8c3 329c 	str.w	r3, [r3, #668]	; 0x29c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8007ae4:	f8c3 e27c 	str.w	lr, [r3, #636]	; 0x27c
  tp->name      = name;
 8007ae8:	f8c3 c298 	str.w	ip, [r3, #664]	; 0x298
  tlp->next = (thread_t *)tlp;
 8007aec:	f503 712a 	add.w	r1, r3, #680	; 0x2a8
  REG_INSERT(tp);
 8007af0:	60d0      	str	r0, [r2, #12]
  tqp->next = (thread_t *)tqp;
 8007af2:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 8007af6:	e9c3 12aa 	strd	r1, r2, [r3, #680]	; 0x2a8
  tqp->prev = (thread_t *)tqp;
 8007afa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
 8007afe:	6128      	str	r0, [r5, #16]
  chSchWakeupS(tp, MSG_OK);
 8007b00:	f7f9 ffe6 	bl	8001ad0 <chSchWakeupS.constprop.0>
 8007b04:	f386 8811 	msr	BASEPRI, r6
 8007b08:	4bb4      	ldr	r3, [pc, #720]	; (8007ddc <main+0xb4c>)
 8007b0a:	601b      	str	r3, [r3, #0]
 8007b0c:	f384 8811 	msr	BASEPRI, r4
  elp->wflags   = wflags;
 8007b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  elp->next     = esp->next;
 8007b14:	6819      	ldr	r1, [r3, #0]
  elp->listener = currp;
 8007b16:	696a      	ldr	r2, [r5, #20]
  elp->events   = events;
 8007b18:	9703      	str	r7, [sp, #12]
  esp->next     = elp;
 8007b1a:	af01      	add	r7, sp, #4
  elp->flags    = (eventflags_t)0;
 8007b1c:	9604      	str	r6, [sp, #16]
  elp->next     = esp->next;
 8007b1e:	9101      	str	r1, [sp, #4]
  esp->next     = elp;
 8007b20:	601f      	str	r7, [r3, #0]
  elp->listener = currp;
 8007b22:	9202      	str	r2, [sp, #8]
  elp->wflags   = wflags;
 8007b24:	9005      	str	r0, [sp, #20]
 8007b26:	f386 8811 	msr	BASEPRI, r6
 8007b2a:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 8007e08 <main+0xb78>
 8007b2e:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8007e0c <main+0xb7c>
 8007b32:	4fab      	ldr	r7, [pc, #684]	; (8007de0 <main+0xb50>)
  thread_t *shelltp = NULL;
 8007b34:	46b3      	mov	fp, r6
        shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
                                       "shell1", NORMALPRIO + 1,
                                       shellThread, (void *)&shell_cfg1);
      }
#else
    if (!shelltp)
 8007b36:	f1bb 0f00 	cmp.w	fp, #0
 8007b3a:	d019      	beq.n	8007b70 <main+0x8e0>
      shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
                                    "shell", NORMALPRIO + 1,
                                    shellThread, (void *)&shell_cfg1);
    else if (chThdTerminatedX(shelltp)) {
 8007b3c:	f89b 3020 	ldrb.w	r3, [fp, #32]
 8007b40:	2b0f      	cmp	r3, #15
 8007b42:	d066      	beq.n	8007c12 <main+0x982>
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8007b44:	f8d5 8014 	ldr.w	r8, [r5, #20]
 8007b48:	f384 8811 	msr	BASEPRI, r4
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8007b4c:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8007b50:	07d3      	lsls	r3, r2, #31
 8007b52:	d564      	bpl.n	8007c1e <main+0x98e>
 8007b54:	f06f 0301 	mvn.w	r3, #1
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 8007b58:	4013      	ands	r3, r2
 8007b5a:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 8007b5e:	f386 8811 	msr	BASEPRI, r6
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
#endif
    /* Waiting for an exit event then freeing terminated shells.*/
    chEvtWaitAny(EVENT_MASK(0));
    if (chThdTerminatedX(shelltp)) {
 8007b62:	f89b 3020 	ldrb.w	r3, [fp, #32]
 8007b66:	2b0f      	cmp	r3, #15
 8007b68:	d1e5      	bne.n	8007b36 <main+0x8a6>
      chThdRelease(shelltp);
 8007b6a:	4658      	mov	r0, fp
 8007b6c:	f7ff fb18 	bl	80071a0 <chThdRelease>
 8007b70:	f384 8811 	msr	BASEPRI, r4
 8007b74:	4638      	mov	r0, r7
 8007b76:	f7fa fab3 	bl	80020e0 <chMtxLockS>
 8007b7a:	f386 8811 	msr	BASEPRI, r6
  while (H_NEXT(qp) != NULL) {
 8007b7e:	4b99      	ldr	r3, [pc, #612]	; (8007de4 <main+0xb54>)
 8007b80:	6859      	ldr	r1, [r3, #4]
 8007b82:	b1d9      	cbz	r1, 8007bbc <main+0x92c>
  qp = &heapp->header;
 8007b84:	1d18      	adds	r0, r3, #4
 8007b86:	4686      	mov	lr, r0
 8007b88:	e000      	b.n	8007b8c <main+0x8fc>
  while (H_NEXT(qp) != NULL) {
 8007b8a:	4619      	mov	r1, r3
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8007b8c:	6848      	ldr	r0, [r1, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8007b8e:	f101 030f 	add.w	r3, r1, #15
 8007b92:	f023 0307 	bic.w	r3, r3, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8007b96:	1c42      	adds	r2, r0, #1
 8007b98:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8007b9c:	f1a3 0c08 	sub.w	ip, r3, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8007ba0:	eba2 0803 	sub.w	r8, r2, r3
 8007ba4:	4594      	cmp	ip, r2
 8007ba6:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8007baa:	d203      	bcs.n	8007bb4 <main+0x924>
 8007bac:	f5b8 7f8c 	cmp.w	r8, #280	; 0x118
 8007bb0:	f200 80d7 	bhi.w	8007d62 <main+0xad2>
  while (H_NEXT(qp) != NULL) {
 8007bb4:	680b      	ldr	r3, [r1, #0]
 8007bb6:	468e      	mov	lr, r1
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e6      	bne.n	8007b8a <main+0x8fa>
  H_UNLOCK(heapp);
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	f7ff faaf 	bl	8007120 <chMtxUnlock>
  if (heapp->provider != NULL) {
 8007bc2:	4b88      	ldr	r3, [pc, #544]	; (8007de4 <main+0xb54>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	b33b      	cbz	r3, 8007c18 <main+0x988>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8007bc8:	2208      	movs	r2, #8
 8007bca:	4611      	mov	r1, r2
 8007bcc:	f640 00c8 	movw	r0, #2248	; 0x8c8
 8007bd0:	4798      	blx	r3
    if (ahp != NULL) {
 8007bd2:	4680      	mov	r8, r0
 8007bd4:	b300      	cbz	r0, 8007c18 <main+0x988>
      H_HEAP(hp) = heapp;
 8007bd6:	4a83      	ldr	r2, [pc, #524]	; (8007de4 <main+0xb54>)
      H_SIZE(hp) = size;
 8007bd8:	f640 03c8 	movw	r3, #2248	; 0x8c8
 8007bdc:	e940 2302 	strd	r2, r3, [r0, #-8]
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + size),
 8007be0:	f608 02c8 	addw	r2, r8, #2248	; 0x8c8
  thread_descriptor_t td = {
 8007be4:	2381      	movs	r3, #129	; 0x81
 8007be6:	9208      	str	r2, [sp, #32]
 8007be8:	4a7f      	ldr	r2, [pc, #508]	; (8007de8 <main+0xb58>)
 8007bea:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8007bee:	e9cd a806 	strd	sl, r8, [sp, #24]
 8007bf2:	920b      	str	r2, [sp, #44]	; 0x2c
 8007bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf6:	f384 8811 	msr	BASEPRI, r4
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8007bfa:	a806      	add	r0, sp, #24
 8007bfc:	f7f9 f928 	bl	8000e50 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8007c00:	2301      	movs	r3, #1
 8007c02:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp = chThdCreateSuspendedI(&td);
 8007c06:	4683      	mov	fp, r0
  chSchWakeupS(tp, MSG_OK);
 8007c08:	f7f9 ff62 	bl	8001ad0 <chSchWakeupS.constprop.0>
 8007c0c:	f386 8811 	msr	BASEPRI, r6
 8007c10:	e798      	b.n	8007b44 <main+0x8b4>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
 8007c12:	4658      	mov	r0, fp
 8007c14:	f7ff fac4 	bl	80071a0 <chThdRelease>
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 8007c18:	f04f 0b00 	mov.w	fp, #0
 8007c1c:	e792      	b.n	8007b44 <main+0x8b4>
    ctp->u.ewmask = events;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8007c24:	200a      	movs	r0, #10
 8007c26:	f7f9 ff83 	bl	8001b30 <chSchGoSleepS>
    m = ctp->epending & events;
 8007c2a:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8007c2e:	f002 0301 	and.w	r3, r2, #1
 8007c32:	43db      	mvns	r3, r3
 8007c34:	e790      	b.n	8007b58 <main+0x8c8>
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8007c36:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8007c38:	f420 7084 	bic.w	r0, r0, #264	; 0x108
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8007c3c:	f423 7384 	bic.w	r3, r3, #264	; 0x108
 8007c40:	e9c6 030a 	strd	r0, r3, [r6, #40]	; 0x28
 8007c44:	e6a4      	b.n	8007990 <main+0x700>
      rccEnableOTG_FS(true);
 8007c46:	4b69      	ldr	r3, [pc, #420]	; (8007dec <main+0xb5c>)
  stm32_otg_t *otgp = usbp->otg;
 8007c48:	f8d7 8054 	ldr.w	r8, [r7, #84]	; 0x54
      rccEnableOTG_FS(true);
 8007c4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8007c4e:	4a68      	ldr	r2, [pc, #416]	; (8007df0 <main+0xb60>)
 8007c50:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007c54:	6359      	str	r1, [r3, #52]	; 0x34
 8007c56:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c58:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007c5c:	6559      	str	r1, [r3, #84]	; 0x54
 8007c5e:	6d59      	ldr	r1, [r3, #84]	; 0x54
      rccResetOTG_FS();
 8007c60:	6959      	ldr	r1, [r3, #20]
 8007c62:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007c66:	6159      	str	r1, [r3, #20]
 8007c68:	6959      	ldr	r1, [r3, #20]
 8007c6a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007c6e:	6159      	str	r1, [r3, #20]
 8007c70:	695b      	ldr	r3, [r3, #20]
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8007c72:	4960      	ldr	r1, [pc, #384]	; (8007df4 <main+0xb64>)
 8007c74:	23e0      	movs	r3, #224	; 0xe0
 8007c76:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007c7a:	2308      	movs	r3, #8
 8007c7c:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007c80:	6093      	str	r3, [r2, #8]
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8007c82:	4b5d      	ldr	r3, [pc, #372]	; (8007df8 <main+0xb68>)
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8007c84:	f8c8 100c 	str.w	r1, [r8, #12]
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8007c88:	22c0      	movs	r2, #192	; 0xc0
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8007c8a:	f8c8 3800 	str.w	r3, [r8, #2048]	; 0x800
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8007c8e:	f44f 1334 	mov.w	r3, #2949120	; 0x2d0000
    otgp->PCGCCTL = 0;
 8007c92:	f8c8 4e00 	str.w	r4, [r8, #3584]	; 0xe00
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8007c96:	f8c8 2000 	str.w	r2, [r8]
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8007c9a:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8007c9e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	dafb      	bge.n	8007c9e <main+0xa0e>
  otgp->GRSTCTL = GRSTCTL_CSRST;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	f8c8 3010 	str.w	r3, [r8, #16]
  chSysPolledDelayX(cycles);
 8007cac:	200c      	movs	r0, #12
 8007cae:	f7f9 f9b7 	bl	8001020 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 8007cb2:	f8d8 4010 	ldr.w	r4, [r8, #16]
 8007cb6:	f014 0401 	ands.w	r4, r4, #1
 8007cba:	d1fa      	bne.n	8007cb2 <main+0xa22>
 8007cbc:	2012      	movs	r0, #18
 8007cbe:	f7f9 f9af 	bl	8001020 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8007cc2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	dafb      	bge.n	8007cc2 <main+0xa32>
    otg_disable_ep(usbp);
 8007cca:	e9d7 1315 	ldrd	r1, r3, [r7, #84]	; 0x54
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8007cce:	f8d3 e008 	ldr.w	lr, [r3, #8]
    otgp->GAHBCFG = 0;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f8c8 3008 	str.w	r3, [r8, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cdc:	e000      	b.n	8007ce0 <main+0xa50>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8007cde:	464c      	mov	r4, r9
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8007ce0:	eb01 1244 	add.w	r2, r1, r4, lsl #5
 8007ce4:	4613      	mov	r3, r2
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8007ce6:	f8d2 c900 	ldr.w	ip, [r2, #2304]	; 0x900
 8007cea:	f1bc 0f00 	cmp.w	ip, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8007cee:	f104 0901 	add.w	r9, r4, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8007cf2:	da05      	bge.n	8007d00 <main+0xa70>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8007cf4:	f8d2 c900 	ldr.w	ip, [r2, #2304]	; 0x900
 8007cf8:	f04c 4c80 	orr.w	ip, ip, #1073741824	; 0x40000000
 8007cfc:	f8c2 c900 	str.w	ip, [r2, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8007d00:	f8d2 cb00 	ldr.w	ip, [r2, #2816]	; 0xb00
 8007d04:	f1bc 0f00 	cmp.w	ip, #0
 8007d08:	da05      	bge.n	8007d16 <main+0xa86>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 8007d0a:	f8d2 cb00 	ldr.w	ip, [r2, #2816]	; 0xb00
 8007d0e:	f04c 4c80 	orr.w	ip, ip, #1073741824	; 0x40000000
 8007d12:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8007d16:	4574      	cmp	r4, lr
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8007d18:	f8c3 0908 	str.w	r0, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8007d1c:	f8c3 0b08 	str.w	r0, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8007d20:	d1dd      	bne.n	8007cde <main+0xa4e>
    if (usbp->config->sof_cb == NULL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68da      	ldr	r2, [r3, #12]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8007d26:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8007d2a:	f8c1 381c 	str.w	r3, [r1, #2076]	; 0x81c
    otgp->DIEPMSK  = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f8c8 3810 	str.w	r3, [r8, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 8007d34:	f8c8 3814 	str.w	r3, [r8, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 8007d38:	f8c8 381c 	str.w	r3, [r8, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 8007d3c:	2a00      	cmp	r2, #0
 8007d3e:	d067      	beq.n	8007e10 <main+0xb80>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8007d40:	4b2e      	ldr	r3, [pc, #184]	; (8007dfc <main+0xb6c>)
 8007d42:	f8c8 3018 	str.w	r3, [r8, #24]
    otgp->GINTSTS  = 0xFFFFFFFF;
 8007d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d4a:	f8c8 3014 	str.w	r3, [r8, #20]
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 8007d4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d52:	f043 0301 	orr.w	r3, r3, #1
 8007d56:	f8c8 3008 	str.w	r3, [r8, #8]
 8007d5a:	e54a      	b.n	80077f2 <main+0x562>
    fck = STM32_PCLK2 / config->speed;
 8007d5c:	f240 22d9 	movw	r2, #729	; 0x2d9
 8007d60:	e4c2      	b.n	80076e8 <main+0x458>
      if (ahp > hp) {
 8007d62:	458c      	cmp	ip, r1
 8007d64:	4683      	mov	fp, r0
 8007d66:	4670      	mov	r0, lr
 8007d68:	d81c      	bhi.n	8007da4 <main+0xb14>
        if (H_PAGES(hp) == pages) {
 8007d6a:	f240 1319 	movw	r3, #281	; 0x119
 8007d6e:	459b      	cmp	fp, r3
 8007d70:	d052      	beq.n	8007e18 <main+0xb88>
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8007d72:	f601 03d8 	addw	r3, r1, #2264	; 0x8d8
 8007d76:	1ad2      	subs	r2, r2, r3
 8007d78:	10d2      	asrs	r2, r2, #3
          H_NEXT(fp) = H_NEXT(hp);
 8007d7a:	680b      	ldr	r3, [r1, #0]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8007d7c:	f8c1 28d4 	str.w	r2, [r1, #2260]	; 0x8d4
          fp = H_BLOCK(hp) + pages;
 8007d80:	f501 620d 	add.w	r2, r1, #2256	; 0x8d0
          H_NEXT(fp) = H_NEXT(hp);
 8007d84:	f8c1 38d0 	str.w	r3, [r1, #2256]	; 0x8d0
          H_NEXT(qp) = fp;
 8007d88:	468c      	mov	ip, r1
 8007d8a:	6002      	str	r2, [r0, #0]
      H_HEAP(hp) = heapp;
 8007d8c:	46e0      	mov	r8, ip
      H_SIZE(hp) = size;
 8007d8e:	f640 03c8 	movw	r3, #2248	; 0x8c8
 8007d92:	f8cc 3004 	str.w	r3, [ip, #4]
      H_HEAP(hp) = heapp;
 8007d96:	4b13      	ldr	r3, [pc, #76]	; (8007de4 <main+0xb54>)
 8007d98:	f848 3b08 	str.w	r3, [r8], #8
      H_UNLOCK(heapp);
 8007d9c:	4638      	mov	r0, r7
 8007d9e:	f7ff f9bf 	bl	8007120 <chMtxUnlock>
 8007da2:	e71d      	b.n	8007be0 <main+0x950>
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8007da4:	f101 0208 	add.w	r2, r1, #8
 8007da8:	ebac 0202 	sub.w	r2, ip, r2
        if (bpages > pages) {
 8007dac:	f240 1019 	movw	r0, #281	; 0x119
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8007db0:	10d2      	asrs	r2, r2, #3
        if (bpages > pages) {
 8007db2:	4580      	cmp	r8, r0
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8007db4:	604a      	str	r2, [r1, #4]
        if (bpages > pages) {
 8007db6:	d0e9      	beq.n	8007d8c <main+0xafc>
          H_NEXT(fp) = H_NEXT(hp);
 8007db8:	6808      	ldr	r0, [r1, #0]
 8007dba:	f8cc 08d0 	str.w	r0, [ip, #2256]	; 0x8d0
          H_PAGES(fp) = (bpages - pages) - 1U;
 8007dbe:	f5a8 728d 	sub.w	r2, r8, #282	; 0x11a
          fp = H_BLOCK(ahp) + pages;
 8007dc2:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
          H_PAGES(fp) = (bpages - pages) - 1U;
 8007dc6:	f8cc 28d4 	str.w	r2, [ip, #2260]	; 0x8d4
          H_NEXT(hp) = fp;
 8007dca:	600b      	str	r3, [r1, #0]
 8007dcc:	e7de      	b.n	8007d8c <main+0xafc>
 8007dce:	bf00      	nop
 8007dd0:	20000c48 	.word	0x20000c48
 8007dd4:	20001d80 	.word	0x20001d80
 8007dd8:	08002de1 	.word	0x08002de1
 8007ddc:	20001d74 	.word	0x20001d74
 8007de0:	20001a90 	.word	0x20001a90
 8007de4:	20001a84 	.word	0x20001a84
 8007de8:	08009a94 	.word	0x08009a94
 8007dec:	40023800 	.word	0x40023800
 8007df0:	e000e100 	.word	0xe000e100
 8007df4:	40001440 	.word	0x40001440
 8007df8:	02200003 	.word	0x02200003
 8007dfc:	c0303c08 	.word	0xc0303c08
 8007e00:	080002f1 	.word	0x080002f1
 8007e04:	08009814 	.word	0x08009814
 8007e08:	0800975c 	.word	0x0800975c
 8007e0c:	08006ab1 	.word	0x08006ab1
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8007e10:	4b03      	ldr	r3, [pc, #12]	; (8007e20 <main+0xb90>)
 8007e12:	f8c8 3018 	str.w	r3, [r8, #24]
 8007e16:	e796      	b.n	8007d46 <main+0xab6>
          H_NEXT(qp) = H_NEXT(hp);
 8007e18:	680b      	ldr	r3, [r1, #0]
 8007e1a:	6003      	str	r3, [r0, #0]
 8007e1c:	468c      	mov	ip, r1
 8007e1e:	e7b5      	b.n	8007d8c <main+0xafc>
 8007e20:	c0303c00 	.word	0xc0303c00
	...

08007e30 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8007e30:	4b68      	ldr	r3, [pc, #416]	; (8007fd4 <__early_init+0x1a4>)
  gpiop->PUPDR   = config->pupdr;
 8007e32:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 800801c <__early_init+0x1ec>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8007e36:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8007e38:	4867      	ldr	r0, [pc, #412]	; (8007fd8 <__early_init+0x1a8>)
 8007e3a:	4968      	ldr	r1, [pc, #416]	; (8007fdc <__early_init+0x1ac>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8007e3c:	f042 021f 	orr.w	r2, r2, #31
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8007e40:	b4f0      	push	{r4, r5, r6, r7}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8007e42:	611a      	str	r2, [r3, #16]
 8007e44:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8007e46:	4d66      	ldr	r5, [pc, #408]	; (8007fe0 <__early_init+0x1b0>)
  gpiop->AFRL    = config->afrl;
 8007e48:	4f66      	ldr	r7, [pc, #408]	; (8007fe4 <__early_init+0x1b4>)
  gpiop->OTYPER  = config->otyper;
 8007e4a:	4c67      	ldr	r4, [pc, #412]	; (8007fe8 <__early_init+0x1b8>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8007e4c:	f022 021f 	bic.w	r2, r2, #31
 8007e50:	611a      	str	r2, [r3, #16]
 8007e52:	691a      	ldr	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8007e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e56:	f042 021f 	orr.w	r2, r2, #31
 8007e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8007e5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e5e:	f042 021f 	orr.w	r2, r2, #31
 8007e62:	651a      	str	r2, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8007e64:	f44f 7280 	mov.w	r2, #256	; 0x100
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8007e68:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8007e6a:	606a      	str	r2, [r5, #4]
  gpiop->ODR     = config->odr;
 8007e6c:	f64f 76ff 	movw	r6, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
 8007e70:	f06f 0250 	mvn.w	r2, #80	; 0x50
 8007e74:	60aa      	str	r2, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8007e76:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->AFRH    = config->afrh;
 8007e7a:	f44f 222a 	mov.w	r2, #696320	; 0xaa000
  gpiop->ODR     = config->odr;
 8007e7e:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8007e80:	622f      	str	r7, [r5, #32]
  gpiop->MODER   = config->moder;
 8007e82:	4f5a      	ldr	r7, [pc, #360]	; (8007fec <__early_init+0x1bc>)
  gpiop->AFRH    = config->afrh;
 8007e84:	626a      	str	r2, [r5, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 8007e86:	2200      	movs	r2, #0
  gpiop->MODER   = config->moder;
 8007e88:	602f      	str	r7, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8007e8a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  gpiop->PUPDR   = config->pupdr;
 8007e8e:	4f58      	ldr	r7, [pc, #352]	; (8007ff0 <__early_init+0x1c0>)
  gpiop->OTYPER  = config->otyper;
 8007e90:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8007e92:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8007e94:	60c7      	str	r7, [r0, #12]
  gpiop->MODER   = config->moder;
 8007e96:	2780      	movs	r7, #128	; 0x80
  gpiop->ODR     = config->odr;
 8007e98:	6146      	str	r6, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8007e9a:	6202      	str	r2, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8007e9c:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8007e9e:	6007      	str	r7, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 8007ea0:	4f54      	ldr	r7, [pc, #336]	; (8007ff4 <__early_init+0x1c4>)
  gpiop->OTYPER  = config->otyper;
 8007ea2:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8007ea4:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8007ea6:	60cf      	str	r7, [r1, #12]
  gpiop->MODER   = config->moder;
 8007ea8:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  gpiop->ODR     = config->odr;
 8007eac:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8007eae:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8007eb0:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8007eb2:	600f      	str	r7, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8007eb4:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
  gpiop->PUPDR   = config->pupdr;
 8007eb8:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
  gpiop->OTYPER  = config->otyper;
 8007ebc:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8007ebe:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8007ec0:	60e7      	str	r7, [r4, #12]
  gpiop->ODR     = config->odr;
 8007ec2:	6166      	str	r6, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8007ec4:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8007ec6:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8007ec8:	6022      	str	r2, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8007eca:	f8c0 2c04 	str.w	r2, [r0, #3076]	; 0xc04
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8007ece:	f5a4 34ce 	sub.w	r4, r4, #105472	; 0x19c00
  gpiop->OSPEEDR = config->ospeedr;
 8007ed2:	f8c0 5c08 	str.w	r5, [r0, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
 8007ed6:	f8c0 7c0c 	str.w	r7, [r0, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
 8007eda:	f8c0 6c14 	str.w	r6, [r0, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
 8007ede:	f8c0 2c20 	str.w	r2, [r0, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
 8007ee2:	f8c0 2c24 	str.w	r2, [r0, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
 8007ee6:	f8c0 2c00 	str.w	r2, [r0, #3072]	; 0xc00
  gpiop->PUPDR   = config->pupdr;
 8007eea:	4843      	ldr	r0, [pc, #268]	; (8007ff8 <__early_init+0x1c8>)
  gpiop->OTYPER  = config->otyper;
 8007eec:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8007eee:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8007ef0:	60c8      	str	r0, [r1, #12]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8007ef2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8007ef6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  gpiop->ODR     = config->odr;
 8007efa:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8007efc:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8007efe:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8007f00:	600a      	str	r2, [r1, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8007f02:	641d      	str	r5, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8007f04:	6020      	str	r0, [r4, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	f042 0201 	orr.w	r2, r2, #1
 8007f0c:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	0796      	lsls	r6, r2, #30
 8007f12:	d5fc      	bpl.n	8007f0e <__early_init+0xde>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8007f14:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8007f16:	4a2f      	ldr	r2, [pc, #188]	; (8007fd4 <__early_init+0x1a4>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8007f18:	f021 0103 	bic.w	r1, r1, #3
 8007f1c:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8007f1e:	6893      	ldr	r3, [r2, #8]
 8007f20:	f013 030c 	ands.w	r3, r3, #12
 8007f24:	d1fb      	bne.n	8007f1e <__early_init+0xee>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8007f26:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8007f28:	492a      	ldr	r1, [pc, #168]	; (8007fd4 <__early_init+0x1a4>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8007f2a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8007f2e:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8007f30:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON;
 8007f32:	6813      	ldr	r3, [r2, #0]
 8007f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f38:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8007f3a:	680b      	ldr	r3, [r1, #0]
 8007f3c:	039d      	lsls	r5, r3, #14
 8007f3e:	d5fc      	bpl.n	8007f3a <__early_init+0x10a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8007f40:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8007f42:	4b24      	ldr	r3, [pc, #144]	; (8007fd4 <__early_init+0x1a4>)
  RCC->CSR |= RCC_CSR_LSION;
 8007f44:	f042 0201 	orr.w	r2, r2, #1
 8007f48:	674a      	str	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8007f4a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007f4c:	0794      	lsls	r4, r2, #30
 8007f4e:	d5fc      	bpl.n	8007f4a <__early_init+0x11a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8007f50:	4a2a      	ldr	r2, [pc, #168]	; (8007ffc <__early_init+0x1cc>)
 8007f52:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8007f54:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8007f56:	492a      	ldr	r1, [pc, #168]	; (8008000 <__early_init+0x1d0>)
  RCC->CR |= RCC_CR_PLLON;
 8007f58:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007f5c:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8007f5e:	684b      	ldr	r3, [r1, #4]
 8007f60:	0458      	lsls	r0, r3, #17
 8007f62:	d5fc      	bpl.n	8007f5e <__early_init+0x12e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8007f64:	4b1b      	ldr	r3, [pc, #108]	; (8007fd4 <__early_init+0x1a4>)
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	0192      	lsls	r2, r2, #6
 8007f6a:	d5fc      	bpl.n	8007f66 <__early_init+0x136>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8007f6c:	4925      	ldr	r1, [pc, #148]	; (8008004 <__early_init+0x1d4>)
 8007f6e:	6099      	str	r1, [r3, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8007f70:	4a25      	ldr	r2, [pc, #148]	; (8008008 <__early_init+0x1d8>)
    RCC->DCKCFGR = dckcfgr |
 8007f72:	2103      	movs	r1, #3
 8007f74:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8007f78:	6812      	ldr	r2, [r2, #0]
 8007f7a:	4b24      	ldr	r3, [pc, #144]	; (800800c <__early_init+0x1dc>)
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d01e      	beq.n	8007fbe <__early_init+0x18e>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8007f80:	4b23      	ldr	r3, [pc, #140]	; (8008010 <__early_init+0x1e0>)
 8007f82:	f240 7202 	movw	r2, #1794	; 0x702
 8007f86:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8007f88:	4a21      	ldr	r2, [pc, #132]	; (8008010 <__early_init+0x1e0>)
 8007f8a:	6813      	ldr	r3, [r2, #0]
 8007f8c:	f003 030f 	and.w	r3, r3, #15
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d1fa      	bne.n	8007f8a <__early_init+0x15a>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8007f94:	4b0f      	ldr	r3, [pc, #60]	; (8007fd4 <__early_init+0x1a4>)
 8007f96:	689a      	ldr	r2, [r3, #8]
 8007f98:	f042 0202 	orr.w	r2, r2, #2
 8007f9c:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8007f9e:	689a      	ldr	r2, [r3, #8]
 8007fa0:	f002 020c 	and.w	r2, r2, #12
 8007fa4:	2a08      	cmp	r2, #8
 8007fa6:	d1fa      	bne.n	8007f9e <__early_init+0x16e>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8007fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007faa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fae:	645a      	str	r2, [r3, #68]	; 0x44
 8007fb0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007fb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fb6:	665a      	str	r2, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8007fb8:	bcf0      	pop	{r4, r5, r6, r7}
 8007fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fbc:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8007fbe:	4a15      	ldr	r2, [pc, #84]	; (8008014 <__early_init+0x1e4>)
 8007fc0:	4b15      	ldr	r3, [pc, #84]	; (8008018 <__early_init+0x1e8>)
 8007fc2:	6812      	ldr	r2, [r2, #0]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d1db      	bne.n	8007f80 <__early_init+0x150>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8007fc8:	4b11      	ldr	r3, [pc, #68]	; (8008010 <__early_init+0x1e0>)
 8007fca:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	e7da      	b.n	8007f88 <__early_init+0x158>
 8007fd2:	bf00      	nop
 8007fd4:	40023800 	.word	0x40023800
 8007fd8:	40020400 	.word	0x40020400
 8007fdc:	40020800 	.word	0x40020800
 8007fe0:	40020000 	.word	0x40020000
 8007fe4:	55507700 	.word	0x55507700
 8007fe8:	40020c00 	.word	0x40020c00
 8007fec:	2a80a9a0 	.word	0x2a80a9a0
 8007ff0:	55555455 	.word	0x55555455
 8007ff4:	01555555 	.word	0x01555555
 8007ff8:	55555550 	.word	0x55555550
 8007ffc:	07415419 	.word	0x07415419
 8008000:	40007000 	.word	0x40007000
 8008004:	38881000 	.word	0x38881000
 8008008:	e0042000 	.word	0xe0042000
 800800c:	20006411 	.word	0x20006411
 8008010:	40023c00 	.word	0x40023c00
 8008014:	e000ed00 	.word	0xe000ed00
 8008018:	410fc241 	.word	0x410fc241
 800801c:	64150005 	.word	0x64150005

08008020 <Vector15C>:
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8008020:	b508      	push	{r3, lr}
  serve_interrupt(&SD6);
 8008022:	4803      	ldr	r0, [pc, #12]	; (8008030 <Vector15C+0x10>)
 8008024:	f7f9 f814 	bl	8001050 <serve_interrupt>
}
 8008028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800802c:	f7f8 bea0 	b.w	8000d70 <_port_irq_epilogue>
 8008030:	2000114c 	.word	0x2000114c
	...

08008040 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8008040:	b508      	push	{r3, lr}
  serve_interrupt(&SD2);
 8008042:	4803      	ldr	r0, [pc, #12]	; (8008050 <VectorD8+0x10>)
 8008044:	f7f9 f804 	bl	8001050 <serve_interrupt>
}
 8008048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800804c:	f7f8 be90 	b.w	8000d70 <_port_irq_epilogue>
 8008050:	20000ef0 	.word	0x20000ef0
	...

08008060 <VectorD4>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8008060:	b508      	push	{r3, lr}
  serve_interrupt(&SD1);
 8008062:	4803      	ldr	r0, [pc, #12]	; (8008070 <VectorD4+0x10>)
 8008064:	f7f8 fff4 	bl	8001050 <serve_interrupt>
}
 8008068:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800806c:	f7f8 be80 	b.w	8000d70 <_port_irq_epilogue>
 8008070:	20000c94 	.word	0x20000c94
	...

08008080 <Vector108>:
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {
  uint32_t sr;

  sr  = gptp->tim->SR;
 8008080:	4812      	ldr	r0, [pc, #72]	; (80080cc <Vector108+0x4c>)
 8008082:	68c2      	ldr	r2, [r0, #12]
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 8008084:	b508      	push	{r3, lr}
  sr  = gptp->tim->SR;
 8008086:	6913      	ldr	r3, [r2, #16]
  sr &= gptp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8008088:	68d1      	ldr	r1, [r2, #12]
 800808a:	400b      	ands	r3, r1
 800808c:	b2d9      	uxtb	r1, r3
  gptp->tim->SR = ~sr;
 800808e:	43c9      	mvns	r1, r1
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8008090:	07db      	lsls	r3, r3, #31
  gptp->tim->SR = ~sr;
 8008092:	6111      	str	r1, [r2, #16]
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8008094:	d507      	bpl.n	80080a6 <Vector108+0x26>
    _gpt_isr_invoke_cb(gptp);
 8008096:	7803      	ldrb	r3, [r0, #0]
 8008098:	2b04      	cmp	r3, #4
 800809a:	d008      	beq.n	80080ae <Vector108+0x2e>
 800809c:	6843      	ldr	r3, [r0, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	b10b      	cbz	r3, 80080a6 <Vector108+0x26>
 80080a2:	480a      	ldr	r0, [pc, #40]	; (80080cc <Vector108+0x4c>)
 80080a4:	4798      	blx	r3
}
 80080a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80080aa:	f7f8 be61 	b.w	8000d70 <_port_irq_epilogue>
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 80080ae:	2300      	movs	r3, #0
    _gpt_isr_invoke_cb(gptp);
 80080b0:	2102      	movs	r1, #2
 80080b2:	7001      	strb	r1, [r0, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 80080b4:	6013      	str	r3, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 80080b6:	6113      	str	r3, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 80080b8:	68d3      	ldr	r3, [r2, #12]
 80080ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80080be:	60d3      	str	r3, [r2, #12]
    _gpt_isr_invoke_cb(gptp);
 80080c0:	6843      	ldr	r3, [r0, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1ec      	bne.n	80080a2 <Vector108+0x22>
 80080c8:	e7ed      	b.n	80080a6 <Vector108+0x26>
 80080ca:	bf00      	nop
 80080cc:	20000c4c 	.word	0x20000c4c

080080d0 <VectorB0>:
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 80080d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80080d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sr  = timp->SR;
 80080d8:	6903      	ldr	r3, [r0, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 80080da:	68c2      	ldr	r2, [r0, #12]
 80080dc:	4013      	ands	r3, r2
 80080de:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 80080e0:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 80080e2:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 80080e4:	6102      	str	r2, [r0, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 80080e6:	d403      	bmi.n	80080f0 <VectorB0+0x20>
}
 80080e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 80080ec:	f7f8 be40 	b.w	8000d70 <_port_irq_epilogue>
 80080f0:	2320      	movs	r3, #32
 80080f2:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80080f6:	4d23      	ldr	r5, [pc, #140]	; (8008184 <VectorB0+0xb4>)
 80080f8:	6a47      	ldr	r7, [r0, #36]	; 0x24
 80080fa:	69ab      	ldr	r3, [r5, #24]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80080fc:	6a6a      	ldr	r2, [r5, #36]	; 0x24

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 80080fe:	6899      	ldr	r1, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8008100:	1abe      	subs	r6, r7, r2
 8008102:	42b1      	cmp	r1, r6
 8008104:	bf88      	it	hi
 8008106:	f105 0918 	addhi.w	r9, r5, #24
 800810a:	d825      	bhi.n	8008158 <VectorB0+0x88>
  STM32_ST_TIM->DIER = 0U;
 800810c:	4604      	mov	r4, r0
 800810e:	f105 0918 	add.w	r9, r5, #24
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8008112:	f04f 0800 	mov.w	r8, #0
 8008116:	2720      	movs	r7, #32
 8008118:	e000      	b.n	800811c <VectorB0+0x4c>
 800811a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800811c:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 800811e:	440a      	add	r2, r1

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8008120:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8008122:	626a      	str	r2, [r5, #36]	; 0x24
      nowdelta -= vtp->delta;
 8008124:	eba6 0601 	sub.w	r6, r6, r1
      fn = vtp->func;
 8008128:	68da      	ldr	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800812a:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 800812e:	61a8      	str	r0, [r5, #24]
      vtp->func = NULL;
 8008130:	f8c3 800c 	str.w	r8, [r3, #12]
 8008134:	bf08      	it	eq
 8008136:	f8c4 800c 	streq.w	r8, [r4, #12]
 800813a:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800813e:	6918      	ldr	r0, [r3, #16]
 8008140:	4790      	blx	r2
 8008142:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8008146:	69ab      	ldr	r3, [r5, #24]
    }
    while (vtp->delta <= nowdelta);
 8008148:	6899      	ldr	r1, [r3, #8]
 800814a:	428e      	cmp	r6, r1
 800814c:	d2e5      	bcs.n	800811a <VectorB0+0x4a>
  return (systime_t)STM32_ST_TIM->CNT;
 800814e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8008150:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008152:	1abe      	subs	r6, r7, r2
    if (nowdelta < vtp->delta) {
 8008154:	428e      	cmp	r6, r1
 8008156:	d2de      	bcs.n	8008116 <VectorB0+0x46>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8008158:	454b      	cmp	r3, r9
 800815a:	d00b      	beq.n	8008174 <VectorB0+0xa4>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 800815c:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 800815e:	626f      	str	r7, [r5, #36]	; 0x24
  ch.vtlist.next->delta -= nowdelta;
 8008160:	1bc9      	subs	r1, r1, r7
 8008162:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8008164:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8008168:	2a02      	cmp	r2, #2
 800816a:	bf2c      	ite	cs
 800816c:	18bf      	addcs	r7, r7, r2
 800816e:	3702      	addcc	r7, #2
 8008170:	609a      	str	r2, [r3, #8]
 8008172:	634f      	str	r7, [r1, #52]	; 0x34
 8008174:	2300      	movs	r3, #0
 8008176:	f383 8811 	msr	BASEPRI, r3
}
 800817a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800817e:	f7f8 bdf7 	b.w	8000d70 <_port_irq_epilogue>
 8008182:	bf00      	nop
 8008184:	200018d0 	.word	0x200018d0
	...

08008190 <Vector14C>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8008190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  stm32_otg_t *otgp = usbp->otg;
 8008194:	4c9f      	ldr	r4, [pc, #636]	; (8008414 <Vector14C+0x284>)
 8008196:	6d66      	ldr	r6, [r4, #84]	; 0x54
  sts  = otgp->GINTSTS;
 8008198:	6975      	ldr	r5, [r6, #20]
  sts &= otgp->GINTMSK;
 800819a:	69b3      	ldr	r3, [r6, #24]
 800819c:	401d      	ands	r5, r3
  if (sts & GINTSTS_USBRST) {
 800819e:	f415 5880 	ands.w	r8, r5, #4096	; 0x1000
  otgp->GINTSTS = sts;
 80081a2:	6175      	str	r5, [r6, #20]
  if (sts & GINTSTS_USBRST) {
 80081a4:	f040 8138 	bne.w	8008418 <Vector14C+0x288>
  if (sts & GINTSTS_WKUPINT) {
 80081a8:	2d00      	cmp	r5, #0
 80081aa:	f2c0 80c2 	blt.w	8008332 <Vector14C+0x1a2>
  if (sts & GINTSTS_USBSUSP) {
 80081ae:	0529      	lsls	r1, r5, #20
 80081b0:	d538      	bpl.n	8008224 <Vector14C+0x94>
    otg_disable_ep(usbp);
 80081b2:	e9d4 7315 	ldrd	r7, r3, [r4, #84]	; 0x54
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80081b6:	2100      	movs	r1, #0
 80081b8:	f8d3 9008 	ldr.w	r9, [r3, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80081bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80081c0:	e000      	b.n	80081c4 <Vector14C+0x34>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80081c2:	4671      	mov	r1, lr
 80081c4:	eb07 1241 	add.w	r2, r7, r1, lsl #5
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80081c8:	4613      	mov	r3, r2
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 80081ca:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80081ce:	2800      	cmp	r0, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80081d0:	f101 0e01 	add.w	lr, r1, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 80081d4:	da05      	bge.n	80081e2 <Vector14C+0x52>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 80081d6:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80081da:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80081de:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 80081e2:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 80081e6:	2800      	cmp	r0, #0
 80081e8:	da05      	bge.n	80081f6 <Vector14C+0x66>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 80081ea:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 80081ee:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80081f2:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80081f6:	4589      	cmp	r9, r1
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80081f8:	f8c3 c908 	str.w	ip, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80081fc:	f8c3 cb08 	str.w	ip, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8008200:	d1df      	bne.n	80081c2 <Vector14C+0x32>
  usbp->saved_state = usbp->state;
 8008202:	7822      	ldrb	r2, [r4, #0]
 8008204:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8008208:	6863      	ldr	r3, [r4, #4]
  usbp->state       = USB_SUSPENDED;
 800820a:	2205      	movs	r2, #5
 800820c:	7022      	strb	r2, [r4, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800820e:	681b      	ldr	r3, [r3, #0]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8008210:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8008214:	f8c7 281c 	str.w	r2, [r7, #2076]	; 0x81c
 8008218:	b113      	cbz	r3, 8008220 <Vector14C+0x90>
 800821a:	487e      	ldr	r0, [pc, #504]	; (8008414 <Vector14C+0x284>)
 800821c:	2104      	movs	r1, #4
 800821e:	4798      	blx	r3
  usbp->transmitting  = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	60a3      	str	r3, [r4, #8]
  if (sts & GINTSTS_ENUMDNE) {
 8008224:	04aa      	lsls	r2, r5, #18
 8008226:	d50c      	bpl.n	8008242 <Vector14C+0xb2>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 8008228:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800822c:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8008230:	68f3      	ldr	r3, [r6, #12]
 8008232:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8008236:	bf0c      	ite	eq
 8008238:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 800823c:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 8008240:	60f3      	str	r3, [r6, #12]
  if (sts & GINTSTS_SOF) {
 8008242:	072b      	lsls	r3, r5, #28
 8008244:	d429      	bmi.n	800829a <Vector14C+0x10a>
  if (sts & GINTSTS_IISOIXFR) {
 8008246:	02ef      	lsls	r7, r5, #11
 8008248:	d42f      	bmi.n	80082aa <Vector14C+0x11a>
  if (sts & GINTSTS_IISOOXFR) {
 800824a:	02a8      	lsls	r0, r5, #10
 800824c:	f100 80b6 	bmi.w	80083bc <Vector14C+0x22c>
  if ((sts & GINTSTS_RXFLVL) != 0U) {
 8008250:	06eb      	lsls	r3, r5, #27
 8008252:	f100 8088 	bmi.w	8008366 <Vector14C+0x1d6>
  if (sts & GINTSTS_OEPINT) {
 8008256:	0329      	lsls	r1, r5, #12
  src = otgp->DAINT;
 8008258:	f8d6 4818 	ldr.w	r4, [r6, #2072]	; 0x818
  if (sts & GINTSTS_OEPINT) {
 800825c:	d50b      	bpl.n	8008276 <Vector14C+0xe6>
    if (src & (1 << 16))
 800825e:	03e2      	lsls	r2, r4, #15
 8008260:	f100 8194 	bmi.w	800858c <Vector14C+0x3fc>
    if (src & (1 << 17))
 8008264:	03a3      	lsls	r3, r4, #14
 8008266:	f100 8187 	bmi.w	8008578 <Vector14C+0x3e8>
    if (src & (1 << 18))
 800826a:	0367      	lsls	r7, r4, #13
 800826c:	f100 818a 	bmi.w	8008584 <Vector14C+0x3f4>
    if (src & (1 << 19))
 8008270:	0326      	lsls	r6, r4, #12
 8008272:	f100 8149 	bmi.w	8008508 <Vector14C+0x378>
  if (sts & GINTSTS_IEPINT) {
 8008276:	036d      	lsls	r5, r5, #13
 8008278:	d50b      	bpl.n	8008292 <Vector14C+0x102>
    if (src & (1 << 0))
 800827a:	07e0      	lsls	r0, r4, #31
 800827c:	f100 8192 	bmi.w	80085a4 <Vector14C+0x414>
    if (src & (1 << 1))
 8008280:	07a1      	lsls	r1, r4, #30
 8008282:	f100 818b 	bmi.w	800859c <Vector14C+0x40c>
    if (src & (1 << 2))
 8008286:	0762      	lsls	r2, r4, #29
 8008288:	f100 8184 	bmi.w	8008594 <Vector14C+0x404>
    if (src & (1 << 3))
 800828c:	0723      	lsls	r3, r4, #28
 800828e:	f100 8142 	bmi.w	8008516 <Vector14C+0x386>
}
 8008292:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8008296:	f7f8 bd6b 	b.w	8000d70 <_port_irq_epilogue>
    _usb_isr_invoke_sof_cb(usbp);
 800829a:	6863      	ldr	r3, [r4, #4]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0d1      	beq.n	8008246 <Vector14C+0xb6>
 80082a2:	485c      	ldr	r0, [pc, #368]	; (8008414 <Vector14C+0x284>)
 80082a4:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
 80082a6:	02ef      	lsls	r7, r5, #11
 80082a8:	d5cf      	bpl.n	800824a <Vector14C+0xba>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 80082aa:	2100      	movs	r1, #0
  stm32_otg_t *otgp = usbp->otg;
 80082ac:	f8d4 b054 	ldr.w	fp, [r4, #84]	; 0x54
      _usb_isr_invoke_in_cb(usbp, ep);
 80082b0:	f8df a160 	ldr.w	sl, [pc, #352]	; 8008414 <Vector14C+0x284>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 80082b4:	460f      	mov	r7, r1
      _usb_isr_invoke_in_cb(usbp, ep);
 80082b6:	f04f 0901 	mov.w	r9, #1
 80082ba:	e006      	b.n	80082ca <Vector14C+0x13a>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 80082bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082be:	3701      	adds	r7, #1
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	b2ff      	uxtb	r7, r7
 80082c4:	429f      	cmp	r7, r3
 80082c6:	4639      	mov	r1, r7
 80082c8:	d8bf      	bhi.n	800824a <Vector14C+0xba>
 80082ca:	eb0b 1347 	add.w	r3, fp, r7, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 80082ce:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80082d2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80082d6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80082da:	d1ef      	bne.n	80082bc <Vector14C+0x12c>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 80082dc:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 80082e0:	2a00      	cmp	r2, #0
 80082e2:	daeb      	bge.n	80082bc <Vector14C+0x12c>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 80082e4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80082e8:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
 80082ec:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 80082f0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80082f4:	2a00      	cmp	r2, #0
 80082f6:	dbfb      	blt.n	80082f0 <Vector14C+0x160>
      otg_txfifo_flush(usbp, ep);
 80082f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80082fa:	0189      	lsls	r1, r1, #6
 80082fc:	f041 0120 	orr.w	r1, r1, #32
 8008300:	6111      	str	r1, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8008302:	6913      	ldr	r3, [r2, #16]
 8008304:	0699      	lsls	r1, r3, #26
 8008306:	d4fc      	bmi.n	8008302 <Vector14C+0x172>
 8008308:	2012      	movs	r0, #18
 800830a:	f7f8 fe89 	bl	8001020 <chSysPolledDelayX>
      _usb_isr_invoke_in_cb(usbp, ep);
 800830e:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8008312:	8921      	ldrh	r1, [r4, #8]
 8008314:	68da      	ldr	r2, [r3, #12]
 8008316:	fa09 f307 	lsl.w	r3, r9, r7
 800831a:	6892      	ldr	r2, [r2, #8]
 800831c:	ea21 0303 	bic.w	r3, r1, r3
 8008320:	8123      	strh	r3, [r4, #8]
 8008322:	b112      	cbz	r2, 800832a <Vector14C+0x19a>
 8008324:	4639      	mov	r1, r7
 8008326:	4650      	mov	r0, sl
 8008328:	4790      	blx	r2
      otg_txfifo_handler(usbp, ep);
 800832a:	4638      	mov	r0, r7
 800832c:	f7f8 fb10 	bl	8000950 <otg_txfifo_handler.constprop.0>
 8008330:	e7c4      	b.n	80082bc <Vector14C+0x12c>
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8008332:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 8008336:	0798      	lsls	r0, r3, #30
 8008338:	f040 80df 	bne.w	80084fa <Vector14C+0x36a>
  usbp->state = usbp->saved_state;
 800833c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8008340:	6862      	ldr	r2, [r4, #4]
  usbp->state = usbp->saved_state;
 8008342:	7023      	strb	r3, [r4, #0]
    otgp->DCTL &= ~DCTL_RWUSIG;
 8008344:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8008348:	6812      	ldr	r2, [r2, #0]
 800834a:	f023 0301 	bic.w	r3, r3, #1
 800834e:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
 8008352:	2a00      	cmp	r2, #0
 8008354:	f43f af2b 	beq.w	80081ae <Vector14C+0x1e>
 8008358:	2105      	movs	r1, #5
 800835a:	482e      	ldr	r0, [pc, #184]	; (8008414 <Vector14C+0x284>)
 800835c:	4790      	blx	r2
  if (sts & GINTSTS_USBSUSP) {
 800835e:	0529      	lsls	r1, r5, #20
 8008360:	f57f af60 	bpl.w	8008224 <Vector14C+0x94>
 8008364:	e725      	b.n	80081b2 <Vector14C+0x22>
  sts = usbp->otg->GRXSTSP;
 8008366:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008368:	6a0b      	ldr	r3, [r1, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 800836a:	f403 10f0 	and.w	r0, r3, #1966080	; 0x1e0000
 800836e:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 8008372:	f3c3 120a 	ubfx	r2, r3, #4, #11
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 8008376:	f003 030f 	and.w	r3, r3, #15
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 800837a:	f000 80d3 	beq.w	8008524 <Vector14C+0x394>
 800837e:	f5b0 2f40 	cmp.w	r0, #786432	; 0xc0000
 8008382:	f47f af68 	bne.w	8008256 <Vector14C+0xc6>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8008386:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	6a18      	ldr	r0, [r3, #32]
  while (i < n) {
 800838e:	2a00      	cmp	r2, #0
 8008390:	f43f af61 	beq.w	8008256 <Vector14C+0xc6>
      w = *fifop;
 8008394:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
  size_t i = 0;
 8008398:	2300      	movs	r3, #0
    if ((i & 3) == 0) {
 800839a:	079f      	lsls	r7, r3, #30
      w = *fifop;
 800839c:	bf08      	it	eq
 800839e:	f8d4 8000 	ldreq.w	r8, [r4]
    if (i < max) {
 80083a2:	2b07      	cmp	r3, #7
      *buf++ = (uint8_t)w;
 80083a4:	4601      	mov	r1, r0
    i++;
 80083a6:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
 80083aa:	d804      	bhi.n	80083b6 <Vector14C+0x226>
      *buf++ = (uint8_t)w;
 80083ac:	f801 8b01 	strb.w	r8, [r1], #1
      w >>= 8;
 80083b0:	ea4f 2818 	mov.w	r8, r8, lsr #8
      *buf++ = (uint8_t)w;
 80083b4:	4608      	mov	r0, r1
  while (i < n) {
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d1ef      	bne.n	800839a <Vector14C+0x20a>
 80083ba:	e74c      	b.n	8008256 <Vector14C+0xc6>
  stm32_otg_t *otgp = usbp->otg;
 80083bc:	f8d4 9054 	ldr.w	r9, [r4, #84]	; 0x54
      _usb_isr_invoke_out_cb(usbp, ep);
 80083c0:	f8df b050 	ldr.w	fp, [pc, #80]	; 8008414 <Vector14C+0x284>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 80083c4:	2700      	movs	r7, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 80083c6:	f04f 0a01 	mov.w	sl, #1
 80083ca:	e006      	b.n	80083da <Vector14C+0x24a>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 80083cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083ce:	3701      	adds	r7, #1
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	b2ff      	uxtb	r7, r7
 80083d4:	429f      	cmp	r7, r3
 80083d6:	f63f af3b 	bhi.w	8008250 <Vector14C+0xc0>
 80083da:	eb09 1247 	add.w	r2, r9, r7, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 80083de:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80083e2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80083e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083ea:	d1ef      	bne.n	80083cc <Vector14C+0x23c>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 80083ec:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 80083f0:	2b00      	cmp	r3, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 80083f2:	eb04 0087 	add.w	r0, r4, r7, lsl #2
 80083f6:	fa0a f107 	lsl.w	r1, sl, r7
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 80083fa:	dae7      	bge.n	80083cc <Vector14C+0x23c>
      _usb_isr_invoke_out_cb(usbp, ep);
 80083fc:	68c2      	ldr	r2, [r0, #12]
 80083fe:	8963      	ldrh	r3, [r4, #10]
 8008400:	68d2      	ldr	r2, [r2, #12]
 8008402:	ea23 0301 	bic.w	r3, r3, r1
 8008406:	4658      	mov	r0, fp
 8008408:	4639      	mov	r1, r7
 800840a:	8163      	strh	r3, [r4, #10]
 800840c:	2a00      	cmp	r2, #0
 800840e:	d0dd      	beq.n	80083cc <Vector14C+0x23c>
 8008410:	4790      	blx	r2
 8008412:	e7db      	b.n	80083cc <Vector14C+0x23c>
 8008414:	20001868 	.word	0x20001868
  usbp->status        = 0;
 8008418:	2300      	movs	r3, #0
  usbp->state         = USB_READY;
 800841a:	2102      	movs	r1, #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800841c:	2220      	movs	r2, #32
    usbp->epc[i] = NULL;
 800841e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8008422:	e9c4 3305 	strd	r3, r3, [r4, #20]
  usbp->status        = 0;
 8008426:	64e3      	str	r3, [r4, #76]	; 0x4c
  usbp->ep0state = USB_EP0_STP_WAITING;
 8008428:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  usbp->transmitting  = 0;
 800842c:	60a3      	str	r3, [r4, #8]
  usbp->state         = USB_READY;
 800842e:	7021      	strb	r1, [r4, #0]
 8008430:	6132      	str	r2, [r6, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8008432:	6935      	ldr	r5, [r6, #16]
 8008434:	f015 0520 	ands.w	r5, r5, #32
 8008438:	d1fb      	bne.n	8008432 <Vector14C+0x2a2>
 800843a:	2012      	movs	r0, #18
 800843c:	f7f8 fdf0 	bl	8001020 <chSysPolledDelayX>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8008440:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
  otgp->DIEPEMPMSK = 0;
 8008444:	f8c6 5834 	str.w	r5, [r6, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8008448:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800844c:	f8dc 7008 	ldr.w	r7, [ip, #8]
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8008450:	f8c6 381c 	str.w	r3, [r6, #2076]	; 0x81c
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8008454:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8008458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800845c:	eb06 1345 	add.w	r3, r6, r5, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8008460:	42af      	cmp	r7, r5
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8008462:	f8c3 0900 	str.w	r0, [r3, #2304]	; 0x900
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8008466:	f105 0501 	add.w	r5, r5, #1
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800846a:	f8c3 0b00 	str.w	r0, [r3, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800846e:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8008472:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8008476:	d1f1      	bne.n	800845c <Vector14C+0x2cc>
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8008478:	f8dc 3000 	ldr.w	r3, [ip]
 800847c:	65e3      	str	r3, [r4, #92]	; 0x5c
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 800847e:	f8dc 2000 	ldr.w	r2, [ip]
  otg_rxfifo_flush(usbp);
 8008482:	6d63      	ldr	r3, [r4, #84]	; 0x54
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8008484:	6272      	str	r2, [r6, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 8008486:	2210      	movs	r2, #16
 8008488:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 800848a:	691d      	ldr	r5, [r3, #16]
 800848c:	f015 0510 	ands.w	r5, r5, #16
 8008490:	d1fb      	bne.n	800848a <Vector14C+0x2fa>
 8008492:	2012      	movs	r0, #18
 8008494:	f7f8 fdc4 	bl	8001020 <chSysPolledDelayX>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8008498:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800849c:	6861      	ldr	r1, [r4, #4]
  next = usbp->pmnext;
 800849e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80084a0:	680f      	ldr	r7, [r1, #0]
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 80084a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80084a6:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 80084aa:	69b3      	ldr	r3, [r6, #24]
 80084ac:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80084b0:	f043 0310 	orr.w	r3, r3, #16
 80084b4:	61b3      	str	r3, [r6, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 80084b6:	2309      	movs	r3, #9
 80084b8:	f8c6 3810 	str.w	r3, [r6, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 80084bc:	f8c6 3814 	str.w	r3, [r6, #2068]	; 0x814
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 80084c0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80084c4:	f8c6 3b10 	str.w	r3, [r6, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 80084c8:	4b38      	ldr	r3, [pc, #224]	; (80085ac <Vector14C+0x41c>)
 80084ca:	f8c6 3b00 	str.w	r3, [r6, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
 80084ce:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 80084d2:	f8c6 3900 	str.w	r3, [r6, #2304]	; 0x900
  usbp->pmnext += size;
 80084d6:	f102 0310 	add.w	r3, r2, #16
 80084da:	65e3      	str	r3, [r4, #92]	; 0x5c
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 80084dc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  usbp->epc[0] = &ep0config;
 80084e0:	4b33      	ldr	r3, [pc, #204]	; (80085b0 <Vector14C+0x420>)
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 80084e2:	62b2      	str	r2, [r6, #40]	; 0x28
  usbp->epc[0] = &ep0config;
 80084e4:	60e3      	str	r3, [r4, #12]
 80084e6:	2f00      	cmp	r7, #0
 80084e8:	f43f aed3 	beq.w	8008292 <Vector14C+0x102>
 80084ec:	4629      	mov	r1, r5
 80084ee:	4831      	ldr	r0, [pc, #196]	; (80085b4 <Vector14C+0x424>)
 80084f0:	47b8      	blx	r7
}
 80084f2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 80084f6:	f7f8 bc3b 	b.w	8000d70 <_port_irq_epilogue>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 80084fa:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 80084fe:	f023 0303 	bic.w	r3, r3, #3
 8008502:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00
 8008506:	e719      	b.n	800833c <Vector14C+0x1ac>
      otg_epout_handler(usbp, 3);
 8008508:	2003      	movs	r0, #3
 800850a:	f7f8 ffb9 	bl	8001480 <otg_epout_handler.constprop.0>
  if (sts & GINTSTS_IEPINT) {
 800850e:	036d      	lsls	r5, r5, #13
 8008510:	f57f aebf 	bpl.w	8008292 <Vector14C+0x102>
 8008514:	e6b1      	b.n	800827a <Vector14C+0xea>
      otg_epin_handler(usbp, 3);
 8008516:	2003      	movs	r0, #3
 8008518:	f7f8 ff2a 	bl	8001370 <otg_epin_handler.constprop.0>
}
 800851c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8008520:	f7f8 bc26 	b.w	8000d70 <_port_irq_epilogue>
                            usbp->epc[ep]->out_state->rxbuf,
 8008524:	f103 0a02 	add.w	sl, r3, #2
 8008528:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	699b      	ldr	r3, [r3, #24]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8008530:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
 8008534:	6818      	ldr	r0, [r3, #0]
 8008536:	eba0 0e09 	sub.w	lr, r0, r9
  while (i < n) {
 800853a:	b1c2      	cbz	r2, 800856e <Vector14C+0x3de>
      w = *fifop;
 800853c:	f501 5c80 	add.w	ip, r1, #4096	; 0x1000
  size_t i = 0;
 8008540:	2300      	movs	r3, #0
    if ((i & 3) == 0) {
 8008542:	0798      	lsls	r0, r3, #30
      w = *fifop;
 8008544:	bf08      	it	eq
 8008546:	f8dc 8000 	ldreq.w	r8, [ip]
    if (i < max) {
 800854a:	459e      	cmp	lr, r3
      *buf++ = (uint8_t)w;
 800854c:	4639      	mov	r1, r7
    i++;
 800854e:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
 8008552:	d904      	bls.n	800855e <Vector14C+0x3ce>
      *buf++ = (uint8_t)w;
 8008554:	f801 8b01 	strb.w	r8, [r1], #1
      w >>= 8;
 8008558:	ea4f 2818 	mov.w	r8, r8, lsr #8
      *buf++ = (uint8_t)w;
 800855c:	460f      	mov	r7, r1
  while (i < n) {
 800855e:	429a      	cmp	r2, r3
 8008560:	d1ef      	bne.n	8008542 <Vector14C+0x3b2>
 8008562:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8008566:	6863      	ldr	r3, [r4, #4]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
    usbp->epc[ep]->out_state->rxbuf += cnt;
 800856e:	4417      	add	r7, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
 8008570:	444a      	add	r2, r9
 8008572:	e9c3 2701 	strd	r2, r7, [r3, #4]
 8008576:	e66e      	b.n	8008256 <Vector14C+0xc6>
      otg_epout_handler(usbp, 1);
 8008578:	2001      	movs	r0, #1
 800857a:	f7f8 ff81 	bl	8001480 <otg_epout_handler.constprop.0>
    if (src & (1 << 18))
 800857e:	0367      	lsls	r7, r4, #13
 8008580:	f57f ae76 	bpl.w	8008270 <Vector14C+0xe0>
      otg_epout_handler(usbp, 2);
 8008584:	2002      	movs	r0, #2
 8008586:	f7f8 ff7b 	bl	8001480 <otg_epout_handler.constprop.0>
 800858a:	e671      	b.n	8008270 <Vector14C+0xe0>
      otg_epout_handler(usbp, 0);
 800858c:	2000      	movs	r0, #0
 800858e:	f7f8 ff77 	bl	8001480 <otg_epout_handler.constprop.0>
 8008592:	e667      	b.n	8008264 <Vector14C+0xd4>
      otg_epin_handler(usbp, 2);
 8008594:	2002      	movs	r0, #2
 8008596:	f7f8 feeb 	bl	8001370 <otg_epin_handler.constprop.0>
 800859a:	e677      	b.n	800828c <Vector14C+0xfc>
      otg_epin_handler(usbp, 1);
 800859c:	2001      	movs	r0, #1
 800859e:	f7f8 fee7 	bl	8001370 <otg_epin_handler.constprop.0>
 80085a2:	e670      	b.n	8008286 <Vector14C+0xf6>
      otg_epin_handler(usbp, 0);
 80085a4:	2000      	movs	r0, #0
 80085a6:	f7f8 fee3 	bl	8001370 <otg_epin_handler.constprop.0>
 80085aa:	e669      	b.n	8008280 <Vector14C+0xf0>
 80085ac:	10008040 	.word	0x10008040
 80085b0:	08009968 	.word	0x08009968
 80085b4:	20001868 	.word	0x20001868
	...

080085c0 <VectorC0>:
  uint16_t sr = I2CD1.i2c->SR1;
 80085c0:	4a38      	ldr	r2, [pc, #224]	; (80086a4 <VectorC0+0xe4>)
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 80085c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dmaStreamDisable(i2cp->dmatx);
 80085c4:	e9d2 500c 	ldrd	r5, r0, [r2, #48]	; 0x30
  uint16_t sr = I2CD1.i2c->SR1;
 80085c8:	6944      	ldr	r4, [r0, #20]
  dmaStreamDisable(i2cp->dmatx);
 80085ca:	682b      	ldr	r3, [r5, #0]
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 80085cc:	f404 415f 	and.w	r1, r4, #57088	; 0xdf00
 80085d0:	43c9      	mvns	r1, r1
 80085d2:	6141      	str	r1, [r0, #20]
  dmaStreamDisable(i2cp->dmatx);
 80085d4:	6819      	ldr	r1, [r3, #0]
 80085d6:	f021 011f 	bic.w	r1, r1, #31
 80085da:	6019      	str	r1, [r3, #0]
  uint16_t sr = I2CD1.i2c->SR1;
 80085dc:	b2a1      	uxth	r1, r4
  dmaStreamDisable(i2cp->dmatx);
 80085de:	681e      	ldr	r6, [r3, #0]
 80085e0:	07f6      	lsls	r6, r6, #31
 80085e2:	d4fc      	bmi.n	80085de <VectorC0+0x1e>
 80085e4:	f895 c009 	ldrb.w	ip, [r5, #9]
  dmaStreamDisable(i2cp->dmarx);
 80085e8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 80085ea:	686f      	ldr	r7, [r5, #4]
  dmaStreamDisable(i2cp->dmarx);
 80085ec:	6835      	ldr	r5, [r6, #0]
  dmaStreamDisable(i2cp->dmatx);
 80085ee:	233d      	movs	r3, #61	; 0x3d
 80085f0:	fa03 f30c 	lsl.w	r3, r3, ip
 80085f4:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 80085f6:	682b      	ldr	r3, [r5, #0]
 80085f8:	f023 031f 	bic.w	r3, r3, #31
 80085fc:	602b      	str	r3, [r5, #0]
 80085fe:	682b      	ldr	r3, [r5, #0]
 8008600:	f013 0301 	ands.w	r3, r3, #1
 8008604:	d1fb      	bne.n	80085fe <VectorC0+0x3e>
 8008606:	7a77      	ldrb	r7, [r6, #9]
 8008608:	6876      	ldr	r6, [r6, #4]
 800860a:	253d      	movs	r5, #61	; 0x3d
 800860c:	40bd      	lsls	r5, r7
 800860e:	6035      	str	r5, [r6, #0]
  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 8008610:	05cf      	lsls	r7, r1, #23
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 8008612:	bf41      	itttt	mi
 8008614:	6945      	ldrmi	r5, [r0, #20]
 8008616:	f425 7580 	bicmi.w	r5, r5, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 800861a:	2301      	movmi	r3, #1
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
 800861c:	6145      	strmi	r5, [r0, #20]
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 800861e:	058e      	lsls	r6, r1, #22
    i2cp->errors |= I2C_BUS_ERROR;
 8008620:	6093      	str	r3, [r2, #8]
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8008622:	bf44      	itt	mi
 8008624:	f043 0302 	orrmi.w	r3, r3, #2
 8008628:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800862a:	054d      	lsls	r5, r1, #21
 800862c:	d50a      	bpl.n	8008644 <VectorC0+0x84>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800862e:	6845      	ldr	r5, [r0, #4]
 8008630:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8008634:	6045      	str	r5, [r0, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8008636:	6805      	ldr	r5, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8008638:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800863c:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8008640:	6005      	str	r5, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8008642:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8008644:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 8008646:	bf44      	itt	mi
 8008648:	f043 0308 	orrmi.w	r3, r3, #8
 800864c:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 800864e:	044e      	lsls	r6, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 8008650:	bf44      	itt	mi
 8008652:	f043 0320 	orrmi.w	r3, r3, #32
 8008656:	6093      	strmi	r3, [r2, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8008658:	04cd      	lsls	r5, r1, #19
 800865a:	d51a      	bpl.n	8008692 <VectorC0+0xd2>
    i2cp->errors |= I2C_PEC_ERROR;
 800865c:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8008660:	0420      	lsls	r0, r4, #16
    i2cp->errors |= I2C_PEC_ERROR;
 8008662:	6093      	str	r3, [r2, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8008664:	d502      	bpl.n	800866c <VectorC0+0xac>
    i2cp->errors |= I2C_SMB_ALERT;
 8008666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800866a:	6093      	str	r3, [r2, #8]
 800866c:	2320      	movs	r3, #32
 800866e:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8008672:	69d0      	ldr	r0, [r2, #28]
 8008674:	b130      	cbz	r0, 8008684 <VectorC0+0xc4>
    tp->u.rdymsg = msg;
 8008676:	f06f 0301 	mvn.w	r3, #1
 800867a:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 800867c:	2300      	movs	r3, #0
 800867e:	61d3      	str	r3, [r2, #28]
    (void) chSchReadyI(tp);
 8008680:	f7f8 fc5e 	bl	8000f40 <chSchReadyI>
 8008684:	2300      	movs	r3, #0
 8008686:	f383 8811 	msr	BASEPRI, r3
}
 800868a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800868e:	f7f8 bb6f 	b.w	8000d70 <_port_irq_epilogue>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8008692:	0421      	lsls	r1, r4, #16
 8008694:	d4e7      	bmi.n	8008666 <VectorC0+0xa6>
  if (i2cp->errors != I2C_NO_ERROR)
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e8      	bne.n	800866c <VectorC0+0xac>
}
 800869a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800869e:	f7f8 bb67 	b.w	8000d70 <_port_irq_epilogue>
 80086a2:	bf00      	nop
 80086a4:	20000c5c 	.word	0x20000c5c
	...

080086b0 <VectorBC>:
  I2C_TypeDef *dp = i2cp->i2c;
 80086b0:	4a45      	ldr	r2, [pc, #276]	; (80087c8 <VectorBC+0x118>)
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80086b2:	4946      	ldr	r1, [pc, #280]	; (80087cc <VectorBC+0x11c>)
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 80086b4:	b538      	push	{r3, r4, r5, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 80086b6:	6b54      	ldr	r4, [r2, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 80086b8:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 80086ba:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80086bc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80086c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086c4:	428b      	cmp	r3, r1
 80086c6:	d062      	beq.n	800878e <VectorBC+0xde>
 80086c8:	d833      	bhi.n	8008732 <VectorBC+0x82>
 80086ca:	3907      	subs	r1, #7
 80086cc:	428b      	cmp	r3, r1
 80086ce:	d024      	beq.n	800871a <VectorBC+0x6a>
 80086d0:	3101      	adds	r1, #1
 80086d2:	428b      	cmp	r3, r1
 80086d4:	d11e      	bne.n	8008714 <VectorBC+0x64>
    dmaStreamEnable(i2cp->dmarx);
 80086d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80086d8:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80086da:	681b      	ldr	r3, [r3, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80086dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80086e0:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	f042 0201 	orr.w	r2, r2, #1
 80086e8:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 80086ea:	6862      	ldr	r2, [r4, #4]
 80086ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086f0:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d945      	bls.n	8008784 <VectorBC+0xd4>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 80086f8:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 80086fc:	bf18      	it	ne
 80086fe:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 8008700:	05eb      	lsls	r3, r5, #23
 8008702:	d503      	bpl.n	800870c <VectorBC+0x5c>
    dp->SR1 &= ~I2C_SR1_BERR;
 8008704:	6963      	ldr	r3, [r4, #20]
 8008706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800870a:	6163      	str	r3, [r4, #20]
}
 800870c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8008710:	f7f8 bb2e 	b.w	8000d70 <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8008714:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8008718:	d1ee      	bne.n	80086f8 <VectorBC+0x48>
    if ((i2cp->addr >> 8) > 0) {
 800871a:	8c13      	ldrh	r3, [r2, #32]
 800871c:	0a1a      	lsrs	r2, r3, #8
 800871e:	d039      	beq.n	8008794 <VectorBC+0xe4>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8008720:	f002 0206 	and.w	r2, r2, #6
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	4313      	orrs	r3, r2
 800872a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800872e:	6123      	str	r3, [r4, #16]
 8008730:	e7e2      	b.n	80086f8 <VectorBC+0x48>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8008732:	4927      	ldr	r1, [pc, #156]	; (80087d0 <VectorBC+0x120>)
 8008734:	428b      	cmp	r3, r1
 8008736:	d035      	beq.n	80087a4 <VectorBC+0xf4>
 8008738:	3102      	adds	r1, #2
 800873a:	428b      	cmp	r3, r1
 800873c:	d1dc      	bne.n	80086f8 <VectorBC+0x48>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 800873e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    (void)dp->DR; /* clear BTF.*/
 8008740:	6921      	ldr	r1, [r4, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	b143      	cbz	r3, 800875a <VectorBC+0xaa>
      i2cp->addr |= 0x01;
 8008748:	8c11      	ldrh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800874a:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 800874c:	f041 0101 	orr.w	r1, r1, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8008750:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 8008754:	8411      	strh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8008756:	6023      	str	r3, [r4, #0]
 8008758:	e7d8      	b.n	800870c <VectorBC+0x5c>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800875a:	6861      	ldr	r1, [r4, #4]
 800875c:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8008760:	6061      	str	r1, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8008762:	6821      	ldr	r1, [r4, #0]
 8008764:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8008768:	6021      	str	r1, [r4, #0]
 800876a:	2120      	movs	r1, #32
 800876c:	f381 8811 	msr	BASEPRI, r1
  if (*trp != NULL) {
 8008770:	69d0      	ldr	r0, [r2, #28]
 8008772:	b118      	cbz	r0, 800877c <VectorBC+0xcc>
    tp->u.rdymsg = msg;
 8008774:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
 8008776:	61d3      	str	r3, [r2, #28]
    (void) chSchReadyI(tp);
 8008778:	f7f8 fbe2 	bl	8000f40 <chSchReadyI>
 800877c:	2300      	movs	r3, #0
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	e7b9      	b.n	80086f8 <VectorBC+0x48>
      dp->CR1 &= ~I2C_CR1_ACK;
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800878a:	6023      	str	r3, [r4, #0]
 800878c:	e7b4      	b.n	80086f8 <VectorBC+0x48>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800878e:	8c13      	ldrh	r3, [r2, #32]
 8008790:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8008794:	6123      	str	r3, [r4, #16]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8008796:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800879a:	bf18      	it	ne
 800879c:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 800879e:	05eb      	lsls	r3, r5, #23
 80087a0:	d5b4      	bpl.n	800870c <VectorBC+0x5c>
 80087a2:	e7af      	b.n	8008704 <VectorBC+0x54>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80087a4:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 80087a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80087a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 80087ac:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80087ae:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 80087b0:	6813      	ldr	r3, [r2, #0]
 80087b2:	f043 0301 	orr.w	r3, r3, #1
 80087b6:	6013      	str	r3, [r2, #0]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 80087b8:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 80087bc:	bf18      	it	ne
 80087be:	69a3      	ldrne	r3, [r4, #24]
  if (event & I2C_SR1_BERR) {
 80087c0:	05eb      	lsls	r3, r5, #23
 80087c2:	d5a3      	bpl.n	800870c <VectorBC+0x5c>
 80087c4:	e79e      	b.n	8008704 <VectorBC+0x54>
 80087c6:	bf00      	nop
 80087c8:	20000c5c 	.word	0x20000c5c
 80087cc:	00030008 	.word	0x00030008
 80087d0:	00070082 	.word	0x00070082
	...

080087e0 <Vector158>:
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80087e0:	4b08      	ldr	r3, [pc, #32]	; (8008804 <Vector158+0x24>)
  if (dma.streams[15].func)
 80087e2:	4809      	ldr	r0, [pc, #36]	; (8008808 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80087e4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 80087e6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80087e8:	0d89      	lsrs	r1, r1, #22
 80087ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 80087ee:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 80087f0:	058c      	lsls	r4, r1, #22
 80087f2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 80087f4:	b112      	cbz	r2, 80087fc <Vector158+0x1c>
    dma.streams[15].func(dma.streams[15].param, flags);
 80087f6:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80087fa:	4790      	blx	r2
}
 80087fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8008800:	f7f8 bab6 	b.w	8000d70 <_port_irq_epilogue>
 8008804:	40026400 	.word	0x40026400
 8008808:	20001aa0 	.word	0x20001aa0
 800880c:	00000000 	.word	0x00000000

08008810 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8008810:	4b08      	ldr	r3, [pc, #32]	; (8008834 <Vector154+0x24>)
  if (dma.streams[14].func)
 8008812:	4809      	ldr	r0, [pc, #36]	; (8008838 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8008814:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 8008816:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8008818:	0c09      	lsrs	r1, r1, #16
 800881a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 800881e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8008820:	040c      	lsls	r4, r1, #16
 8008822:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 8008824:	b10a      	cbz	r2, 800882a <Vector154+0x1a>
    dma.streams[14].func(dma.streams[14].param, flags);
 8008826:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8008828:	4790      	blx	r2
}
 800882a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800882e:	f7f8 ba9f 	b.w	8000d70 <_port_irq_epilogue>
 8008832:	bf00      	nop
 8008834:	40026400 	.word	0x40026400
 8008838:	20001aa0 	.word	0x20001aa0
 800883c:	00000000 	.word	0x00000000

08008840 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8008840:	4b08      	ldr	r3, [pc, #32]	; (8008864 <Vector150+0x24>)
  if (dma.streams[13].func)
 8008842:	4809      	ldr	r0, [pc, #36]	; (8008868 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8008844:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 8008846:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8008848:	0989      	lsrs	r1, r1, #6
 800884a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 800884e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 8008850:	018c      	lsls	r4, r1, #6
 8008852:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 8008854:	b10a      	cbz	r2, 800885a <Vector150+0x1a>
    dma.streams[13].func(dma.streams[13].param, flags);
 8008856:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8008858:	4790      	blx	r2
}
 800885a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800885e:	f7f8 ba87 	b.w	8000d70 <_port_irq_epilogue>
 8008862:	bf00      	nop
 8008864:	40026400 	.word	0x40026400
 8008868:	20001aa0 	.word	0x20001aa0
 800886c:	00000000 	.word	0x00000000

08008870 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8008870:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8008872:	4b07      	ldr	r3, [pc, #28]	; (8008890 <Vector130+0x20>)
  if (dma.streams[12].func)
 8008874:	4807      	ldr	r0, [pc, #28]	; (8008894 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8008876:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 8008878:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800887a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 800887e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8008880:	b10a      	cbz	r2, 8008886 <Vector130+0x16>
    dma.streams[12].func(dma.streams[12].param, flags);
 8008882:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8008884:	4790      	blx	r2
}
 8008886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800888a:	f7f8 ba71 	b.w	8000d70 <_port_irq_epilogue>
 800888e:	bf00      	nop
 8008890:	40026400 	.word	0x40026400
 8008894:	20001aa0 	.word	0x20001aa0
	...

080088a0 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80088a0:	4b08      	ldr	r3, [pc, #32]	; (80088c4 <Vector12C+0x24>)
  if (dma.streams[11].func)
 80088a2:	4809      	ldr	r0, [pc, #36]	; (80088c8 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80088a4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 80088a6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80088a8:	0d89      	lsrs	r1, r1, #22
 80088aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80088ae:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 80088b0:	058c      	lsls	r4, r1, #22
 80088b2:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 80088b4:	b10a      	cbz	r2, 80088ba <Vector12C+0x1a>
    dma.streams[11].func(dma.streams[11].param, flags);
 80088b6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80088b8:	4790      	blx	r2
}
 80088ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80088be:	f7f8 ba57 	b.w	8000d70 <_port_irq_epilogue>
 80088c2:	bf00      	nop
 80088c4:	40026400 	.word	0x40026400
 80088c8:	20001aa0 	.word	0x20001aa0
 80088cc:	00000000 	.word	0x00000000

080088d0 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80088d0:	4b08      	ldr	r3, [pc, #32]	; (80088f4 <Vector128+0x24>)
  if (dma.streams[10].func)
 80088d2:	4809      	ldr	r0, [pc, #36]	; (80088f8 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80088d4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 80088d6:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80088d8:	0c09      	lsrs	r1, r1, #16
 80088da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 80088de:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 80088e0:	040c      	lsls	r4, r1, #16
 80088e2:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 80088e4:	b10a      	cbz	r2, 80088ea <Vector128+0x1a>
    dma.streams[10].func(dma.streams[10].param, flags);
 80088e6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80088e8:	4790      	blx	r2
}
 80088ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80088ee:	f7f8 ba3f 	b.w	8000d70 <_port_irq_epilogue>
 80088f2:	bf00      	nop
 80088f4:	40026400 	.word	0x40026400
 80088f8:	20001aa0 	.word	0x20001aa0
 80088fc:	00000000 	.word	0x00000000

08008900 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8008900:	4b08      	ldr	r3, [pc, #32]	; (8008924 <Vector124+0x24>)
  if (dma.streams[9].func)
 8008902:	4809      	ldr	r0, [pc, #36]	; (8008928 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8008904:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 8008906:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8008908:	0989      	lsrs	r1, r1, #6
 800890a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800890e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 8008910:	018c      	lsls	r4, r1, #6
 8008912:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 8008914:	b10a      	cbz	r2, 800891a <Vector124+0x1a>
    dma.streams[9].func(dma.streams[9].param, flags);
 8008916:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8008918:	4790      	blx	r2
}
 800891a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800891e:	f7f8 ba27 	b.w	8000d70 <_port_irq_epilogue>
 8008922:	bf00      	nop
 8008924:	40026400 	.word	0x40026400
 8008928:	20001aa0 	.word	0x20001aa0
 800892c:	00000000 	.word	0x00000000

08008930 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8008930:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8008932:	4b07      	ldr	r3, [pc, #28]	; (8008950 <Vector120+0x20>)
  if (dma.streams[8].func)
 8008934:	4807      	ldr	r0, [pc, #28]	; (8008954 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8008936:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 8008938:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800893a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 800893e:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8008940:	b10a      	cbz	r2, 8008946 <Vector120+0x16>
    dma.streams[8].func(dma.streams[8].param, flags);
 8008942:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8008944:	4790      	blx	r2
}
 8008946:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800894a:	f7f8 ba11 	b.w	8000d70 <_port_irq_epilogue>
 800894e:	bf00      	nop
 8008950:	40026400 	.word	0x40026400
 8008954:	20001aa0 	.word	0x20001aa0
	...

08008960 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8008960:	4b08      	ldr	r3, [pc, #32]	; (8008984 <VectorFC+0x24>)
  if (dma.streams[7].func)
 8008962:	4809      	ldr	r0, [pc, #36]	; (8008988 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8008964:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 8008966:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8008968:	0d89      	lsrs	r1, r1, #22
 800896a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 800896e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 8008970:	058c      	lsls	r4, r1, #22
 8008972:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 8008974:	b10a      	cbz	r2, 800897a <VectorFC+0x1a>
    dma.streams[7].func(dma.streams[7].param, flags);
 8008976:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8008978:	4790      	blx	r2
}
 800897a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800897e:	f7f8 b9f7 	b.w	8000d70 <_port_irq_epilogue>
 8008982:	bf00      	nop
 8008984:	40026000 	.word	0x40026000
 8008988:	20001aa0 	.word	0x20001aa0
 800898c:	00000000 	.word	0x00000000

08008990 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8008990:	4b08      	ldr	r3, [pc, #32]	; (80089b4 <Vector84+0x24>)
  if (dma.streams[6].func)
 8008992:	4809      	ldr	r0, [pc, #36]	; (80089b8 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8008994:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 8008996:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8008998:	0c09      	lsrs	r1, r1, #16
 800899a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800899e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 80089a0:	040c      	lsls	r4, r1, #16
 80089a2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 80089a4:	b10a      	cbz	r2, 80089aa <Vector84+0x1a>
    dma.streams[6].func(dma.streams[6].param, flags);
 80089a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80089a8:	4790      	blx	r2
}
 80089aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80089ae:	f7f8 b9df 	b.w	8000d70 <_port_irq_epilogue>
 80089b2:	bf00      	nop
 80089b4:	40026000 	.word	0x40026000
 80089b8:	20001aa0 	.word	0x20001aa0
 80089bc:	00000000 	.word	0x00000000

080089c0 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80089c0:	4b08      	ldr	r3, [pc, #32]	; (80089e4 <Vector80+0x24>)
  if (dma.streams[5].func)
 80089c2:	4809      	ldr	r0, [pc, #36]	; (80089e8 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80089c4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 80089c6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80089c8:	0989      	lsrs	r1, r1, #6
 80089ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 80089ce:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 80089d0:	018c      	lsls	r4, r1, #6
 80089d2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 80089d4:	b10a      	cbz	r2, 80089da <Vector80+0x1a>
    dma.streams[5].func(dma.streams[5].param, flags);
 80089d6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80089d8:	4790      	blx	r2
}
 80089da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80089de:	f7f8 b9c7 	b.w	8000d70 <_port_irq_epilogue>
 80089e2:	bf00      	nop
 80089e4:	40026000 	.word	0x40026000
 80089e8:	20001aa0 	.word	0x20001aa0
 80089ec:	00000000 	.word	0x00000000

080089f0 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80089f0:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80089f2:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <Vector7C+0x20>)
  if (dma.streams[4].func)
 80089f4:	4807      	ldr	r0, [pc, #28]	; (8008a14 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80089f6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 80089f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80089fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 80089fe:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8008a00:	b10a      	cbz	r2, 8008a06 <Vector7C+0x16>
    dma.streams[4].func(dma.streams[4].param, flags);
 8008a02:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8008a04:	4790      	blx	r2
}
 8008a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8008a0a:	f7f8 b9b1 	b.w	8000d70 <_port_irq_epilogue>
 8008a0e:	bf00      	nop
 8008a10:	40026000 	.word	0x40026000
 8008a14:	20001aa0 	.word	0x20001aa0
	...

08008a20 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8008a20:	4b08      	ldr	r3, [pc, #32]	; (8008a44 <Vector78+0x24>)
  if (dma.streams[3].func)
 8008a22:	4809      	ldr	r0, [pc, #36]	; (8008a48 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8008a24:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 8008a26:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8008a28:	0d89      	lsrs	r1, r1, #22
 8008a2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8008a2e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 8008a30:	058c      	lsls	r4, r1, #22
 8008a32:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 8008a34:	b10a      	cbz	r2, 8008a3a <Vector78+0x1a>
    dma.streams[3].func(dma.streams[3].param, flags);
 8008a36:	6a00      	ldr	r0, [r0, #32]
 8008a38:	4790      	blx	r2
}
 8008a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8008a3e:	f7f8 b997 	b.w	8000d70 <_port_irq_epilogue>
 8008a42:	bf00      	nop
 8008a44:	40026000 	.word	0x40026000
 8008a48:	20001aa0 	.word	0x20001aa0
 8008a4c:	00000000 	.word	0x00000000

08008a50 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8008a50:	4b08      	ldr	r3, [pc, #32]	; (8008a74 <Vector74+0x24>)
  if (dma.streams[2].func)
 8008a52:	4809      	ldr	r0, [pc, #36]	; (8008a78 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8008a54:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 8008a56:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8008a58:	0c09      	lsrs	r1, r1, #16
 8008a5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8008a5e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 8008a60:	040c      	lsls	r4, r1, #16
 8008a62:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 8008a64:	b10a      	cbz	r2, 8008a6a <Vector74+0x1a>
    dma.streams[2].func(dma.streams[2].param, flags);
 8008a66:	6980      	ldr	r0, [r0, #24]
 8008a68:	4790      	blx	r2
}
 8008a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8008a6e:	f7f8 b97f 	b.w	8000d70 <_port_irq_epilogue>
 8008a72:	bf00      	nop
 8008a74:	40026000 	.word	0x40026000
 8008a78:	20001aa0 	.word	0x20001aa0
 8008a7c:	00000000 	.word	0x00000000

08008a80 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8008a80:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <Vector70+0x24>)
  if (dma.streams[1].func)
 8008a82:	4809      	ldr	r0, [pc, #36]	; (8008aa8 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8008a84:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 8008a86:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8008a88:	0989      	lsrs	r1, r1, #6
 8008a8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8008a8e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 8008a90:	018c      	lsls	r4, r1, #6
 8008a92:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 8008a94:	b10a      	cbz	r2, 8008a9a <Vector70+0x1a>
    dma.streams[1].func(dma.streams[1].param, flags);
 8008a96:	6900      	ldr	r0, [r0, #16]
 8008a98:	4790      	blx	r2
}
 8008a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8008a9e:	f7f8 b967 	b.w	8000d70 <_port_irq_epilogue>
 8008aa2:	bf00      	nop
 8008aa4:	40026000 	.word	0x40026000
 8008aa8:	20001aa0 	.word	0x20001aa0
 8008aac:	00000000 	.word	0x00000000

08008ab0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8008ab0:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8008ab2:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <Vector6C+0x20>)
  if (dma.streams[0].func)
 8008ab4:	4807      	ldr	r0, [pc, #28]	; (8008ad4 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8008ab6:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8008ab8:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8008aba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8008abe:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8008ac0:	b10a      	cbz	r2, 8008ac6 <Vector6C+0x16>
    dma.streams[0].func(dma.streams[0].param, flags);
 8008ac2:	6880      	ldr	r0, [r0, #8]
 8008ac4:	4790      	blx	r2
}
 8008ac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8008aca:	f7f8 b951 	b.w	8000d70 <_port_irq_epilogue>
 8008ace:	bf00      	nop
 8008ad0:	40026000 	.word	0x40026000
 8008ad4:	20001aa0 	.word	0x20001aa0
	...

08008ae0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8008ae0:	b4f0      	push	{r4, r5, r6, r7}
 8008ae2:	4f14      	ldr	r7, [pc, #80]	; (8008b34 <__init_ram_areas+0x54>)
 8008ae4:	4d14      	ldr	r5, [pc, #80]	; (8008b38 <__init_ram_areas+0x58>)
 8008ae6:	4815      	ldr	r0, [pc, #84]	; (8008b3c <__init_ram_areas+0x5c>)
 8008ae8:	4b15      	ldr	r3, [pc, #84]	; (8008b40 <__init_ram_areas+0x60>)
 8008aea:	4916      	ldr	r1, [pc, #88]	; (8008b44 <__init_ram_areas+0x64>)
 8008aec:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8008af0:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8008af2:	4298      	cmp	r0, r3
 8008af4:	d911      	bls.n	8008b1a <__init_ram_areas+0x3a>
 8008af6:	3904      	subs	r1, #4
 8008af8:	461a      	mov	r2, r3
      *p = *tp;
 8008afa:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8008afe:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8008b02:	4290      	cmp	r0, r2
 8008b04:	d8f9      	bhi.n	8008afa <__init_ram_areas+0x1a>
 8008b06:	1e42      	subs	r2, r0, #1
 8008b08:	1ad2      	subs	r2, r2, r3
 8008b0a:	f022 0203 	bic.w	r2, r2, #3
 8008b0e:	3204      	adds	r2, #4
 8008b10:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8008b12:	429d      	cmp	r5, r3
 8008b14:	d903      	bls.n	8008b1e <__init_ram_areas+0x3e>
      *p = 0;
 8008b16:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8008b1a:	429d      	cmp	r5, r3
 8008b1c:	d8fb      	bhi.n	8008b16 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8008b1e:	4567      	cmp	r7, ip
 8008b20:	d005      	beq.n	8008b2e <__init_ram_areas+0x4e>
 8008b22:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8008b26:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	e7e1      	b.n	8008af2 <__init_ram_areas+0x12>
#endif
}
 8008b2e:	bcf0      	pop	{r4, r5, r6, r7}
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	08009a0c 	.word	0x08009a0c
 8008b38:	2000204c 	.word	0x2000204c
 8008b3c:	2000204c 	.word	0x2000204c
 8008b40:	2000204c 	.word	0x2000204c
 8008b44:	0800a154 	.word	0x0800a154
	...

08008b50 <__default_exit>:
  while (true) {
 8008b50:	e7fe      	b.n	8008b50 <__default_exit>
 8008b52:	bf00      	nop
	...

08008b60 <__late_init>:
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
	...

08008b70 <__core_init>:
}
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop

08008b74 <_strtol_l.isra.0>:
 8008b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b78:	4f40      	ldr	r7, [pc, #256]	; (8008c7c <_strtol_l.isra.0+0x108>)
 8008b7a:	4681      	mov	r9, r0
 8008b7c:	460d      	mov	r5, r1
 8008b7e:	4628      	mov	r0, r5
 8008b80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b84:	5d3e      	ldrb	r6, [r7, r4]
 8008b86:	f016 0608 	ands.w	r6, r6, #8
 8008b8a:	d1f8      	bne.n	8008b7e <_strtol_l.isra.0+0xa>
 8008b8c:	2c2d      	cmp	r4, #45	; 0x2d
 8008b8e:	d04f      	beq.n	8008c30 <_strtol_l.isra.0+0xbc>
 8008b90:	2c2b      	cmp	r4, #43	; 0x2b
 8008b92:	bf0a      	itet	eq
 8008b94:	f895 b000 	ldrbeq.w	fp, [r5]
 8008b98:	46a3      	movne	fp, r4
 8008b9a:	1c85      	addeq	r5, r0, #2
 8008b9c:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8008ba0:	b11b      	cbz	r3, 8008baa <_strtol_l.isra.0+0x36>
 8008ba2:	2b10      	cmp	r3, #16
 8008ba4:	d04b      	beq.n	8008c3e <_strtol_l.isra.0+0xca>
 8008ba6:	469e      	mov	lr, r3
 8008ba8:	e004      	b.n	8008bb4 <_strtol_l.isra.0+0x40>
 8008baa:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8008bae:	d050      	beq.n	8008c52 <_strtol_l.isra.0+0xde>
 8008bb0:	230a      	movs	r3, #10
 8008bb2:	469e      	mov	lr, r3
 8008bb4:	2700      	movs	r7, #0
 8008bb6:	fbb8 fcfe 	udiv	ip, r8, lr
 8008bba:	4638      	mov	r0, r7
 8008bbc:	fb0e 8a1c 	mls	sl, lr, ip, r8
 8008bc0:	e005      	b.n	8008bce <_strtol_l.isra.0+0x5a>
 8008bc2:	d029      	beq.n	8008c18 <_strtol_l.isra.0+0xa4>
 8008bc4:	fb0e 4000 	mla	r0, lr, r0, r4
 8008bc8:	2701      	movs	r7, #1
 8008bca:	f815 bb01 	ldrb.w	fp, [r5], #1
 8008bce:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
 8008bd2:	2c09      	cmp	r4, #9
 8008bd4:	d905      	bls.n	8008be2 <_strtol_l.isra.0+0x6e>
 8008bd6:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
 8008bda:	2c19      	cmp	r4, #25
 8008bdc:	d80b      	bhi.n	8008bf6 <_strtol_l.isra.0+0x82>
 8008bde:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
 8008be2:	42a3      	cmp	r3, r4
 8008be4:	dd0f      	ble.n	8008c06 <_strtol_l.isra.0+0x92>
 8008be6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8008bea:	d0ee      	beq.n	8008bca <_strtol_l.isra.0+0x56>
 8008bec:	4584      	cmp	ip, r0
 8008bee:	d2e8      	bcs.n	8008bc2 <_strtol_l.isra.0+0x4e>
 8008bf0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008bf4:	e7e9      	b.n	8008bca <_strtol_l.isra.0+0x56>
 8008bf6:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
 8008bfa:	2c19      	cmp	r4, #25
 8008bfc:	d803      	bhi.n	8008c06 <_strtol_l.isra.0+0x92>
 8008bfe:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
 8008c02:	42a3      	cmp	r3, r4
 8008c04:	dcef      	bgt.n	8008be6 <_strtol_l.isra.0+0x72>
 8008c06:	1c7b      	adds	r3, r7, #1
 8008c08:	d00b      	beq.n	8008c22 <_strtol_l.isra.0+0xae>
 8008c0a:	b106      	cbz	r6, 8008c0e <_strtol_l.isra.0+0x9a>
 8008c0c:	4240      	negs	r0, r0
 8008c0e:	b10a      	cbz	r2, 8008c14 <_strtol_l.isra.0+0xa0>
 8008c10:	bb77      	cbnz	r7, 8008c70 <_strtol_l.isra.0+0xfc>
 8008c12:	6011      	str	r1, [r2, #0]
 8008c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c18:	45a2      	cmp	sl, r4
 8008c1a:	dad3      	bge.n	8008bc4 <_strtol_l.isra.0+0x50>
 8008c1c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008c20:	e7d3      	b.n	8008bca <_strtol_l.isra.0+0x56>
 8008c22:	2322      	movs	r3, #34	; 0x22
 8008c24:	f8c9 3000 	str.w	r3, [r9]
 8008c28:	b1fa      	cbz	r2, 8008c6a <_strtol_l.isra.0+0xf6>
 8008c2a:	1e69      	subs	r1, r5, #1
 8008c2c:	4640      	mov	r0, r8
 8008c2e:	e7f0      	b.n	8008c12 <_strtol_l.isra.0+0x9e>
 8008c30:	f895 b000 	ldrb.w	fp, [r5]
 8008c34:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8008c38:	1c85      	adds	r5, r0, #2
 8008c3a:	2601      	movs	r6, #1
 8008c3c:	e7b0      	b.n	8008ba0 <_strtol_l.isra.0+0x2c>
 8008c3e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8008c42:	d1b0      	bne.n	8008ba6 <_strtol_l.isra.0+0x32>
 8008c44:	7828      	ldrb	r0, [r5, #0]
 8008c46:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008c4a:	2858      	cmp	r0, #88	; 0x58
 8008c4c:	d006      	beq.n	8008c5c <_strtol_l.isra.0+0xe8>
 8008c4e:	469e      	mov	lr, r3
 8008c50:	e7b0      	b.n	8008bb4 <_strtol_l.isra.0+0x40>
 8008c52:	782b      	ldrb	r3, [r5, #0]
 8008c54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c58:	2b58      	cmp	r3, #88	; 0x58
 8008c5a:	d10b      	bne.n	8008c74 <_strtol_l.isra.0+0x100>
 8008c5c:	f04f 0e10 	mov.w	lr, #16
 8008c60:	f895 b001 	ldrb.w	fp, [r5, #1]
 8008c64:	4673      	mov	r3, lr
 8008c66:	3502      	adds	r5, #2
 8008c68:	e7a4      	b.n	8008bb4 <_strtol_l.isra.0+0x40>
 8008c6a:	4640      	mov	r0, r8
 8008c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c70:	4680      	mov	r8, r0
 8008c72:	e7da      	b.n	8008c2a <_strtol_l.isra.0+0xb6>
 8008c74:	2308      	movs	r3, #8
 8008c76:	469e      	mov	lr, r3
 8008c78:	e79c      	b.n	8008bb4 <_strtol_l.isra.0+0x40>
 8008c7a:	bf00      	nop
 8008c7c:	08009c09 	.word	0x08009c09

08008c80 <strtol>:
 8008c80:	b430      	push	{r4, r5}
 8008c82:	4c04      	ldr	r4, [pc, #16]	; (8008c94 <strtol+0x14>)
 8008c84:	460d      	mov	r5, r1
 8008c86:	4613      	mov	r3, r2
 8008c88:	4601      	mov	r1, r0
 8008c8a:	462a      	mov	r2, r5
 8008c8c:	6820      	ldr	r0, [r4, #0]
 8008c8e:	bc30      	pop	{r4, r5}
 8008c90:	f7ff bf70 	b.w	8008b74 <_strtol_l.isra.0>
 8008c94:	2000081c 	.word	0x2000081c

08008c98 <memset>:
 8008c98:	b4f0      	push	{r4, r5, r6, r7}
 8008c9a:	0786      	lsls	r6, r0, #30
 8008c9c:	d046      	beq.n	8008d2c <memset+0x94>
 8008c9e:	1e54      	subs	r4, r2, #1
 8008ca0:	2a00      	cmp	r2, #0
 8008ca2:	d03c      	beq.n	8008d1e <memset+0x86>
 8008ca4:	b2ca      	uxtb	r2, r1
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	e001      	b.n	8008cae <memset+0x16>
 8008caa:	3c01      	subs	r4, #1
 8008cac:	d337      	bcc.n	8008d1e <memset+0x86>
 8008cae:	f803 2b01 	strb.w	r2, [r3], #1
 8008cb2:	079d      	lsls	r5, r3, #30
 8008cb4:	d1f9      	bne.n	8008caa <memset+0x12>
 8008cb6:	2c03      	cmp	r4, #3
 8008cb8:	d92a      	bls.n	8008d10 <memset+0x78>
 8008cba:	b2cd      	uxtb	r5, r1
 8008cbc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8008cc0:	2c0f      	cmp	r4, #15
 8008cc2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8008cc6:	d934      	bls.n	8008d32 <memset+0x9a>
 8008cc8:	f1a4 0210 	sub.w	r2, r4, #16
 8008ccc:	f022 0c0f 	bic.w	ip, r2, #15
 8008cd0:	f103 0720 	add.w	r7, r3, #32
 8008cd4:	0916      	lsrs	r6, r2, #4
 8008cd6:	4467      	add	r7, ip
 8008cd8:	f103 0210 	add.w	r2, r3, #16
 8008cdc:	e942 5504 	strd	r5, r5, [r2, #-16]
 8008ce0:	e942 5502 	strd	r5, r5, [r2, #-8]
 8008ce4:	3210      	adds	r2, #16
 8008ce6:	42ba      	cmp	r2, r7
 8008ce8:	d1f8      	bne.n	8008cdc <memset+0x44>
 8008cea:	1c72      	adds	r2, r6, #1
 8008cec:	f014 0f0c 	tst.w	r4, #12
 8008cf0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8008cf4:	f004 060f 	and.w	r6, r4, #15
 8008cf8:	d013      	beq.n	8008d22 <memset+0x8a>
 8008cfa:	1f33      	subs	r3, r6, #4
 8008cfc:	f023 0303 	bic.w	r3, r3, #3
 8008d00:	3304      	adds	r3, #4
 8008d02:	4413      	add	r3, r2
 8008d04:	f842 5b04 	str.w	r5, [r2], #4
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d1fb      	bne.n	8008d04 <memset+0x6c>
 8008d0c:	f006 0403 	and.w	r4, r6, #3
 8008d10:	b12c      	cbz	r4, 8008d1e <memset+0x86>
 8008d12:	b2ca      	uxtb	r2, r1
 8008d14:	441c      	add	r4, r3
 8008d16:	f803 2b01 	strb.w	r2, [r3], #1
 8008d1a:	429c      	cmp	r4, r3
 8008d1c:	d1fb      	bne.n	8008d16 <memset+0x7e>
 8008d1e:	bcf0      	pop	{r4, r5, r6, r7}
 8008d20:	4770      	bx	lr
 8008d22:	4634      	mov	r4, r6
 8008d24:	4613      	mov	r3, r2
 8008d26:	2c00      	cmp	r4, #0
 8008d28:	d1f3      	bne.n	8008d12 <memset+0x7a>
 8008d2a:	e7f8      	b.n	8008d1e <memset+0x86>
 8008d2c:	4614      	mov	r4, r2
 8008d2e:	4603      	mov	r3, r0
 8008d30:	e7c1      	b.n	8008cb6 <memset+0x1e>
 8008d32:	461a      	mov	r2, r3
 8008d34:	4626      	mov	r6, r4
 8008d36:	e7e0      	b.n	8008cfa <memset+0x62>

08008d38 <strchr>:
 8008d38:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	d044      	beq.n	8008dca <strchr+0x92>
 8008d40:	0782      	lsls	r2, r0, #30
 8008d42:	d132      	bne.n	8008daa <strchr+0x72>
 8008d44:	b470      	push	{r4, r5, r6}
 8008d46:	6804      	ldr	r4, [r0, #0]
 8008d48:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8008d4c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8008d50:	ea86 0504 	eor.w	r5, r6, r4
 8008d54:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 8008d58:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8008d5c:	ea23 0305 	bic.w	r3, r3, r5
 8008d60:	ea22 0204 	bic.w	r2, r2, r4
 8008d64:	4313      	orrs	r3, r2
 8008d66:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8008d6a:	d10f      	bne.n	8008d8c <strchr+0x54>
 8008d6c:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8008d70:	ea84 0506 	eor.w	r5, r4, r6
 8008d74:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 8008d78:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 8008d7c:	ea22 0205 	bic.w	r2, r2, r5
 8008d80:	ea23 0304 	bic.w	r3, r3, r4
 8008d84:	4313      	orrs	r3, r2
 8008d86:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8008d8a:	d0ef      	beq.n	8008d6c <strchr+0x34>
 8008d8c:	7803      	ldrb	r3, [r0, #0]
 8008d8e:	b923      	cbnz	r3, 8008d9a <strchr+0x62>
 8008d90:	e036      	b.n	8008e00 <strchr+0xc8>
 8008d92:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d032      	beq.n	8008e00 <strchr+0xc8>
 8008d9a:	4299      	cmp	r1, r3
 8008d9c:	d1f9      	bne.n	8008d92 <strchr+0x5a>
 8008d9e:	e030      	b.n	8008e02 <strchr+0xca>
 8008da0:	428a      	cmp	r2, r1
 8008da2:	d011      	beq.n	8008dc8 <strchr+0x90>
 8008da4:	079a      	lsls	r2, r3, #30
 8008da6:	4618      	mov	r0, r3
 8008da8:	d0cc      	beq.n	8008d44 <strchr+0xc>
 8008daa:	4618      	mov	r0, r3
 8008dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008db0:	2a00      	cmp	r2, #0
 8008db2:	d1f5      	bne.n	8008da0 <strchr+0x68>
 8008db4:	4610      	mov	r0, r2
 8008db6:	4770      	bx	lr
 8008db8:	0799      	lsls	r1, r3, #30
 8008dba:	4618      	mov	r0, r3
 8008dbc:	d007      	beq.n	8008dce <strchr+0x96>
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	7802      	ldrb	r2, [r0, #0]
 8008dc4:	2a00      	cmp	r2, #0
 8008dc6:	d1f7      	bne.n	8008db8 <strchr+0x80>
 8008dc8:	4770      	bx	lr
 8008dca:	0782      	lsls	r2, r0, #30
 8008dcc:	d1f7      	bne.n	8008dbe <strchr+0x86>
 8008dce:	6802      	ldr	r2, [r0, #0]
 8008dd0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8008dd4:	ea23 0302 	bic.w	r3, r3, r2
 8008dd8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8008ddc:	d108      	bne.n	8008df0 <strchr+0xb8>
 8008dde:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8008de2:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8008de6:	ea23 0302 	bic.w	r3, r3, r2
 8008dea:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8008dee:	d0f6      	beq.n	8008dde <strchr+0xa6>
 8008df0:	7803      	ldrb	r3, [r0, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d0e8      	beq.n	8008dc8 <strchr+0x90>
 8008df6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1fb      	bne.n	8008df6 <strchr+0xbe>
 8008dfe:	4770      	bx	lr
 8008e00:	4618      	mov	r0, r3
 8008e02:	bc70      	pop	{r4, r5, r6}
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop

08008e08 <strpbrk>:
 8008e08:	b430      	push	{r4, r5}
 8008e0a:	7804      	ldrb	r4, [r0, #0]
 8008e0c:	b1a4      	cbz	r4, 8008e38 <strpbrk+0x30>
 8008e0e:	780d      	ldrb	r5, [r1, #0]
 8008e10:	460a      	mov	r2, r1
 8008e12:	462b      	mov	r3, r5
 8008e14:	b91d      	cbnz	r5, 8008e1e <strpbrk+0x16>
 8008e16:	e00a      	b.n	8008e2e <strpbrk+0x26>
 8008e18:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8008e1c:	b13b      	cbz	r3, 8008e2e <strpbrk+0x26>
 8008e1e:	429c      	cmp	r4, r3
 8008e20:	d1fa      	bne.n	8008e18 <strpbrk+0x10>
 8008e22:	7813      	ldrb	r3, [r2, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	bf08      	it	eq
 8008e28:	2000      	moveq	r0, #0
 8008e2a:	bc30      	pop	{r4, r5}
 8008e2c:	4770      	bx	lr
 8008e2e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8008e32:	2c00      	cmp	r4, #0
 8008e34:	d1ec      	bne.n	8008e10 <strpbrk+0x8>
 8008e36:	e7f4      	b.n	8008e22 <strpbrk+0x1a>
 8008e38:	4620      	mov	r0, r4
 8008e3a:	bc30      	pop	{r4, r5}
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop

08008e40 <strspn>:
 8008e40:	b470      	push	{r4, r5, r6}
 8008e42:	7804      	ldrb	r4, [r0, #0]
 8008e44:	b18c      	cbz	r4, 8008e6a <strspn+0x2a>
 8008e46:	780e      	ldrb	r6, [r1, #0]
 8008e48:	4605      	mov	r5, r0
 8008e4a:	b15e      	cbz	r6, 8008e64 <strspn+0x24>
 8008e4c:	460a      	mov	r2, r1
 8008e4e:	4633      	mov	r3, r6
 8008e50:	e002      	b.n	8008e58 <strspn+0x18>
 8008e52:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8008e56:	b12b      	cbz	r3, 8008e64 <strspn+0x24>
 8008e58:	42a3      	cmp	r3, r4
 8008e5a:	d1fa      	bne.n	8008e52 <strspn+0x12>
 8008e5c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8008e60:	2c00      	cmp	r4, #0
 8008e62:	d1f2      	bne.n	8008e4a <strspn+0xa>
 8008e64:	1a28      	subs	r0, r5, r0
 8008e66:	bc70      	pop	{r4, r5, r6}
 8008e68:	4770      	bx	lr
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	e7fb      	b.n	8008e66 <strspn+0x26>
 8008e6e:	bf00      	nop

08008e70 <two_way_long_needle>:
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	461d      	mov	r5, r3
 8008e78:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8008e7c:	4681      	mov	r9, r0
 8008e7e:	460f      	mov	r7, r1
 8008e80:	4690      	mov	r8, r2
 8008e82:	f04f 0301 	mov.w	r3, #1
 8008e86:	f240 8144 	bls.w	8009112 <two_way_long_needle+0x2a2>
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	469c      	mov	ip, r3
 8008e8e:	2400      	movs	r4, #0
 8008e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e94:	e006      	b.n	8008ea4 <two_way_long_needle+0x34>
 8008e96:	eba3 0c00 	sub.w	ip, r3, r0
 8008e9a:	461c      	mov	r4, r3
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	1863      	adds	r3, r4, r1
 8008ea0:	429d      	cmp	r5, r3
 8008ea2:	d910      	bls.n	8008ec6 <two_way_long_needle+0x56>
 8008ea4:	eb08 0200 	add.w	r2, r8, r0
 8008ea8:	f818 6003 	ldrb.w	r6, [r8, r3]
 8008eac:	5c52      	ldrb	r2, [r2, r1]
 8008eae:	4296      	cmp	r6, r2
 8008eb0:	d3f1      	bcc.n	8008e96 <two_way_long_needle+0x26>
 8008eb2:	f000 8082 	beq.w	8008fba <two_way_long_needle+0x14a>
 8008eb6:	f04f 0c01 	mov.w	ip, #1
 8008eba:	4661      	mov	r1, ip
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	4464      	add	r4, ip
 8008ec0:	1863      	adds	r3, r4, r1
 8008ec2:	429d      	cmp	r5, r3
 8008ec4:	d8ee      	bhi.n	8008ea4 <two_way_long_needle+0x34>
 8008ec6:	f8cd c008 	str.w	ip, [sp, #8]
 8008eca:	f04f 0c01 	mov.w	ip, #1
 8008ece:	4661      	mov	r1, ip
 8008ed0:	4663      	mov	r3, ip
 8008ed2:	2400      	movs	r4, #0
 8008ed4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008ed8:	e006      	b.n	8008ee8 <two_way_long_needle+0x78>
 8008eda:	eba3 0c06 	sub.w	ip, r3, r6
 8008ede:	461c      	mov	r4, r3
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	1863      	adds	r3, r4, r1
 8008ee4:	429d      	cmp	r5, r3
 8008ee6:	d90f      	bls.n	8008f08 <two_way_long_needle+0x98>
 8008ee8:	eb08 0201 	add.w	r2, r8, r1
 8008eec:	f818 e003 	ldrb.w	lr, [r8, r3]
 8008ef0:	5d92      	ldrb	r2, [r2, r6]
 8008ef2:	4596      	cmp	lr, r2
 8008ef4:	d8f1      	bhi.n	8008eda <two_way_long_needle+0x6a>
 8008ef6:	d066      	beq.n	8008fc6 <two_way_long_needle+0x156>
 8008ef8:	f04f 0c01 	mov.w	ip, #1
 8008efc:	4661      	mov	r1, ip
 8008efe:	4626      	mov	r6, r4
 8008f00:	4464      	add	r4, ip
 8008f02:	1863      	adds	r3, r4, r1
 8008f04:	429d      	cmp	r5, r3
 8008f06:	d8ef      	bhi.n	8008ee8 <two_way_long_needle+0x78>
 8008f08:	3601      	adds	r6, #1
 8008f0a:	f100 0b01 	add.w	fp, r0, #1
 8008f0e:	455e      	cmp	r6, fp
 8008f10:	d302      	bcc.n	8008f18 <two_way_long_needle+0xa8>
 8008f12:	f8cd c008 	str.w	ip, [sp, #8]
 8008f16:	46b3      	mov	fp, r6
 8008f18:	ab05      	add	r3, sp, #20
 8008f1a:	f20d 4214 	addw	r2, sp, #1044	; 0x414
 8008f1e:	f843 5f04 	str.w	r5, [r3, #4]!
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d1fb      	bne.n	8008f1e <two_way_long_needle+0xae>
 8008f26:	2d00      	cmp	r5, #0
 8008f28:	f000 80f7 	beq.w	800911a <two_way_long_needle+0x2aa>
 8008f2c:	1e6c      	subs	r4, r5, #1
 8008f2e:	ae06      	add	r6, sp, #24
 8008f30:	eb08 0004 	add.w	r0, r8, r4
 8008f34:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8008f38:	9601      	str	r6, [sp, #4]
 8008f3a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008f3e:	43d3      	mvns	r3, r2
 8008f40:	442b      	add	r3, r5
 8008f42:	4443      	add	r3, r8
 8008f44:	4290      	cmp	r0, r2
 8008f46:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
 8008f4a:	d1f6      	bne.n	8008f3a <two_way_long_needle+0xca>
 8008f4c:	9b02      	ldr	r3, [sp, #8]
 8008f4e:	465a      	mov	r2, fp
 8008f50:	eb08 0103 	add.w	r1, r8, r3
 8008f54:	4640      	mov	r0, r8
 8008f56:	f000 f997 	bl	8009288 <memcmp>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	f040 8081 	bne.w	8009062 <two_way_long_needle+0x1f2>
 8008f60:	9b02      	ldr	r3, [sp, #8]
 8008f62:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8008f66:	1aeb      	subs	r3, r5, r3
 8008f68:	4682      	mov	sl, r0
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	9205      	str	r2, [sp, #20]
 8008f6e:	9303      	str	r3, [sp, #12]
 8008f70:	eb09 0e06 	add.w	lr, r9, r6
 8008f74:	9a01      	ldr	r2, [sp, #4]
 8008f76:	f81e 3004 	ldrb.w	r3, [lr, r4]
 8008f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f7e:	b343      	cbz	r3, 8008fd2 <two_way_long_needle+0x162>
 8008f80:	f1ba 0f00 	cmp.w	sl, #0
 8008f84:	d004      	beq.n	8008f90 <two_way_long_needle+0x120>
 8008f86:	9a02      	ldr	r2, [sp, #8]
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	9a03      	ldr	r2, [sp, #12]
 8008f8c:	bf38      	it	cc
 8008f8e:	4613      	movcc	r3, r2
 8008f90:	441e      	add	r6, r3
 8008f92:	f04f 0a00 	mov.w	sl, #0
 8008f96:	1b7b      	subs	r3, r7, r5
 8008f98:	42b3      	cmp	r3, r6
 8008f9a:	d2e9      	bcs.n	8008f70 <two_way_long_needle+0x100>
 8008f9c:	eb09 0007 	add.w	r0, r9, r7
 8008fa0:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
 8008fa4:	f000 f9a0 	bl	80092e8 <strnlen>
 8008fa8:	4407      	add	r7, r0
 8008faa:	1b7b      	subs	r3, r7, r5
 8008fac:	42b3      	cmp	r3, r6
 8008fae:	d2df      	bcs.n	8008f70 <two_way_long_needle+0x100>
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 8008fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fba:	458c      	cmp	ip, r1
 8008fbc:	bf12      	itee	ne
 8008fbe:	3101      	addne	r1, #1
 8008fc0:	4464      	addeq	r4, ip
 8008fc2:	2101      	moveq	r1, #1
 8008fc4:	e76b      	b.n	8008e9e <two_way_long_needle+0x2e>
 8008fc6:	4561      	cmp	r1, ip
 8008fc8:	bf0a      	itet	eq
 8008fca:	1864      	addeq	r4, r4, r1
 8008fcc:	3101      	addne	r1, #1
 8008fce:	2101      	moveq	r1, #1
 8008fd0:	e787      	b.n	8008ee2 <two_way_long_needle+0x72>
 8008fd2:	45d3      	cmp	fp, sl
 8008fd4:	465b      	mov	r3, fp
 8008fd6:	bf38      	it	cc
 8008fd8:	4653      	movcc	r3, sl
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	d211      	bcs.n	8009002 <two_way_long_needle+0x192>
 8008fde:	1e59      	subs	r1, r3, #1
 8008fe0:	199a      	adds	r2, r3, r6
 8008fe2:	4441      	add	r1, r8
 8008fe4:	444a      	add	r2, r9
 8008fe6:	e002      	b.n	8008fee <two_way_long_needle+0x17e>
 8008fe8:	3301      	adds	r3, #1
 8008fea:	42a3      	cmp	r3, r4
 8008fec:	d209      	bcs.n	8009002 <two_way_long_needle+0x192>
 8008fee:	f812 0b01 	ldrb.w	r0, [r2], #1
 8008ff2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8008ff6:	4584      	cmp	ip, r0
 8008ff8:	d0f6      	beq.n	8008fe8 <two_way_long_needle+0x178>
 8008ffa:	f1cb 0201 	rsb	r2, fp, #1
 8008ffe:	4416      	add	r6, r2
 8009000:	e7c6      	b.n	8008f90 <two_way_long_needle+0x120>
 8009002:	45d3      	cmp	fp, sl
 8009004:	9b05      	ldr	r3, [sp, #20]
 8009006:	d97d      	bls.n	8009104 <two_way_long_needle+0x294>
 8009008:	eb0b 0206 	add.w	r2, fp, r6
 800900c:	444a      	add	r2, r9
 800900e:	eb08 010b 	add.w	r1, r8, fp
 8009012:	f8cd b010 	str.w	fp, [sp, #16]
 8009016:	e002      	b.n	800901e <two_way_long_needle+0x1ae>
 8009018:	4553      	cmp	r3, sl
 800901a:	d016      	beq.n	800904a <two_way_long_needle+0x1da>
 800901c:	4603      	mov	r3, r0
 800901e:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 8009022:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 8009026:	4584      	cmp	ip, r0
 8009028:	f103 0b01 	add.w	fp, r3, #1
 800902c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8009030:	d0f2      	beq.n	8009018 <two_way_long_needle+0x1a8>
 8009032:	465b      	mov	r3, fp
 8009034:	f8dd b010 	ldr.w	fp, [sp, #16]
 8009038:	f10a 0a01 	add.w	sl, sl, #1
 800903c:	459a      	cmp	sl, r3
 800903e:	d80b      	bhi.n	8009058 <two_way_long_needle+0x1e8>
 8009040:	9b02      	ldr	r3, [sp, #8]
 8009042:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8009046:	441e      	add	r6, r3
 8009048:	e7a5      	b.n	8008f96 <two_way_long_needle+0x126>
 800904a:	4653      	mov	r3, sl
 800904c:	f10a 0a01 	add.w	sl, sl, #1
 8009050:	459a      	cmp	sl, r3
 8009052:	f8dd b010 	ldr.w	fp, [sp, #16]
 8009056:	d9f3      	bls.n	8009040 <two_way_long_needle+0x1d0>
 8009058:	4670      	mov	r0, lr
 800905a:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 800905e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009062:	eba5 030b 	sub.w	r3, r5, fp
 8009066:	455b      	cmp	r3, fp
 8009068:	bf38      	it	cc
 800906a:	465b      	movcc	r3, fp
 800906c:	3301      	adds	r3, #1
 800906e:	9304      	str	r3, [sp, #16]
 8009070:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8009074:	9302      	str	r3, [sp, #8]
 8009076:	f1cb 0301 	rsb	r3, fp, #1
 800907a:	2600      	movs	r6, #0
 800907c:	9303      	str	r3, [sp, #12]
 800907e:	f445 6a00 	orr.w	sl, r5, #2048	; 0x800
 8009082:	eb09 0e06 	add.w	lr, r9, r6
 8009086:	9a01      	ldr	r2, [sp, #4]
 8009088:	f81e 3004 	ldrb.w	r3, [lr, r4]
 800908c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009090:	b16b      	cbz	r3, 80090ae <two_way_long_needle+0x23e>
 8009092:	441e      	add	r6, r3
 8009094:	1b7b      	subs	r3, r7, r5
 8009096:	429e      	cmp	r6, r3
 8009098:	d9f3      	bls.n	8009082 <two_way_long_needle+0x212>
 800909a:	eb09 0007 	add.w	r0, r9, r7
 800909e:	4651      	mov	r1, sl
 80090a0:	f000 f922 	bl	80092e8 <strnlen>
 80090a4:	4407      	add	r7, r0
 80090a6:	1b7b      	subs	r3, r7, r5
 80090a8:	429e      	cmp	r6, r3
 80090aa:	d9ea      	bls.n	8009082 <two_way_long_needle+0x212>
 80090ac:	e780      	b.n	8008fb0 <two_way_long_needle+0x140>
 80090ae:	45a3      	cmp	fp, r4
 80090b0:	d214      	bcs.n	80090dc <two_way_long_needle+0x26c>
 80090b2:	9b02      	ldr	r3, [sp, #8]
 80090b4:	eb0b 0206 	add.w	r2, fp, r6
 80090b8:	eb08 0103 	add.w	r1, r8, r3
 80090bc:	444a      	add	r2, r9
 80090be:	465b      	mov	r3, fp
 80090c0:	e002      	b.n	80090c8 <two_way_long_needle+0x258>
 80090c2:	3301      	adds	r3, #1
 80090c4:	42a3      	cmp	r3, r4
 80090c6:	d209      	bcs.n	80090dc <two_way_long_needle+0x26c>
 80090c8:	f812 0b01 	ldrb.w	r0, [r2], #1
 80090cc:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 80090d0:	4584      	cmp	ip, r0
 80090d2:	d0f6      	beq.n	80090c2 <two_way_long_needle+0x252>
 80090d4:	9a03      	ldr	r2, [sp, #12]
 80090d6:	4416      	add	r6, r2
 80090d8:	441e      	add	r6, r3
 80090da:	e7db      	b.n	8009094 <two_way_long_needle+0x224>
 80090dc:	f1bb 0f00 	cmp.w	fp, #0
 80090e0:	d012      	beq.n	8009108 <two_way_long_needle+0x298>
 80090e2:	eb0b 0106 	add.w	r1, fp, r6
 80090e6:	4449      	add	r1, r9
 80090e8:	eb08 020b 	add.w	r2, r8, fp
 80090ec:	e001      	b.n	80090f2 <two_way_long_needle+0x282>
 80090ee:	4543      	cmp	r3, r8
 80090f0:	d00a      	beq.n	8009108 <two_way_long_needle+0x298>
 80090f2:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
 80090f6:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 80090fa:	4584      	cmp	ip, r0
 80090fc:	4613      	mov	r3, r2
 80090fe:	d0f6      	beq.n	80090ee <two_way_long_needle+0x27e>
 8009100:	9b04      	ldr	r3, [sp, #16]
 8009102:	e7c6      	b.n	8009092 <two_way_long_needle+0x222>
 8009104:	465b      	mov	r3, fp
 8009106:	e797      	b.n	8009038 <two_way_long_needle+0x1c8>
 8009108:	4670      	mov	r0, lr
 800910a:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 800910e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009112:	9302      	str	r3, [sp, #8]
 8009114:	f04f 0b00 	mov.w	fp, #0
 8009118:	e6fe      	b.n	8008f18 <two_way_long_needle+0xa8>
 800911a:	ab06      	add	r3, sp, #24
 800911c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	e713      	b.n	8008f4c <two_way_long_needle+0xdc>

08009124 <strstr>:
 8009124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009128:	460e      	mov	r6, r1
 800912a:	7809      	ldrb	r1, [r1, #0]
 800912c:	b090      	sub	sp, #64	; 0x40
 800912e:	4604      	mov	r4, r0
 8009130:	2900      	cmp	r1, #0
 8009132:	d050      	beq.n	80091d6 <strstr+0xb2>
 8009134:	7872      	ldrb	r2, [r6, #1]
 8009136:	2a00      	cmp	r2, #0
 8009138:	f000 8082 	beq.w	8009240 <strstr+0x11c>
 800913c:	78b3      	ldrb	r3, [r6, #2]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d04d      	beq.n	80091de <strstr+0xba>
 8009142:	78f0      	ldrb	r0, [r6, #3]
 8009144:	2800      	cmp	r0, #0
 8009146:	f000 8082 	beq.w	800924e <strstr+0x12a>
 800914a:	7933      	ldrb	r3, [r6, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d054      	beq.n	80091fa <strstr+0xd6>
 8009150:	4630      	mov	r0, r6
 8009152:	f7f7 faf5 	bl	8000740 <strlen>
 8009156:	4607      	mov	r7, r0
 8009158:	f440 7100 	orr.w	r1, r0, #512	; 0x200
 800915c:	4620      	mov	r0, r4
 800915e:	f000 f8c3 	bl	80092e8 <strnlen>
 8009162:	4287      	cmp	r7, r0
 8009164:	d867      	bhi.n	8009236 <strstr+0x112>
 8009166:	2ffe      	cmp	r7, #254	; 0xfe
 8009168:	f200 8085 	bhi.w	8009276 <strstr+0x152>
 800916c:	eba0 0807 	sub.w	r8, r0, r7
 8009170:	2240      	movs	r2, #64	; 0x40
 8009172:	1c79      	adds	r1, r7, #1
 8009174:	4668      	mov	r0, sp
 8009176:	44a0      	add	r8, r4
 8009178:	f7ff fd8e 	bl	8008c98 <memset>
 800917c:	b177      	cbz	r7, 800919c <strstr+0x78>
 800917e:	1e72      	subs	r2, r6, #1
 8009180:	19d5      	adds	r5, r2, r7
 8009182:	b2f8      	uxtb	r0, r7
 8009184:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009188:	a910      	add	r1, sp, #64	; 0x40
 800918a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800918e:	440b      	add	r3, r1
 8009190:	1ab1      	subs	r1, r6, r2
 8009192:	4401      	add	r1, r0
 8009194:	42aa      	cmp	r2, r5
 8009196:	f803 1c40 	strb.w	r1, [r3, #-64]
 800919a:	d1f3      	bne.n	8009184 <strstr+0x60>
 800919c:	3c01      	subs	r4, #1
 800919e:	aa10      	add	r2, sp, #64	; 0x40
 80091a0:	5de3      	ldrb	r3, [r4, r7]
 80091a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091a6:	4413      	add	r3, r2
 80091a8:	f813 0c40 	ldrb.w	r0, [r3, #-64]
 80091ac:	4404      	add	r4, r0
 80091ae:	45a0      	cmp	r8, r4
 80091b0:	d203      	bcs.n	80091ba <strstr+0x96>
 80091b2:	e034      	b.n	800921e <strstr+0xfa>
 80091b4:	442c      	add	r4, r5
 80091b6:	45a0      	cmp	r8, r4
 80091b8:	d331      	bcc.n	800921e <strstr+0xfa>
 80091ba:	5de5      	ldrb	r5, [r4, r7]
 80091bc:	ab10      	add	r3, sp, #64	; 0x40
 80091be:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80091c2:	441d      	add	r5, r3
 80091c4:	463a      	mov	r2, r7
 80091c6:	4631      	mov	r1, r6
 80091c8:	4620      	mov	r0, r4
 80091ca:	f815 5c40 	ldrb.w	r5, [r5, #-64]
 80091ce:	f000 f85b 	bl	8009288 <memcmp>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d1ee      	bne.n	80091b4 <strstr+0x90>
 80091d6:	4620      	mov	r0, r4
 80091d8:	b010      	add	sp, #64	; 0x40
 80091da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091de:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 80091e2:	7802      	ldrb	r2, [r0, #0]
 80091e4:	e000      	b.n	80091e8 <strstr+0xc4>
 80091e6:	4604      	mov	r4, r0
 80091e8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80091ec:	1c60      	adds	r0, r4, #1
 80091ee:	b312      	cbz	r2, 8009236 <strstr+0x112>
 80091f0:	4299      	cmp	r1, r3
 80091f2:	7862      	ldrb	r2, [r4, #1]
 80091f4:	d1f7      	bne.n	80091e6 <strstr+0xc2>
 80091f6:	3c01      	subs	r4, #1
 80091f8:	e7ed      	b.n	80091d6 <strstr+0xb2>
 80091fa:	7822      	ldrb	r2, [r4, #0]
 80091fc:	b1da      	cbz	r2, 8009236 <strstr+0x112>
 80091fe:	6831      	ldr	r1, [r6, #0]
 8009200:	ba09      	rev	r1, r1
 8009202:	e001      	b.n	8009208 <strstr+0xe4>
 8009204:	4299      	cmp	r1, r3
 8009206:	d008      	beq.n	800921a <strstr+0xf6>
 8009208:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800920c:	4620      	mov	r0, r4
 800920e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8009212:	2a00      	cmp	r2, #0
 8009214:	d1f6      	bne.n	8009204 <strstr+0xe0>
 8009216:	4299      	cmp	r1, r3
 8009218:	d10d      	bne.n	8009236 <strstr+0x112>
 800921a:	1ec4      	subs	r4, r0, #3
 800921c:	e7db      	b.n	80091d6 <strstr+0xb2>
 800921e:	f818 3007 	ldrb.w	r3, [r8, r7]
 8009222:	eb08 0007 	add.w	r0, r8, r7
 8009226:	b133      	cbz	r3, 8009236 <strstr+0x112>
 8009228:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800922c:	f000 f85c 	bl	80092e8 <strnlen>
 8009230:	4480      	add	r8, r0
 8009232:	4544      	cmp	r4, r8
 8009234:	d9b2      	bls.n	800919c <strstr+0x78>
 8009236:	2400      	movs	r4, #0
 8009238:	4620      	mov	r0, r4
 800923a:	b010      	add	sp, #64	; 0x40
 800923c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009240:	f7ff fd7a 	bl	8008d38 <strchr>
 8009244:	4604      	mov	r4, r0
 8009246:	4620      	mov	r0, r4
 8009248:	b010      	add	sp, #64	; 0x40
 800924a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800924e:	0412      	lsls	r2, r2, #16
 8009250:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009254:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8009258:	7822      	ldrb	r2, [r4, #0]
 800925a:	e000      	b.n	800925e <strstr+0x13a>
 800925c:	462c      	mov	r4, r5
 800925e:	ea42 0100 	orr.w	r1, r2, r0
 8009262:	1c65      	adds	r5, r4, #1
 8009264:	0208      	lsls	r0, r1, #8
 8009266:	2a00      	cmp	r2, #0
 8009268:	d0e5      	beq.n	8009236 <strstr+0x112>
 800926a:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 800926e:	7862      	ldrb	r2, [r4, #1]
 8009270:	d1f4      	bne.n	800925c <strstr+0x138>
 8009272:	3c02      	subs	r4, #2
 8009274:	e7af      	b.n	80091d6 <strstr+0xb2>
 8009276:	4601      	mov	r1, r0
 8009278:	463b      	mov	r3, r7
 800927a:	4620      	mov	r0, r4
 800927c:	4632      	mov	r2, r6
 800927e:	f7ff fdf7 	bl	8008e70 <two_way_long_needle>
 8009282:	4604      	mov	r4, r0
 8009284:	e7a7      	b.n	80091d6 <strstr+0xb2>
 8009286:	bf00      	nop

08009288 <memcmp>:
 8009288:	2a03      	cmp	r2, #3
 800928a:	b470      	push	{r4, r5, r6}
 800928c:	d912      	bls.n	80092b4 <memcmp+0x2c>
 800928e:	ea40 0501 	orr.w	r5, r0, r1
 8009292:	07ad      	lsls	r5, r5, #30
 8009294:	4604      	mov	r4, r0
 8009296:	460b      	mov	r3, r1
 8009298:	d11e      	bne.n	80092d8 <memcmp+0x50>
 800929a:	4619      	mov	r1, r3
 800929c:	4620      	mov	r0, r4
 800929e:	f853 5b04 	ldr.w	r5, [r3], #4
 80092a2:	f854 6b04 	ldr.w	r6, [r4], #4
 80092a6:	42ae      	cmp	r6, r5
 80092a8:	d116      	bne.n	80092d8 <memcmp+0x50>
 80092aa:	3a04      	subs	r2, #4
 80092ac:	2a03      	cmp	r2, #3
 80092ae:	4620      	mov	r0, r4
 80092b0:	4619      	mov	r1, r3
 80092b2:	d8f2      	bhi.n	800929a <memcmp+0x12>
 80092b4:	1e56      	subs	r6, r2, #1
 80092b6:	b1a2      	cbz	r2, 80092e2 <memcmp+0x5a>
 80092b8:	3901      	subs	r1, #1
 80092ba:	1e44      	subs	r4, r0, #1
 80092bc:	e001      	b.n	80092c2 <memcmp+0x3a>
 80092be:	18c3      	adds	r3, r0, r3
 80092c0:	d00c      	beq.n	80092dc <memcmp+0x54>
 80092c2:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80092c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80092ca:	4295      	cmp	r5, r2
 80092cc:	eba6 0304 	sub.w	r3, r6, r4
 80092d0:	d0f5      	beq.n	80092be <memcmp+0x36>
 80092d2:	1aa8      	subs	r0, r5, r2
 80092d4:	bc70      	pop	{r4, r5, r6}
 80092d6:	4770      	bx	lr
 80092d8:	1e56      	subs	r6, r2, #1
 80092da:	e7ed      	b.n	80092b8 <memcmp+0x30>
 80092dc:	4618      	mov	r0, r3
 80092de:	bc70      	pop	{r4, r5, r6}
 80092e0:	4770      	bx	lr
 80092e2:	4610      	mov	r0, r2
 80092e4:	e7f6      	b.n	80092d4 <memcmp+0x4c>
 80092e6:	bf00      	nop

080092e8 <strnlen>:
 80092e8:	b181      	cbz	r1, 800930c <strnlen+0x24>
 80092ea:	b410      	push	{r4}
 80092ec:	4603      	mov	r3, r0
 80092ee:	1844      	adds	r4, r0, r1
 80092f0:	e001      	b.n	80092f6 <strnlen+0xe>
 80092f2:	42a3      	cmp	r3, r4
 80092f4:	d007      	beq.n	8009306 <strnlen+0x1e>
 80092f6:	461a      	mov	r2, r3
 80092f8:	3301      	adds	r3, #1
 80092fa:	7811      	ldrb	r1, [r2, #0]
 80092fc:	2900      	cmp	r1, #0
 80092fe:	d1f8      	bne.n	80092f2 <strnlen+0xa>
 8009300:	1a10      	subs	r0, r2, r0
 8009302:	bc10      	pop	{r4}
 8009304:	4770      	bx	lr
 8009306:	1a18      	subs	r0, r3, r0
 8009308:	bc10      	pop	{r4}
 800930a:	4770      	bx	lr
 800930c:	4608      	mov	r0, r1
 800930e:	4770      	bx	lr
