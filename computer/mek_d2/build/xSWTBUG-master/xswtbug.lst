AS02 Assembler for M6802 [1.42].                                     Page    1
-------------------------------- xswtbug.asm ---------------------------------

1744 lines read, no errors in pass 1.
                        		title	"xSWTBUG v1.2.1"
                        ;***************************************************
                        ;REPLACEMENT FOR MIKBUG ROM
                        ;FOR SWTPC 6800 COMPUTER SYSTEM
                        ;COPYRIGHT 1977
                        ;SOUTHWEST TECHNICAL PROD. CORP.
                        ;AUGUST, 1977
                        ;***************************************************
                        ;
                        ; Enhancements by Bob Applegate, K2UT
                        ; bob@corshamtech.com
                        ; www.corshamtech.com
                        ;
                        ; This was all done for the SWTBUG included with the
                        ; Corsham Tech 6800 CPU board.
                        ;
                        ; I MAKE NO COPYRIGHT CLAIMS!  The original code is
                        ; on the Internet and I simply copied and modified it,
                        ; so all my changes are free to use.
                        ;
                        ; Last edit: 05/27/2016
                        ;
                        ; Source was converted to use the AS02 assembler:
                        ;
                        ;    http://www.kingswood-consulting.co.uk/assemblers/
                        ;
                        ; I prefer this assembler because it gives me nice
                        ; macros and conditional assembly.  It also uses
                        ; traditional pseudo-ops instead of the strange
                        ; Motorola ones.
                        ;
                        ; This includes extensions that can optionally
                        ; be compiled in.  Look near ExtCmd for the new
                        ; code.  I needed to add more commands without
                        ; disrupting anything in the original SWTBUG, so
                        ; the 'C' command has been replaced by the 'X'
                        ; command which goes into the extended command set.
                        ;
                        ; 1.2   - Includes logic for handling the Corsham Tech
                        ;         SD card interface board.
                        ; 1.2.1 - Added a version string at start-up
                        ;
                        ;***************************************************
                        ; Various constants
                        ;
0000 =                  false		equ	0
ffff =                  true		equ	~false
                        ;
                        ; Version and revision values.  Version.Revision
                        ;
0001 =                  VERSION		equ	1
0002 =                  REVISION	equ	2
                        ;
                        ; So included programs know that they are being
                        ; built as part of SWTBUG and don't need to define
                        ; as much.
                        ;
ffff =                  IN_SWTBUG	equ	true
                        ;
                        ; If this is true, then add support for S5 records
                        ; in the "L" command.  Moves some code into the
AS02 Assembler for M6802 [1.42].                                     Page    2
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        ; extended area.  The original SWTBUG only supported
                        ; S9 for end of file.
                        ;
0000 =                  SUPPORT_S5	equ	false ;true
                        ;
                        ;***************************************************
                        ; User options and tuning parameters...
                        ;
                        ; Number of address bits in EPROM.  This is used
                        ; to calculate the vector addresses.  For Corsham
                        ; Technologies 6800 CPU boards, the value is 13.
                        ;
000d =                  ADDR_BITS	equ	13
                        ;
                        ; Start of ROM and RAM regions
                        ;
a000 =                  RAM_BASE	equ	$a000
e000 =                  ROM_BASE	equ	$e000
                        ;
                        ; If NO_WEIRD is set, then don't put out tape reader
                        ; control codes in prompts.  Many people are using
                        ; terminal programs running on computers which
                        ; interpret the control codes and display them as
                        ; weird symbols.  Turning on this option will stop
                        ; those weird symbols from coming out.
                        ;
ffff =                  NO_WEIRD	equ	true
                        ;
                        ; If set, add the extended SWTBUG.  Else just have
                        ; the standard set of commands.
                        ;
0000 =                  EXTENDED	equ	false ;true
                        ;
                        ; These are options if EXTENDED is on...
                        ;
0000 =                  SD_SUPPORT	equ	false ;true	;include SD card funcs
0000 =                  SD_CMDS		equ	false ;true	;adds SD card commands
0000 =                  SD_BOOT		equ	false ;true	;boot from SD card
a100 =                  BOOT_ADDR	equ	$a100	;where boot sector goes
                        ;
0000 =                  NUMGUESS		equ	false ;true	;include NumGuess game
0000 =                  MEMTEST		equ	false ;true	;include Memory tester
0000 =                  OTHELLO		equ	false ;true	;include Othello game
                        ;
                        ; To support running with either 6800 or 6809
                        ; motherboards, these two options allow you to set
                        ; the base address of the I/O block and also the
                        ; number of addresses for each I/O slot.
                        ;
                        ; For 6800:
                        ;    IOBASE is $8000
                        ;    IOBYTES is 4
                        ;
                        ; For 6809:
                        ;    IOBASE is $e000
                        ;    IOBYTES is 16
                        ;
8000 =                  IOBASE		equ	$8000
0004 =                  IOBYTES		equ	4
                        ;
                        ; CONSLOT is the slot that the console port is plugged
                        ; into.  SWTPC always uses 1.
AS02 Assembler for M6802 [1.42].                                     Page    3
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        ;
0001 =                  CONSLOT		equ	1
                        ;
                        ;***************************************************
                        ; Common ASCII control codes
                        ;
0004 =                  EOT		equ	$04
0007 =                  BEL		equ	$07
0008 =                  BS		equ	$08
000a =                  LF		equ	$0a
000d =                  CR		equ	$0d
007f =                  DEL		equ	$7f
                        ;
                        ;***************************************************
                        ; This macro is used to verify that the current
                        ; address meets a required value.  Used mostly to
                        ; guarantee changes don't cause entry points to
                        ; move.  These are used right before documented
                        ; entry points.
                        ;
                        VERIFY		macro	expected
                        		if * != expected
                        		fail	Not at requested address (expected)
                        		endif
                        		endm
                        ;
                        ;***************************************************
                        ; More constants.  You definitely don't want to
                        ; change CTLPOR but the PROM address and stack size
                        ; could be.  Beware that changing the stack size
                        ; pushes other things around.
                        ;
8004 =                  CTLPOR		equ	IOBASE+(IOBYTES*CONSLOT)	;CONTROL PORT ADD
c000 =                  PROM		equ	$C000	;JUMP TO PROM ADDRESS
002b =                  STACK_SIZE	equ	$2b
                        		page
AS02 Assembler for M6802 [1.42].                                     Page    4
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        ;***************************************************
                        ; RAM
                        ;
                        		bss
a000 =                  		org	RAM_BASE
a000 =                  IRQ		ds	2	;IRQ POINTER
a002 =                  BEGA		ds	2	;BEGINNING ADDR PNCH
a004 =                  ENDA		ds	2	;ENDING ADDR PNCH
a006 =                  NMI		ds	2	;NMI INTERRUPT VECTOR
a008 =                  SP		ds	1	;S HIGH
a009 =                  		ds	1	;S LOW
a00a =                  PORADD		ds	2	;PORT ADDRESS
a00c =                  PORECH		ds	1	;ECHO ON/OFF FLAG
a00d =                  XHI		ds	1	;XREG HIGH
a00e =                  XLOW		ds	1	;XREG LOW
a00f =                  CKSM		ds	1	;CHECKSUM
a010 =                  XTEMP		ds	2	;X-REG TEMP STGE
a012 =                  SWIJMP		ds	2	;SWI JUMP VECTOR
a014 =                  BKPT		ds	2	;BREAKPOINT ADDRESS
a016 =                  BKLST		ds	1	;BREAKPOINT DATA
a017 =                  		ds	STACK_SIZE
a042 =                  STACK		ds	1	;SWTBUG STACK
a043 =                  		ds	1
a044 =                  TW		ds	2	;TEMPORARY STORAGE
a046 =                  TEMP		ds	1	;TEMPORARY STORAGE
a047 =                  BYTECT		ds	1	;BYTECT AND MCONT TEMP.
                        ;
                        ; The locations A048 and A049 contain the address wher
                        ; the RTI instruction jumps.  It's often loaded with t
                        ; address of a program just loaded from tape so the "G
                        ; command will execute it.
                        ;
                        		VERIFY	$a048
                        
a048 =                  RTIVEC		ds	2
                        
                        	if	SD_CMDS
                        NAMESIZE	equ	12
                        FnBuffer	ds	3	;formatting area
                        Filename	ds	NAMESIZE+1	;xxxxxxxx.xxx
                        sdState		ds	1
                        temp		ds	1
                        tempx		ds	2
                        byteCnt		ds	1
                        pointer		ds	2
                        nibCnt		ds	1
                        	endif
                        		page
AS02 Assembler for M6802 [1.42].                                     Page    5
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        ;***************************************************
                        ; Code!
                        ;
                        ; SWTBUG must be first to match up with subroutine
                        ; addresses commonly used.  Anything extra goes
                        ; after SWTBUG.
                        ;
                        		code
e000 =                  		org	ROM_BASE
                        ;
                        ;I/O INTERRUPT SEQUENCE
e000 : fea000           IRQV		ldx	IRQ
e003 : 6e00             		jmp	0,x
                        
                        ;JUMP TO USER PROGRAM
e005 : 8d40             JUMP		bsr	BADDR
e007 : 6e00             		jmp	0,x
                        
e009 : 101604           CURSOR		db	$10,$16,EOT	;CT-1024 cursor control
                        
                        
                        ;ASCII LOADING ROUTINE
                        		VERIFY	$e00c
                        
e00c : bde334           LOAD		jsr	RDON	;READER ON, DIS ECHO, GET P#
                        ;
                        ; This first loop waits for an 'S' indicating the star
                        ; of a new record.  Discards all other characters.
                        ;
e00f : 8d67             LOAD3		bsr	INCH
e011 : 8153             		cmpa	#'S'
e013 : 26fa             		bne	LOAD3	;1ST CHAR NOT S
                        ;
                        ; The next character is the record type.  SWTBUG only 
                        ; 1 (data) and 9 (EOF) but I've added support for 5, w
                        ; assemblers produce instead of an S9.
                        ;
e015 : 8d61             		bsr	INCH	;READ CHAR
e017 : 8139             		cmpa	#'9'
e019 : 2729             		beq	LOAD21
                        ;
                        ; I added code to accept an S5 record as EOF since a l
                        ; of cross assemblers produce them instead of an S9.  
                        ; make room for the code, some of this function was mo
                        ; into the extended monitor area.
                        ;
                        	if	SUPPORT_S5
                        		jsr	LOADX
                        		nop		;pad to correct address
                        	else
e01b : 8131             		cmpa	#'1'
e01d : 26f0             		bne	LOAD3	;2ND CHAR NOT 1
                        	endif
                        
e01f : 7fa00f           		clr	CKSM	;ZERO CHECKSUM
e022 : 8d31             		bsr	BYTE	;READ BYTE
e024 : 8002             		suba	#2
e026 : b7a047           		staa	BYTECT	;BYTE COUNT
                        
                        ;BUILD ADDRESS
e029 : 8d1c             		bsr	BADDR
                        		VERIFY	$e02b
AS02 Assembler for M6802 [1.42].                                     Page    6
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        
                        ;STORE DATA
e02b : 8d28             LOAD11		bsr	BYTE
e02d : 7aa047           		dec	BYTECT
e030 : 2709             		beq	LOAD15	;ZERO BYTE COUNT
e032 : a700             		staa	0,x	;STORE DATA
e034 : a100             		cmpa	0,x	;DATA STORED?
e036 : 2608             		bne	LOAD19
e038 : 08               		inx
e039 : 20f0             		bra	LOAD11
e03b : 7ca00f           LOAD15		inc	CKSM
e03e : 27cf             		beq	LOAD3
                        		VERIFY	$e040
                        
e040 : 863f             LOAD19		ldaa	#'?'
e042 : 8d31             		bsr	OUTCH
e044 : 7ee2d4           LOAD21		jmp	RDOFF1
                        
                        ;BUILD ADDRESS
                        		VERIFY	$e047
                        
e047 : 8d0c             BADDR		bsr	BYTE	;READ 2 FRAMES
e049 : b7a00d           		staa	XHI
e04c : 8d07             		bsr	BYTE
e04e : b7a00e           		staa	XLOW
e051 : fea00d           		ldx	XHI	;LOAD IXR WITH NUMBER
e054 : 39               		rts
                        
                        ;INPUT BYTE (TWO FRAMES)
                        		VERIFY	$e055
                        
e055 : 8d53             BYTE		bsr	INHEX	;GET HEX CHAR
e057 : 48               BYTE1		asla
e058 : 48               		asla
e059 : 48               		asla
e05a : 48               		asla
e05b : 16               		tab
e05c : 8d4c             		bsr	INHEX
e05e : 1b               		aba
e05f : 16               		tab
e060 : fba00f           		addb	CKSM
e063 : f7a00f           		stab	CKSM
e066 : 39               		rts
                        
                        		VERIFY	$e067
                        
e067 : 44               OUTHL		lsra	;OUT HEX LEFT BCD DIGIT
e068 : 44               		lsra
e069 : 44               		lsra
e06a : 44               		lsra
                        		VERIFY	$e06b
                        
e06b : 840f             OUTHR		anda	#$F	;OUT HEX RIGHT BCD DIGIT
e06d : 8b30             		adda	#'0'
e06f : 8139             		cmpa	#$39
e071 : 2302             		bls	OUTCH
e073 : 8b07             		adda	#$7
                        
                        ;OUTPUT ONE CHAR
                        		VERIFY	$e075
                        
e075 : 7ee1d1           OUTCH		jmp	OUTEEE
AS02 Assembler for M6802 [1.42].                                     Page    7
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        		VERIFY	$e078
                        
e078 : 7ee1ac           INCH		jmp	INEEE
                        
                        ;PRINT DATA POINTED TO BY X REG
                        		VERIFY	$e07b
                        
e07b : 8df8             PDATA2		bsr	OUTCH
e07d : 08               		inx
                        		VERIFY	$e07e
                        
e07e : a600             PDATA1		ldaa	0,x
e080 : 8104             		cmpa	#EOT
e082 : 26f7             		bne	PDATA2
e084 : 39               		rts		;STOP ON HEX 04
                        
e085 : 7ee14a           C1		jmp	SWTCTL
                        
                        ;MEMORY EXAMINE AND CHANGE
                        		VERIFY	$e088
                        
e088 : 8dbd             CHANGE		bsr	BADDR
e08a : cee19d           CHA51		ldx	#MCL
e08d : 8def             		bsr	PDATA1	;C/R L/F
e08f : cea00d           		ldx	#XHI
e092 : 8d34             		bsr	OUT4HS	;PRINT ADDRESS
e094 : fea00d           		ldx	XHI
e097 : 8d31             		bsr	OUT2HS	;PRINT OLD DATA
e099 : 8d31             		bsr	OUTS	;OUTPUT SPACE
e09b : 8ddb             ANOTH		bsr	INCH	;INPUT CHAR
e09d : 8120             		cmpa	#' '
e09f : 27fa             		beq	ANOTH
e0a1 : 810d             		cmpa	#CR
e0a3 : 27e0             		beq	C1
e0a5 : 815e             		cmpa	#'^'	;UP ARROW?
e0a7 : 202c             		bra	AL3	;BRANCH FOR ADJUSTMENT
e0a9 : 01               		nop
                        
                        ;INPUT HEX CHARACTER
                        		VERIFY	$e0aa
                        
e0aa : 8dcc             INHEX		bsr	INCH
e0ac : 8030             INHEX1		suba	#'0'
e0ae : 2b4c             		bmi	C3
e0b0 : 8109             		cmpa	#$9
e0b2 : 2f0a             		ble	IN1HG
e0b4 : 8111             		cmpa	#$11
e0b6 : 2b44             		bmi	C3	;NOT HEX
e0b8 : 8116             		cmpa	#$16
e0ba : 2e40             		bgt	C3	;NOT HEX
e0bc : 8007             		suba	#7
e0be : 39               IN1HG		rts
                        
                        		VERIFY	$e0bf
                        
e0bf : a600             OUT2H		ldaa	0,x	;OUTPUT 2 HEX CHAR
e0c1 : 8da4             OUT2HA		bsr	OUTHL	;OUT LEFT HEX CHAR
e0c3 : a600             		ldaa	0,x
e0c5 : 08               		inx
e0c6 : 20a3             		bra	OUTHR	;OUTPUT RIGHT HEX CHAR
                        
                        		VERIFY	$e0c8
AS02 Assembler for M6802 [1.42].                                     Page    8
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        
e0c8 : 8df5             OUT4HS		bsr	OUT2H	;OUTPUT 4 HEX CHAR + SPACE
                        		VERIFY	$e0ca
                        
e0ca : 8df3             OUT2HS		bsr	OUT2H	;OUTPUT 2 HEX CHAR + SPACE
                        
                        		VERIFY	$e0cc
                        
e0cc : 8620             OUTS		ldaa	#' '	;SPACE
e0ce : 20a5             		bra	OUTCH	;(BSR & TRS)
                        
                        ;ENTER POWER ON SEQUENCE
                        		VERIFY	$e0d0
                        
e0d0 : 8ea042           START		lds	#STACK
e0d3 : 202c             		bra	al1
                        
                        
                        
                        ;*******************************************
                        ;PART OF MEMORY EXAMINE AND CHANGE
e0d5 : 2607             AL3		bne	SK1
e0d7 : 09               		dex
e0d8 : 09               		dex
e0d9 : ffa00d           		stx	XHI
e0dc : 20ac             		bra	CHA51
e0de : ffa00d           SK1		stx	XHI
e0e1 : 2002             		bra	AL4
                        
                        		VERIFY	$E0E3
                        
e0e3 : 206d             EOE3		bra	CONTRL	;BRANCH FOR MIKBUG EQUIV. CONT
                        
e0e5 : 8130             AL4		cmpa	#$30
e0e7 : 25a1             		bcs	CHA51
e0e9 : 8146             		cmpa	#$46
e0eb : 229d             		bhi	CHA51
e0ed : 8dbd             		bsr	INHEX1
e0ef : bde057           		jsr	BYTE1
e0f2 : 09               		dex
e0f3 : a700             		staa	0,x	;CHANGE MEMORY
e0f5 : a100             		cmpa	0,x
e0f7 : 2791             		beq	CHA51	;DID CHANGE
e0f9 : 7ee040           		jmp	LOAD19	;DIDN'T CHANGE
e0fc : bea008           C3		lds	SP
e0ff : 2049             		bra	SWTCTL
                        ;*************************************************
                        
                        
e101 : bfa008           al1		sts	SP	;INIT TARGET STACK PTR.
e104 : 86ff             		ldaa	#$FF
e106 : bde308           		jsr	SWISET
e109 : ce8004           		ldx	#CTLPOR
e10c : bde284           		jsr	PIAINI
e10f : a600             		ldaa	0,x
e111 : a102             		cmpa	2,x
e113 : 2002             		bra	al2
e115 : 2019             		bra	PRINT
e117 : 2639             al2		bne	CONTRL
                        
                        ;INITIALIZE AS ACIA
e119 : 8603             		ldaa	#3	;ACIA MASTER RESET
AS02 Assembler for M6802 [1.42].                                     Page    9
------------------------------- xSWTBUG v1.2.1 -------------------------------

e11b : a700             		staa	0,x
e11d : 8611             		ldaa	#$11	;11 = 8N2 /16.  15 = 8N1 /16
e11f : a700             		staa	0,x;
e121 : 202f             		bra	CONTRL
                        
                        ;ENTER FROM SOFTWARE INTERRUPT
e123 : 01               SF0		nop
e124 : bfa008           SFE1		sts	SP	;SAVE TARGETS STACK POINTER
                        ;DECREMENT P COUNTER
e127 : 30               		tsx
e128 : 6d06             		tst	6,x
e12a : 2602             		bne	*+4
e12c : 6a05             		dec	5,x
e12e : 6a06             		dec	6,x
                        ;PRINT CONTENTS OF STACK.
e130 : cee19d           PRINT		ldx	#MCL
e133 : bde07e           		jsr	PDATA1
e136 : fea008           		ldx	SP
e139 : 08               		inx
e13a : 8d8e             		bsr	OUT2HS	;COND CODES
e13c : 8d8c             		bsr	OUT2HS	;ACC B
e13e : 8d8a             		bsr	OUT2HS	;ACC A
e140 : 8d86             		bsr	OUT4HS	;IXR
e142 : 8d84             		bsr	OUT4HS	;PGM COUNTER
e144 : cea008           		ldx	#SP
e147 : bde0c8           		jsr	OUT4HS	;STACK POINTER
e14a : fea012           SWTCTL		ldx	SWIJMP
e14d : 8ce123           		cpx	#SF0
e150 : 2719             		beq	CONTR1
                        
e152 : 8ea042           CONTRL		lds	#STACK	;SET CONTRL STACK POINTER
e155 : ce8004           		ldx	#CTLPOR	;RESET TO CONTROL PORT
e158 : ffa00a           		stx	PORADD
e15b : 7fa00c           		clr	PORECH	;TURN ECHO ON
e15e : 8d73             		bsr	SAVGET	;GET PORT # AND TYPE
e160 : 2703             		beq	POF1
e162 : bde27d           		jsr	PIAECH	;SET PIA ECHO ON IF MP-C INTER
e165 : bde353           POF1		jsr	PNCHOF	;TURN PUNCH OFF
                        ;		jsr	RDOFF	;TURN READER OFF
e168 : bde3f8           		jsr	PrintVer
e16b : cee19c           CONTR1		ldx	#MCLOFF
e16e : bde07e           		jsr	PDATA1	;PRINT DATA STRING
e171 : 8d39             		bsr	INEEE		;READ COMMAND CHARACTER
                        
                        ;COMMAND LOOKUP ROUTINE
e173 : cee3d1           LOOK		ldx	#TABLE
e176 : a100             OVER		cmpa	0,x
e178 : 2607             		bne	SK3
e17a : bde0cc           		jsr	OUTS	;SKIP SPACE
e17d : ee01             		ldx	1,x
e17f : 6e00             		jmp	0,x
e181 : 08               SK3		inx
e182 : 08               		inx
e183 : 08               		inx
e184 : 8ce3f8           		cpx	#TABEND+3
e187 : 26ed             		bne	OVER
                        ;
                        ; Bob's change.  Branch to a later point.
                        ;
                        ;SWTL1		bra	SWTCTL
e189 : 20e0             SWTL1		bra	CONTR1
                        
AS02 Assembler for M6802 [1.42].                                     Page   10
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        ;SOFTWARE INTERRUPT ENTRY POINT
e18b : fea012           SFE		ldx	SWIJMP	;JUMP TO VECTORED SOFTWARE INT
e18e : 6e00             		jmp	0,x
                        
e190 : 533904           S9		db	'S','9',EOT	;END OF TAPE
                        
                        ;**************************************************
e193 : 0d0a1500000053.. MTAPE1		db	CR,LF,$15,0,0,0,'S','1',EOT	;PUNCH FORMAT
                        
                        		VERIFY	$e19c
                        
e19c :                  MCLOFF		
                        	if	NO_WEIRD
e19c : 00               		db	0
                        	else
                        		db	$13	;READER OFF
                        	endif
                        		VERIFY	$e19d
                        
e19d :                  MCL
                        	if	NO_WEIRD
e19d : 0d0a240400000000 		db	CR,LF,'$',EOT,0,0,0,0
                        	else
                        		db	CR,LF,$15,0,0,0,'$',EOT
                        	endif
e1a5 : 204c             EIA5		bra	BILD	;BINARY LOADER INPUT
                        ;**************************************************
                        
                        
                        ;NMI SEQUENCE
e1a7 : fea006           NMIV		ldx	NMI	;GET NMI VECTOR
e1aa : 6e00             		jmp	0,x
                        
                        		VERIFY	$e1ac
                        
e1ac : 2040             INEEE		bra	INEEE1
                        
                        ;BYTE SEARCH ROUTINE
e1ae : bde047           SEARCH		jsr	BADDR		;GET TOP ADDRESS
e1b1 : ffa004           		stx	ENDA
e1b4 : bde047           		jsr	BADDR		;GET BOTTOM ADDRESS
e1b7 : bde055           		jsr	BYTE		;GET BYTE TO SEARCH FOR
e1ba : 16               		tab
e1bb : a600             OVE		ldaa	0,x
e1bd : ffa00d           		stx	XHI
e1c0 : 11               		cba
e1c1 : 2702             		beq	PNT
e1c3 : 2021             		bra	INCR1
e1c5 : cee19d           PNT		ldx	#MCL
e1c8 : bde07e           		jsr	PDATA1
e1cb : cea00d           		ldx	#XHI
e1ce : 2010             		bra	SKP0
                        ;**************************************************
                        
                        ;GO TO USER PROGRAM ROUTINE
e1d0 : 3b               GOTO		rti
                        		VERIFY	$e1d1
                        
e1d1 : 203a             OUTEEE		bra	OUTEE1
                        
                        
                        
AS02 Assembler for M6802 [1.42].                                     Page   11
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        ;SAVE IXR AND LOAD IXR WITH CORRECT
                        ;PORT NUMBER AND TEST FOR TYPE
e1d3 : ffa010           SAVGET		stx	XTEMP		;STORE INDEX REGISTER
e1d6 : fea00a           GETPT1		ldx	PORADD
                        		VERIFY	$E1D9
                        
e1d9 : 37               ISACIA		pshb
e1da : e601             		ldab	1,x
e1dc : e103             		cmpb	3,x
e1de : 33               		pulb
e1df : 39               		rts
                        ;**************************************************
                        
                        ;CONTINUATION OF SEARCH ROUTINE
e1e0 : bde0c8           SKP0		jsr	OUT4HS
e1e3 : fea00d           		ldx	XHI
e1e6 : bca004           INCR1		cpx	ENDA
e1e9 : 279e             		beq	SWTL1
e1eb : 08               		inx
e1ec : 20cd             		bra	OVE
                        
e1ee : 8d06             INEEE1		bsr	INCH8		;INPUT 8 BIT CHARACTER
e1f0 : 847f             		anda	#%01111111	;GET RID OF PARITY BIT
e1f2 : 39               		rts
                        
e1f3 : 31               BILD		ins		;FIX	UP STACK WHEN USING
e1f4 : 31               		ins		;BINARY LOADER ON SWTPC TAPES
e1f5 : 31               		ins
                        
                        ;INPUT ONE CHAR INTO ACC B
                        		VERIFY	$e1f6
                        
e1f6 : 37               INCH8		pshb		;SAVE	ACC B
e1f7 : 8dda             		bsr	SAVGET	;SAVE IXR, GET PORT# AND TYPE
e1f9 : 2628             		bne	IN1	;INPUT FROM PIA IF NOT
e1fb : 8611             		ldaa	#$11	;RECONFIG FOR 8 BIT, 2 SB
e1fd : a700             		staa	0,x
e1ff : a600             ACIAIN		ldaa	0,x
e201 : 47               		asra
e202 : 24fb             		bcc	ACIAIN	;NOT READY
e204 : a601             		ldaa	1,x	;LOAD CHAR
e206 : f6a00c           		ldab	PORECH
e209 : 2707             		beq	ACIOUT	;ECHO
e20b : 2011             		bra	RES	;DON'T ECHO
                        
                        ;OUTPUT ONE CHARACTER
e20d : 37               OUTEE1		pshb	;SAVE	ACC B
e20e : 8dc3             		bsr	SAVGET
e210 : 262e             		bne	IOUT
                        
e212 : c615             ACIOUT		ldab	#$15
e214 : e700             		stab	0,x
e216 : e600             ACIOU1		ldab	0,x
e218 : 57               		asrb
e219 : 57               		asrb
e21a : 24fa             		bcc	ACIOU1
e21c : a701             		staa	1,x	;OUTPUT CHARACTER
e21e : 33               RES		pulb		;RESTORE ACC B
e21f : fea010           		ldx	XTEMP
e222 : 39               		rts
                        
                        ;PIA INPUT ROUTINE
AS02 Assembler for M6802 [1.42].                                     Page   12
------------------------------- xSWTBUG v1.2.1 -------------------------------

e223 : a600             IN1		ldaa	0,x	;LOOK FOR START BIT
e225 : 2bfc             		bmi	IN1
e227 : 8d3a             		bsr	DDL	;DELAY HALF BIT TIME
e229 : c604             		ldab	#4	;SET DEL FOR FULL BIT TIME
e22b : e702             		stab	2,x
e22d : 58               		aslb		;SET UP CNTR WITH 8
e22e : 8d2a             IN3		bsr	DEL1	;WAIT ONE CHAR TIME
e230 : 0d               		sec
e231 : 6900             		rol	0,x
e233 : 46               		rora
e234 : 5a               		decb
e235 : 26f7             		bne	IN3
e237 : 8d21             		bsr	DEL1	;WAIT FOR STOP BIT
e239 : f6a00c           		ldab	PORECH	;IS ECHO DESIRED?
e23c : 2713             		beq	IOUT2	;ECHO
e23e : 20de             		bra	RES	;RESTORE IXR,ACCB
                        
e240 : 8d23             IOUT		bsr	DDL1	;DELAY ONE HALF BIT TIME
e242 : c60a             		ldab	#$A	;SET UP COUNTER
e244 : 6a00             		dec	0,x	;SET START BIT
e246 : 8d16             		bsr	DE	;START TIMER
e248 : 8d10             OUT1		bsr	DEL1	;DELAY ONE BIT TIME
e24a : a700             		sta	0,x	;PUT OUT ONE DATA BIT
e24c : 0d               		sec
e24d : 46               		rora		;SHIFT IN NEXT BIT
e24e : 5a               		decb		;DECREMENT COUNTER
e24f : 26f7             		bne	OUT1	;TEST FOR 0
e251 : e602             IOUT2		ldab	2,x	;TEST FOR STOP BITS
e253 : 58               		aslb		;SHIFT BIT TO SIGN
e254 : 2ac8             		bpl	RES	;BRA FOR 1 STOP BIT
e256 : 8d02             		bsr	DEL1	;DELAY FOR STOP BITS
e258 : 20c4             		bra	RES
e25a : 6d02             DEL1		tst	2,x	;IS TIME UP
e25c : 2afc             		bpl	DEL1
e25e : 6c02             DE		inc	2,x	;RESET TIMER
e260 : 6a02             		dec	2,x
e262 : 39               		rts
                        
e263 : 6f02             DDL		clr	2,x	;HALF BIT DELAY
e265 : 8df7             DDL1		bsr	DE
e267 : 20f1             		bra	DEL1
                        
                        
                        ;OPTIONAL PORT ROUTINE
e269 : 8d83             OPTL		bsr	INEEE1
e26b : 16               		tab
e26c : 7fa00b           		clr	PORADD+1	;SET I/O ADDRESS FOR $8000
e26f : fea00a           		ldx	PORADD
e272 : 8d10             		bsr	PIAINI	;INITIALIZE PIA
e274 : 8d07             		bsr	PIAECH	;SET ECHO
e276 : cee3ef           		ldx	#TABLE1	;P, L OR E
e279 : 17               		tba
e27a : 7ee176           		jmp	OVER	;LOOK AT TABLE FOR E, L OR P
                        
e27d : 8634             PIAECH		ldaa	#$34	;SET DDR
e27f : a703             		staa	3,x
e281 : a702             		staa	2,x
e283 : 39               NOOPT		rts
                        
                        ;PIA INITIALIZATION ROUTINE
e284 : 6c00             PIAINI		inc	0,x	;SET DDR
e286 : 8607             		ldaa	#$7
AS02 Assembler for M6802 [1.42].                                     Page   13
------------------------------- xSWTBUG v1.2.1 -------------------------------

e288 : a701             		staa	1,x
e28a : 6c00             		inc	0,x
e28c : a702             		staa	2,x
e28e : 39               		rts
                        
                        ; MINIFLOPPY DISK BOOT
e28f : 7f8014           DISK		clr	$8014
e292 : 8d2e             		bsr	DELAY
e294 : c60b             		ldab	#$0B
e296 : 8d25             		bsr	RETT2
e298 : e604             LOOP1		ldab	4,x
e29a : c501             		bitb	#1
e29c : 26fa             		bne	LOOP1
e29e : 6f06             		clr	6,x
e2a0 : 8d1d             		bsr	RETURN
e2a2 : c69c             		ldab	#$9C
e2a4 : 8d17             		bsr	RETT2
e2a6 : ce2400           		ldx	#$2400
e2a9 : c502             LOOP2		bitb	#2
e2ab : 2706             		beq	LOOP3
e2ad : b6801b           		lda	$801B
e2b0 : a700             		sta	0,x
e2b2 : 08               		inx
e2b3 : f68018           LOOP3		ldab	$8018
e2b6 : c501             		bitb	#1
e2b8 : 26ef             		bne	LOOP2
e2ba : 7e2400           		jmp	$2400
e2bd : e704             RETT2		stab	4,x
e2bf : 8d00             RETURN		bsr	RETT1
e2c1 : 39               RETT1		rts
                        
                        
                        ;GENERAL PURPOSE DELAY LOOP
                        		VERIFY	$E2C2
                        
e2c2 : ceffff           DELAY		ldx	#$FFFF
e2c5 : 09               DELAY1		dex
e2c6 : 8c8014           		cpx	#$8014	;STOP AT 8014
e2c9 : 26fa             DUM		bne	DELAY1
e2cb : 39               		rts
                        
                        
e2cc : cee009           CLEAR		ldx	#CURSOR
e2cf : bde07e           		jsr	PDATA1
e2d2 : 8df1             		bsr	DELAY1
e2d4 : bde347           RDOFF1		jsr	RDOFF
e2d7 : 2058             		bra	C4
                        
                        ;BREAKPOINT ENTERING ROUTINE
e2d9 : cee123           BREAK		ldx	#SF0
e2dc : bca012           		cpx	SWIJMP	;BREAKPOINTS ALREADY IN USE?
e2df : 271a             		beq	INUSE
e2e1 : 08               		inx
e2e2 : 8d32             BREAK0		bsr	STO1
e2e4 : bde047           		jsr	BADDR
e2e7 : ffa014           		stx	BKPT
e2ea : a600             		ldaa	0,x
e2ec : b7a016           		staa	BKLST
e2ef : 863f             		ldaa	#$3F
e2f1 : a700             		staa	0,x
e2f3 : cee123           		ldx	#SF0
e2f6 : 8d1e             		bsr	STO1
AS02 Assembler for M6802 [1.42].                                     Page   14
------------------------------- xSWTBUG v1.2.1 -------------------------------

e2f8 : 7ee16b           		jmp	CONTR1
e2fb : fea014           INUSE		ldx	BKPT
e2fe : b6a016           		ldaa	BKLST
e301 : a700             		staa	0,x
e303 : cee124           		ldx	#SFE1
e306 : 20da             		bra	BREAK0
                        
e308 : b7a043           SWISET		staa	STACK+1	;FIX POWER UP INTERRUPT
e30b : fea012           		ldx	SWIJMP
e30e : 8ce123           		cpx	#SF0
e311 : 2706             		beq	STORTN
e313 : cee124           STO		ldx	#SFE1
e316 : ffa012           STO1		stx	SWIJMP
e319 : 39               STORTN		rts
                        
e31a : 8d5a             PUNCH1		bsr	PUNCH
e31c : 200f             		bra	POFC4
                        
                        ;FORMAT END OF TAPE WITH PGM. CTR. AND S9
e31e : cea049           PNCHS9		ldx	#$A049
e321 : ffa004           		stx	ENDA
e324 : 09               		dex
e325 : 8d52             		bsr	PUNCH2
e327 : cee190           		ldx	#S9
e32a : bde07e           PDAT		jsr	PDATA1
e32d : 8d24             POFC4		bsr	PNCHOF
e32f : 8d91             		bsr	DELAY
e331 : 7ee152           C4		jmp	CONTRL
                        
e334 :                  RDON
                        	if NO_WEIRD
e334 : 01010101010101.. 		nop	18
                        	else
                        		com	PORECH	;DISABLE ECHO FOR ACIA
                        		ldaa	#$11		;RON CHAR.
                        		ldab	#$20		;STROBE CHAR
                        		bsr	STROBE
                        		jsr	ISACIA	;CHECK TO SEE IF PIA
                        		beq	RTNN
                        		ldaa	#$3C		;DISABLE PIA ECHO IF PIA
                        		staa	3,x
                        	endif
e346 : 39               RTNN		rts
                        
e347 :                  RDOFF
                        	if NO_WEIRD
e347 : 39               		rts
e348 : 0101010101       		nop	5
                        	else
                        		ldaa	#$13	;TURN READER OFF
                        		ldab	#$10
                        		bra	STROBE
                        	endif
                        
e34d :                  PNCHON
                        	if NO_WEIRD
e34d : 39               		rts
e34e : 0101010101       		nop	5
                        	else
                        		ldaa	#$12
                        		ldab	#4
                        		bra	STROBE
AS02 Assembler for M6802 [1.42].                                     Page   15
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        	endif
                        
e353 :                  PNCHOF
                        	if NO_WEIRD
e353 : 39               		rts
e354 : 010101           		nop	3
                        	else
                        		ldaa	#$14
                        		ldab	#$8
                        	endif
                        
                        ;PIA STROBING ROUTINE FOR PUNCH/READ ON/OFF
e357 : bde075           STROBE		jsr	OUTCH
e35a : bde1d6           		jsr	GETPT1
e35d : 2716             		beq	RTN1
e35f : 8602             		ldaa	#2
e361 : ca01             		orab	#1
e363 : 8d0c             		bsr	STR2
e365 : 8d08             		bsr	STR1
e367 : 8602             		ldaa	#2
e369 : c601             		ldab	#1
e36b : e700             		stab	0,x
e36d : 8d02             		bsr	STR2
e36f : 8606             STR1		ldaa	#6
e371 : a701             STR2		staa	1,x
e373 : e700             		stab	0,x
e375 : 39               RTN1		rts
                        
                        ;PUNCH FROM BEGINNING ADDRESS (BEGA) THRU
                        ;ENDING ADDRESS (ENDA)
e376 : fea002           PUNCH		ldx	BEGA
e379 : ffa044           PUNCH2		stx	TW
e37c : 8dcf             		bsr	PNCHON
e37e : b6a005           PUN11		ldaa	ENDA+1
e381 : b0a045           		suba	TW+1
e384 : f6a004           		ldab	ENDA
e387 : f2a044           		sbcb	TW
e38a : 2604             		bne	PUN22
e38c : 8110             		cmpa	#16
e38e : 2502             		bcs	PUN23
e390 : 860f             PUN22		ldaa	#15
e392 : 8b04             PUN23		adda	#4
e394 : b7a047           		staa	BYTECT
e397 : 8003             		suba	#3
e399 : b7a046           		staa	TEMP
                        ;PUNCH C/R L/F NULLS S1
e39c : cee193           		ldx	#MTAPE1
e39f : bde07e           		jsr	PDATA1
e3a2 : 5f               		clrb
                        ;PUNCH FRAME COUNT
e3a3 : cea047           		ldx	#BYTECT
e3a6 : 8d24             		bsr	PUNT2	;PUNCH 2 HEX CHARACTERS
                        ;PUNCH ADDRESS
e3a8 : cea044           		ldx	#TW
e3ab : 8d1f             		bsr	PUNT2
e3ad : 8d1d             		bsr	PUNT2
                        ;PUNCH	DATA
e3af : fea044           		ldx	TW
e3b2 : 8d18             PUN32		bsr	PUNT2	;PUNCH ONE BYTE
e3b4 : 7aa046           		dec	TEMP
e3b7 : 26f9             		bne	PUN32
e3b9 : ffa044           		stx	TW
AS02 Assembler for M6802 [1.42].                                     Page   16
------------------------------- xSWTBUG v1.2.1 -------------------------------

e3bc : 53               		comb
e3bd : 37               		pshb
e3be : 30               		tsx
e3bf : 8d0b             		bsr	PUNT2	;PUNCH CHECKSUM
e3c1 : 33               		pulb		;RESTORE STACK
e3c2 : fea044           		ldx	TW
e3c5 : 09               		dex
e3c6 : bca004           		cpx	ENDA
e3c9 : 26b3             		bne	PUN11
e3cb : 39               RTN5		rts
                        
                        ;PUNCH 2 HEX CHAR, UPDATE CHECKSUM
e3cc : eb00             PUNT2		addb	0,x
e3ce : 7ee0bf           		jmp	OUT2H	;OUTPUT 2 HEX CHAR AND RTS
                        		page
AS02 Assembler for M6802 [1.42].                                     Page   17
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        ;COMMAND TABLE
e3d1 : 47               TABLE		db	'G'	;GOTO
e3d2 : e1d0             		dw	GOTO
e3d4 : 5a               		db	'Z'	;GOTO PROM
e3d5 : c000             		dw	PROM
e3d7 : 4d               		db	'M'	;MEMORY EXAM AND CHANGE
e3d8 : e088             		dw	CHANGE
e3da : 46               		db	'F'	;BYTE SEARCH
e3db : e1ae             		dw	SEARCH
e3dd : 52               		db	'R'	;REGISTER DUMP
e3de : e130             		dw	PRINT
e3e0 : 4a               		db	'J'	;JUMP
e3e1 : e005             		dw	JUMP
                        	if EXTENDED
                        		db	'X'
                        		dw	ExtCmd
                        	else
e3e3 : 43               		db	'C'	;CLEAR SCREEN
e3e4 : e2cc             		dw	CLEAR
                        	endif	;EXTENDED
e3e6 : 44               		db	'D'	;boot from disk
e3e7 : e28f             		dw	DISK
e3e9 : 42               		db	'B'	;BREAKPOINT
e3ea : e2d9             		dw	BREAK
e3ec : 4f               		db	'O'	;OPTIONAL PORT
e3ed : e269             		dw	OPTL
e3ef : 50               TABLE1		db	'P'	;ASCII PUNCH
e3f0 : e31a             		dw	PUNCH1
e3f2 : 4c               		db	'L'	;ASCII LOAD
e3f3 : e00c             		dw	LOAD
e3f5 : 45               TABEND		db	'E'	;END OF TAPE
e3f6 : e31e             		dw	PNCHS9
                        		page
AS02 Assembler for M6802 [1.42].                                     Page   18
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        
                        ;
                        ;=====================================================
                        ; Print version of xSWTBUG
                        ;
e3f8 : bde347           PrintVer	jsr	RDOFF	;TURN READER OFF-
e3fb : cee402           		ldx	#greeting
e3fe : bde417           		jsr	puts
e401 : 39               		rts
                        ;
e402 : 0d0a0d0a         greeting	db	CR,LF,CR,LF
e406 : 78535754425547.. 		db	"xSWTBUG v1.2.1"
e414 : 0d0a00           		db	CR,LF,0
                        
                        ;
                        ;***************************************************
                        ; Given a pointer to a null terminated string in X,
                        ; display the string and return.
                        ;
e417 : a600             puts		lda	0,x
e419 : 2706             		beq	putsDone
e41b : bde422           		jsr	putch
e41e : 08               		inx
e41f : 20f6             		bra	puts
e421 : 39               putsDone	rts
                        
e422 : 7ee075           putch		jmp OUTCH
                        
                        	if EXTENDED
                        ;***************************************************
                        ; This is the signature for a piece of code to
                        ; determine if it's running under normal SWTBUG or
                        ; extended xSWTBUG.  The signature is always at
                        ; $E400.
                        ;
                        		ds	$e400-*
                        		VERIFY	$e400
                        		db	"XSWTBUG",0
                        ;
                        ; These are the version and revision of this build.
                        ; They are always at $E408 and $E409.
                        ;
                        		VERIFY	$e408
                        		db	VERSION
                        		db	REVISION
                        ;
                        ; These are vectors to internal functions that may
                        ; be useful to user applications.  The vectors
                        ; always start at $E40A.
                        ;
                        		VERIFY	$e40A
                        	if	SD_SUPPORT
                        		jmp	SdBoot		;load OS from SD Card
                        		jmp	xParInit	;init parallel interface
                        		jmp	xParSetWrite	;set for writing
                        		jmp	xParSetRead	;set for reading
                        		jmp	xParWriteByte	;write one byte
                        		jmp	xParReadByte	;read one byte
                        ;
                        ; Higher level disk functions
                        ;
                        		jmp	DiskReadSector
AS02 Assembler for M6802 [1.42].                                     Page   19
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        		jmp	DiskWriteSector
                        		jmp	DiskStatus
                        		jmp	DiskGetDrives
                        		jmp	DiskGetMounted
                        		jmp	DiskNextMountedDrv
                        		jmp	DiskUnmount
                        		jmp	DiskMount
                        		jmp	DiskDir
                        		jmp	DiskDirNext
                        	endif	;SD_SUPPORT
                        		page
                        ;
                        ;***************************************************
                        ; Displaced code from LOAD function in original
                        ; SWTBUG.
                        ;
                        	if	SUPPORT_S5
                        LOADX		cmpa	#'5'
                        		beq	LOADWE		;Wait for EOL
                        		cmpa	#'1'
                        		bne	LOAD3X		;2ND CHAR NOT 1
                        		rts
                        LOAD3X		jmp	LOAD3
                        ;
                        ; Keep eating characters until the end of the line.  N
                        ; this might not be right, as it fails if the S5 recor
                        ; not have a CR at the end.  A better approach would b
                        ; get the byte count (next two bytes) and read twice t
                        ; number of characters.
                        ;
                        LOADWE		jsr	INCH		;get char
                        		cmpa	#CR		;end of line?
                        		bne	LOADWE		;nope
                        		jmp	LOAD21		;done loading
                        	endif
                        ;
                        ;***************************************************
                        ; If the option is turned on, build in the SD card
                        ; support functions
                        ;
                        	if	SD_SUPPORT
                        		include	"pario.asm"
                        		include	"parproto.inc"
                        		include	"diskfunc.asm"
                        	endif	;SD_SUPPORT
                        
                        ;
                        ;***************************************************
                        ; This is the command loop while in extended command
                        ; mode.  Same basic concept as the other loop.
                        ;
                        ExtCmd		
                        	if	SD_CMDS
                        		jsr	xParInit
                        		jsr	xParSetWrite
                        	endif
                        		ldx	#extprompt
                        		jsr	PDATA1
                        Extkey		jsr	INEEE
                        		cmpa	#CR
                        		beq	ExtCmd
                        ;
AS02 Assembler for M6802 [1.42].                                     Page   20
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        ; If they typed a question mark, display all available
                        ; commands.  This is done dynamically based on what's
                        ; in the command table.
                        ;
                        		cmpa	#'?'
                        		bne	scancmd	;no, so look for command
                        		jsr	OUTCH
                        		ldx	#ct_info
                        		jsr	PDATA1
                        ;
                        		ldx	#extcmd	;start of commands
                        helpnxt		lda	0,x
                        		cmpa	#0
                        		beq	ExtCmd	;done when it's a zero
                        		jsr	OUTCH	;display command
                        		lda	#' '
                        		jsr	OUTCH
                        		lda	#'='	;fancy print stuff
                        		jsr	OUTCH
                        		lda	#' '
                        		jsr	OUTCH
                        		inx		;move to description
                        		inx
                        		inx
                        		jsr	PDATA1	;display description
                        		lda	#CR
                        		jsr	OUTCH
                        		lda	#LF
                        		jsr	OUTCH
                        		inx		;skip past the $04
                        		bra	helpnxt
                        ;
                        ; They entered a possible command so scan through the
                        ; table looking for it.  The command is in A, so don't
                        ; destroy it.
                        ;
                        scancmd		ldx	#extcmd	;start of commands
                        scannxt		ldab	0,x	;load B with current command
                        		cmpb	#0	;end of table?
                        		beq	Extkey	;if zero, end of table
                        		cmpa	0,x	;right one?
                        		beq	extfnd	;yes
                        ;
                        ; Move to the next command in the table.
                        ;
                        		inx		;move to handler addr hi
                        		inx		;move to handler addr lo
                        ;
                        ; Find EOT that marks end of description
                        ;
                        scansk		inx		;move to description
                        		ldab	0,x
                        		cmpb	#EOT	;end of description?
                        		bne	scansk
                        		inx		;move to next command
                        		bra	scannxt	;see if this is the one
                        ;
                        ; This is the right entry
                        ;
                        extfnd		ldx	1,x	;load pointer...
                        		jmp	0,x	;...and execute command!
                        ;
AS02 Assembler for M6802 [1.42].                                     Page   21
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        ; This is the prompt for extended mode.  Feel free to
                        ; change to whatever you like.
                        ;
                        extprompt	db	CR,LF,'$','$',' ',EOT
                        ct_info		db	CR,LF,LF
                        		db	"Extended SWTBUG v"
                        		db	'0'+VERSION,'.','0'+REVISION
                        		db	" by Corsham Technologies"
                        		db	CR,LF
                        		db	"www.corshamtech.com",LF
                        crlfmsg		db	CR,LF,EOT
                        ;
                        ;***************************************************
                        ; The extended command table.  This provides both
                        ; command lookups and also some help.  Each entry
                        ; has exactly the same format:
                        ;
                        ;    1 byte command, or zero if end of table
                        ;    2 byte address to command handler
                        ;    multiple byte description
                        ;    1 byte value of $04
                        ;
                        extcmd
                        		db	'X'
                        		dw	CONTRL
                        		db	"Return to SWTBUG"
                        		db	EOT
                        ;
                        	if	SD_BOOT
                        		db	'B'
                        		dw	SdBoot
                        		db	"Boot from SD card"
                        		db	EOT
                        	endif	;SD_BOOT
                        ;
                        	if	SD_CMDS
                        		db	'P'
                        		dw	SdPing
                        		db	"Ping SD controller"
                        		db	EOT
                        ;
                        		db	'D'
                        		dw	SdDirectory
                        		db	"Do directory of SD card"
                        		db	EOT
                        ;
                        		db	'T'
                        		dw	SdType
                        		db	"Type file from SD card"
                        		db	EOT
                        ;
                        		db	'L'
                        		dw	SdLoad
                        		db	"Load SREC file from SD card"
                        		db	EOT
                        	endif	;SD_CMDS
                        ;
                        	if	NUMGUESS
                        		db	'N'
                        		dw	NumGuess
                        		db	"Number guessing game"
                        		db	EOT
AS02 Assembler for M6802 [1.42].                                     Page   22
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        	endif	;NUMGUESS
                        ;
                        	if	MEMTEST
                        		db	'M'
                        		dw	MemTest
                        		db	"Memory tester"
                        		db	EOT
                        	endif	;MEMTEST
                        
                        	if	OTHELLO
                        		db	'O'
                        		dw	Othello
                        		db	"Othello"
                        		db	EOT
                        	endif	;OTHELLO
                        ;
                        ; End of table
                        ;
                        		db	0
                        ;
                        ;***************************************************
                        ; Handy little function that outputs a CR/LF.
                        ;
                        crlf		ldx	#crlfmsg
                        		jmp	PDATA1
                        ;
                        ;***************************************************
                        ; This is the code to boot from an SD card.  Read
                        ; track 0, sector 0, into address $2400 and then
                        ; jump to it.
                        ;
                        ; Note that address $2400 is at the 9K boundary
                        ; so the system needs more than 8K to boot, let
                        ; alone run the DOS.
                        ;
                        	if	SD_BOOT
                        SdBoot		ldx	#bootmsg
                        		jsr	PDATA1
                        		ldx	#BootFCB
                        		jsr	DiskReadSector
                        		bcs	bootErr
                        		jmp	BOOT_ADDR
                        ;
                        bootErr		ldx	#berrmsg
                        		jsr	PDATA1
                        		jmp	ExtCmd
                        ;
                        bootmsg		db	CR,LF,"Booting from SD... ",EOT
                        berrmsg		db	CR,LF,"BOOT ERROR!",CR,LF,EOT
                        ;
                        ; FCB used to load the boot sector into memory
                        ;
                        BootFCB		db	0	;drive 0
                        		db	0	;track 0
                        		db	0	;sector 0
                        		db	20	;sectors per track
                        		dw	BOOT_ADDR	;buffer address
                        	endif	;SD_BOOT
                        		page
                        
                        	if	SD_CMDS
                        ;
AS02 Assembler for M6802 [1.42].                                     Page   23
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        ; These are states for the loader state machine.
                        ; Keep these as hex so debug output is easier to
                        ; match up.
                        ;
                        ST_ECHO		equ	0x00	;just echo each char
                        ST_WAIT_S	equ	0x01	;wait for 'S'
                        ST_GET_TYPE	equ	0x02	;wait for digit record type
                        ST_WAIT_EOF	equ	0x03	;basically, do nothing
                        ST_CNT_HI	equ	0x04
                        ST_CNT_LO	equ	0x05
                        ST_GET_ADDR	equ	0x06	;get address field
                        ST_DATA_HI	equ	0x07
                        ST_DATA_LO	equ	0x08
                        ;
                        ;***************************************************
                        ; Ping the Arduino to see if the link is alive.
                        ;
                        SdPing		ldx	#pingmsg
                        		jsr	PDATA1
                        		jsr	DiskPing
                        		ldx	#pinggmsg
                        		jsr	PDATA1
                        		jmp	ExtCmd
                        ;
                        pingmsg		db	"ing... ",EOT
                        pinggmsg	db	"success!",CR,LF,EOT
                        ;
                        ;***************************************************
                        ; Do a disk directory
                        ;
                        SdDirectory	ldx	#DirMsg
                        		jsr	PDATA1
                        		lda	#' '		;to pretty-up output
                        		sta	FnBuffer
                        		sta	FnBuffer+1
                        		sta	FnBuffer+2
                        ;
                        		jsr	DiskDir		;start a disk directory
                        doDirLoop	ldx	#Filename	;where to put filename
                        		jsr	DiskDirNext	;get next file name
                        		bcs	doDirExit	;branch if End
                        		ldx	#FnBuffer	;where filename is at
                        		jsr	puts		;display name
                        		jsr	crlf
                        		bra	doDirLoop	;lather, rinse, repeat
                        doDirNend	jsr	crlf
                        		bra	doDirLoop
                        doDirExit	jmp	ExtCmd
                        ;
                        DirMsg		db	"irectory...",CR,LF,LF,EOT
                        ;
                        ;***************************************************
                        ; Type a file; display its contents.  Great for
                        ; looking at ASCII files.
                        ;
                        SdType		lda	#ST_ECHO	;initial state
                        typeload	sta	sdState		;save state
                        ;
                        ; Prompt for a filename...
                        ;
                        		ldx	#fnmsg
                        		jsr	PDATA1
AS02 Assembler for M6802 [1.42].                                     Page   24
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        		jsr	getfname	;get name
                        		lda	Filename	;get first char
                        		cmpa	#EOT	;empty line?
                        		beq	doDirExit
                        ;
                        ; Got a filename, so start sending the command to
                        ; read a disk file
                        ;
                        		lda	#PC_READ_FILE
                        		jsr	xParWriteByte
                        		ldx	#Filename
                        		dex
                        dotypeloop	inx		;point to filename
                        		lda	0,x
                        		cmpa	#EOT
                        		beq	dotydone
                        		jsr	xParWriteByte	;send next piece of filename
                        		bra	dotypeloop
                        
                        dotydone	lda	#0
                        		jsr	xParWriteByte
                        		jsr	xParSetRead
                        		jsr	xParReadByte	;read their reply
                        ;
                        ; It should be either an ACK (82) or NAK (83)
                        ;
                        		cmpa	#PR_ACK
                        		beq	dotypeack
                        ;
                        ; A NAK.  Get the value and report it
                        ;
                        		jsr	xParReadByte
                        		sta	temp
                        		ldx	#gotnakmsg
                        		jsr	PDATA1
                        		ldx	#temp
                        		jsr	OUT2HS
                        		jsr	crlf
                        		jsr	xParSetWrite
                        		jmp	ExtCmd
                        ;
                        ; Got an ACK, so now we sit in a loop of requesting mo
                        ; data, reporting it, etc.
                        ;
                        dotypeack	jsr	xParSetWrite
                        		lda	#PC_READ_BYTES	;request data
                        		jsr	xParWriteByte
                        		lda	#BUFFSIZE-1
                        		jsr	xParWriteByte	;request data
                        		jsr	xParSetRead	;get ready to read response
                        		jsr	xParReadByte	;get response
                        		jsr	xParReadByte	;get number of bytes
                        		cmpa	#0		;any bytes?
                        		beq	dotypeof	;no, end of file
                        		tab		;move byte count into B
                        		ldx	#buffer	;address of buffer
                        ;
                        ; Loop to read block of data
                        ;
                        dotyperl	jsr	xParReadByte
                        		pshb
                        		stx	tempx
AS02 Assembler for M6802 [1.42].                                     Page   25
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        		jsr	loadState	;let state machine process it
                        		ldx	tempx
                        		pulb
                        		inx
                        		decb
                        		bne	dotyperl
                        		bra	dotypeack
                        ;
                        ; Got EOF
                        ;
                        dotypeof	jsr	xParSetWrite	;back to write mode
                        		lda	#PC_DONE	;end
                        		jsr	xParWriteByte
                        		jmp	ExtCmd
                        ;
                        gotnakmsg	db	"Got NAK with code: ",EOT
                        ;
                        ;***************************************************
                        ; Load an S-Rec file from the SD card.  This shares
                        ; a lot of code with the Type command, so set up a
                        ; different initial state and then let the load
                        ; logic do all the work.
                        ;
                        SdLoad		ldx	#$ffff		;indicates no record
                        		stx	RTIVEC		;...loaded yet
                        		lda	#ST_WAIT_S
                        		jmp	typeload	;jump to common code
                        ;
                        fnmsg		db	CR,LF
                        		db	"Enter filename: "
                        		db	EOT
                        ;
                        ;=====================================================
                        ; This is the state machine for loading files from
                        ; the SD drive.  On input, A contains the character
                        ; to process.  This will maintain a state and perform
                        ; any required actions.  The caller only needs to call
                        ; this function for each byte read from the file.
                        ;
                        ; This starts by having the inbound character in A
                        ; and the current state in B.
                        ;
                        loadState	ldab	sdState	;get current state
                        		cmpb	#ST_ECHO
                        		bne	ls_1
                        ;
                        ; Just echo the character and we're done.  This is
                        ; used for the Type command.
                        ;
                        		jsr	putch
                        		rts
                        ;
                        ls_1		cmpb	#ST_WAIT_S
                        		bne	ls_2
                        ;
                        ; Wait for an 'S' to appear, then move to the next sta
                        ; Each record starts with an 'S'.
                        ;
                        		cmpa	#'S'
                        		bne	ls_exit	;not what we wanted, just exit
                        ;
                        		lda	#'.'
AS02 Assembler for M6802 [1.42].                                     Page   26
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        		jsr	putch	;output status indicator
                        ;
                        		lda	#ST_GET_TYPE
                        ;
                        ; Common entry points.  ls_newstate saves the contents
                        ; of A as the next state.  ls_exit is an RTS.
                        ;
                        ls_newstate	sta	sdState
                        	if	DEBUG_STATE
                        		ldx	#StateMsg
                        		jsr	PDATA1
                        		ldx	#state
                        		jsr	OUT2HS
                        		jsr	crlf
                        	endif
                        ls_exit		rts
                        
                        	if	DEBUG_STATE
                        StateMsg	db	"Set state: $",EOT
                        StateAddr	db	"Record load address: $",EOT
                        SizeMsg		db	"Bytes in record: $",EOT
                        	endif
                        ;
                        ls_2		cmpb	#ST_GET_TYPE
                        		bne	ls_3
                        ;
                        ; It's the record type.  The Motorola spec says there
                        ; are nine types, but we only process a few:
                        ;
                        ; 1 = Data with 16 bit address
                        ; 5 = as02 uses this as an end of file
                        ; 9 = real end of file
                        ;
                        ; 9 is the usual end of file, but for some reason the
                        ; AS02 assembler outputs a 5 without the 9, so allow
                        ; it to also be an EOF so I don't have to manually
                        ; add the S9 record to files.
                        ;
                        		cmpa	#'1'
                        		beq	st_data	;it's a data record
                        		cmpa	#'5'
                        		beq	st_end
                        		cmpa	#'9'
                        		beq	st_end
                        ;
                        ; Huh, it's not a record type we handle, so just
                        ; go back to echo mode.
                        ;
                        		lda	#ST_ECHO
                        		bra	ls_newstate
                        ;
                        ; End of files are easy.  We're basically done, so
                        ; just ignore everything until the end of the file.
                        ;
                        st_end		ldx	#firstaddrmsg
                        		jsr	PDATA1
                        		ldx	#RTIVEC
                        		jsr	OUT4HS
                        		jsr	crlf
                        ;
                        		lda	#ST_WAIT_EOF	;a do-nothing state
                        		bra	ls_newstate
AS02 Assembler for M6802 [1.42].                                     Page   27
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        ;
                        ; Woohoo!  It's a data record!  The rest of the record
                        ; contains:
                        ;
                        ;    S1LLYYYY....
                        ;
                        ; Where LL is the number of bytes (the dots).
                        ; YYYY is the 16 bit address where the data goes.
                        ; ...is the data, LL bytes of them.
                        ;
                        ; So the next thing we need to get is the high nibble
                        ; of the byte count.
                        ;
                        st_data		lda	#ST_CNT_HI
                        		bra	ls_newstate
                        ;
                        ; See if we're expecting the high nibble of the byte c
                        ;
                        ls_3		cmpb	#ST_CNT_HI
                        		bne	ls_4
                        ;
                        		jsr	tohex
                        		asla
                        		asla
                        		asla
                        		asla
                        		sta	byteCnt
                        		lda	#ST_CNT_LO
                        		bra	ls_newstate
                        ;
                        ; See if we are expecting the low nibble of the byte c
                        ;
                        ls_4		cmpb	#ST_CNT_LO
                        		bne	ls_5
                        ;
                        		jsr	tohex
                        		ora	byteCnt	;merge with hi nibble
                        ;
                        ; The byte count includes the address and checksum, so
                        ; subtract three from the count.
                        ;
                        		suba	#3
                        		sta	byteCnt
                        	if	DEBUG_STATE
                        		ldx	#SizeMsg
                        		jsr	PDATA1
                        		ldx	#byteCnt
                        		jsr	OUT2HS
                        		jsr	crlf
                        	endif
                        ;
                        		ldx	#0
                        		stx	pointer
                        		lda	#4	;number of nibbles to get
                        		sta	nibCnt
                        		lda	#ST_GET_ADDR
                        		bra	ls_newstate
                        ;
                        ls_5		cmpb	#ST_GET_ADDR
                        		bne	ls_6
                        ;
                        ; Roll the current address left by 4 bits
AS02 Assembler for M6802 [1.42].                                     Page   28
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        ;
                        		psha
                        		lda	pointer		;MSB
                        		ldab	pointer+1	;LSB
                        		aslb
                        		rola
                        		aslb
                        		rola
                        		aslb
                        		rola
                        		aslb
                        		rola
                        		sta	pointer
                        		stab	pointer+1
                        ;
                        		pula
                        		jsr	tohex
                        		oraa	pointer+1	;merge in new nibble
                        		sta	pointer+1
                        ;
                        ; Now see if there are more digits to go or not.
                        ;
                        		dec	nibCnt
                        		bne	ls_5_1	;still more
                        ;
                        ; If RTIVEC is still FFFF (a load address that
                        ; can never occur), then save this address there.
                        ; This is a potential way to know the address where
                        ; this file should be run from.
                        ;
                        		ldx	RTIVEC
                        		cpx	#$ffff
                        		bne	ls_5_2	;no, already set
                        ;
                        		lda	pointer	;set starting address
                        		sta	RTIVEC
                        		lda	pointer+1
                        		sta	RTIVEC+1
                        ;
                        ls_5_2
                        	if	DEBUG_STATE
                        		ldx	#StateAddr
                        		jsr	PDATA1
                        		ldx	#pointer
                        		jsr	OUT4HS
                        		jsr	crlf
                        	endif
                        ls_5_NXT	lda	#ST_DATA_HI
                        		bra	ls_newstate
                        ls_5_1		rts
                        ;
                        ls_6		cmpb	#ST_DATA_HI
                        		bne	ls_7
                        ;
                        ; This is the high byte of a byte.  Convert to
                        ; a nibble and save in the upper nibble of temp,
                        ; then move to a state to get the lower nibble.
                        ;
                        		jsr	tohex
                        		asla
                        		asla
                        		asla
AS02 Assembler for M6802 [1.42].                                     Page   29
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        		asla
                        		sta	temp
                        		lda	#ST_DATA_LO
                        		bra	ls_newstate
                        ;
                        ls_7		cmpb	#ST_DATA_LO
                        		bne	ls_8
                        ;
                        ; This is the lower nibble of a byte of data.
                        ;
                        		jsr	tohex
                        		ora	temp	;merge in upper nibble
                        		ldx	pointer	;where it goes
                        		sta	0,x
                        		inx
                        		stx	pointer	;update address
                        		dec	byteCnt	;all done?
                        		bne	ls_5_NXT	;nope, get high nibble of next byte
                        ;
                        ; We read all the data on this line.  Ideally, we shou
                        ; have been keeping a checksum and then compare it to 
                        ; checksum in the file, but I'm cheating and just goin
                        ; back to wait for the next S record to start.
                        ;
                        		lda	#ST_WAIT_S
                        		bra	ls_newstate
                        ;
                        ; All states are handled, so this should not happen,
                        ; but keep the label here for future expansion.
                        ;
                        ls_8		rts
                        ;
                        firstaddrmsg	db	CR,LF
                        		db	"Load done.  First address: ",EOT
                        ;
                        ;=====================================================
                        ; Given a character in A, convert it to a hex nibble
                        ; in the lower 4 bits of A and C clear.  If not a hex
                        ; character, return C set.
                        ;
                        tohex		suba	#'0'
                        		bmi	tohexbad
                        		cmpa	#9
                        		ble	tohexgud
                        		cmpa	#$11
                        		bmi	tohexbad	;NOT HEX
                        		cmpa	#$16
                        		bgt	tohexbad	;NOT HEX
                        		suba	#7
                        tohexgud	clc
                        		rts
                        tohexbad	sec
                        		rts
                        
                        ;
                        ;=====================================================
                        ; This gets a filename from the user and stores it in
                        ; Filename.  Imposes a max size of 13 chars.  Returns
                        ; when the user hits ENTER.
                        ;
                        ; Modifies A, B and X.
                        ;
AS02 Assembler for M6802 [1.42].                                     Page   30
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        getfname	ldx	#Filename	;where to put text
                        		clrb		;clear char count
                        getlchar2	jsr	getch
                        		cmpa	#CR
                        		beq	getleol2	;branch if end of line
                        ;
                        		cmpa	#DEL	;delete?
                        		beq	getdel2
                        		cmpa	#BS	;backspace?
                        		bne	getndel2
                        ;
                        ; Erase the last character
                        ;
                        getdel2		cmpb	#0	;is buffer empty?
                        		beq	getlchar2
                        		dex		;back up one
                        		decb		;one less char
                        ;
                        ; Erase old character with the old backspace-space-bac
                        ; sequence.
                        ;
                        		jsr	putch	;move back
                        		lda	#' '
                        		jsr	putch	;erase last char
                        		lda	#BS
                        		jsr	putch	;and move back again
                        		bra	getlchar2
                        ;
                        ; See if it's a legal character.
                        ;
                        getndel2	cmpa	#' '	;lowest allowed
                        		blt	getlchar2
                        		cmpa	#'~'
                        		bgt	getlchar2
                        ;
                        ; Is there room?
                        ;
                        		cmpb	#NAMESIZE
                        		beq	getlchar2
                        ;
                        ; Finally, put the character into the buffer
                        ; and echo it.
                        ;
                        		sta	0,x
                        		inx
                        		incb
                        		jsr	putch
                        		bra	getlchar2
                        ;
                        ; They hit ENTER.  Terminate the buffer and return.
                        ; I stuck with the Moto tradition and used EOT ($04)
                        ; to mark the end of the line.
                        ;
                        getleol2		lda	#EOT
                        		sta	0,x	;terminate line
                        		jmp	crlf
                        	endif	;SD_CMDS
                        
                        
                        		page
                        ;***************************************************
                        ; Fun stuff that can optionally be built in...
AS02 Assembler for M6802 [1.42].                                     Page   31
------------------------------- xSWTBUG v1.2.1 -------------------------------

                        ;
                        	if	NUMGUESS
                        		include	"numguess.asm"
                        	endif	;NUMGUESS
                        
                        	if	MEMTEST
                        		include	"memtest.asm"
                        	endif
                        
                        	if	OTHELLO
                        		include	"othello.asm"
                        	endif
                        
                        	endif	;EXTENDED
                        
                        ;
                        ;***************************************************
                        ; Vectors.  What's our vector, Victor?
                        ;
fff8 =                  		org	ROM_BASE + (1 << ADDR_BITS) - 8
                        
fff8 : e000             		dw	IRQV 	;IRQ VECTOR
fffa : e18b             		dw	SFE	;SOFTWARE INTERRUPT
fffc : e1a7             		dw	NMIV	;NMI VECTOR
fffe : e0d0             		dw	START	;RESTART VECTOR
                        
                        
                        
                        
No errors in pass 2.
Wrote binary from address $e000 through $ffff.
Total size 8192 bytes.
