0001                         
0002                             NAM CP68
0003                         ***********************************************************
0004                         * Extracted from the book:
0005                         * "CP/68, an M6800 Operating System" by Jack E. Hemenway
0006                         *
0007                         * Scott LaBombard
0008                         * labomb@rochester.rr.com
0009                         * 02/29/2019
0010                         ***********************************************************
0011                         *   NAM BIOS
0012                         *
0013                         * COPYRIGHT 1978 BY HEMENWAY ASSOCIATES INC
0014                         * BOSTON MASS. 02111
0015                         * ALL RIGHTS RESERVED
0016                         ***********************************************************
0017                         *
0018                         * RCB   EQU'S
0019                         *
0020 0000                    RCBEQT  EQU 0       EQUIPMENT TABLE ADDRESS
0021 0002                    RCBGDT  EQU 2       GENERIC DEVICE TYPE
0022 0005                    RCBSTA  EQU 5       STATUS
0023 0006                    RCBDTT  EQU 6       DATA TRANSFER TYPE
0024 0007                    RCBDBA  EQU 7       DATA BUFFER ADDRESS
0025                         *
0026                         * STATUS EQU'S*
0027                         *
0028 0080                    BUSY    EQU $80     RCB BUSY STATUS
0029 007f                    NTBUSY  EQU $7F     NOT BUSY (ANDED WITH STATUS)
0030                         *
0031 04c0                            ENT EQTAB
0032 04f0                            ENT PDTAB
0033                         *
0034                         *   BASEQU
0035 0020                    DESCRA  EQU $20     DESCRIPTOR ADDRESS(2)
0036 0022                    DESCRC  EQU $22     DESCRIPTOR COUNT
0037 0023                    CUCHAR  EQU $23     CURRENT CHAR (2)
0038 0025                    RC      EQU $25     TOKEN RETURN CODE
0039 0026                    CLASS   EQU $26     TOKEN CLASS
0040 0027                    VALUE   EQU $27     BIN VALUE/TRANSFER ADDRESS (2)
0041 0029                    FCBCHN  EQU $29     TOP OF FCB CHAIN (2)
0042 002b                    FRETAB  EQU $2B     DISK FREE SPACE POINTER (8)
0043 0033                    BMEM    EQU $33     START OF TRANSIENT AREA(2)
0044 0035                    EMEM    EQU $35     END OF TRANSIENT AREA (2)
0045 0037                    CMEM    EQU $37     NEXT AVAIL TRANSIENT AREA (2)
0046 0039                    BS      EQU $39     BACKSPACE CHAR
0047 003a                    DL      EQU $3A     DELETE LINE CHAR
0048 003b                    DP      EQU $3B     DEPTH; LINES/PAGE
0049 003c                    DPCNT   EQU $3C     DEPTH TEMP
0050 003d                    WD      EQU $3D     WIDTH; CHARS/LINE
0051 003e                    NL      EQU $3E     NULL COUNT
0052 003f                    TB      EQU $3F     TAB CHAR
0053 0040                    DX      EQU $40     DUPLEX; FF=H, 00=F
0054 0041                    EJ      EQU $41     EJECT COUNT
0055 0042                    PS      EQU $42     PAUSE; 00=YES
0056 0043                    ES      EQU $43     ESCAPE CHAR
0057 0044                    LDP     EQU $44     DEPTH LINES/PAGE
0058 0045                    LDPCNT  EQU $45     DEPTH TEMP
0059 0046                    LWD     EQU $46     WIDTH CHARS/LINE
0060                         *
0061                         *
0062 0100                        ORG $100
0063                         *
0064                         * COLDSTART ENTRY TO THIS LOCATION
0065 0100 7e 07 c1               EXT _CLDST
0066                         *
0067                         *
0068                         * SWIHDR SWI INPUT TO CP/68
0069                         * THIS IS THE ONLY ENTRY POINT TO BIOS
0070                         *
0071                         *
0072 0103 30                 SWIHDR TSX          GET SP
0073 0104 ee 05                  LDX 5,X         PT TO REQUEST CODE
0074 0106 4f                     CLR A
0075 0107 e6 00                  LDA B 0,X       GET REQUEST CODE
0076 0109 c1 35                  CMP B #53       VALID RC?
0077 010b 23 03                  BLS *+5         YES
0078                         *
0079 010d 7e e1 13               JMP $E113       NO
0080                         *
0081 0110 58                     ASL B           *2
0082 0111 49                     ROL A
0083                         *
0084                         *
0085                         * CALCULATE THE ADDRESS OF THE
0086                         * APPROPRIATE PROCESSING ROUTINE
0087                         *
0088 0112 8d 00                  BSR START
0089                         *
0090 0114 30                 START TSX
0091 0115 eb 01                  ADD B 1,X
0092 0117 a9 00                  ADC A 0,X
0093                         *
0094 0119 cb 40                  ADD B #DSPTAB
0095 011b 89 03                  ADC A #DSPTAB/256
0096                         *
0097 011d a7 00                  STA A 0,X
0098 011f e7 01                  STA B 1,X
0099 0121 ee 00                  LDX 0,X
0100 0123 eb 01                  ADD B 1,X
0101 0125 a9 00                  ADC A 0,X
0102                         *
0103 0127 30                     TSX
0104 0128 a7 00                  STA A 0,X
0105 012a e7 01                  STA B 1,X
0106                         *
0107 012c a6 02                  LDA A 2,X
0108 012e 06                     TAP
0109 012f ee 00                  LDX 0,X
0110                         *
0111 0131 31                     INS
0112 0132 31                     INS
0113                         *
0114 0133 ad 00                  JSR 0,X         CALL PROCESSING ROUTINE
0115                         *
0116 0135 30                     TSX
0117 0136 6c 06                  INC 6,X
0118 0138 26 02                  BNE *+4
0119                         *
0120 013a 6c 05                  INC 5,X
0121 013c 3b                     RTI         RETURN TO USER
0122                         *   USER REGISTER EQUATES:
0123                         *
0124 0002                    UC  EQU 2
0125 0003                    UB  EQU 3
0126 0004                    UA  EQU 4
0127 0005                    UXH EQU 5
0128 0006                    UXL EQU 6
0129 0007                    URH EQU 7
0130 0008                    URL EQU 8
0131                         *
0132                         * PROCESSING ROUTINES:
0133                         *
0134                         * PSHALL: PUSHALL REGISTERS
0135                         *
0136 013d 34                 _PSHAL DES
0137 013e 34                     DES
0138 013f 34                     DES
0139 0140 34                     DES
0140 0141 34                     DES
0141                         *
0142 0142 c6 09                  LDA B #9
0143 0144 30                     TSX
0144                         *
0145 0145 a6 05              PSHALS LDA A 5,X
0146 0147 a7 00                  STA A 0,X
0147 0149 08                     INX
0148 014a 5a                     DEC B
0149 014b 26 f8                  BNE PSHALS
0150                         *
0151 014d c6 05                  LDA B #5
0152 014f 30                     TSX
0153                         *
0154 0150 a6 02              PSHALC LDA A UC,X
0155 0152 a7 09                  STA A UC+7,X
0156 0154 08                     INX
0157 0155 5a                     DEC B
0158 0156 26 f8                  BNE PSHALC
0159                         *
0160 0158 39                     RTS
0161                         *
0162                         *
0163                         * PULALL: PULL ALL REGISTERS
0164                         *
0165 0159 30                 _PULAL TSX
0166 015a c6 05                  LDA B #5
0167                         *
0168 015c a6 09              PULAC LDA A UC+7,X
0169 015e a7 02                  STA A UC,X
0170 0160 08                     INX
0171 0161 5a                     DEC B
0172 0162 26 f8                  BNE PULAC
0173                         *
0174 0164 c6 09                  LDA B #9
0175                         *
0176 0166 a6 03              PULALS LDA A URL-5,X
0177 0168 a7 08                  STA A URL,X
0178 016a 09                     DEX
0179 016b 5a                     DEC B
0180 016c 26 f8                  BNE PULALS
0181                         *
0182 016e 31                     INS
0183 016f 31                     INS
0184 0170 31                     INS
0185 0171 31                     INS
0186 0172 31                     INS
0187                         *
0188 0173 39                     RTS
0189                         *
0190                         *
0191                         * TXAB: TRANSFER X TO A,B
0192                         *
0193 0174 30                 _TXAB TSX
0194 0175 a6 05                  LDA A UXH,X
0195 0177 e6 06                  LDA B UXL,X
0196                         *
0197 0179 a7 04              STAB STA A UA,X
0198 017b e7 03                  STA B UB,X
0199                         *
0200 017d 39                     RTS
0201                         *
0202                         *
0203                         * TABX: TRANSFER A,B TO X
0204                         *
0205 017e 30                 _TABX TSX
0206 017f a6 04                  LDA A UA,X
0207 0181 a7 05                  STA A UXH,X
0208 0183 a6 03                  LDA A UB,X
0209 0185 a7 06                  STA A UXL,X
0210                         *
0211 0187 39                     RTS
0212                         *
0213                         *
0214                         * XABX: EXCHANGE A,B AND X
0215                         *
0216 0188 30                 _XABX TSX
0217 0189 a6 05                  LDA A UXH,X
0218 018b 36                     PSH A
0219 018c e6 06                  LDA B UXL,X
0220 018e 8d ef                  BSR _TABX+1
0221 0190 32                     PUL A
0222 0191 20 e6                  BRA STAB
0223                         *
0224                         *
0225                         * PSHX: PUSH X
0226                         *
0227 0193 34                 _PSHX DES
0228 0194 34                     DES
0229 0195 30                     TSX
0230 0196 86 09                  LDA A #9
0231                         *
0232 0198 e6 02              PSHXA LDA B 2,X
0233 019a e7 00                  STA B 0,X
0234 019c 08                     INX
0235 019d 4a                     DEC A
0236 019e 26 f8                  BNE PSHXA
0237                         *
0238 01a0 30                     TSX
0239 01a1 a6 05                  LDA A UXH,X
0240 01a3 a7 09                  STA A UXH+4,X
0241 01a5 a6 06                  LDA A UXL,X
0242 01a7 a7 0a                  STA A UXL+4,X
0243                         *
0244 01a9 39                     RTS
0245                         *
0246                         *
0247                         * PULX: PULL X
0248                         *
0249 01aa 30                 _PULX   TSX
0250 01ab a6 09                  LDA A UXH+4,X
0251 01ad a7 05                  STA A UXH,X
0252 01af a6 0a                  LDA A UXL+4,X
0253 01b1 a7 06                  STA A UXL,X
0254                         *
0255 01b3 86 09                  LDA A #9
0256                         *
0257 01b5 e6 08              PULXA LDA B 8,X
0258 01b7 e7 0a                  STA B 10,X
0259 01b9 09                     DEX
0260 01ba 4a                     DEC A
0261 01bb 26 f8                  BNE PULXA
0262                         *
0263 01bd 31                     INS
0264 01be 31                     INS
0265                         *
0266 01bf 39                     RTS
0267                         *
0268                         *
0269                         * ADDXAB:   ADD X TO A,B
0270                         *
0271 01c0 30                 _ADXAB  TSX
0272 01c1 8d c6                  BSR _XABX+1
0273 01c3 8d 03                  BSR _ADABX+1
0274 01c5 8d c2                  BSR _XABX+1
0275                         *
0276                         *
0277                         * ADDABX:   ADD A,B TO X
0278                         *
0279 01c7 30                 _ADABX  TSX
0280 01c8 a6 03                  LDA A UB,X
0281 01ca e6 04                  LDA B UA,X
0282                         *
0283 01cc ab 06              ADDAB ADD A UXL,X
0284 01ce a7 06                  STA A UXL,X
0285                         *
0286 01d0 e9 05                  ADC B UXH,X
0287                         *
0288 01d2 07                 STAUXH TPA
0289 01d3 e7 05                  STA B UXH,X
0290 01d5 6d 06                  TST UXL,X
0291                         *
0292 01d7 27 02              TESTZ BEQ TESTZA
0293                         *
0294 01d9 84 fb                  AND A #$FB
0295                         *
0296 01db a7 02              TESTZA STA A UC,X
0297                         *
0298 01dd 39                     RTS
0299                         *
0300                         *
0301                         * ADDAX:   ADD A TO X
0302                         *
0303 01de 30                 _ADDAX TSX
0304 01df a6 04                  LDA A UA,X
0305                         *
0306 01e1 c6 00              ADDZ LDA B #00
0307 01e3 20 e7                  BRA ADDAB
0308                         *
0309                         *
0310                         * ADDBX:   ADD B TO X
0311                         *
0312 01e5 30                 _ADDBX TSX
0313 01e6 a6 03                  LDA A UB,X
0314 01e8 20 f7                  BRA ADDZ
0315                         *
0316                         *
0317                         * SUBXAB:   SUBTRACT X FORM A,B
0318                         *
0319 01ea 30                 _SBXAB TSX
0320 01eb 8d 9c                  BSR _XABX+1
0321 01ed 8d 03                  BSR _SBABX+1
0322 01ef 20 98                  BRA _XABX+1
0323                         *
0324                         *
0325                         * SUBABX:   SUBTRACT A,B FROM X
0326                         *
0327 01f1 30                 _SBABX TSX
0328 01f2 e6 05                  LDA B UXH,X
0329 01f4 a6 06                  LDA A UXL,X
0330                         *
0331 01f6 a0 03                  SUB A UB,X
0332 01f8 a7 06                  STA A UXL,X
0333                         *
0334 01fa e2 04                  SBC B UA,X
0335 01fc 20 d4                  BRA STAUXH
0336                         *
0337                         *
0338                         * SUBAX:   SUBTRACT A FROM X
0339                         *
0340 01fe 30                 _SUBAX TSX
0341 01ff e6 04                  LDA B UA,X
0342                         *
0343 0201 a6 06              _SUB    LDA A UXL,X
0344 0203 10                     SBA
0345 0204 a7 06                  STA A UXL,X
0346                         *
0347 0206 e6 05                  LDA B UXH,X
0348 0208 c2 00                  SBC B #00
0349 020a 20 c6                  BRA STAUXH
0350                         *
0351                         *
0352                         * SUBBX: SUBTRACT B FROM X
0353                         *
0354 020c 30                 _SUBBX TSX
0355 020d e6 03                  LDA B UB,X
0356 020f 20 f0                  BRA _SUB
0357                         *
0358                         *
0359                         * INDEX:   X:=X+A*B
0360                         *
0361 0211 8d 38              _INDEX BSR MPY8
0362 0213 37                     PSH B
0363 0214 16                     TAB
0364 0215 32                     PUL A
0365 0216 30                     TSX
0366 0217 20 b3                  BRA ADDAB
0367                         *
0368                         *
0369                         * MUL8:   A,B:=A*B
0370                         *
0371 0219 8d 30              _MUL8 BSR MPY8
0372 021b 30                     TSX
0373 021c e7 03                  STA B UB,X
0374 021e a7 04                  STA A UA,X
0375 0220 07                     TPA
0376 0221 5d                     TST B
0377                         *
0378 0222 20 b3              JMPTZ BRA TESTZ
0379                         *
0380                         *
0381                         * MUL16:   A,B,X:A,B*X
0382                         *
0383 0224 86 10              _MUL16 LDA A #16
0384 0226 36                     PSH A
0385 0227 30                     TSX
0386 0228 4f                     CLR A
0387 0229 5f                     CLR B
0388 022a 66 06                  ROR UXH+1,X
0389 022c 66 07                  ROR UXL+1,X
0390                         *
0391 022e 24 04              MUL16L BCC MUL16S
0392 0230 eb 04                  ADD B UB+1,X
0393 0232 a9 05                  ADC A UA+1,X
0394                         *
0395 0234 46                 MUL16S ROR A
0396 0235 56                     ROR B
0397 0236 66 06                  ROR UXH+1,X
0398 0238 66 07                  ROR UXL+1,X
0399 023a 6a 00                  DEC 0,X
0400 023c 26 f0                  BNE MUL16L
0401                         *
0402 023e 31                     INS
0403 023f 30                     TSX
0404 0240 e7 03                  STA B UB,X
0405 0242 a7 04                  STA A UA,X
0406                         *
0407 0244 07                     TPA
0408 0245 ea 05                  ORA B UXH,X
0409 0247 aa 06                  ORA A UXL,X
0410                         *
0411 0249 20 d7                  BRA JMPTZ
0412                         *
0413                         *
0414                         * MPY8:  A,B:=UA*UB
0415                         *
0416 024b 86 08              MPY8 LDA A #8
0417 024d 36                     PSH A
0418                         *
0419 024e 4f                     CLR A
0420 024f 30                     TSX
0421 0250 e6 06                  LDA B UB+3,X
0422 0252 56                     ROR B
0423                         *
0424 0253 24 02              MPY8L BCC MPY8S
0425                         *
0426 0255 ab 07                  ADD A UA+3,X
0427                         *
0428 0257 46                 MPY8S ROR A
0429 0258 56                     ROR B
0430 0259 6a 00                  DEC 0,X
0431 025b 26 f6                  BNE MPY8L
0432                         *
0433 025d 31                     INS
0434 025e 39                     RTS
0435                         *
0436                         * UNSIGNED 16-BIT DIVISION
0437                         *    A,B / X
0438                         *    QUOTIENT IN A,B
0439                         *    REMAINDER IN X
0440                         *
0441 025f 30                 _DIV16 TSX
0442 0260 a6 04                  LDA A UA,X
0443 0262 e6 03                  LDA B UB,X
0444 0264 ee 05                  LDX UXH,X       GET ARGUMENTS
0445 0266 37                     PSH B           STACK INPUTS
0446 0267 36                     PSH A
0447                             PSHX
0448 0268 3f                 +       SWI
0449 0269 05                 +       FCB 5
0450 026a 34                     DES
0451 026b 30                     TSX
0452 026c 86 01                  LDA A #1
0453 026e 6d 01                  TST 1,X
0454 0270 2b 0b                  BMI DIV153
0455                         *
0456 0272 4c                 DIV151 INC A
0457 0273 68 02                  ASL 2,X
0458 0275 69 01                  ROL 1,X
0459 0277 2b 04                  BMI DIV153
0460                         *
0461 0279 81 11                  CMP A #17
0462 027b 26 f5                  BNE DIV151
0463                         *
0464 027d a7 00              DIV153 STA A 0,X
0465 027f a6 03                  LDA A 3,X
0466 0281 e6 04                  LDA B 4,X
0467 0283 6f 03                  CLR 3,X
0468 0285 6f 04                  CLR 4,X
0469 0287 e0 02              DIV163 SUB B 2,X
0470 0289 a2 01                  SBC A 1,X
0471 028b 24 07                  BCC DIV165
0472                         *
0473 028d eb 02                  ADD B 2,X
0474 028f a9 01                  ADC A 1,X
0475 0291 0c                     CLC
0476 0292 20 01                  BRA DIV167
0477                         *
0478 0294 0d                 DIV165 SEC
0479                         *
0480 0295 69 04              DIV167 ROL 4,X
0481 0297 69 03                  ROL 3,X
0482 0299 64 01                  LSR 1,X
0483 029b 66 02                  ROR 2,X
0484 029d 6a 00                  DEC 0,X
0485 029f 26 e6                  BNE DIV163
0486                         *
0487 02a1 31                     INS             REPLACE STACK POSITION
0488 02a2 31                     INS
0489 02a3 31                     INS
0490 02a4 30                     TSX
0491 02a5 08                     INX             RECOVER POINTER POSITION
0492 02a6 08                     INX
0493 02a7 a7 05                  STA A UXH,X     STORE REMAINDER
0494 02a9 e7 06                  STA B UXL,X
0495 02ab 32                     PUL A
0496 02ac 33                     PUL B
0497 02ad a7 04                  STA A UA,X      STORE QUOTIENT
0498 02af e7 03                  STA B UB,X
0499 02b1 07                     TPA
0500 02b2 5d                     TST B
0501 02b3 7e 01 d7               JMP TESTZ       FIX UP ZERO FLAG
0502                         *
0503                         *
0504                         * MOVC:     FROM,TO ON STACK
0505                         *           B=COUNT
0506                         *           ON RETURN B=COUNT
0507                         *                   TO=TO+COUNT
0508                         *                   FROM=FROM+COUNT
0509                         *
0510 0009                    FROM    EQU 9
0511 000b                    TO      EQU 11
0512                         *
0513 02b6 30                 _MOVC TSX
0514 02b7 e6 03                  LDA B UB,X      GET COUNT
0515                         *
0516 02b9 ee 09              MOVC1 LDX FROM,X
0517 02bb a6 00                  LDA A 0,X       GET CHAR
0518                         *
0519 02bd 30                     TSX
0520 02be ee 0b                  LDX TO,X
0521 02c0 a7 00                  STA A 0,X       MOVE CHAR
0522                         *
0523 02c2 30                     TSX
0524 02c3 5a                     DEC B           DONE?
0525 02c4 27 0e                  BEQ MOVC3       YES
0526                         *
0527 02c6 6c 0a                  INC FROM+1,X
0528 02c8 26 02                  BNE MOVC2
0529                         *
0530 02ca 6c 09                  INC FROM,X
0531                         *
0532 02cc 6c 0c              MOVC2 INC TO+1,X
0533 02ce 26 e9                  BNE MOVC1
0534                         *
0535 02d0 6c 0b                  INC TO,X
0536 02d2 20 e5                  BRA MOVC1
0537                         *
0538 02d4 39                 MOVC3 RTS
0539                         *
0540                         *
0541                         *
0542                         * CMPC:   COMPARE TWO STRINGS
0543                         *
0544                         *   PARM1,PARM2 ON STACK, B=COUNT
0545                         *   ON MATCH PARMS=NEXT CHAR POSITION
0546                         *   ON MISMATCH PARMS=LAST CHAR POSITION
0547                         *
0548 0009                    PARM1   EQU 9
0549 000b                    PARM2   EQU 11
0550                         *
0551 02d5 30                 _CMPC TSX
0552 02d6 e6 03                  LDA B UB,X
0553                         *
0554 02d8 ee 09              CMP0 LDX PARM1,X
0555 02da a6 00                  LDA A 0,X       GET A CHAR
0556 02dc 81 04                  CMP A #$04      TERMINATOR?
0557 02de 27 1f                  BEQ CDONE       YES
0558                         *
0559 02e0 30                     TSX
0560 02e1 ee 0b                  LDX PARM2,X
0561 02e3 37                     PSH B
0562 02e4 e6 00                  LDA B 0,X
0563 02e6 c1 04                  CMP B #$04      TERMINATOR?
0564 02e8 33                     PUL B
0565 02e9 27 14                  BEQ CDONE       YES
0566                         *
0567 02eb a1 00                  CMP A 0,X       MATCH?
0568 02ed 26 10                  BNE CDONE       NO
0569                         *
0570 02ef 30                     TSX
0571 02f0 6c 0a                  INC PARM1+1,X
0572 02f2 26 02                  BNE CMP1
0573                         *
0574 02f4 6c 09                  INC PARM1,X
0575                         *
0576 02f6 6c 0c              CMP1 INC PARM2+1,X
0577 02f8 26 02                  BNE CMP2
0578                         *
0579 02fa 6c 0b                  INC PARM2,X
0580                         *
0581 02fc 5a                 CMP2 DEC B          ALL DONE?
0582 02fd 26 d9                  BNE CMP0        NO
0583                         *
0584 02ff 30                 CDONE TSX
0585 0300 07                     TPA
0586 0301 a7 02                  STA A UC,X      SET CC
0587 0303 e7 03                  STA B UB,X      SET B
0588                         *
0589 0305 39                     RTS
0590                         * CMWC:     COMPARE STRINGS WITH WILD CHARACTERS
0591                         *           SAME PARMS AS CMPC
0592                         *
0593 0306 30                 _CMWC TSX
0594 0307 e6 03                  LDA B UB,X
0595                         *
0596 0309 ee 09              CMW0 LDX PARM1,X
0597 030b a6 00                  LDA A 0,X
0598 030d 81 04                  CMP A #4        TERMINATOR?
0599 030f 27 ee                  BEQ CDONE
0600                         *
0601 0311 30                     TSX
0602 0312 ee 0b                  LDX PARM2,X
0603 0314 37                     PSH B
0604 0315 e6 00                  LDA B 0,X
0605 0317 c1 04                  CMP B #4        TERMINATOR?
0606 0319 33                     PUL B
0607 031a 27 e3                  BEQ CDONE       YES
0608                         *
0609 031c 81 3f                  CMP A #'?       WILD CHARACTER?
0610 031e 27 04                  BEQ CMW1        YES
0611                         *
0612 0320 a1 00                  CMP A 0,X       MATCH?
0613 0322 26 db                  BNE CDONE       NO
0614                         *
0615 0324 30                 CMW1 TSX
0616 0325 6c 0a                  INC PARM1+1,X
0617 0327 26 02                  BNE *+4
0618                         *
0619 0329 6c 09                  INC PARM1,X
0620                         *
0621 032b 6c 0c                  INC PARM2+1,X
0622 032d 26 02                  BNE *+4
0623                         *
0624 032f 6c 0b                  INC PARM2,X
0625                         *
0626 0331 5a                     DEC B           DONE?
0627 0332 26 d5                  BNE CMW0        NO
0628                         *
0629 0334 20 c9                  BRA CDONE       YES
0630                         *
0631                         * MOVS:     MOVE A VARIABLE LENGTH STRING TERMINATED (04)
0632                         *           FROM, TO ON STACK
0633                         *           ON RETURN TO=TO+COUNT
0634                         *                   FROM=FROM+COUNT
0635                         *
0636                         *
0637 0336 30                 _MOVS TSX
0638                         *
0639 0337 ee 09              MOVS1 LDX FROM,X
0640 0339 a6 00                  LDA A 0,X       GET CHARACTER
0641                         *
0642 033b 30                     TSX
0643 033c ee 0b                  LDX TO,X
0644 033e a7 00                  STA A 0,X       MOVE CHARACTER
0645                         *
0646 0340 30                     TSX
0647 0341 81 04                  CMP A #04       DONE?
0648 0343 27 0e                  BEQ MOVS3       YES
0649                         *
0650 0345 6c 0a                  INC FROM+1,X
0651 0347 26 02                  BNE MOVS2
0652                         *
0653 0349 6c 09                  INC FROM,X
0654                         *
0655 034b 6c 0c              MOVS2 INC TO+1,X
0656 034d 26 e8                  BNE MOVS1
0657                         *
0658 034f 6c 0b                  INC TO,X
0659 0351 20 e4                  BRA MOVS1
0660                         *
0661 0353 39                 MOVS3 RTS
0662                         *
0663                         * FMTS:  REFORMAT A FILE NAME
0664                         *
0665                         *       FROM, TO ON STACK
0666                         *       B=COUNT OF FROM STRING INCLUDING " "
0667                         *
0668                         *       B=RC= 00 UNAMBIG
0669                         *             01 AMBIG
0670                         *             02 BAD FILE NAME
0671                         *
0672                         *
0673                         *
0674 0354 30                 _FMTS TSX
0675 0355 e6 03                  LDA B UB,X      GET COUNT
0676 0357 e7 04                  STA B UA,X      SAVE IN UA
0677 0359 c1 0c                  CMP B #12       NAME TOO LONG?
0678 035b 23 06                  BLS FMTSA       NO
0679                         *
0680                         * TOO MANY CHARACTERS
0681                         *
0682 035d 30                 FMTS0 TSX
0683 035e c6 02                  LDA B #2        SET RC
0684 0360 e7 03                  STA B UB,X        "
0685 0362 39                     RTS
0686                         *
0687                         * FORMAT "TO" STRING
0688                         *
0689 0363 ee 0b              FMTSA LDX TO,X      POINT TO "TO"
0690 0365 86 20                  LDA A #$20      BLANK
0691 0367 c6 08                  LDA B #8
0692                         *
0693 0369 a7 00              FMTSB STA A 0,X     STORE BLANK
0694 036b 08                     INX
0695 036c 5a                     DEC B           DONE?
0696 036d 26 fa                  BNE FMTSB       NO
0697                         *
0698 036f 86 2e                  LDA A #'.
0699 0371 a7 00                  STA A 0,X       STORE "."
0700 0373 08                     INX
0701 0374 c6 03                  LDA B #3
0702 0376 86 20                  LDA A #$20      BLANK
0703                         *
0704 0378 a7 00              FMTSC STA A 0,X     STORE BLANK
0705 037a 08                     INX
0706 037b 5a                     DEC B           DONE?
0707 037c 26 fa                  BNE FMTSC       NO
0708                         *
0709 037e 30                 FMTS1 TSX
0710 037f 6f 03                  CLR UB,X        SET DEFAULT RC
0711                         *
0712                         * FIND " "
0713                         *
0714 0381 ee 09                  LDX FROM,X      POINT TO FROM STRING
0715 0383 5f                     CLR B           CLEAR COUNT
0716                         *
0717 0384 a6 00              FMTS2 LDA A 0,X     GET CHARACTER
0718 0386 81 2e                  CMP A #'.
0719 0388 27 08                  BEQ FMTS3       FOUND
0720                         *
0721 038a 08                     INX
0722 038b 5c                     INC B
0723 038c c1 09                  CMP B #9        NAME TO LONG?
0724 038e 26 f4                  BNE FMTS2       NO
0725                         *
0726 0390 20 cb                  BRA FMTS0       YES FORMAT ERROR
0727                         *
0728                         * FOUND "." CHECK EXT
0729                         *
0730 0392 5c                 FMTS3 INC B
0731 0393 30                     TSX
0732 0394 a6 04                  LDA A UA,X      GET COUNT
0733 0396 10                     SBA             GET EXT COUNT
0734 0397 a7 04                  STA A UA,X      SAVE
0735 0399 27 c2                  BEQ FMTS0       NO EXT
0736                         *
0737 039b 81 03                  CMP A #3        TOO LONG?
0738 039d 22 be                  BHI FMTS0       YES
0739                         *
0740                         * EXT FIELD OK!
0741                         *
0742 039f ee 09                  LDX FROM,X      POINT TO FROM
0743 03a1 a6 00                  LDA A 0,X       GET FIRST CHAR OF NAME
0744 03a3 81 2e                  CMP A #'.       NO NAME?
0745 03a5 27 b6                  BEQ FMTS0       YES
0746                         *
0747 03a7 81 2a                  CMP A #'*       WILD CARD?
0748 03a9 26 2c                  BNE FMTS5       NO
0749                         *
0750                         * WILD CARD FILL WITH "?"
0751                         *
0752 03ab 30                     TSX
0753 03ac ee 0b                  LDX TO,X        POINT TO "TO" STRING
0754 03ae c6 08                  LDA B #8
0755 03b0 86 3f                  LDA A #'?
0756                         *
0757 03b2 a7 00              FMTS4 STA A 0,X     STORE "?"
0758 03b4 08                     INX
0759 03b5 5a                     DEC B           DONE?
0760 03b6 26 fa                  BNE FMTS4       NO
0761                         *
0762                         * SET AMBIG RC
0763                         *
0764 03b8 30                     TSX
0765 03b9 86 01                  LDA A #1        RC
0766 03bb a7 03                  STA A UB,X      STORE
0767                         *
0768                         * FIX POINTERS
0769                         *
0770 03bd a6 0a                  LDA A FROM+1,X
0771 03bf 8b 02                  ADD A #2
0772 03c1 a7 0a                  STA A FROM+1,X
0773                         *
0774 03c3 a6 09                  LDA A FROM,X
0775 03c5 89 00                  ADC A #00
0776 03c7 a7 09                  STA A FROM,X
0777                         *
0778 03c9 a6 0c                  LDA A TO+1,X
0779 03cb 8b 08                  ADD A #8
0780 03cd a7 0c                  STA A TO+1,X
0781                         *
0782 03cf a6 0b                  LDA A TO,X
0783 03d1 89 00                  ADC A #00
0784 03d3 a7 0b                  STA A TO,X
0785                         *
0786 03d5 20 34                  BRA FMTS6
0787                         *
0788                         * MOVE NAME FROM -> TO
0789                         *
0790 03d7 c6 08              FMTS5 LDA B #8
0791                         *
0792 03d9 30                 FMTS5A TSX
0793 03da ee 09                  LDX FROM,X
0794 03dc a6 00                  LDA A 0,X       GET CHARACTER
0795 03de 30                     TSX
0796 03df 6c 0a                  INC FROM+1,X
0797 03e1 26 02                  BNE *+4
0798                         *
0799 03e3 6c 09                  INC FROM,X
0800                         *
0801 03e5 ee 0b                  LDX TO,X
0802 03e7 81 20                  CMP A #'        DONE?
0803 03e9 27 15                  BEQ FMTS5B      YES
0804                         *
0805 03eb a7 00                  STA A 0,X       STORE CHAR
0806 03ed 30                     TSX
0807 03ee 5a                     DEC B
0808 03ef 6c 0c                  INC TO+1,X
0809 03f1 26 02                  BNE *+4
0810                         *
0811 03f3 6c 0b                  INC TO,X
0812                         *
0813 03f5 81 3f                  CMP A #'?       WC?
0814 03f7 26 e0                  BNE FMTS5A      NO
0815                         *
0816 03f9 86 01                  LDA A #1        SET AMBIG RC
0817 03fb 30                     TSX
0818 03fc a7 03                  STA A UB,X
0819 03fe 20 d9                  BRA FMTS5A
0820                         *
0821 0400 30                 FMTS5B TSX          FIX "TO" POINTER
0822 0401 eb 0c                  ADD B TO+1,X
0823 0403 e7 0c                  STA B TO+1,X
0824 0405 e6 0b                  LDA B TO,X
0825 0407 c9 00                  ADC B #00
0826 0409 e7 0b                  STA B TO,X
0827                         *
0828                         *
0829                         *
0830                         * FROM -> EXT
0831                         * TO ->
0832                         *
0833                         * PROCESS EXT
0834                         *
0835 040b 30                 FMTS6 TSX
0836 040c ee 09                  LDX FROM,X
0837 040e a6 00                  LDA A 0,X
0838 0410 81 2a                  CMP A #'*       WILD CARD?
0839 0412 26 14                  BNE FMTS8       NO
0840                         *
0841                         * YES FILL EXT WITH "?"
0842                         *
0843 0414 30                     TSX
0844 0415 ee 0b                  LDX TO,X
0845 0417 08                     INX             SKIP OVER ". "
0846 0418 c6 03                  LDA B #3
0847 041a 86 3f                  LDA A #'?
0848                         *
0849 041c a7 00              FMTS7 STA A 0,X     STORE "?"
0850 041e 08                     INX
0851 041f 5a                     DEC B
0852 0420 26 fa                  BNE FMTS7
0853                         *
0854                         * SET AMBIG RC
0855                         *
0856 0422 30                     TSX
0857 0423 86 01                  LDA A #1
0858 0425 a7 03                  STA A UB,X
0859 0427 39                     RTS             ALL DONE
0860                         *
0861                         *
0862                         * MOVE "FROM" EXT TO "TO" EXT
0863                         *
0864 0428 30                 FMTS8 TSX
0865 0429 6c 0c                  INC TO+1,X      FIX TO POINTER
0866 042b 26 02                  BNE *+4
0867                         *
0868 042d 6c 0b                  INC TO,X
0869                         *
0870 042f e6 04                  LDA B UA,X      GET EXT COUNT
0871                         *
0872 0431 30                 FMTS9 TSX
0873 0432 ee 09                  LDX FROM,X
0874 0434 a6 00                  LDA A 0,X
0875                         *
0876 0436 30                     TSX
0877 0437 6c 0a                  INC FROM+1,X
0878 0439 26 02                  BNE *+4
0879                         *
0880 043b 6c 09                  INC FROM,X
0881                         *
0882 043d ee 0b                  LDX TO,X
0883 043f a7 00                  STA A 0,X
0884                         *
0885 0441 30                     TSX
0886 0442 6c 0c                  INC TO+1,X
0887 0444 26 02                  BNE *+4
0888                         *
0889 0446 6c 0b                  INC TO,X
0890                         *
0891 0448 81 3f                  CMP A #'?       WC?
0892 044a 26 04                  BNE FMTS10      NO
0893                         *
0894 044c 86 01                  LDA A #1        YES SET AMBIG RC
0895 044e a7 03                  STA A UB,X
0896                         *
0897 0450 5a                 FMTS10 DEC B
0898 0451 26 de                  BNE FMTS9
0899                         *
0900 0453 39                     RTS             ALL DONE
0901                         * RELATIVE ENTRY TABLE TO PROCESSING ROUTINES
0902                         *
0903 0340                    DSPTAB  EQU *-START
0904                         *
0905                         *
0906 0454 fc e9                  FDB *-_PSHAL*$FFFF  0
0907 0456 fd 03                  FDB *-_PULAL*$FFFF  1
0908 0458 fd 1c                  FDB *-_TXAB*$FFFF   2
0909 045a fd 24                  FDB *-_TABX*$FFFF   3
0910 045c fd 2c                  FDB *-_XABX*$FFFF   4
0911 045e fd 35                  FDB *-_PSHX*$FFFF   5
0912 0460 fd 4a                  FDB *-_PULX*$FFFF   6
0913 0462 fd 5e                  FDB *-_ADXAB*$FFFF  7
0914 0464 fd 63                  FDB *-_ADABX*$FFFF  8
0915 0466 fd 78                  FDB *-_ADDAX*$FFFF  9
0916 0468 fd 7d                  FDB *-_ADDBX*$FFFF  10
0917 046a fd 80                  FDB *-_SBXAB*$FFFF  11
0918 046c fd 85                  FDB *-_SBABX*$FFFF  12
0919 046e fd 90                  FDB *-_SUBAX*$FFFF  13
0920 0470 fd 9c                  FDB *-_SUBBX*$FFFF  14
0921 0472 fd a7                  FDB *-_MUL8*$FFFF   15
0922 0474 fd b0                  FDB *-_MUL16*$FFFF  16
0923 0476 fe 40                  FDB *-_MOVC*$FFFF   17
0924 0478 fe 5d                  FDB *-_CMPC*$FFFF   18
0925 047a 00 af                  FDB *-_IOHDR*$FFFF  19
0926 047c 14 e4                  FDB *-_OPEN*$FFFF   20
0927 047e 16 73                  FDB *-_CLOSE*$FFFF  21
0928 0480 18 c2                  FDB *-_REWD*$FFFF   22
0929 0482 14 4d                  FDB *-_OPEND*$FFFF  23
0930 0484 17 22                  FDB *-_READ*$FFFF   24
0931 0486 17 bb                  FDB *-_WRITE*$FFFF  25
0932 0488 14 78                  FDB *-_GETDR*$FFFF  26
0933 048a 14 a6                  FDB *-_PUTDR*$FFFF  27
0934 048c 12 93                  FDB *-_DELETE*$FFFF 28
0935 048e 11 7b                  FDB *-_CHAIN*$FFFF  29
0936 0490 07 05                  FDB *-_PRTERR*$FFFF 30
0937 0492 03 32                  FDB *-_WRMST*$FFFF  31
0938 0494 02 fa                  FDB *-_USR6*$FFFF   32
0939 0496 02 fb                  FDB *-_USR7*$FFFF   33
0940 0498 02 fc                  FDB *-_USR8*$FFFF   34
0941 049a 02 fd                  FDB *-_USR9*$FFFF   35
0942 049c 02 fe                  FDB *-_USR10*$FFFF  36
0943 049e 0c 89                  FDB *-_LOADB*$FFFF  37
0944 04a0 03 00                  FDB *-_LOADR*$FFFF  38
0945 04a2 03 0d                  FDB *-_USR1*$FFFF   39
0946 04a4 03 0e                  FDB *-_USR2*$FFFF   40
0947 04a6 03 0f                  FDB *-_USR3*$FFFF   41
0948 04a8 03 10                  FDB *-_USR4*$FFFF   42
0949 04aa 03 11                  FDB *-_USR5*$FFFF   43
0950 04ac 13 a2                  FDB *-_FMTFCB*$FFFF     44
0951 04ae fe 88                  FDB *-_MOVS*$FFFF   45
0952 04b0 fd 61                  FDB *-_INDEX*$FFFF  46
0953 04b2 07 80                  FDB *-_NXTOK*$FFFF  47
0954 04b4 07 0b                  FDB *-_GTCMD*$FFFF  48
0955 04b6 06 a2                  FDB *-_PRTMSG*$FFFF     49
0956 04b8 fd a7                  FDB *-_DIV16*$FFFF  50
0957 04ba 18 a0                  FDB *-_INTDK*$FFFF  51
0958 04bc fe 98                  FDB *-_FMTS*$FFFF   52
0959 04be fe 48                  FDB *-_CMWC*$FFFF   53
0960                         *   EQUIPMENT TABLE:
0961                         *
0962 04c0                    EQTAB   EQU *
0963                         *
0964 04c0 05 9c              CONSOL FDB INLIN
0965 04c2 05 e7                  FDB OTLIN
0966 04c4 80 08                  FDB $8008
0967                         *
0968 04c6 06 93              PTRDR FDB INRDR
0969 04c8 05 99                  FDB NULL
0970 04ca 80 10                  FDB $8010
0971                         *
0972 04cc 05 99              PTPCH FDB NULL
0973 04ce 06 cb                  FDB OTPCH
0974 04d0 80 10                  FDB $8010
0975                         *
0976 04d2 1d 86              DISK FDB .RDSEC
0977 04d4 1d f1                  FDB .WTSEC
0978 04d6 00 00                  FDB 0
0979                         *
0980 04d8 05 99              LPTR FDB NULL
0981 04da 07 03                  FDB OTLPT
0982 04dc 80 02                  FDB $8002
0983                         *
0984 04de 07 64              MTAPE FDB .MTIN
0985 04e0 07 67                  FDB .MTOT
0986 04e2 00 00                  FDB 0
0987                         *
0988 04e4 05 9c              TTYIO FDB INLIN
0989 04e6 05 e7                  FDB OTLIN
0990 04e8 80 10                  FDB $8010
0991                         *
0992 04ea 05 99              NULLIO FDB NULL
0993 04ec 05 99                  FDB NULL
0994 04ee 00 00                  FDB 0000
0995                         * PHYSICAL DEVICE TABLE:
0996                         *
0997 04f0 43 4f 4e           PDTAB FCC 'CON'
0998 04f3 04 c0                  FDB CONSOL
0999 04f5 04 c0                  FDB CONSOL
1000                         *
1001 04f7 50 54 52               FCC 'PTR'
1002 04fa 04 c6                  FDB PTRDR
1003 04fc 04 c6                  FDB PTRDR
1004                         *
1005 04fe 50 54 50               FCC 'PTP'
1006 0501 04 cc                  FDB PTPCH
1007 0503 04 cc                  FDB PTPCH
1008                         *
1009 0505 44 53 4b               FCC 'DSK'
1010 0508 04 d2                  FDB DISK
1011 050a 04 d2                  FDB DISK
1012                         *
1013 050c 4c 50 54               FCC 'LPT'
1014 050f 04 d8                  FDB LPTR
1015 0511 04 d8                  FDB LPTR
1016                         *
1017 0513 4d 54 41               FCC 'MTA'
1018 0516 04 de                  FDB MTAPE
1019 0518 04 de                  FDB MTAPE
1020                         *
1021 051a 54 54 59               FCC 'TTY'
1022 051d 04 e4                  FDB TTYIO
1023 051f 04 e4                  FDB TTYIO
1024                         *
1025 0521 4e 55 4c               FCC 'NUL'
1026 0524 04 ea                  FDB NULLIO
1027 0526 04 ea                  FDB NULLIO
1028                         *
1029 0528 00                     FCB 0
1030                         * IOHDR: I/O HANDLER
1031                         *
1032 0529 30                 _IOHDR TSX
1033 052a ee 05                  LDX UXH,X       GET RCB ADDR
1034 052c 86 80                  LDA A #BUSY
1035 052e a7 05                  STA A RCBSTA,X  INIT BUSY BIT
1036                         *
1037                         * SEARCH PDTAB FOR EQT
1038                         *
1039 0530 bd 05 40               JSR PDSRCH
1040 0533 25 04                  BCS IOHDRA      NOT FOUND
1041                         *
1042                         * FOUND ENTRY;  X=RCBADR; A,B=DRIVER ADR
1043                         *
1044                             XABX            X:=DRIVERADR; A,B:=RCBADR
1045 0535 3f                 +       SWI
1046 0536 04                 +       FCB 4
1047                         *
1048 0537 ad 00                  JSR 0,X         CALL DRIVER
1049                         *
1050                         * ON RETURN X=RCBADR
1051                         *
1052 0539 86 7f              IOHDRA LDA A #NTBUSY
1053 053b a4 05                  AND A RCBSTA,X
1054 053d a7 05                  STA A RCBSTA,X  TURN OFF BUSY BIT
1055                         *
1056 053f 39                     RTS
1057                         * SEARCH PDTAB FOR DEVICE
1058                         *
1059                         * X=RCBADR
1060                         *
1061                         PDSRCH PSHX         SAVE RCBADR
1062 0540 3f                 +       SWI
1063 0541 05                 +       FCB 5
1064 0542 08                     INX             PT TO RCBGDT
1065 0543 08                     INX
1066                         *
1067                             PSHX            SAVE PTR TO RCBGDT
1068 0544 3f                 +       SWI
1069 0545 05                 +       FCB 5
1070                         *
1071 0546 ce 04 f0               LDX #PDTAB      POINT TO PDTAB
1072                         *
1073                         PDSRCA PSHX         SAVE ON STACK
1074 0549 3f                 +       SWI
1075 054a 05                 +       FCB 5
1076 054b c6 03                  LDA B #3        CHARS TO MATCH
1077                             CMPC
1078 054d 3f                 +       SWI
1079 054e 12                 +       FCB 18
1080 054f 27 26                  BEQ PDSRCB      MATCH!
1081                         *
1082                         * NOMATCH
1083                         *
1084                             PULX            GET PD PTR
1085 0551 3f                 +       SWI
1086 0552 06                 +       FCB 6
1087                             ADDBX           POINT TO NEXT ENTRY
1088 0553 3f                 +       SWI
1089 0554 0a                 +       FCB 10
1090 0555 08                     INX
1091 0556 08                     INX
1092 0557 08                     INX
1093 0558 08                     INX
1094                             TXAB            SAVE PD-PTR
1095 0559 3f                 +       SWI
1096 055a 02                 +       FCB 2
1097                             PULX            SKIP RCBGDT
1098 055b 3f                 +       SWI
1099 055c 06                 +       FCB 6
1100                             PULX            GET RCBADR
1101 055d 3f                 +       SWI
1102 055e 06                 +       FCB 6
1103                             PSHX            SAVE
1104 055f 3f                 +       SWI
1105 0560 05                 +       FCB 5
1106 0561 08                     INX
1107 0562 08                     INX
1108                             PSHX            SAVE RCBGDT
1109 0563 3f                 +       SWI
1110 0564 05                 +       FCB 5
1111                             TABX            RESTORE PD-PTR
1112 0565 3f                 +       SWI
1113 0566 03                 +       FCB 3
1114 0567 6d 00                  TST 0,X         END OF TABLE?
1115 0569 26 de                  BNE PDSRCA      NO
1116                         *
1117                         * NOT IN TABLE
1118                         *
1119                             PULX            SKIP RCBGDT
1120 056b 3f                 +       SWI
1121 056c 06                 +       FCB 6
1122                             PULX            GET RCBADR
1123 056d 3f                 +       SWI
1124 056e 06                 +       FCB 6
1125                         *
1126 056f 0d                     SEC             SET RETURN FLAG
1127                         *
1128 0570 86 05                  LDA A #5        ERROR CODE
1129 0572 a4 05                  AND A RCBSTA,X
1130 0574 a7 05                  STA A RCBSTA,X
1131                         *
1132 0576 39                     RTS
1133                         *
1134                         * FOUND ENTRY
1135                         *
1136                         PDSRCB PULX         GET POINTER TO EQT
1137 0577 3f                 +       SWI
1138 0578 06                 +       FCB 6
1139 0579 ee 00                  LDX 0,X         GET ADDRESS OF EQT
1140                             TXAB            SAVE IN A,B
1141 057b 3f                 +       SWI
1142 057c 02                 +       FCB 2
1143                             PULX            SKIP RCBGDT
1144 057d 3f                 +       SWI
1145 057e 06                 +       FCB 6
1146                             PULX            GET RCBADR
1147 057f 3f                 +       SWI
1148 0580 06                 +       FCB 6
1149                             PSHX            SAVE ON STACK
1150 0581 3f                 +       SWI
1151 0582 05                 +       FCB 5
1152                         *
1153 0583 a7 00                  STA A RCBEQT,X  SAVE EQT ADR
1154 0585 e7 01                  STA B RCBEQT+1,X
1155                         *
1156 0587 6d 06                  TST RCBDTT,X    INPUT OR OUTPUT?
1157 0589 2a 04                  BPL *+6         INPUT
1158                         *
1159 058b cb 02                  ADD B #2        OUTPUT, POINT TO OUTPUT DRIVER
1160 058d 89 00                  ADC A #00
1161                         *
1162                             TABX
1163 058f 3f                 +       SWI
1164 0590 03                 +       FCB 3
1165 0591 ee 00                  LDX 0,X         GET DRIVER ADDRESS
1166                             TXAB            SAVE IN A,B
1167 0593 3f                 +       SWI
1168 0594 02                 +       FCB 2
1169                             PULX            GET RCBADR
1170 0595 3f                 +       SWI
1171 0596 06                 +       FCB 6
1172 0597 0c                     CLC             SET RETURN FLAG
1173                         *
1174 0598 39                     RTS
1175                         * NULL IE BIT BUCKET
1176                         *
1177                         NULL XABX           DO NOTHING
1178 0599 3f                 +       SWI
1179 059a 04                 +       FCB 4
1180 059b 39                     RTS
1181                         * INLIN: INPUT A LINE FROM THE CONSOLE
1182                         *
1183                         * A,B=RCBADR
1184                         *
1185                         * OBEYS TTYSET PARAMATERS
1186                         *
1187                         INLIN TABX
1188 059c 3f                 +       SWI
1189 059d 03                 +       FCB 3
1190                         *
1191                         INLIN1 PSHX         SAVE RCBADR
1192 059e 3f                 +       SWI
1193 059f 05                 +       FCB 5
1194 05a0 ee 07                  LDX RCBDBA,X    GET BUFFER ADDRESS
1195                         *
1196 05a2 86 2e                  LDA A #'.       ISSUE PROMPT
1197 05a4 bd 06 7d               JSR OUTCON
1198                         *
1199 05a7 bd 06 68           INLIN2 JSR INCON    GET A CHARACTER
1200 05aa 81 0a                  CMP A #$0A      LF?
1201 05ac 27 f9                  BEQ INLIN2      YES
1202                         *
1203 05ae 7d 00 40               TST DX          HALF-DUPLEX?
1204 05b1 26 03                  BNE *+5         NO
1205                         *
1206 05b3 bd 06 7d               JSR OUTCON      ECHO
1207 05b6 91 3a                  CMP A DL        DELETE LINE?
1208 05b8 26 04                  BNE INLIN3      NO
1209                         *
1210                             PULX            YES, GET RCBADR
1211 05ba 3f                 +       SWI
1212 05bb 06                 +       FCB 6
1213 05bc 20 e0                  BRA INLIN1
1214                         *
1215 05be 91 39              INLIN3 CMP A BS     BACK SPACE
1216 05c0 26 16                  BNE INLIN4      NO
1217                         *
1218                             TXAB            YES, SAVE BUFFER PTR
1219 05c2 3f                 +       SWI
1220 05c3 02                 +       FCB 2
1221                             PULX            GET RCBADR
1222 05c4 3f                 +       SWI
1223 05c5 06                 +       FCB 6
1224                         *
1225 05c6 a1 07                  CMP A RCBDBA,X  AT START OF BUFFER?
1226 05c8 26 04                  BNE *+6         NO
1227                         *
1228 05ca e1 08                  CMP B RCBDBA+1,X
1229 05cc 27 04                  BEQ INLIN5      YES
1230                         *
1231 05ce c0 01                  SUB B #1        BACK UP PTR
1232 05d0 82 00                  SBC A #00
1233                         *
1234                         INLIN5 PSHX         SAVE RCBADR
1235 05d2 3f                 +       SWI
1236 05d3 05                 +       FCB 5
1237                             TABX            X POINT TO BUFFER
1238 05d4 3f                 +       SWI
1239 05d5 03                 +       FCB 3
1240 05d6 20 cf                  BRA INLIN2
1241                         *
1242 05d8 a7 00              INLIN4 STA A 0,X    STORE CHAR
1243 05da 08                     INX             BUMP BUFFER POINTER
1244 05db 81 0d                  CMP A #$0D      CR?
1245 05dd 26 c8                  BNE INLIN2      NO
1246                         *
1247 05df 86 0a              INLIN6 LDA A #$0A   LF
1248 05e1 bd 06 7d               JSR OUTCON
1249                         *
1250                             PULX            GET RCBADR
1251 05e4 3f                 +       SWI
1252 05e5 06                 +       FCB 6
1253 05e6 39                     RTS
1254                         * OTLIN: OUTPUT A LINE TO CONSOLE
1255                         *
1256                         * A,B=RCBADR
1257                         *
1258                         OTLIN TABX          X:=RCBADR
1259 05e7 3f                 +       SWI
1260 05e8 03                 +       FCB 3
1261                             PSHX            SAVE
1262 05e9 3f                 +       SWI
1263 05ea 05                 +       FCB 5
1264                         *
1265 05eb ee 07                  LDX RCBDBA,X    GET BUFFER ADDRESS
1266 05ed d6 3d                  LDA B WD        GET CHARS/LINE
1267                         *
1268 05ef a6 00              OTLIN1 LDA A 0,X    GET A CHAR
1269 05f1 81 04                  CMP A #$04      END-STRING?
1270 05f3 27 70                  BEQ OTLIN8      YES, DONE
1271                         *
1272 05f5 bd 06 7d               JSR OUTCON      SEND IT
1273 05f8 08                     INX
1274 05f9 5a                     DEC B           FULL LINE?
1275 05fa 26 18                  BNE OTLINC      NO
1276                         *
1277 05fc 86 0d                  LDA A #$0D      CR
1278 05fe bd 06 7d               JSR OUTCON
1279 0601 86 0a                  LDA A #$0A      LF
1280 0603 bd 06 7d               JSR OUTCON
1281 0606 86 00                  LDA A #00
1282 0608 d6 3e                  LDA B NL        NULLS?
1283 060a 27 06                  BEQ OTLINB      NO
1284                         *
1285 060c bd 06 7d           OTLINA JSR OUTCON   NULL
1286 060f 5a                     DEC B
1287 0610 26 fa                  BNE OTLINA
1288                         *
1289 0612 d6 3d              OTLINB LDA B WD     GET LINE WIDTH
1290                         *
1291 0614 09                 OTLINC DEX          POINT TO LAST CHAR
1292 0615 a6 00                  LDA A 0,X
1293 0617 08                     INX             RESET POINTER
1294                         *
1295 0618 81 0d                  CMP A #$0D      CR?
1296 061a 26 d3                  BNE OTLIN1      NO
1297                         *
1298 061c 86 0a                  LDA A #$0A      LF
1299 061e bd 06 7d               JSR OUTCON
1300                         *
1301 0621 86 00                  LDA A #00       NULL
1302 0623 d6 3e                  LDA B NL        NULLS?
1303 0625 27 06                  BEQ OTLIN3      NO
1304                         *
1305 0627 bd 06 7d           OTLIN2 JSR OUTCON
1306 062a 5a                     DEC B
1307 062b 26 fa                  BNE OTLIN2
1308                         *
1309 062d 7d 00 3b           OTLIN3 TST DP       PAGING ON?
1310 0630 27 21                  BEQ OTLIN7      NO
1311                         *
1312 0632 7a 00 3c               DEC DPCNT       PAGE?
1313 0635 26 1c                  BNE OTLIN7      NO
1314                         *
1315 0637 96 3b                  LDA A DP        RESET DPCNT
1316 0639 97 3c                  STA A DPCNT
1317                         *
1318 063b 7d 00 42               TST PS          PAUSE?
1319 063e 26 07                  BNE OTLIN5      NO
1320                         *
1321 0640 bd 06 68           OTLIN4 JSR INCON    GET A CHAR
1322 0643 91 43                  CMP A ES        ESCAPE?
1323 0645 26 f9                  BNE OTLIN4      NO
1324                         *
1325 0647 d6 41              OTLIN5 LDA B EJ     GET EJECT COUNT
1326 0649 27 08                  BEQ OTLIN7      NO EJECTS
1327                         *
1328 064b 86 0a              OTLIN6 LDA A #$0A   LF
1329 064d bd 06 7d               JSR OUTCON
1330 0650 5a                     DEC B           DONE?
1331 0651 26 f8                  BNE OTLIN6      NO
1332                         *
1333                         OTLIN7 PULX         GET RCBADR
1334 0653 3f                 +       SWI
1335 0654 06                 +       FCB 6
1336                             PSHX            RESTACK
1337 0655 3f                 +       SWI
1338 0656 05                 +       FCB 5
1339 0657 ee 00                  LDX RCBEQT,X    GET EQT ADDRESS
1340 0659 ee 04                  LDX 4,X         GET PHYSICAL ADDRESS
1341                         *
1342 065b a6 00                  LDA A 0,X       GET STATUS
1343 065d 47                     ASR A
1344 065e 24 05                  BCC OTLIN8      NO BREAK
1345                         *
1346 0660 a6 01                  LDA A 1,X       READ DATA
1347 0662 bd 06 68               JSR INCON       WAIT FOR ANY INPUT
1348                         *
1349                         OTLIN8 PULX         GET RCBADR
1350 0665 3f                 +       SWI
1351 0666 06                 +       FCB 6
1352                         *
1353 0667 39                     RTS
1354                         * INCON: GET A CHAR FROM THE CONSOLE
1355                         * X:=BUFFER ADDRESS
1356                         * A=CHAR PARITY STRIPPED
1357                         *
1358                         INCON PSHX          SAVE BUFFER PTR
1359 0668 3f                 +       SWI
1360 0669 05                 +       FCB 5
1361 066a 30                     TSX
1362 066b ee 04                  LDX 4,X         GET RCBADR
1363 066d ee 00                  LDX RCBEQT,X    GET EQT ADDRESS
1364 066f ee 04                  LDX 4,X         GET PHYSICAL ADDR
1365                         *
1366 0671 a6 00              INCON1 LDA A 0,X    GET STAT
1367 0673 47                     ASR A
1368 0674 24 fb                  BCC INCON1      NOT READY
1369                         *
1370 0676 a6 01                  LDA A 1,X       GET CHAR
1371 0678 84 7f                  AND A #$7F      STRIP PARITY
1372                         *
1373                             PULX            GET BUFFER ADDR
1374 067a 3f                 +       SWI
1375 067b 06                 +       FCB 6
1376                         *
1377 067c 39                     RTS
1378                         * OUTPUT A CHAR TO CONSOLE
1379                         * X:=BUFFER ADDRESS; CHAR IN A
1380                         *
1381                         OUTCON PSHX         SAVE BUFFER ADDRESS
1382 067d 3f                 +       SWI
1383 067e 05                 +       FCB 5
1384 067f 30                     TSX
1385 0680 ee 04                  LDX 4,X         GET RCBADR
1386 0682 ee 00                  LDX RCBEQT,X    GET EQT ADDR
1387 0684 ee 04                  LDX 4,X         GET PHYSICAL ADDR
1388 0686 37                     PSH B
1389                         *
1390 0687 e6 00              OUTCO1 LDA B 0,X    GET STATUS
1391 0689 57                     ASR B
1392 068a 57                     ASR B
1393 068b 24 fa                  BCC OUTCO1      NOT READY
1394                         *
1395 068d a7 01                  STA A 1,X       SEND CHAR
1396 068f 33                     PUL B
1397                             PULX            GET BUFFER ADDR
1398 0690 3f                 +       SWI
1399 0691 06                 +       FCB 6
1400                         *
1401 0692 39                     RTS
1402                         * READ A LINE FROM PAPER TAPE READER
1403                         *
1404                         * A,B=RCBADR
1405                         *
1406                         INRDR TABX          X:=RCBADR
1407 0693 3f                 +       SWI
1408 0694 03                 +       FCB 3
1409                             PSHX            STACK
1410 0695 3f                 +       SWI
1411 0696 05                 +       FCB 5
1412 0697 ee 07                  LDX RCBDBA,X    GET BUFFER ADDRESS
1413                         *
1414 0699 86 11                  LDA A #$11      X-ON
1415 069b bd 06 ed               JSR OUTPCH
1416                         *
1417                         *
1418 069e bd 06 b8           INRD1 JSR RDRIN     OET A CHAR
1419 06a1 81 0a                  CMP A #$0A      LF?
1420 06a3 27 f9                  BEQ INRD1       YES
1421                         *
1422 06a5 81 00                  CMP A #$00      NULL?
1423 06a7 27 f5                  BEQ INRD1       YES
1424                         *
1425 06a9 a7 00                  STA A 0,X
1426 06ab 08                     INX
1427 06ac 81 0d                  CMP A #$0D      CR?
1428 06ae 26 ee                  BNE INRD1       NO
1429                         *
1430 06b0 86 13              INRD2 LDA A #$13    X-OFF
1431 06b2 bd 06 ed               JSR OUTPCH
1432                         *
1433                             PULX            GET RCBADR
1434 06b5 3f                 +       SWI
1435 06b6 06                 +       FCB 6
1436                         *
1437 06b7 39                     RTS
1438                         * READ A CHAR FROM PAPER TAPE READER
1439                         *
1440                         * X:=BUFFER PTR RETURN IN A
1441                         *
1442                         RDRIN PSHX          SAVE BUFFER ADDR
1443 06b8 3f                 +       SWI
1444 06b9 05                 +       FCB 5
1445 06ba 30                     TSX
1446 06bb ee 04                  LDX 4,X         GET RCBADR
1447 06bd ee 00                  LDX RCBEQT,X    GET EQT ADDR
1448 06bf ee 04                  LDX 4,X         GET PHYSICAL ADDRESS
1449                         *
1450 06c1 a6 00              RDRIN1 LDA A 0,X
1451 06c3 47                     ASR A
1452 06c4 24 fb                  BCC RDRIN1      NOT READY
1453                         *
1454 06c6 a6 01                  LDA A 1,X       GET BYTE
1455                             PULX            GET BUFFER PTR
1456 06c8 3f                 +       SWI
1457 06c9 06                 +       FCB 6
1458                         *
1459 06ca 39                     RTS
1460                         * PUNCH A LINE OF PAPER TAPE
1461                         *  WITH NULLS BETWEEN LINES
1462                         * A,B=RCBADR
1463                         *
1464                         OTPCH TABX          X:=RCBADR
1465 06cb 3f                 +       SWI
1466 06cc 03                 +       FCB 3
1467                             PSHX            STACK RCBADR
1468 06cd 3f                 +       SWI
1469 06ce 05                 +       FCB 5
1470 06cf ee 07                  LDX RCBDBA,X    GET BUFFER ADDRESS
1471                         *
1472 06d1 a6 00              OTPCH1 LDA A 0,X    GET A CHAR
1473 06d3 08                     INX
1474 06d4 bd 06 ed               JSR OUTPCH
1475 06d7 81 0d                  CMP A #$0D      CR?
1476 06d9 26 f6                  BNE OTPCH1      NO
1477                         *
1478 06db 86 0a                  LDA A #$0A      LF
1479 06dd bd 06 ed               JSR OUTPCH
1480                         *
1481 06e0 c6 04                  LDA B #4
1482                         *
1483 06e2 86 00              OTPCH3 LDA A #00    NULLS
1484 06e4 bd 06 ed               JSR OUTPCH
1485 06e7 5a                     DEC B
1486 06e8 26 f8                  BNE OTPCH3      NOT DONE
1487                         *
1488                             PULX            RESTORE RCBADR
1489 06ea 3f                 +       SWI
1490 06eb 06                 +       FCB 6
1491 06ec 39                     RTS
1492                         * PUNCH A CHARACTER ON PUNCH
1493                         * X=BUFFER POINTER
1494                         *
1495                         OUTPCH PSHX         SAVE BUFFER PTR
1496 06ed 3f                 +       SWI
1497 06ee 05                 +       FCB 5
1498 06ef 30                     TSX
1499 06f0 ee 04                  LDX 4,X         GET RCBADR
1500 06f2 ee 00                  LDX RCBEQT,X    GET EQT ADR
1501 06f4 ee 04                  LDX 4,X         GET PHYSICAL ADDR
1502 06f6 37                     PSH B
1503                         *
1504 06f7 e6 00              OUTPC1 LDA B 0,X    GET STATUS
1505 06f9 57                     ASR B
1506 06fa 57                     ASR B
1507 06fb 24 fa                  BCC OUTPC1      NOT READY
1508                         *
1509 06fd a7 01                  STA A 1,X       SEND BYTE
1510 06ff 33                     PUL B
1511                             PULX            GET BUFFER PTR
1512 0700 3f                 +       SWI
1513 0701 06                 +       FCB 6
1514                         *
1515 0702 39                     RTS
1516                         * OUTPUT A LINE TO PRINTER
1517                         * A,B=RCBADR
1518                         *
1519                         OTLPT TABX          X:=RCBADR
1520 0703 3f                 +       SWI
1521 0704 03                 +       FCB 3
1522                             PSHX            STACK
1523 0705 3f                 +       SWI
1524 0706 05                 +       FCB 5
1525 0707 ee 07                  LDX RCBDBA,X    GET BUFFER ADDRESS
1526 0709 d6 46                  LDA B LWD       GET CHARS/LINE
1527                         *
1528 070b a6 00              OTLPT1 LDA A 0,X    GET A CHAR
1529 070d 08                     INX
1530 070e bd 07 48               JSR OUTLPT      PRINT
1531 0711 5a                     DEC B           FULL LINE?
1532 0712 26 0c                  BNE OTLPT2      NO
1533                         *
1534 0714 86 0d                  LDA A #$0D      CR
1535 0716 bd 07 48               JSR OUTLPT
1536 0719 86 0a                  LDA A #$0A      LF
1537 071b bd 07 48               JSR OUTLPT
1538 071e d6 46                  LDA B LWD       GET CHARS/LINE
1539                         *
1540 0720 09                 OTLPT2 DEX
1541 0721 a6 00                  LDA A 0,X
1542 0723 08                     INX
1543 0724 81 0c                  CMP A #$0C      FF ?
1544 0726 26 06                  BNE OTLP3       NO
1545                         *
1546 0728 37                     PSH B
1547 0729 d6 44                  LDA B LDP       RESET LINES/PAGE
1548 072b d7 45                  STA B LDPCNT
1549 072d 33                     PUL B
1550                         *
1551 072e 81 0d              OTLP3 CMP A #$0D    CR?
1552 0730 26 d9                  BNE OTLPT1      NO
1553                         *
1554 0732 86 0a                  LDA A #$0A      LF
1555 0734 bd 07 48               JSR OUTLPT
1556 0737 7a 00 45               DEC LDPCNT      PAGE?
1557 073a 26 09                  BNE OTLPT4      NO
1558                         *
1559 073c d6 44                  LDA B LDP       INIT LDPCNT
1560 073e d7 45                  STA B LDPCNT
1561                         *
1562 0740 86 0c                  LDA A #$0C
1563 0742 bd 07 48               JSR OUTLPT
1564                         *
1565                         OTLPT4 PULX         GET RCBADR
1566 0745 3f                 +       SWI
1567 0746 06                 +       FCB 6
1568                         *
1569 0747 39                     RTS
1570                         * PRINT A CHAR ON LINE PRINTER
1571                         *
1572                         * X=BUFFER PTR
1573                         *
1574                         OUTLPT PSHX         SAVE BUFFER PTR
1575 0748 3f                 +       SWI
1576 0749 05                 +       FCB 5
1577 074a 30                     TSX
1578 074b ee 04                  LDX 4,X         GET RCBADR
1579 074d ee 00                  LDX RCBEQT,X    GET EQT ADDR
1580 074f ee 04                  LDX 4,X         GET PHYSICAL ADDR
1581 0751 37                     PSH B
1582                         *
1583 0752 e6 00                  LDA B 0,X       CLEAR ACK
1584 0754 a7 00                  STA A 0,X       OUTPUT
1585 0756 e6 01                  LDA B 1,X       ACK?
1586 0758 2a fc                  BPL *-2         NO
1587                         *
1588 075a 33                     PUL B           YES
1589                             PULX
1590 075b 3f                 +       SWI
1591 075c 06                 +       FCB 6
1592 075d 39                     RTS
1593                         * READ A SINGLE SECTOR
1594                         * A, B=RCBADR
1595                         *
1596 075e 7e 1d 86               EXT .RDSEC
1597                         *
1598                         * WRITE A SINGLE SECTOR
1599                         * A, B=RCBADR
1600                         *
1601 0761 7e 1d f1               EXT .WTSEC
1602                         *
1603                         * READ A TAPE BLOCK
1604                         * A, B=RCBADR
1605                         *
1606 0764 7e 00 00               EXT .MTIN
1607                         *
1608                         * WRITE A TAPE BLOCK
1609                         * A, B=RCBADR
1610                         *
1611 0767 7e 00 00               EXT .MTOT
1612                         *
1613                         *
1614 076a 7e 19 60               EXT _OPEN       OPEN SEQUENTIAL FILE
1615                         *
1616 076d 7e 1a f1               EXT _CLOSE      CLOSE SEQUENTIAL FILE
1617                         *
1618 0770 7e 1d 42               EXT _REWD       REWIND SEQUENTIAL FILE
1619                         *
1620 0773 7e 18 cf               EXT _OPEND      OPEN DIRECTORY
1621                         *
1622 0776 7e 1b a6               EXT _READ       READ A SEQUENTIAL FILE
1623                         *
1624 0779 7e 1c 41               EXT _WRITE      WRITE A SEQUENTIAL FILE
1625                         *
1626 077c 7e 19 00               EXT _GETDR      GET A DIRECTORY ENTRY
1627                         *
1628 077f 7e 19 30               EXT _PUTDR      WRITE A DIRECTORY ENTRY
1629                         *
1630 0782 7e 17 1f               EXT _DELETE     DELETE A FILE
1631                         *
1632 0785 7e 16 09               EXT _CHAIN      CHAIN A PROGRAM FILE
1633                         *
1634 0788 7e 0b 95               EXT _PRTERR     PRINT AN ERROR MESSAGE
1635                         *
1636 078b 7e 07 c4               EXT _WRMST      WARM START ENTRY
1637                         *
1638 078e 7e 00 00               EXT _USR6       USER DEFINED 6
1639                         *
1640 0791 7e 00 00               EXT _USR7       USER DEFINED 7
1641                         *
1642 0794 7e 00 00               EXT _USR8       USER DEFINED 8
1643                         *
1644 0797 7e 00 00               EXT _USR9       USER DEFINED 9
1645                         *
1646 079a 7e 00 00               EXT _USR10      USER DEFINED 10
1647                         *
1648 079d 7e 11 27               EXT _LOADB      LOAD A BINARY FILE
1649                         *
1650 07a0 7e 00 00               EXT _LOADR      LOAD A RELOCATABLE FILE
1651                         *
1652 07a3 7e 0c 32               EXT _NXTOK      PARSE A COMMAND LINE
1653                         *
1654 07a6 7e 0b bf               EXT _GTCMD      GET A COMMAND LINE (CALLS @NXTOK)
1655                         *
1656 07a9 7e 0b 58               EXT _PRTMSG     PRINT AN ERROR MESSAGE
1657                         *
1658 07ac 7e 1d 5a               EXT _INTDK      INITIALIZE DISK SYSTEM
1659                         *
1660 07af 7e 00 00               EXT _USR1       USER DEFINED 1
1661                         *
1662 07b2 7e 00 00               EXT _USR2       USER DEFINED 2
1663                         *
1664 07b5 7e 00 00               EXT _USR3       USER DEFINED 3
1665                         *
1666 07b8 7e 00 00               EXT _USR4       USER DEFINED 4
1667                         *
1668 07bb 7e 00 00               EXT _USR5       USER DEFINED 5
1669                         *
1670 07be 7e 18 4e               EXT _FMTFCB
1671                         
1672                         ***********************************************************
1673                         *   NAM CLI
1674                         *
1675                         * COMMAND LINE INTERPRETER
1676                         * COPYRIGHT 1978 BY HEMENWAY ASSOCIATES INC
1677                         * BOSTON MASS. 02111
1678                         * ALL RIGHTS RESERVED
1679                         ***********************************************************
1680                         
1681                         *
1682                         * COLD START ENTRY POINT
1683                         *
1684 07c1 7e 0a 64           _CLDST JMP COLDST
1685                         *
1686                         * WARM START ENTRY POINT
1687                         *
1688 07c4 7e 0a e1           _WRMST JMP WARMST
1689                         *
1690 07c7 7e 04 c0               EXT EQTAB
1691 07ca 7e 04 f0               EXT PDTAB
1692                         *
1693 07c1                        ENT _CLDST
1694 07c4                        ENT _WRMST
1695 0c32                        ENT _NXTOK
1696 0b58                        ENT _PRTMSG
1697 0b95                        ENT _PRTERR
1698 0bbf                        ENT _GTCMD
1699 1127                        ENT _LOADB
1700 1609                        ENT _CHAIN
1701 171f                        ENT _DELETE
1702 184e                        ENT _FMTFCB
1703 0d25                        ENT CVHB
1704 0d7c                        ENT CVDB
1705 1686                        ENT SEMPTY
1706 16bf                        ENT SFILE
1707 07cd                        ENT SYSFCB
1708                         *
1709                         * BLOCK ADDRESSING DEFINITIONS
1710                         *
1711                         *   FCBDEF
1712 0000                    FCBEQT  EQU 0           EQUIPMENT TABLE ADDRESS
1713 0002                    FCBGDT  EQU 2           GENERIC DEVICE TYPE
1714 0005                    FCBSTA  EQU 5           STATUS
1715 0006                    FCBDTT  EQU 6           DATA TRANSFER TYPE
1716 0007                    FCBDBA  EQU 7           DATA BUFFER ADDRESS
1717 0009                    FCBDRV  EQU 9           DRIVE NUMBER
1718 000a                    FCBTRK  EQU 10          TRACK NUMBER
1719 000b                    FCBSCT  EQU 11          SECTOR NUMBER
1720 000c                    FCBFWD  EQU 12          FWD LINK TRACK/SECTOR
1721 000e                    FCBBAK  EQU 14          BACK LINK TRACK/SECTOR
1722 0010                    FCBNAM  EQU 16          FILE NAME (8.3+EOT=13))
1723 001d                    FCBTYP  EQU 29          FILE TYPE
1724 001e                    FCBACS  EQU 30          FILE ACCESS CODE
1725 001f                    FCBFTS  EQU 31          FIRST TRACK/SECTOR
1726 0021                    FCBLTS  EQU 33          LAST TRACK/SECTOR
1727 0023                    FCBNMS  EQU 35          NUMBER OF SECTORS
1728 0025                    FCBNFB  EQU 37          NEXT FCB IN ACTIVE CHAIN
1729 0027                    FCBIND  EQU 39          INDEX INTO DATA BUFFER
1730 0029                    FCBSCF  EQU 41          SPACE COMPRESSION FLAG
1731                         *   FIBDEF
1732 0000                    FIBNAM  EQU 0           FILE NAME (8.3 + EOT=13)
1733 000d                    FIBTYP  EQU 13          FILE TYPE
1734 000e                    FIBACS  EQU 14          FILE ACCESS CODE
1735 000f                    FIBFTS  EQU 15          FIRST TRACK/SECTOR
1736 0011                    FIBLTS  EQU 17          LAST TRACK/SECTOR
1737 0013                    FIBNMS  EQU 19          NUMBER OF SECTORS
1738                         *
1739                         * DISK ATTRIBUTES
1740                         *
1741 0080                    SECSIZ  EQU 128         128 BYTES/SECTOR
1742                         *
1743                         * SYSTEM FILE-CONTROL BLOCK
1744                         *
1745 07cd                    SYSFCB  RMB 2
1746 07cf 44 53 4b                   FCC 'DSK'
1747 07d2                            RMB 2
1748 07d4 07 f7                      FDB BUFFER
1749 07d6                            RMB 33
1750                         *
1751 07f7                    BUFFER  RMB SECSIZ      DATA SPACE
1752                         *
1753                         * STACK SPACE FOR SYSTEM
1754                         *
1755 0877                            RMB 256
1756 0977                    STACK   RMB 1
1757                         * COMMAND TABLE
1758                         *
1759 0978 44 49 52           CMDTAB  FCC 'DIR'       DIRECTORY
1760 097b 13 a6                  FDB DIRCMD
1761                         *
1762 097d 50 49 50               FCC 'PIP'           PERIPHERAL INTERCHANGE PROGRAM
1763 0980 0d e1                  FDB PIPCMD
1764                         *
1765 0982 52 45 4e               FCC 'REN'           RENAME
1766 0985 11 b2                  FDB RENCMD
1767                         *
1768 0987 44 45 4c               FCC 'DEL'           DELETE
1769 098a 0d dc                  FDB DELCMD
1770                         *
1771 098c 53 41 56               FCC 'SAV'           SAVE
1772 098f 0f 75                  FDB SAVCMD
1773                         *
1774 0991 41 53 53               FCC 'ASS'           ASSIGN
1775 0994 0d f0                  FDB ASNCMD
1776                         *
1777 0996 4c 4f 41               FCC 'LOA'           LOAD
1778 0999 11 17                  FDB LODCMD
1779                         *
1780 099b 4a 55 4d               FCC 'JUM'           JUMP
1781 099e 0d c8                  FDB JMPCMD
1782                         *
1783 09a0 49 4e 49               FCC 'INI'           INITIALIZE
1784 09a3 12 ba                  FDB INICMD
1785                         *
1786 09a5 45 58 49               FCC 'EXI'           EXIT
1787 09a8 e0 e3                  FDB $E0E3           MONITOR
1788                         *
1789 09aa 53 45 43               FCC 'SEC'           SECURITY
1790 09ad 0d e6                  FDB SECCMD
1791                         *
1792 09af 53 45 54               FCC 'SET'           SETCON
1793 09b2 0d eb                  FDB SETCMD
1794                         *
1795 09b4 53 54 41               FCC 'STA'           STATUS
1796 09b7 0d f5                  FDB STACMD
1797                         *
1798 09b9 42 4f 4f               FCC 'BOO'           BOOTSTRAP
1799 09bc 0d fa                  FDB BOOTCD
1800                         *
1801 09be 4c 49 4e               FCC 'LIN'           LINK
1802 09c1 0d ff                  FDB LNKCMD
1803                         *
1804 09c3 53 55 42               FCC 'SUB'           SUBMIT
1805 09c6 0e 87                  FDB SUBCMD
1806                         *
1807 09c8 00                     FCB 00              END OF TABLE
1808                         * CHARACTER TABLE
1809                         *
1810 09c9 00                 CHRTAB  FCB $00         SPACE
1811 09ca 00                     FCB $00             !
1812 09cb 00                     FCB $00             "
1813 09cc 00                     FCB $00             #
1814 09cd 04                     FCB $04             $
1815 09ce 00                     FCB $00             %
1816 09cf 00                     FCB $00             &
1817 09d0 00                     FCB $00             '
1818 09d1 00                     FCB $00             (
1819 09d2 00                     FCB $00             )
1820 09d3 81                     FCB $81             *
1821 09d4 04                     FCB $04             +
1822 09d5 04                     FCB $04             ,
1823 09d6 04                     FCB $04             -
1824 09d7 04                     FCB $04             .
1825 09d8 04                     FCB $04             /
1826 09d9 42                     FCB $42             0
1827 09da 42                     FCB $42             1
1828 09db 42                     FCB $42             2
1829 09dc 42                     FCB $42             3
1830 09dd 42                     FCB $42             4
1831 09de 42                     FCB $42             5
1832 09df 42                     FCB $42             6
1833 09e0 42                     FCB $42             7
1834 09e1 42                     FCB $42             8
1835 09e2 42                     FCB $42             9
1836 09e3 04                     FCB $04             :
1837 09e4 04                     FCB $04             ;
1838 09e5 00                     FCB $00             <
1839 09e6 04                     FCB $04             =
1840 09e7 00                     FCB $00             >
1841 09e8 81                     FCB $81             ?
1842 09e9 00                     FCB $00             @
1843 09ea 82                     FCB $82             A
1844 09eb 82                     FCB $82             B
1845 09ec 82                     FCB $82             C
1846 09ed 82                     FCB $82             D
1847 09ee 82                     FCB $82             E
1848 09ef 82                     FCB $82             F
1849 09f0 80                     FCB $80             G
1850 09f1 80                     FCB $80             H
1851 09f2 80                     FCB $80             I
1852 09f3 80                     FCB $80             J
1853 09f4 80                     FCB $80             K
1854 09f5 80                     FCB $80             L
1855 09f6 80                     FCB $80             M
1856 09f7 80                     FCB $80             N
1857 09f8 80                     FCB $80             O
1858 09f9 80                     FCB $80             P
1859 09fa 80                     FCB $80             Q
1860 09fb 80                     FCB $80             R
1861 09fc 80                     FCB $80             S
1862 09fd 80                     FCB $80             T
1863 09fe 80                     FCB $80             U
1864 09ff 80                     FCB $80             V
1865 0a00 80                     FCB $80             W
1866 0a01 80                     FCB $80             X
1867 0a02 80                     FCB $80             Y
1868 0a03 80                     FCB $80             Z
1869 0a04 04                     FCB $04             [
1870 0a05 00                     FCB $00             \
1871 0a06 04                     FCB $04             ]
1872 0a07 00                     FCB $00             CAROT
1873 0a08 00                     FCB $00             UNDERLINE
1874 0a09                    CONBUF  RMB 80          CONSOLE BUFFER
1875 0a59                    CONRCB  RMB 11          CONSOLE RCB
1876                         *
1877 0a64 8e 09 77           COLDST LDS #STACK       INITIALIZE STACK POINTER
1878 0a67 7f 0e c8               CLR SUBFLG          INIT. 'SUBMIT' FLAG
1879 0a6a fe 04 c1               LDX >EQTAB+1        POINT TO EQTAB
1880 0a6d c6 04                  LDA B #4            POINT TO CONSOLE ENTRY
1881                             ADDBX
1882 0a6f 3f                 +       SWI
1883 0a70 0a                 +       FCB 10
1884 0a71 ee 00                  LDX 0,X             GET ACIA ADDRESS
1885 0a73 86 03                  LDA A #3
1886 0a75 a7 00                  STA A 0,X           RESET ACIA
1887 0a77 86 15                  LDA A #$15
1888 0a79 a7 00                  STA A 0,X           INIT ACIA
1889                         *
1890 0a7b fe 04 c1               LDX >EQTAB+1        POINT TO EQTAB
1891 0a7e c6 28                  LDA B #40           POINT TO TTY ENTRY
1892                             ADDBX
1893 0a80 3f                 +       SWI
1894 0a81 0a                 +       FCB 10
1895 0a82 ee 00                  LDX 0,X             GET ACIA ADDRESS
1896 0a84 86 03                  LDA A #3
1897 0a86 a7 00                  STA A 0,X           RESET ACIA
1898 0a88 86 01                  LDA A #1
1899 0a8a a7 00                  STA A 0,X           INIT ACIA
1900                         *
1901 0a8c fe 04 c1               LDX >EQTAB+1        POINT TO EQTAB
1902 0a8f c6 1c                  LDA B #28           POINT TO LPT ENTRY
1903                             ADDBX
1904 0a91 3f                 +       SWI
1905 0a92 0a                 +       FCB 10
1906 0a93 ee 00                  LDX 0,X             GET PIA ADDRESS
1907 0a95 86 ff                  LDA A #$FF
1908 0a97 a7 00                  STA A 0,X           DDRB:=OUTPUT
1909 0a99 86 2c                  LDA A #$2C
1910 0a9b a7 01                  STA A 1,X           INIT PIA
1911                         *
1912                             INTDK               INITIALIZE DISK SYSTEM
1913 0a9d 3f                 +       SWI
1914 0a9e 33                 +       FCB 51
1915                         *
1916                         * INIT CONSOLE RCB
1917                         *
1918 0a9f ce 0a 59               LDX #CONRCB
1919 0aa2 86 43                  LDA A #'C
1920 0aa4 a7 02                  STA A RCBGDT,X
1921 0aa6 86 30                  LDA A #'0
1922 0aa8 a7 03                  STA A RCBGDT+1,X
1923 0aaa 86 4e                  LDA A #'N
1924 0aac a7 04                  STA A RCBGDT+2,X
1925                         *
1926 0aae ce 0a bf               LDX #CRLF           ISSUE A CR,LF
1927                             PRTMSG
1928 0ab1 3f                 +       SWI
1929 0ab2 31                 +       FCB 49
1930 0ab3 ce 0a c1               LDX #BANNER         PRINT HEADLINE
1931                             PRTMSG
1932 0ab6 3f                 +       SWI
1933 0ab7 31                 +       FCB 49
1934 0ab8 ce 00 00               LDX #0              INIT. ACTIVE FCB CHAIN
1935 0abb df 29                  STX FCBCHN
1936 0abd 20 32                  BRA WARM3           NOW PROCESS COMMANDS
1937                         *
1938 0abf 0a 0d              CRLF FDB $0A0D          LF,CR
1939 0ac1 0a                 BANNER FCB $0A
1940 0ac2 48 45 4d 45 4e 57      FCC 'HEMENWAY ASSOCIATES CP/68-1.0'
     41 59 20 41 53 53
     4f 43 49 41 54 45
     53 20 43 50 2f 36
     38 2d 31 2e 30
1941 0adf 0a 0d                  FDB $0A0D
1942                         *
1943 0ae1 8e 09 77           WARMST LDS #STACK       REINIT STACK POINTER
1944 0ae4 7f 0e c8               CLR SUBFLG          INIT. 'SUBMIT' FLAG
1945 0ae7 de 29              WARM1 LDX FCBCHN        ANY ACTIVE FCBS?
1946 0ae9 27 06                  BEQ WARM3           NO
1947                         *
1948                         * CLOSE ALL ACTIVE (OPEN) FCBS
1949                         *
1950                         WARM2 CLOSE
1951 0aeb 3f                 +       SWI
1952 0aec 15                 +       FCB 21
1953 0aed ee 25                  LDX FCBNFB,X    POINT TO NEXT FCB
1954 0aef 26 fa                  BNE WARM2
1955                         *
1956 0af1 ce 00 00           WARM3 LDX #0
1957 0af4 df 2b                  STX FRETAB      INIT. FREE-SPACE TABLE
1958 0af6 df 2d                  STX FRETAB+2    4 DRIVES
1959 0af8 df 2f                  STX FRETAB+4
1960 0afa df 31                  STX FRETAB+6
1961                         *
1962                         CLI0 GTCMD          GET COMMAND
1963 0afc 3f                 +       SWI
1964 0afd 30                 +       FCB 48
1965 0afe d6 25                  LDA B RC        CHECK RC
1966 0b00 c1 01                  CMP B #1        UNAMBIG. NAME?
1967 0b02 27 0b                  BEQ CLI2        YES
1968                         *
1969 0b04 c1 03                  CMP B #3        NUMBER?
1970 0b06 27 2c                  BEQ TFILE       IF SO, FILENAME
1971                         *
1972 0b08 ce 0b 6b           CLI1 LDX #FORMAT    NO
1973                             PRTMSG          PRINT ERROR
1974 0b0b 3f                 +       SWI
1975 0b0c 31                 +       FCB 49
1976 0b0d 20 ed                  BRA CLI0
1977                         *
1978                         * LOOK UP COMMAND
1979                         *
1980 0b0f de 20              CLI2 LDX DESCRA
1981                             PSHX            STACK PARM
1982 0b11 3f                 +       SWI
1983 0b12 05                 +       FCB 5
1984 0b13 ce 09 78               LDX #CMDTAB
1985                         *
1986                         CMDSRA PSHX         STACK PARM
1987 0b16 3f                 +       SWI
1988 0b17 05                 +       FCB 5
1989 0b18 c6 03                  LDA B #3        COUNT OF THREE
1990                             CMPC
1991 0b1a 3f                 +       SWI
1992 0b1b 12                 +       FCB 18
1993 0b1c 27 2c                  BEQ CMDSRB      MATCH
1994                         *
1995                         * NO MATCH
1996                         *
1997                             PULX            GET CMDTAB PTR
1998 0b1e 3f                 +       SWI
1999 0b1f 06                 +       FCB 6
2000                             ADDBX           POINT TO NEXT ENTRY
2001 0b20 3f                 +       SWI
2002 0b21 0a                 +       FCB 10
2003 0b22 08                     INX
2004 0b23 08                     INX
2005                             TXAB            SAVE PTR TO CMDTAB
2006 0b24 3f                 +       SWI
2007 0b25 02                 +       FCB 2
2008                             PULX            GET DESCRA
2009 0b26 3f                 +       SWI
2010 0b27 06                 +       FCB 6
2011 0b28 de 20                  LDX DESCRA
2012                             PSHX            STACK PARM
2013 0b2a 3f                 +       SWI
2014 0b2b 05                 +       FCB 5
2015                             TABX            RESTORE CMDTAB PTR
2016 0b2c 3f                 +       SWI
2017 0b2d 03                 +       FCB 3
2018 0b2e 6d 00                  TST 0,X         END OF TABLE?
2019 0b30 26 e4                  BNE CMDSRA      NO
2020                         *
2021                         * NOT IN TABLE
2022                         *
2023                             PULX            SKIP DESCRA PARM
2024 0b32 3f                 +       SWI
2025 0b33 06                 +       FCB 6
2026                         *
2027                         * PROCESS AS A TRANSIENT COMMAND FILE-NAME
2028                         *
2029 0b34 de 20              TFILE LDX DESCRA
2030 0b36 df 23                  STX CUCHAR      BACK UP ONE TOKEN ON CLI
2031 0b38 bd 11 17               JSR LODCMD      TRY TO LOAD TRANSIENT
2032 0b3b ce 10 6d               LDX #SAVFCB
2033 0b3e 6d 05                  TST FCBSTA,X    GOOD LOAD?
2034 0b40 26 af                  BNE WARM3       IF NOT, QUIT
2035                         *
2036 0b42 de 27                  LDX VALUE       HAVE TRANSFER ADDRESS?
2037 0b44 27 ab                  BEQ WARM3       IF NOT, QUIT
2038                         *
2039 0b46 ad 00                  JSR 0,X         IF SO, CALL IT
2040 0b48 20 a7                  BRA WARM3       DONE
2041                         *
2042                         *
2043                         * FOUND ENTRY
2044                         *
2045                         CMDSRB PULX         GET PTR TO ROUTINE
2046 0b4a 3f                 +       SWI
2047 0b4b 06                 +       FCB 6
2048 0b4c ee 00                  LDX 0,X         GET ADDRESS OF ROUTINE
2049                             TXAB            TRANSFER TO A,B
2050 0b4e 3f                 +       SWI
2051 0b4f 02                 +       FCB 2
2052                             PULX            SKIP DESCRA PARM
2053 0b50 3f                 +       SWI
2054 0b51 06                 +       FCB 6
2055                             TABX            RESTORE ROUTINE ADDRESS
2056 0b52 3f                 +       SWI
2057 0b53 03                 +       FCB 3
2058 0b54 ad 00                  JSR 0,X         CALL ROUTINE
2059                         *
2060 0b56 20 99                  BRA WARM3
2061                         *
2062                         * PRINT ERROR MESSAGE; X=A(MESSAGE)
2063                         *
2064 0b58 30                 _PRTMSG TSX
2065 0b59 a6 05                  LDA A UXH,X     SAVE ADDRESS IN A,B
2066 0b5b e6 06                  LDA B UXL,X
2067 0b5d ce 0a 59               LDX #CONRCB     POINT TO CONSOLE RCB
2068 0b60 a7 07                  STA A RCBDBA,X
2069 0b62 e7 08                  STA B RCBDBA+1,X
2070 0b64 86 80                  LDA A #$80
2071 0b66 a7 06                  STA A RCBDTT,X  DIRECTION:=OUTPUT
2072                         *
2073                             IOHDR           OUTPUT MESSAGE
2074 0b68 3f                 +       SWI
2075 0b69 13                 +       FCB 19
2076                         *
2077 0b6a 39                     RTS
2078                         *
2079                         * MESSAGES
2080                         *
2081 0b6b 46 4f 52 4d 41 54  FORMAT  FCC 'FORMAT ERROR'
     20 45 52 52 4f 52
2082 0b77 0d                     FCB $0D
2083                         *
2084 0b78 4e 55 4d 42 45 52  NUMBER  FCC 'NUMBER ERROR'
     20 45 52 52 4f 52
2085 0b84 0d                     FCB $0D
2086                         *
2087 0b85 20                 DEVERR  FCC ' '
2088 0b86                    DEVNAM  RMB 3
2089 0b89 20 45 52 52 4f 52      FCC ' ERROR: '
     3a 20
2090 0b91                    DERNUM  RMB 2
2091 0b93 0a 0d                  FDB $0A0D
2092                         *
2093                         *
2094                         * PRINT AN ERROR MESSAGE ON RCB OR FCB STATUS
2095                         * INDEX POINTS TO CONTROL BLOCK
2096                         *
2097                         * PRINT DEVICE NAME AND STATUS
2098                         *
2099 0b95 30                 _PRTERR TSX
2100 0b96 ee 05                  LDX UXH,X       POINT TO CONTROL BLOCK
2101 0b98 a6 05                  LDA A FCBSTA,X  GET DEVICE STATUS
2102 0b9a 27 22                  BEQ PRTER2      IF ZERO, QUIT
2103                         *
2104 0b9c bd 15 fa               JSR OUTHL       CONVERT LEFT DIGIT TO ASCII
2105 0b9f b7 0b 91               STA A DERNUM
2106 0ba2 a6 05                  LDA A FCBSTA,X
2107 0ba4 bd 15 fe               JSR OUTHR       CONVERT RIGHT DIGIT
2108 0ba7 b7 0b 92               STA A DERNUM+1
2109 0baa a6 02                  LDA A RCBGDT,X  GET DEVICE NAME
2110 0bac b7 0b 86               STA A DEVNAM
2111 0baf a6 03                  LDA A RCBGDT+1,X
2112 0bb1 b7 0b 87               STA A DEVNAM+1
2113 0bb4 a6 04                  LDA A RCBGDT+2,X
2114 0bb6 b7 0b 88               STA A DEVNAM+2
2115 0bb9 ce 0b 85               LDX #DEVERR
2116                             PRTMSG          PRINT ERROR LINE
2117 0bbc 3f                 +       SWI
2118 0bbd 31                 +       FCB 49
2119                         *
2120 0bbe 39                 PRTER2 RTS
2121                         *
2122                         * GET A COMMAND FROM THE CONSOLE
2123                         * PARSE THE FIRST TOKEN FROM THE COMMAND LINE
2124                         *
2125 0bbf ce 0a 59           _GTCMD LDX #CONRCB  POINT TO RCB
2126 0bc2 6f 06                  CLR RCBDTT,X    SET FOR INPUT
2127 0bc4 86 43                  LDA A #'C       'CON' SOLE DEVICE
2128 0bc6 a7 02                  STA A RCBGDT,X
2129 0bc8 86 30                  LDA A #'0
2130 0bca a7 03                  STA A RCBGDT+1,X
2131 0bcc 86 4e                  LDA A #'N
2132 0bce a7 04                  STA A RCBGDT+2,X
2133                             TXAB
2134 0bd0 3f                 +       SWI
2135 0bd1 02                 +       FCB 2
2136 0bd2 ce 0a 09               LDX #CONBUF     POINT TO BUFFER
2137                             XABX
2138 0bd5 3f                 +       SWI
2139 0bd6 04                 +       FCB 4
2140 0bd7 a7 07                  STA A RCBDBA,X  INIT DATA BUFFER ADDRESS
2141 0bd9 e7 08                  STA B RCBDBA+1,X
2142 0bdb 7d 0e c8               TST SUBFLG      IN 'SUBMIT'?
2143 0bde 27 4b                  BEQ GTCD2       NO
2144                         *
2145                         * GET COMMAND FROM 'SUBMIT' FILE
2146                         *
2147 0be0 ce 0a 09               LDX #CONBUF
2148 0be3 ff 0e c9               STX SUBTMP      -SAVE BUFFER POINTER
2149 0be6 ce 0e cb           SUBMT1 LDX #SUBFCB
2150                             READ            READ A CHARACTER
2151 0be9 3f                 +       SWI
2152 0bea 18                 +       FCB 24
2153 0beb e6 05                  LDA B FCBSTA,X
2154 0bed c1 08                  CMP B #8        END-FILE?
2155 0bef 27 0b                  BEQ SUBEOF      YES
2156                         *
2157 0bf1 5d                     TST B           ERROR STATUS?
2158 0bf2 27 12                  BEQ SUBMT2      NO
2159                         *
2160 0bf4 bd 0e a8               JSR SUBERR      ISSUE ERROR MESSAGE AND CLOSE FILE
2161 0bf7 7f 0e c8               CLR SUBFLG      RESET 'SUBMIT' FLAG
2162 0bfa 20 c3                  BRA _GTCMD      GET CONSOLE COMMAND
2163                         *
2164 0bfc ce 0e cb           SUBEOF LDX #SUBFCB
2165                             CLOSE           CLOSE FILE
2166 0bff 3f                 +       SWI
2167 0c00 15                 +       FCB 21
2168 0c01 7f 0e c8               CLR SUBFLG      RESET 'SUBMIT' FLAG
2169 0c04 20 b9                  BRA _GTCMD      GET CONSOLE COMMAND
2170                         *
2171 0c06 fe 0e c9           SUBMT2 LDX SUBTMP   POINT TO BUFFER
2172 0c09 a7 00                  STA A 0,X       STORE CHARACTER
2173 0c0b 08                     INX
2174 0c0c ff 0e c9               STX SUBTMP
2175 0c0f 81 0d                  CMP A #$0D      C.R.?
2176 0c11 26 09                  BNE SUBMT3      NO
2177                         *
2178 0c13 ce 0a 09               LDX #CONBUF
2179                             PRTMSG          ECHO COMMAND LINE
2180 0c16 3f                 +       SWI
2181 0c17 31                 +       FCB 49
2182 0c18 df 23                  STX CUCHAR      INIT. POINTER FOR NXTOK
2183 0c1a 20 16                  BRA _NXTOK
2184 0c1c 81 26              SUBMT3 CMP A #'&    'DIVERSION'?
2185 0c1e 26 05                  BNE SUBMT4      NO
2186                         *
2187 0c20 ce 0a 59               LDX #CONRCB
2188 0c23 20 06                  BRA GTCD2       GET A LINE FROM CONSOLE
2189                         *
2190 0c25 81 04              SUBMT4 CMP A #$04   CNTL-D? (EOF IN TEXT FILE)
2191 0c27 27 d3                  BEQ SUBEOF
2192                         *
2193 0c29 20 bb                  BRA SUBMT1      GET NEW CHARACTER
2194                         *
2195                         GTCD2 IOHDR         GET A LINE FROM THE CONSOLE
2196 0c2b 3f                 +       SWI
2197 0c2c 13                 +       FCB 19
2198 0c2d ce 0a 09               LDX #CONBUF
2199 0c30 df 23                  STX CUCHAR      INIT PARMS FOR NXTOK
2200                         *
2201                         * FALL INTO 'NXTOK' ROUTINE
2202                         *
2203                         * NEXT TOKEN ROUTINE *
2204                         * SCANS A LINE OF SOURCE CODE AND RETURNS
2205                         * THE NEXT TOKEN CLASS AND RC
2206                         * THE ADDRESS OF THE TOKEN IS RETURNED IN
2207                         * DESCRA AND THE # OF BYTES IN THE TOKEN IS
2208                         * RETURNED IN DESCRC.
2209                         * THE RC AND CLASS ARE:
2210                         * 
2211                         * TYPE:     RC [B]  CLASS [A]
2212                         * 
2213                         * NAME      01      02 SUBSTRINGS
2214                         * WCARD     02      02
2215                         * NUMBER    03      02
2216                         * 
2217                         * DELIMS    (ASCII) 04 DELIMITERS
2218                         * 
2219                         * CR        0D      0D EOL
2220                         * 
2221                         * ERROR     00      00 ERRORS
2222                         *
2223                         *
2224 0c32 7f 00 22           _NXTOK CLR DESCRC
2225 0c35 7c 00 22               INC DESCRC      DESCRC:=1
2226 0c38 de 23              NXT0 LDX CUCHAR     POINT TO CURRENT CHAR
2227 0c3a df 20                  STX DESCRA      INIT DESCRA
2228 0c3c a6 00                  LDA A 0,X       GET CHAR
2229 0c3e 08                     INX
2230 0c3f df 23                  STX CUCHAR      POINT TO NEXT CHAR
2231 0c41 81 20                  CMP A #$20      LESS THAN 20 HEX?
2232 0c43 27 f3                  BEQ NXT0        BLANK, SKIP OVER
2233 0c45 22 07                  BHI NXT1        >20
2234                         *
2235 0c47 81 0d                  CMP A #$0D      CR?
2236 0c49 26 3a                  BNE NXTER       NO, UNRECOG. CHAR
2237 0c4b 16                     TAB             YES, SET RC
2238 0c4c 20 32                  BRA NXT7
2239                         *
2240 0c4e 81 5f              NXT1 CMP A #$5F     >5F?
2241 0c50 23 02                  BLS NXT3        NO
2242 0c52 20 31                  BRA NXTER       YES, UNRECOG. CHAR
2243                         *
2244 0c54 bd 0d 11           NXT3 JSR GCHRTB     GET BYTE FROM CHARTAB
2245                         *
2246 0c57 85 80              NXT4 BIT A #$80     NAME?
2247 0c59 27 0d                  BEQ NXT5        NO
2248                         *
2249 0c5b c6 01                  LDA B #1
2250 0c5d 85 01                  BIT A #$01      WILDCARD CHAR?
2251 0c5f 27 02                  BEQ *+4         NO
2252                         *
2253 0c61 c6 02                  LDA B #2        YES
2254                         *
2255 0c63 bd 0c b2               JSR NSCAN       YES SCAN NAME STRING
2256 0c66 20 18                  BRA NXT7
2257                         *
2258 0c68 85 40              NXT5 BIT A #$40     DECIMAL?
2259 0c6a 27 05                  BEQ NXT6        NO
2260                         *
2261 0c6c bd 0c 8c               JSR DSCAN       YES, SCAN DECIMAL STRING
2262 0c6f 20 0f                  BRA NXT7
2263                         *
2264 0c71 85 04              NXT6 BIT A #$04     DELIMITERS?
2265 0c73 27 10                  BEQ NXTER       NO, UNRECOG. CHAR
2266                         *
2267 0c75 de 20                  LDX DESCRA      GET CHAR
2268 0c77 e6 00                  LDA B 0,X
2269 0c79 c1 24                  CMP B #$24      $? (HEX)
2270 0c7b 26 03                  BNE NXT7        NO, GET RC AND RTN
2271                         *
2272 0c7d bd 0c d4               JSR HSCAN       YES, SCAN HEX STRING
2273                         *
2274 0c80 97 26              NXT7 STA A CLASS
2275 0c82 d7 25                  STA B RC
2276 0c84 39                     RTS
2277                         *
2278 0c85 7f 00 26           NXTER CLR CLASS     TROUBLE, SET RC,CLASS=00
2279 0c88 7f 00 25               CLR RC
2280 0c8b 39                     RTS
2281                         * DSCAN SCAN DECIMAL STRING STOP AT
2282                         * FIRST NON-DECIMAL CHAR
2283                         *
2284 0c8c de 23              DSCAN LDX CUCHAR    POINT TO NEXT CHAR
2285 0c8e a6 00                  LDA A 0,X       GET CHAR
2286 0c90 7c 00 22               INC DESCRC      BUMP COUNT
2287 0c93 08                     INX
2288 0c94 df 23                  STX CUCHAR      POINT TO NEXT CHAR
2289 0c96 bd 0d 11               JSR GCHRTB      GET BYTE IN CHARTAB
2290 0c99 85 40                  BIT A #$40      DECIMAL?
2291 0c9b 26 ef                  BNE DSCAN       YES CONTINUE SCAN
2292                         *
2293 0c9d d6 22                  LDA B DESCRC    CHECK LENGTH OF TOKEN
2294 0c9f 5a                     DEC B
2295 0ca0 d7 22                  STA B DESCRC    WENT ONE CHAR. TOO FAR
2296 0ca2 c1 06                  CMP B #6
2297 0ca4 2d 03                  BLT DSCAN2      LENGTH OK?
2298                         *
2299 0ca6 7e 0d 07               JMP NUMERR      NO, ERROR
2300                         *
2301 0ca9 bd 0d 7c           DSCAN2 JSR CVDB     CONVERT TO BINARY
2302 0cac df 27                  STX VALUE       SAVE VALUE
2303 0cae c6 03                  LDA B #3
2304 0cb0 20 4d                  BRA ENDSCN      FINISH UP
2305                         *
2306                         *
2307                         * NSCAN SCAN NAME STRING STOP AT
2308                         * FIRST NON-ALPHANUMERIC CHAR
2309                         *
2310 0cb2 de 23              NSCAN LDX CUCHAR    POINT TO NEXT CHAR
2311 0cb4 a6 00                  LDA A 0,X       GET CHAR
2312 0cb6 7c 00 22               INC DESCRC      BUMP COUNT
2313 0cb9 08                     INX
2314 0cba df 23                  STX CUCHAR      POINT TO NEXT CHAR
2315 0cbc bd 0d 11               JSR GCHRTB      GET BYTE IN CHARTAB
2316 0cbf 85 01                  BIT A #$01      WILDCARD?
2317 0cc1 27 02                  BEQ *+4         NO
2318                         *
2319 0cc3 c6 02                  LDA B #2        YES
2320                         *
2321 0cc5 85 80                  BIT A #$80      ALPHA?
2322 0cc7 26 e9                  BNE NSCAN       YES CONTINUE SCAN
2323                         *
2324 0cc9 85 40                  BIT A #$40      NUMERIC?
2325 0ccb 26 e5                  BNE NSCAN       YES CONTINUE SCAN
2326                         *
2327 0ccd 96 22                  LDA A DESCRC
2328 0ccf 4a                     DEC A
2329 0cd0 97 22                  STA A DESCRC    WENT ONE CHAR. TOO FAR
2330 0cd2 20 2b                  BRA ENDSCN      FINISH UP
2331                         *
2332                         *
2333                         * HSCAN SCAN HEX STRING STOP AT
2334                         * FIRST NON-HEX CHAR
2335                         *
2336 0cd4 7f 00 22           HSCAN CLR DESCRC    DESCRC:=0
2337 0cd7 de 23                  LDX CUCHAR      POINT TO NEXT CHAR
2338 0cd9 df 20                  STX DESCRA      INIT DESCRA
2339 0cdb de 23              HSCAN1 LDX CUCHAR   POINT TO NEXT CHAR
2340 0cdd a6 00                  LDA A 0,X       GET CHAR
2341 0cdf 7c 00 22               INC DESCRC      BUMP COUNT
2342 0ce2 08                     INX
2343 0ce3 df 23                  STX CUCHAR      POINT TO NEXT CHAR
2344 0ce5 bd 0d 11               JSR GCHRTB      GET BYTE IN CHRTAB
2345 0ce8 85 02                  BIT A #$02      HEX?
2346 0cea 26 ef                  BNE HSCAN1      YES CONTINUE SCAN
2347                         *
2348 0cec d6 22                  LDA B DESCRC    CHECK TOKEN LENGTH
2349 0cee 5a                     DEC B
2350 0cef d7 22                  STA B DESCRC    WENT ONE CHAR. TOO FAR
2351 0cf1 c1 05                  CMP B #5
2352 0cf3 2d 03                  BLT HSCAN2      LENGTH OK?
2353                         *
2354 0cf5 7e 0d 07               JMP NUMERR      NO, ERROR
2355                         *
2356 0cf8 bd 0d 25           HSCAN2 JSR CVHB     CONVERT HEX TO BINARY
2357 0cfb df 27                  STX VALUE       SAVE BINARY VALUE
2358 0cfd c6 03                  LDA B #3
2359                         *
2360 0cff de 23              ENDSCN LDX CUCHAR
2361 0d01 09                     DEX
2362 0d02 df 23                  STX CUCHAR      CUCHAR:= CORRECT VALUE
2363 0d04 96 02                  LDA A 2         LOAD CLASS RC
2364 0d06 39                     RTS             ALL DONE
2365                         *
2366                         *
2367 0d07 ce 0b 78           NUMERR LDX #NUMBER  PRINT 'NUMBER ERROR' MESSAGE
2368                             PRTMSG
2369 0d0a 3f                 +       SWI
2370 0d0b 31                 +       FCB 49
2371 0d0c 31                     INS             CLEAN STACK
2372 0d0d 31                     INS
2373 0d0e 7e 0c 85               JMP NXTER       RETURN ERROR TOKEN
2374                         * GET BYTE IN CHRTAB INDEXED BY VALUE OF
2375                         * CHAR IN REG A
2376                         *
2377 0d11 81 20              GCHRTB CMP A #$20   VALID CHAR ?
2378 0d13 25 0c                  BCS GCHRTR      NO < 20
2379 0d15 81 5f                  CMP A #$5F      VALID CHAR ?
2380 0d17 22 08                  BHI GCHRTR      NO, > 5F
2381                         *
2382 0d19 ce 09 a9               LDX #CHRTAB-$20
2383                             ADDAX           ADD IN CHARACTER OFFSET
2384 0d1c 3f                 +       SWI
2385 0d1d 09                 +       FCB 9
2386 0d1e a6 00                  LDA A 0,X       GET BYTE
2387 0d20 39                     RTS
2388                         *
2389 0d21 4f                 GCHRTR CLR A
2390 0d22 39                     RTS
2391                         *
2392                         * CVHB CONVERT HEX TO BINARY
2393                         *
2394                         * ON ENTRY DESCRA ADDRESS OF STRING
2395                         *   DESCRC = # OF BYTES IN STRING
2396                         *   ON RETURN (X]-VALUE
2397                         *
2398 0d23                    HVAL RMB 2          TEMP STORAGE
2399                         *
2400 0d25 de 20              CVHB LDX DESCRA     GET ADDRESS OF STRING
2401 0d27 7f 0d 23               CLR HVAL
2402 0d2a 7f 0d 24               CLR HVAL+1
2403 0d2d d6 22                  LDA B           DESCRC GET COUNT
2404 0d2f 09                     DEX             DECREMENT PTR TO STRING
2405 0d30 08                 CVHB1 INX           POINT TO RIGHT MOST
2406 0d31 5a                     DEC B           BYTE OF THE
2407 0d32 26 fc                  BNE CVHB1       STRING
2408                         *
2409 0d34 d6 22                  LDA B           DESCRC GET COUNT
2410 0d36 bd 0d 6c               JSR CVHBS       CONVERT
2411 0d39 b7 0d 24               STA A HVAL+1    SAVE
2412 0d3c 5a                     DEC B           DECREMENT COUNT
2413 0d3d 27 29                  BEQ CVHBD       (1 HEX DIGIT)
2414 0d3f 09                     DEX             POINT TO NEXT LEFT BYTE
2415 0d40 bd 0d 6c               JSR CVHBS       CONVERT
2416 0d43 48                     ASL A           SHIFT TO LEFT NIBBLE
2417 0d44 48                     ASL A
2418 0d45 48                     ASL A
2419 0d46 48                     ASL A
2420 0d47 ba 0d 24               ORA A HVAL+1    CONVERT TO BYTE
2421 0d4a b7 0d 24               STA A HVAL+1    SAVE
2422 0d4d 5a                     DEC B           DECREMENT COUNT
2423 0d4e 27 18                  BEQ CVHBD       (2 HEX DIGITS)
2424 0d50 09                     DEX             POINT TO NEXT LEFT BYTE
2425 0d51 bd 0d 6c               JSR CVHBS       CONVERT
2426 0d54 b7 0d 23               STA A HVAL      SAVE
2427 0d57 5a                     DEC B           DECREMENT COUNT
2428 0d58 27 0e                  BEQ CVHBD       (3 HEX DIGITS)
2429                         *
2430 0d5a 09                     DEX             POINT TO NEXT LEFT BYTE
2431 0d5b bd 0d 6c               JSR CVHBS       CONVERT
2432 0d5e 48                     ASL A           SHIFT TO LEFT NIBBLE
2433 0d5f 48                     ASL A
2434 0d60 48                     ASL A
2435 0d61 48                     ASL A
2436 0d62 ba 0d 23               ORA A HVAL      CONVERT TO BYTE
2437 0d65 b7 0d 23               STA A HVAL      SAVE
2438 0d68 fe 0d 23           CVHBD LDX HVAL      GET FINAL VALUE
2439 0d6b 39                     RTS             RETURN
2440                         *
2441                         * ROUTINE TO CONVERT ASCII TO BINARY
2442                         *
2443 0d6c a6 00              CVHBS LDA A 0,X     GET BYTE
2444 0d6e 80 30                  SUB A #$30      CONVERT
2445 0d70 81 09                  CMP A #$09      0 - 9 ?
2446 0d72 2f 02                  BLE *+4         YES
2447 0d74 80 07                  SUB A #$07      NO, 10 - 15
2448 0d76 39                     RTS
2449                         *
2450                         * CVDB: CONVERT DECIMAL TO BINARY
2451                         * ON ENTRY DESCRA = ADDRESS OF DECIMAL STRING
2452                         *          DESCRC = # BYTES IN DECIMAL STRING
2453                         * ON RETURN {X] = VALUE IN BINARY
2454                         *
2455 0d77                    DVAL    RMB 2       TEMP STORAGE FOR BINARY
2456 0d79                    DCOUNT  RMB 1       DIGIT COUNT
2457 0d7a                    TENVL   RMB 2       POWER OF TEN
2458                         *
2459 0d7c 7f 0d 77           CVDB CLR DVAL       DVAL:=0
2460 0d7f 7f 0d 78               CLR DVAL+1
2461 0d82 7f 0d 7a               CLR TENVL
2462 0d85 7f 0d 7b               CLR TENVL+1
2463 0d88 7c 0d 7b               INC TENVL+1     TENVL:=1
2464 0d8b de 20                  LDX DESCRA      POINT TO STRING
2465 0d8d 09                     DEX
2466 0d8e d6 22                  LDA B DESCRC
2467 0d90 f7 0d 79               STA B DCOUNT    INIT DCOUNT
2468                         *
2469 0d93 08                 CVDB1 INX           POINT TO
2470 0d94 5a                     DEC B           LEAST SIGNIFICANT
2471 0d95 26 fc                  BNE CVDB1       DIGIT
2472                         *
2473                         CVDB2 PSHX          SAVE POINTER
2474 0d97 3f                 +       SWI
2475 0d98 05                 +       FCB 5
2476 0d99 e6 00                  LDA B 0,X       GET DIGIT
2477 0d9b c4 0f                  AND B #$0F      CONVERT TO BCD
2478 0d9d 4f                     CLR A           CLEAR ACCUMULATOR
2479 0d9e fe 0d 7a               LDX TENVL       POINT TO POWER OF TEN
2480                             MUL16           (X):=TENVL*DIGIT
2481 0da1 3f                 +       SWI
2482 0da2 10                 +       FCB 16
2483                             TXAB            (A,B)=(X)
2484 0da3 3f                 +       SWI
2485 0da4 02                 +       FCB 2
2486 0da5 fb 0d 78               ADD B DVAL+1    DVAL:=DVAL+TENVL*DIGIT
2487 0da8 b9 0d 77               ADC A DVAL
2488 0dab b7 0d 77               STA A DVAL
2489 0dae f7 0d 78               STA B DVAL+1
2490 0db1 4f                     CLR A
2491 0db2 c6 0a                  LDA B #$0A
2492 0db4 fe 0d 7a               LDX TENVL       POINT TO POWER OF TEN
2493                             MUL16           (X):=TENVL*10
2494 0db7 3f                 +       SWI
2495 0db8 10                 +       FCB 16
2496 0db9 ff 0d 7a               STX TENVL
2497                             PULX            RESTORE POINTER TO STRING
2498 0dbc 3f                 +       SWI
2499 0dbd 06                 +       FCB 6
2500 0dbe 09                     DEX             POINT NEXT LEFT DIGIT
2501 0dbf 7a 0d 79               DEC DCOUNT      DONE?
2502 0dc2 26 d3                  BNE CVDB2       NO
2503 0dc4 fe 0d 77               LDX DVAL        GET FINAL VALUE
2504 0dc7 39                     RTS             RETURN
2505                         *
2506                         *
2507                         * PROCESS 'JUMP' COMMAND
2508                         *
2509                         JMPCMD NXTOK        GET ADDRESS
2510 0dc8 3f                 +       SWI
2511 0dc9 2f                 +       FCB 47
2512 0dca d6 25                  LDA B RC        CHECK RC
2513 0dcc c1 03                  CMP B #3        VALID NUMBER?
2514 0dce 27 06                  BEQ JMPC2       YES
2515                         *
2516 0dd0 ce 0b 6b               LDX #FORMAT     NO, ERROR
2517                             PRTMSG
2518 0dd3 3f                 +       SWI
2519 0dd4 31                 +       FCB 49
2520 0dd5 39                     RTS             RETURN TO CLI
2521                         *
2522 0dd6 31                 JMPC2 INS           CLEAN STACK
2523 0dd7 31                     INS
2524 0dd8 de 27                  LDX VALUE       LOAD ADDRESS
2525 0dda 6e 00                  JMP 0,X         THERE
2526                         *
2527                         * PROCESS TRANSIENT COMMANDS
2528                         *
2529                         * 'DELETE'  'PIP'       'SECURITY'  'SETCON'
2530                         * 'ASSIGN'  'STATUS'    'LINK'      'BOOT'
2531                         *
2532 0ddc ce 0e 27           DELCMD LDX #DELLIN
2533 0ddf 20 21                  BRA TRANS
2534                         *
2535 0de1 ce 0e 34           PIPCMD LDX #PIPLIN
2536 0de4 20 1c                  BRA TRANS
2537                         *
2538 0de6 ce 0e 3e           SECCMD LDX #SECLIN
2539 0de9 20 17                  BRA TRANS
2540                         *
2541 0deb ce 0e 4d           SETCMD LDX #SETLIN
2542 0dee 20 12                  BRA TRANS
2543                         *
2544 0df0 ce 0e 57           ASNCMD LDX #ASNLIN
2545 0df3 20 0d                  BRA TRANS
2546                         *
2547 0df5 ce 0e 64           STACMD LDX #STALIN
2548 0df8 20 08                  BRA TRANS
2549                         *
2550 0dfa ce 0e 71           BOOTCD LDX #BOOTLN
2551 0dfd 20 03                  BRA TRANS
2552                         *
2553 0dff ce 0e 7c           LNKCMD LDX #LNKLIN
2554                         *
2555                         *
2556                         TRANS TXAB
2557 0e02 3f                 +       SWI
2558 0e03 02                 +       FCB 2
2559 0e04 de 23                  LDX CUCHAR      SAVE OLD CUCHAR
2560                             PSHX
2561 0e06 3f                 +       SWI
2562 0e07 05                 +       FCB 5
2563                             TABX
2564 0e08 3f                 +       SWI
2565 0e09 03                 +       FCB 3
2566 0e0a df 23                  STX CUCHAR      SET UP DUMMY CLI
2567 0e0c bd 11 17               JSR LODCMD      ISSUE 'LOAD' COMMAND
2568                             PULX
2569 0e0f 3f                 +       SWI
2570 0e10 06                 +       FCB 6
2571 0e11 df 23                  STX CUCHAR      RESTORE OLD CUCHAR
2572 0e13 ce 10 6d               LDX #SAVFCB
2573 0e16 6d 05                  TST FCBSTA,X    GOOD LOAD?
2574 0e18 26 0c                  BNE TRANS2      NO, QUIT
2575                         *
2576 0e1a de 27                  LDX VALUE       TRANSFER ADDRESS?
2577 0e1c 27 08                  BEQ TRANS2      NO, QUIT
2578                         *
2579                         * FOR 'ASSIGN' TRANSIENT, PASS "PDTAB" ADDRESS IN (A,B)
2580 0e1e b6 04 f1               LDA A >PDTAB+1
2581 0e21 f6 04 f2               LDA B >PDTAB+2
2582 0e24 6e 00                  JMP 0,X         YES, GO THERE
2583                         *
2584 0e26 39                 TRANS2 RTS
2585                         *
2586 0e27 30 3a 44 45 4c 45  DELLIN FCC '0:DELETE.CMD'
     54 45 2e 43 4d 44
2587 0e33 0d                     FCB $0D
2588                         *
2589 0e34 30 3a 50 49 50 2e  PIPLIN FCC '0:PIP.CMD'
     43 4d 44
2590 0e3d 0d                     FCB $0D
2591                         *
2592 0e3e 30 3a 53 45 43 55  SECLIN FCC '0:SECURITY.CMD'
     52 49 54 59 2e 43
     4d 44
2593 0e4c 0d                     FCB $0D
2594                         *
2595 0e4d 30 3a 53 45 54 2e  SETLIN FCC '0:SET.CMD'
     43 4d 44
2596 0e56 0d                     FCB $0D
2597                         *
2598 0e57 30 3a 41 53 53 49  ASNLIN FCC '0:ASSIGN.CMD'
     47 4e 2e 43 4d 44
2599 0e63 0d                     FCB $0D
2600                         *
2601 0e64 30 3a 53 54 41 54  STALIN FCC '0:STATUS.CMD'
     55 53 2e 43 4d 44
2602 0e70 0d                     FCB $0D
2603                         *
2604 0e71 30 3a 42 4f 4f 54  BOOTLN FCC '0:BOOT.CMD'
     2e 43 4d 44
2605 0e7b 0d                     FCB $0D
2606                         *
2607 0e7c 30 3a 4c 49 4e 4b  LNKLIN FCC '0:LINK.CMD'
     2e 43 4d 44
2608 0e86 0d                     FCB $0D
2609                         * PROCESS 'SUBMIT' COMMAND
2610                         *
2611                         * SYNTAX: SUBMIT [DRIVE:] FILENAME.EXT
2612                         * FILE MUST BE 'TEXT' TYPE
2613                         *
2614 0e87 ce 0e cb           SUBCMD LDX #SUBFCB
2615 0e8a 6f 06                  CLR FCBDTT,X    MAKE INPUT FILE
2616 0e8c 86 ff                  LDA A #$FF
2617 0e8e a7 29                  STA A FCBSCF,X  BLANK EXPANSION ON
2618                             FMTFCB          FORMAT [DRIVE:] FILENAME.EXT
2619 0e90 3f                 +       SWI
2620 0e91 2c                 +       FCB 44
2621                             PRTERR          PRINT ERROR MESSAGES
2622 0e92 3f                 +       SWI
2623 0e93 1e                 +       FCB 30
2624 0e94 6d 05                  TST FCBSTA,X    ERROR?
2625 0e96 26 10                  BNE SUBERR      YES
2626                         *
2627                             OPEN            OPEN FILE
2628 0e98 3f                 +       SWI
2629 0e99 14                 +       FCB 20
2630 0e9a 6d 05                  TST FCBSTA,X    ERROR?
2631 0e9c 26 0a                  BNE SUBERR
2632                         *
2633 0e9e a6 1d                  LDA A FCBTYP,X  'TEXT' FILE?
2634 0ea0 81 03                  CMP A #3
2635 0ea2 26 04                  BNE SUBERR      IF NOT, ERROR
2636                         *
2637 0ea4 7c 0e c8               INC SUBFLG      SET 'SUBMIT' FLAG
2638 0ea7 39                     RTS             DONE!
2639                         *
2640 0ea8 ce 0e b5           SUBERR LDX #SUBLIN  'SUBMIT' ERROR
2641                             PRTMSG
2642 0eab 3f                 +       SWI
2643 0eac 31                 +       FCB 49
2644 0ead ce 0e cb               LDX #SUBFCB
2645                             PRTERR          PRINT ERROR MESSAGE
2646 0eb0 3f                 +       SWI
2647 0eb1 1e                 +       FCB 30
2648                             CLOSE           TRY TO CLOSE FILE
2649 0eb2 3f                 +       SWI
2650 0eb3 15                 +       FCB 21
2651 0eb4 39                     RTS
2652                         *
2653 0eb5 20 53 55 42 4d 49  SUBLIN FCC ' SUBMIT FILE ERROR'
     54 20 46 49 4c 45
     20 45 52 52 4f 52
2654 0ec7 0d                     FCB $0D
2655                         *
2656 0ec8                    SUBFLG RMB 1
2657 0ec9                    SUBTMP RMB 2
2658                         *
2659 0ecb                    SUBFCB RMB 2
2660 0ecd 44 53 4b               FCC 'DSK'
2661 0ed0                        RMB 2
2662 0ed2 0e f5                  FDB SUBBUF
2663 0ed4                        RMB 33
2664                         *
2665 0ef5                    SUBBUF  RMB SECSIZ
2666                         * PROCESS 'SAVE' COMMAND
2667                         *
2668                         * STORE MEMORY CONTENTS ON DISK IN BINARY FORMAT
2669                         *
2670                         * SYNTAX: SAVE [DRIVE:] FILENAME.EXT,STARTAD,ENDAD, ETC...
2671                         *
2672 0f75 ce 10 6d           SAVCMD LDX #SAVFCB      POINT TO FCB
2673 0f78 6f 1d                  CLR FCBTYP,X        BINARY TYPE
2674 0f7a 6f 29                  CLR FCBSCF,X        NO COMPRESSION
2675 0f7c 6f 1e                  CLR FCBACS,X        ACCESS-TYPE=0
2676 0f7e 86 ff                  LDA A #$FF
2677 0f80 a7 06                  STA A FCBDTT,X  OUTPUT
2678                             FMTFCB          FORMAT [DRIVE:] FILE.EXT
2679 0f82 3f                 +       SWI
2680 0f83 2c                 +       FCB 44
2681                             PRTERR          PRINT ERROR MESSAGES
2682 0f84 3f                 +       SWI
2683 0f85 1e                 +       FCB 30
2684 0f86 6d 05                  TST FCBSTA,X    ERROR?
2685 0f88 27 01                  BEQ *+3
2686                         *
2687 0f8a 39                     RTS             IF SO, RETURN
2688                         *
2689                             NXTOK           GET TOKEN FROM CLI
2690 0f8b 3f                 +       SWI
2691 0f8c 2f                 +       FCB 47
2692 0f8d 96 26                  LDA A CLASS
2693 0f8f 81 04                  CMP A #4        DELIMITER?
2694 0f91 27 06                  BEQ SAV5B       YES
2695                         *
2696 0f93 ce 0b 6b           SAV5 LDX #FORMAT    NO. FORMAT ERROR
2697                             PRTMSG
2698 0f96 3f                 +       SWI
2699 0f97 31                 +       FCB 49
2700 0f98 39                     RTS
2701                         *
2702                         SAV5B NXTOK         GET TOKEN FROM CLI
2703 0f99 3f                 +       SWI
2704 0f9a 2f                 +       FCB 47
2705 0f9b d6 25                  LDA B RC        CHECK RC
2706 0f9d c1 03                  CMP B #3        NUMBER?
2707 0f9f 26 f2                  BNE SAV5        NO, ERROR
2708 0fa1 de 27                  LDX VALUE
2709 0fa3 ff 13 9e               STX SAVEX       SAVE STARTING ADDRESS
2710                             NXTOK           GET TOKEN FROM CLI
2711 0fa6 3f                 +       SWI
2712 0fa7 2f                 +       FCB 47
2713 0fa8 96 26                  LDA A CLASS
2714 0faa 81 04                  CMP A #4        DELIMITER?
2715 0fac 26 e5                  BNE SAV5        NO, ERROR
2716                         *
2717                             NXTOK           GET TOKEN FROM CLI
2718 0fae 3f                 +       SWI
2719 0faf 2f                 +       FCB 47
2720 0fb0 d6 25                  LDA B RC        CHECK RC
2721 0fb2 c1 03                  CMP B #3        NUMBER?
2722 0fb4 26 dd                  BNE SAV5        NO. ERROR
2723                         *
2724 0fb6 de 27                  LDX VALUE
2725 0fb8 ff 13 a0               STX SAVEX1      SAVE ENDING ADDRESS
2726                             NXTOK           GET TOKEN FROM CLI
2727 0fbb 3f                 +       SWI
2728 0fbc 2f                 +       FCB 47
2729 0fbd 96 26                  LDA A CLASS
2730 0fbf 81 0d                  CMP A #$0D      END OF LINE?
2731 0fc1 27 2b                  BEQ SAV6        YES (NO TRANSFER ADDRESS)
2732                         *
2733 0fc3 81 04                  CMP A #4        DELIMITER?
2734 0fc5 26 cc                  BNE SAV5        NO, ERROR
2735                         *
2736                             NXTOK           GET A TOKEN FROM CLI
2737 0fc7 3f                 +       SWI
2738 0fc8 2f                 +       FCB 47
2739 0fc9 d6 25                  LDA B RC        CHECK RC
2740 0fcb c1 03                  CMP B #3        NUMBER?
2741 0fcd 26 c4                  BNE SAV5        NO, ERROR
2742                         *
2743                         * OUTPUT TRANSFER-ADDRESS RECORD HERE
2744                         *
2745 0fcf ce 10 6d               LDX #SAVFCB     POINT TO FCB
2746 0fd2 6c 1d                  INC FCBTYP,X    COMMMAND TYPE
2747                             OPEN            OPEN SAVE FILE
2748 0fd4 3f                 +       SWI
2749 0fd5 14                 +       FCB 20
2750 0fd6 6d 05                  TST FCBSTA,X    CHECK STATUS
2751 0fd8 27 03                  BEQ *+5         GOOD?
2752                         *
2753 0fda 7e 10 5a               JMP SAVERR      BAD
2754                         *
2755 0fdd 86 16                  LDA A #$16      HEADER BYTE
2756 0fdf bd 10 62               JSR PUTBYT
2757 0fe2 96 27                  LDA A VALUE     HIGH-BYTE OF ADDRESS
2758 0fe4 bd 10 62               JSR PUTBYT
2759 0fe7 96 28                  LDA A VALUE+1   LOW-BYTE OF ADDRESS
2760 0fe9 bd 10 62               JSR PUTBYT
2761 0fec 20 09                  BRA SAV7
2762                         *
2763                         *
2764                         *
2765 0fee ce 10 6d           SAV6 LDX #SAVFCB    POINT TO FCB
2766                             OPEN
2767 0ff1 3f                 +       SWI
2768 0ff2 14                 +       FCB 20
2769 0ff3 6d 05                  TST FCBSTA,X    FSAVE-FILE OPEN GOOD?
2770 0ff5 26 63                  BNE SAVERR      BAD
2771                         *
2772                         * NOW WRITE OUT BINARY RECORDS
2773                         *
2774 0ff7 b6 13 a0           SAV7 LDA A SAVEX1
2775 0ffa f6 13 a1               LDA B SAVEX1+1  GET END-ADDRESS
2776 0ffd f0 13 9f               SUB B SAVEX+1
2777 1000 b2 13 9e               SBC A SAVEX
2778 1003 27 29                  BEQ SAV9        ARE THERE > 256 BYTES LEFT?
2779                         *
2780 1005 c6 ff                  LDA B #$FF      WRITE FULL RECORD (256 BYTES)
2781 1007 ce 10 6d               LDX #SAVFCB     POINT TO FCB
2782 100a 86 02                  LDA A #$02      HEADER BYTE
2783 100c 8d 54                  BSR PUTBYT
2784 100e b6 13 9e               LDA A SAVEX     HIGH-BYTE OF ADDRESS
2785 1011 8d 4f                  BSR PUTBYT
2786 1013 b6 13 9f               LDA A SAVEX+1   LOW-BYTE OF ADDRESS
2787 1016 8d 4a                  BSR PUTBYT
2788 1018 17                     TBA             256 BYTES IN COUNT
2789 1019 8d 47                  BSR PUTBYT
2790 101b fe 13 9e           SAV8 LDX SAVEX      POINT TO MEMORY ADDRESS
2791 101e a6 00                  LDA A 0,X       GET BYTE
2792 1020 08                     INX
2793 1021 ff 13 9e               STX SAVEX
2794 1024 ce 10 6d               LDX #SAVFCB     POINT TO FCB
2795 1027 8d 39                  BSR PUTBYT
2796 1029 5a                     DEC B           DONE?
2797 102a 26 ef                  BNE SAV8
2798                         *
2799 102c 20 c9                  BRA SAV7        KEEP GOING
2800 102e ce 10 6d           SAV9 LDX #SAVFCB    POINT TO FCB 
2801                         * WRITE OUT LAST RECORD HERE
2802 1031 86 02                  LDA A #$02      HEADER BYTE
2803 1033 8d 2d                  BSR PUTBYT
2804 1035 b6 13 9e               LDA A SAVEX     HIGH-BYTE OF ADDRESS
2805 1038 8d 28                  BSR PUTBYT
2806 103a b6 13 9f               LDA A SAVEX+1   LOW-BYTE OF ADDRESS
2807 103d 8d 23                  BSR PUTBYT
2808 103f 17                     TBA             COUNT
2809 1040 8d 20                  BSR PUTBYT
2810 1042 fe 13 9e           SAV10 LDX SAVEX     POINT TO MEMORY ADDRESS
2811 1045 a6 00                  LDA A 0,X       GET BYTE
2812 1047 08                     INX
2813 1048 ff 13 9e               STX SAVEX
2814 104b ce 10 6d               LDX #SAVFCB     POINT TO FCB
2815 104e 8d 12                  BSR PUTBYT
2816 1050 5a                     DEC B           DONE?
2817 1051 26 ef                  BNE SAV10
2818                         *
2819                             CLOSE           CLOSE SAVE-FILE
2820 1053 3f                 +       SWI
2821 1054 15                 +       FCB 21
2822 1055 6d 05                  TST FCBSTA,X    CHECK STATUS
2823 1057 26 01                  BNE SAVERR      BAD?
2824                         *
2825 1059 39                     RTS             RETURN TO CLI
2826                         *
2827 105a ce 10 6d           SAVERR LDX #SAVFCB
2828                             PRTERR          PRINT ERROR MESSAGE
2829 105d 3f                 +       SWI
2830 105e 1e                 +       FCB 30
2831                             CLOSE           MUST CLOSE FILE
2832 105f 3f                 +       SWI
2833 1060 15                 +       FCB 21
2834 1061 39                     RTS
2835                         *
2836                         PUTBYT WRITE        WRITE BYTE TO FILE
2837 1062 3f                 +       SWI
2838 1063 19                 +       FCB 25
2839 1064 6d 05                  TST FCBSTA,X    CHECK STATUS
2840 1066 27 04                  BEQ PUTB2       GOOD
2841                         *
2842 1068 31                     INS
2843 1069 31                     INS             REMOVE SUB-RETURN
2844 106a 20 ee                  BRA SAVERR      ERROR AND QUIT
2845                         *
2846 106c 39                 PUTB2 RTS           GOOD RETURN
2847                         *
2848 106d                    SAVFCB RMB 2
2849 106f 44 53 4b               FCC 'DSK'
2850 1072                        RMB 2
2851 1074 10 97                  FDB SAVBUF
2852 1076                        RMB 33
2853 1097                    SAVBUF RMB SECSIZ
2854                         *
2855                         * PROCESS 'LOAD' COMMAND
2856                         *
2857                         * LOAD MEMORY FROM BINARY OR COMMAND DISK FILE
2858                         * IF TRANSFER ADDRESS IN FILE (COMMAND TYPE), SAVE IT
2859                         * IN "VALUE" BASE-PAGE LOCATION
2860                         * OTHERWISE, "VALUE"=0
2861                         *
2862 1117 ce 10 6d           LODCMD LDX #SAVFCB  POINT TO FCB
2863                             FMTFCB          FORMAT [DRIVE:] FILE.EXT
2864 111a 3f                 +       SWI
2865 111b 2c                 +       FCB 44
2866                             PRTERR          PRINT ERROR MESSAGES
2867 111c 3f                 +       SWI
2868 111d 1e                 +       FCB 30
2869 111e 6d 05                  TST FCBSTA,X    ERROR?
2870 1120 26 04                  BNE LOD5        IF SO, QUIT
2871                         *
2872                             LOADB           PERFORM LOAD BINARY
2873 1122 3f                 +       SWI
2874 1123 25                 +       FCB 37
2875                             PRTERR          PRINT ERROR MESSAGE
2876 1124 3f                 +       SWI
2877 1125 1e                 +       FCB 30
2878 1126 39                 LOD5 RTS            RETURN TO CLI
2879                         *
2880                         *
2881                         *
2882                         * LOAD-BINARY PROCESSING
2883                         *
2884 1127 7f 00 27           _LOADB CLR VALUE    NO XFER-ADDRESS YET
2885 112a 7f 00 28               CLR VALUE+1
2886 112d 30                     TSX
2887 112e ee 05                  LDX UXH,X       POINT TO FCB
2888 1130 6f 06                  CLR FCBDTT,X    INPUT
2889 1132 6f 29                  CLR FCBSCF,X    NO COMPRESSION
2890 1134 6f 05                  CLR FCBSTA,X    GOOD STATUS
2891                             OPEN            OPEN SAVE-FILE
2892 1136 3f                 +       SWI
2893 1137 14                 +       FCB 20
2894 1138 6d 05                  TST FCBSTA,X    CHECK STATUS
2895 113a 27 01                  BEQ LOADB2      GOOD
2896                         *
2897 113c 39                     RTS             BAD, QUIT
2898                         *
2899 113d a6 1d              LOADB2 LDA A FCBTYP,X   CHECK FILE TYPE
2900 113f 27 22                  BEQ LOADB3      (0) BINARY TYPE, OK
2901                         *
2902 1141 81 01                  CMP A #1        (1) COMMAND TYPE, OK
2903 1143 27 1e                  BEQ LOADB3
2904                         *
2905 1145 ce 11 50               LDX #TYPMSG     FILE-TYPE ERROR
2906                             PRTMSG
2907 1148 3f                 +       SWI
2908 1149 31                 +       FCB 49
2909 114a 30                     TSX
2910 114b ee 05                  LDX UXH,X       POINT TO FCB
2911                             CLOSE           CLOSE FILE
2912 114d 3f                 +       SWI
2913 114e 15                 +       FCB 21
2914 114f 39                     RTS             RETURN
2915                         *
2916 1150 20 49 4c 4c 45 47  TYPMSG FCC ' ILLEGAL FILE-TYPE'
     41 4c 20 46 49 4c
     45 2d 54 59 50 45
2917 1162 0d                     FCB $0D
2918                         *
2919 1163 30                 LOADB3 TSX
2920 1164 ee 05                  LDX UXH,X       POINT TO FCB
2921 1166 8d 39                  BSR GETBYT      GET A BYTE FROM FILE
2922 1168 81 16                  CMP A #$16      XFER-ADDR. MARK?
2923 116a 26 0a                  BNE LOADB4      NO
2924                         *
2925                         * HANDLE TRANSFER ADDRESS HERE
2926                         *
2927 116c 8d 33                  BSR GETBYT      GET ADDRESS-HIGH
2928 116e 97 27                  STA A VALUE
2929 1170 8d 2f                  BSR GETBYT      GET ADDRESS-LOW
2930 1172 97 28                  STA A VALUE+1
2931 1174 20 ed                  BRA LOADB3      GET NEW FRAME
2932                         *
2933 1176 81 02              LOADB4 CMP A #$02   FRAME HEADER MARK?
2934 1178 27 03                  BEQ LOADB5      YES
2935                         *
2936                             CLOSE           CLOSE FILE
2937 117a 3f                 +       SWI
2938 117b 15                 +       FCB 21
2939 117c 39                     RTS             DONE WITH LOAD
2940                         *
2941                         * HANDLE BINARY RECORD HERE
2942                         *
2943 117d 8d 22              LOADB5 BSR GETBYT   GET ADDRESS-HIGH
2944 117f b7 13 9e               STA A SAVEX
2945 1182 8d 1d                  BSR GETBYT      GET ADDRESS-LOW
2946 1184 b7 13 9f               STA A SAVEX+1
2947 1187 8d 18                  BSR GETBYT      GET FRAME COUNT
2948 1189 b7 13 a5               STA A SAVEA
2949                         *
2950 118c 30                 LOADB6 TSX
2951 118d ee 05                  LDX UXH,X       POINT TO FCB
2952 118f 8d 10                  BSR GETBYT      GET DATA BYTE
2953 1191 fe 13 9e               LDX SAVEX       GET ADDRESS
2954 1194 a7 00                  STA A 0,X       STORE DATA BYTE
2955 1196 08                     INX
2956 1197 ff 13 9e               STX SAVEX
2957 119a 7a 13 a5               DEC SAVEA       COUNT DOWN FRAME
2958 119d 26 ed                  BNE LOADB6
2959                         *
2960 119f 20 c2                  BRA LOADB3      GET NEW FRAME
2961                         *
2962                         *
2963                         GETBYT READ         READ BYTE FROM FILE
2964 11a1 3f                 +       SWI
2965 11a2 18                 +       FCB 24
2966 11a3 e6 05                  LDA B FCBSTA,X  CHECK STATUS
2967 11a5 27 0a                  BEQ GETB3       GOOD
2968                         *
2969 11a7 c1 08                  CMP B #8        END-FILE?
2970 11a9 26 02                  BNE GETB2       NO
2971                         *
2972 11ab 6f 05                  CLR FCBSTA,X    END-FILE IS NOT ERROR HERE
2973                         *
2974 11ad 31                 GETB2 INS           REMOVE SUB-RETURN
2975 11ae 31                     INS             (WILL RETURN TO CALL)
2976                             CLOSE           CLOSE FILE
2977 11af 3f                 +       SWI
2978 11b0 15                 +       FCB 21
2979                         *
2980 11b1 39                 GETB3 RTS
2981                         * PROCESS 'RENAME' COMMAND
2982                         *
2983                         * SYNTAX: RENAME [DRIVE:] OLDNAME.EXT, NEWNAME.EXT
2984                         *
2985 11b2 ce 10 6d           RENCMD LDX #SAVFCB  POINT TO FCB
2986 11b5 6f 06                  CLR FCBDTT,X    INPUT
2987                             FMTFCB          FORMAT [DRIVE:] FILE.EXT
2988 11b7 3f                 +       SWI
2989 11b8 2c                 +       FCB 44
2990                             PRTERR          PRINT ERROR MESSAGES
2991 11b9 3f                 +       SWI
2992 11ba 1e                 +       FCB 30
2993 11bb 6d 05                  TST FCBSTA,X    ERROR?
2994 11bd 26 28                  BNE RENAM5      YES, QUIT
2995                         *
2996 11bf bd 16 bf               JSR SFILE       SEARCH DIRECTORY
2997 11c2 ce 07 cd               LDX #SYSFCB     GET DIRECTORY POINTERS
2998 11c5 a6 0a                  LDA A FCBTRK,X  TRACK
2999 11c7 e6 0b                  LDA B FCBSCT,X  SECTOR
3000 11c9 a7 1f                  STA A FCBFTS,X
3001 11cb e7 20                  STA B FCBFTS+1,X
3002 11cd a6 27                  LDA A FCBIND,X  BLOCK POINTER
3003 11cf e6 28                  LDA B FCBIND+1,X
3004 11d1 a7 21                  STA A FCBLTS,X
3005 11d3 e7 22                  STA B FCBLTS+1,X
3006 11d5 ee 27                  LDX FCBIND,X    GET DIRECTORY BLOCK POINTER
3007 11d7 a6 0e                  LDA A FIBACS,X  CHECK ACCESS CODE
3008 11d9 81 02                  CMP A #$02      RENAME-ABLE?
3009 11db 26 03                  BNE *+5         YES
3010                         *
3011 11dd 7e 12 a4               JMP SECERR      NO, ERROR
3012                         *
3013 11e0 ce 10 6d               LDX #SAVFCB
3014 11e3 6d 05                  TST FCBSTA,X    ERROR CHECK
3015 11e5 27 16                  BEQ RENAM6      NO ERROR
3016                         *
3017 11e7 ce 11 ed           RENAM5 LDX #RENMSG  RENAME ERROR
3018                             PRTMSG
3019 11ea 3f                 +       SWI
3020 11eb 31                 +       FCB 49
3021 11ec 39                     RTS
3022                         *
3023 11ed 20 52 45 4e 41 4d  RENMSG FCC ' RENAMING ERROR'
     49 4e 47 20 45 52
     52 4f 52
3024 11fc 00                     FCB $00
3025                         *
3026                         RENAM6 NXTOK        GET TOKEN FROM CLI
3027 11fd 3f                 +       SWI
3028 11fe 2f                 +       FCB 47
3029 11ff 96 26                  LDA A CLASS
3030 1201 81 04                  CMP A #4        DELIMITER?
3031 1203 27 06                  BEQ RENAM8      YES
3032                         *
3033 1205 ce 0b 6b           RENAM7 LDX #FORMAT  NO, FORMAT ERROR
3034                             PRTMSG  
3035 1208 3f                 +       SWI
3036 1209 31                 +       FCB 49
3037 120a 39                     RTS
3038                         *
3039                         RENAM8 NXTOK        GET TOKEN FROM CLI
3040 120b 3f                 +       SWI
3041 120c 2f                 +       FCB 47
3042 120d d6 25                  LDA B RC        CHECK RC
3043 120f c1 01                  CMP B #1        UNAMBIG. NAME?
3044 1211 26 f2                  BNE RENAM7      NO, ERROR
3045                         *
3046 1213 de 20                  LDX DESCRA      GET NAME POINTER
3047 1215 ff 13 9e               STX SAVEX       SAVE IT
3048 1218 96 22                  LDA A DESCRC    GET LENGTH
3049 121a b7 13 a5               STA A SAVEA     SAVE IT
3050                             NXTOK           GET TOKEN FROM CLI
3051 121d 3f                 +       SWI
3052 121e 2f                 +       FCB 47
3053 121f d6 25                  LDA B RC        CHECK RC
3054 1221 c1 2e                  CMP B #'.       PERIOD?
3055 1223 26 e0                  BNE RENAM7      NO, ERROR
3056                         *
3057 1225 7c 13 a5               INC SAVEA       COUNT PERIOD
3058                             NXTOK           GET TOKEN FROM CLI
3059 1228 3f                 +       SWI
3060 1229 2f                 +       FCB 47
3061 122a d6 25                  LDA B RC        CHECK RC
3062 122c c1 01                  CMP B #1        UNAMBIG. NAME?
3063 122e 26 d5                  BNE RENAM7      NO, ERROR
3064                         *
3065 1230 d6 22                  LDA B DESCRC    GET LENGTH OF EXT
3066 1232 fb 13 a5               ADD B SAVEA     TOTAL LENGTH
3067 1235 ce 10 7d               LDX #SAVFCB+FCBNAM  POINT TO NAME FIELD IN FCB
3068                             PSHX
3069 1238 3f                 +       SWI
3070 1239 05                 +       FCB 5
3071 123a fe 13 9e               LDX SAVEX       POINT TO NAME IN CLI
3072                             PSHX
3073 123d 3f                 +       SWI
3074 123e 05                 +       FCB 5
3075                             FMTS            FORMAT NAME INTO FCB
3076 123f 3f                 +       SWI
3077 1240 34                 +       FCB 52
3078 1241 31                     INS
3079 1242 31                     INS             CLEAN STACK
3080 1243 31                     INS
3081 1244 31                     INS
3082 1245 5d                     TST B           ERROR?
3083 1246 26 bd                  BNE RENAM7      YES
3084                         *
3085 1248 ce 10 6d               LDX #SAVFCB
3086 124b bd 16 bf               JSR SFILE       SEARCH DIRECTORY
3087 124e ce 10 6d               LDX #SAVFCB
3088 1251 a6 05                  LDA A FCBSTA,X  CHECK STATUS
3089 1253 26 03                  BNE *+5         NOT FOUND?
3090                         *
3091 1255 7e 12 8e               JMP RENAM9      YES, DUPLICATE NAME
3092                         *
3093 1258 81 01                  CMP A #1        NOT FOUND (GOOD)?
3094 125a 27 03                  BEQ *+5         YES
3095                         *
3096 125c 7e 11 e7           RENM5 JMP RENAM5    NO, ERROR
3097                         *
3098 125f ce 07 cd               LDX #SYSFCB     POINT TO DIRECTORY FCB
3099 1262 6f 05                  CLR FCBSTA,X
3100 1264 a6 1f                  LDA A FCBFTS,X  SET UP TO SAVED T/S
3101 1266 e6 20                  LDA B FCBFTS+1,X
3102 1268 a7 0a                  STA A FCBTRK,X
3103 126a e7 0b                  STA B FCBSCT,X
3104                             IOHDR           READ DIRECTORY SECTOR
3105 126c 3f                 +       SWI
3106 126d 13                 +       FCB 19
3107 126e 4d                     TST A           ERROR?
3108 126f 26 eb                  BNE RENM5       YES
3109                         *
3110 1271 ee 21                  LDX FCBLTS,X    POINT TO OLD NAME IN SECTOR
3111                             PSHX
3112 1273 3f                 +       SWI
3113 1274 05                 +       FCB 5
3114 1275 ce 10 7d               LDX #SAVFCB+FCBNAM  POINT TO NEW NAME
3115                             PSHX
3116 1278 3f                 +       SWI
3117 1279 05                 +       FCB 5
3118 127a c6 0c                  LDA B #12
3119                             MOVC            MOVE NAME INTO DIRECTORY
3120 127c 3f                 +       SWI
3121 127d 11                 +       FCB 17
3122 127e 31                     INS
3123 127f 31                     INS
3124 1280 31                     INS             CLEAN STACK
3125 1281 31                     INS
3126 1282 ce 07 cd               LDX #SYSFCB     POINT TO SYSTEM FCB
3127 1285 86 ff                  LDA A #$FF
3128 1287 a7 06                  STA A FCBDTT,X  MAKE 'OUTPUT'
3129                             IOHDR           WRITE NEW NAME INTO DIRECTORY
3130 1289 3f                 +       SWI
3131 128a 13                 +       FCB 19
3132 128b 6f 06                  CLR FCBDTT,X    MAKE 'INPUT' AGAIN
3133 128d 39                     RTS
3134                         *
3135 128e ce 12 94           RENAM9 LDX #DUPERR  DUPLICATE NAME ERROR
3136                             PRTMSG
3137 1291 3f                 +       SWI
3138 1292 31                 +       FCB 49
3139 1293 39                     RTS
3140                         *
3141 1294 20 44 55 50 4c 49  DUPERR FCC ' DUPLICATE NAME'
     43 41 54 45 20 4e
     41 4d 45
3142 12a3 00                     FCB $00
3143                         *
3144 12a4 ce 12 aa           SECERR LDX #SECURE  SECURITY ERROR
3145                             PRTMSG
3146 12a7 3f                 +       SWI
3147 12a8 31                 +       FCB 49
3148 12a9 39                     RTS
3149                         *
3150 12aa 20 53 45 43 55 52  SECURE FCC ' SECURITY ERROR'
     49 54 59 20 45 52
     52 4f 52
3151 12b9 0d                     FCB $0D
3152                         * PROCESS 'INITIALIZE' COMMAND
3153                         * CALL TRANSIENT FILE TO PROCESS THIS COMMAND
3154                         *
3155                         INICMD NXTOK        GET NEXT TOKEN FROM COMMAND LINE
3156 12ba 3f                 +       SWI
3157 12bb 2f                 +       FCB 47
3158 12bc d6 25                  LDA B RC        CHECK RC
3159 12be c1 03                  CMP B #3        NUMBER?
3160 12c0 27 0c                  BEQ INICD2      YES
3161                         *
3162 12c2 96 26                  LDA A CLASS     CHECK CLASS OF TOKEN
3163 12c4 81 04                  CMP A #4        DELIMITER?
3164 12c6 27 f2                  BEQ INICMD      IF SO, PARSE AGAIN
3165                         *
3166 12c8 ce 0b 6b               LDX #FORMAT     IF NOT, PRINT ERROR MESSAGE
3167                             PRTMSG
3168 12cb 3f                 +       SWI
3169 12cc 31                 +       FCB 49
3170 12cd 39                     RTS             RETURN TO CLI
3171                         *
3172 12ce 7d 00 27           INICD2 TST VALUE    CHECK NUMBER
3173 12d1 26 20                  BNE INIERR      BAD (>255)
3174                         *
3175 12d3 96 28                  LDA A VALUE+1   CHECK NUMBER
3176 12d5 81 03                  CMP A #3        (4 DRIVES)
3177 12d7 22 1a                  BHI INIERR      BAD
3178                         *
3179 12d9 36                     PSH A           SAVE NUMBER
3180 12da ce 12 f9               LDX #INITLN
3181 12dd df 23                  STX CUCHAR      SET UP DUMMY CLI
3182 12df bd 11 17               JSR LODCMD      ISSUE 'LOAD' COMMAND FOR TRANSIENT
3183 12e2 32                     PUL A           RESTORE NUMBER
3184 12e3 ce 10 6d               LDX #SAVFCB
3185 12e6 6d 05                  TST FCBSTA,X    CHECK FOR ERRORS
3186 12e8 26 08                  BNE INICD3      YES, QUIT
3187                         *
3188 12ea de 27                  LDX VALUE       IS THERE XFER-ADDRESS?
3189 12ec 27 04                  BEQ INICD3      NO, QUIT
3190                         *
3191 12ee 97 28                  STA A VALUE+1   PASS DRIVE NO. TO TRANSIENT
3192 12f0 6e 00                  JMP 0,X         START IT UP
3193                         *
3194 12f2 39                 INICD3 RTS          DONE!
3195                         *
3196 12f3 ce 0b 78           INIERR LDX #NUMBER  PRINT ERROR MESSAGE
3197                             PRTMSG
3198 12f6 3f                 +       SWI
3199 12f7 31                 +       FCB 49
3200 12f8 39                     RTS             RETURN TO CLI
3201                         *
3202 12f9 30 3a 49 4e 49 54  INITLN FCC '0:INIT.CMD'
     2e 43 4d 44
3203 1303 0d                     FCB $0D
3204                         * PROCESS 'DIRECTORY' COMMAND
3205                         *
3206 1304 44 49 52 45 43 54  DIRHDR FCC 'DIRECTORY OF DRIVE '
     4f 52 59 20 4f 46
     20 44 52 49 56 45
     20
3207 1317                    DIRDRV RMB 1
3208 1318 0a 0d                  FDB $0A0D
3209                         *
3210 131a 20 20 20 20 4e 41  DIRFLD FCC '    NAME       T   A  FT-FS  LT-LS   NS'
     4d 45 20 20 20 20
     20 20 20 54 20 20
     20 41 20 20 46 54
     2d 46 53 20 20 4c
     54 2d 4c 53 20 20
     20 4e 53
3211 1341 0a 0d                  FDB $0A0D
3212                         *
3213 1343                    DIRLIN RMB 40       DIRECTORY LINE BUFFER
3214 136b 0d                     FCB $0D
3215                         *
3216 136c                    NSEC RMB 2          NUMBER OF SECTORS USED
3217 136e                    BUFLIN RMB 13       STORAGE FOR FORMATTED FILE NAME
3218                         *
3219 137b 2a 2e 2a           ALLFIL FCC '*.*'    DEFAULT FILE NAME
3220                         *
3221 137e 0a                 DIRLN2 FCB $0A
3222 137f                        RMB 5           SPACE FOR COUNT OF SECTORS
3223 1384 2e 20 53 45 43 54      FCC '. SECTORS USED'
     4f 52 53 20 55 53
     45 44
3224 1392 0a 0d                  FDB $0A0D
3225                         *
3226 1394 27 10              KIOK FDB 10000      POWERS-OF-10 TABLE
3227 1396 03 e8                  FDB 1000
3228 1398 00 64                  FDB 100
3229 139a 00 0a                  FDB 10
3230 139c 00 01                  FDB 1
3231                         *
3232 139e                    SAVEX   RMB 2       TEMP. STORAGE
3233 13a0                    SAVEX1  RMB 2
3234 13a2                    TMPX    RMB 2
3235 13a4                    LPTFLG  RMB 1
3236 13a5                    SAVEA   RMB 1
3237                         *
3238                         *
3239                         *
3240 13a6 7f 13 a5           DIRCMD CLR SAVEA    DEFAULT DRIVE=0
3241 13a9 7f 13 a4               CLR LPTFLG      DEFAULT TO CONSOLE
3242 13ac 86 0c                  LDA A #12       DEFAULT NAME HAS 12 CHARS.
3243 13ae b7 13 9e               STA A SAVEX     SAVE IT
3244 13b1 ce 13 6e               LDX #BUFLIN
3245                             PSHX
3246 13b4 3f                 +       SWI
3247 13b5 05                 +       FCB 5
3248 13b6 ce 13 7b               LDX #ALLFIL     DEFAULT FILE NAME=*.*
3249                             PSHX
3250 13b9 3f                 +       SWI
3251 13ba 05                 +       FCB 5
3252 13bb c6 03                  LDA B #3
3253                             FMTS            FORMAT *.* INTO BUFLIN
3254 13bd 3f                 +       SWI
3255 13be 34                 +       FCB 52
3256 13bf 31                     INS
3257 13c0 31                     INS             CLEAN STACK
3258 13c1 31                     INS
3259 13c2 31                     INS
3260                         DIRCD0 NXTOK        GET TOKEN FROM CLI
3261 13c3 3f                 +       SWI
3262 13c4 2f                 +       FCB 47
3263 13c5 d6 25                  LDA B RC        CHECK RC
3264 13c7 c1 0d                  CMP B #$0D      END OF LINE?
3265 13c9 26 03                  BNE *+5         NO
3266                         *
3267 13cb 7e 14 55               JMP DIRCD3      YES, USE DEFAULTS
3268                         *
3269 13ce c1 2f                  CMP B #'/       SWITCH INDICATOR?
3270 13d0 26 0f                  BNE DIRCD1      NO
3271                         *
3272                             NXTOK           GET SWITCH
3273 13d2 3f                 +       SWI
3274 13d3 2f                 +       FCB 47
3275 13d4 de 20                  LDX DESCRA
3276 13d6 a6 00                  LDA A 0,X
3277 13d8 81 4c                  CMP A #'L       LINE-PRINTER ('L')?
3278 13da 26 37                  BNE DIR3        NO, FORMAT ERROR
3279 13dc 7c 13 a4               INC LPTFLG      YES, SET FLAG
3280 13df 20 e2                  BRA DIRCD0      GET NEW TOKEN
3281                         *
3282 13e1 c1 03              DIRCD1 CMP B #3     TOKEN=NUMBER?
3283 13e3 26 26                  BNE DIR2        NO
3284                         *
3285 13e5 7d 00 27               TST VALUE       CHECK FOR VALID DRIVE NO.
3286 13e8 26 0b                  BNE DIR1        BAD?
3287                         *
3288 13ea 96 28                  LDA A VALUE+1   CHECK DRIVE NO.
3289 13ec 81 03                  CMP A #3        DRIVE NO. 0,1,2,3
3290 13ee 22 05                  BHI DIR1        BAD?
3291                         *
3292 13f0 b7 13 a5               STA A SAVEA     SAVE DRIVE NO.
3293 13f3 20 06                  BRA DIR1A
3294                         *
3295 13f5 ce 0b 78           DIR1 LDX #NUMBER    NUMBER ERROR
3296                             PRTMSG
3297 13f8 3f                 +       SWI
3298 13f9 31                 +       FCB 49
3299 13fa 39                     RTS             RETURN TO CLI
3300                         DIR1A NXTOK         GET NEXT TOKEN FROM CLI
3301 13fb 3f                 +       SWI
3302 13fc 2f                 +       FCB 47
3303 13fd d6 25                  LDA B RC        CHECK RC
3304 13ff c1 0d                  CMP B #$0D      END OF LINE?
3305 1401 27 52                  BEQ DIRCD3      YES, USE DEFAULT FILE NAME
3306                         *
3307 1403 c1 3a                  CMP B #':       COLON?
3308 1405 26 ee                  BNE DIR1        IF NOT, BAD DRIVE NO.
3309                         *
3310                             NXTOK           GET NEXT TOKEN FROM CLI
3311 1407 3f                 +       SWI
3312 1408 2f                 +       FCB 47
3313 1409 d6 25                  LDA B RC        CHECK RC
3314                         *
3315 140b c1 01              DIR2 CMP B #1       NAME?
3316 140d 27 0a                  BEQ DIR4        YES
3317                         *
3318 140f d1 02                  CMP B 2         WILD-CARD NAME?
3319 1411 27 06                  BEQ DIR4        YES
3320                         *
3321 1413 ce 0b 6b           DIR3 LDX #FORMAT    OTHERWISE FORMAT ERROR
3322                             PRTMSG
3323 1416 3f                 +       SWI
3324 1417 31                 +       FCB 49
3325 1418 39                     RTS             RETURN TO CLI
3326                         *
3327 1419 de 20              DIR4 LDX DESCRA     POINT TO NAME
3328 141b ff 13 a0               STX SAVEX1      SAVE POINTER
3329 141e 96 22                  LDA A DESCRC    GET LENGTH
3330 1420 b7 13 9e               STA A SAVEX     SAVE IT
3331                             NXTOK           GET NEXT TOKEN FROM CLI
3332 1423 3f                 +       SWI
3333 1424 2f                 +       FCB 47
3334 1425 d6 25                  LDA B RC        CHECK RC
3335 1427 c1 2e                  CMP B #'.       PERIOD?
3336 1429 26 e8                  BNE DIR3        NO, ERROR
3337                         *
3338 142b 7c 13 9e           DIR5 INC SAVEX      COUNT PERIOD
3339                             NXTOK           GET NEXT TOKEN FROM CLI
3340 142e 3f                 +       SWI
3341 142f 2f                 +       FCB 47
3342 1430 d6 25                  LDA B RC        CHECK RC
3343 1432 c1 01                  CMP B #1        NAME?
3344 1434 27 06                  BEQ DIR6        YES
3345                         *
3346 1436 d1 02                  CMP B 2         WILD-CARD NAME?
3347 1438 27 02                  BEQ DIR6        YES
3348                         *
3349 143a 20 d7                  BRA DIR3        FORMAT ERROR
3350                         *
3351 143c d6 22              DIR6 LDA B DESCRC
3352 143e fb 13 9e               ADD B SAVEX     GET TOTAL LENGTH
3353 1441 ce 13 6e               LDX #BUFLIN
3354                             PSHX
3355 1444 3f                 +       SWI
3356 1445 05                 +       FCB 5
3357 1446 fe 13 a0               LDX SAVEX1
3358                             PSHX
3359 1449 3f                 +       SWI
3360 144a 05                 +       FCB 5
3361                             FMTS            FORMAT NAME INTO BUFLIN
3362 144b 3f                 +       SWI
3363 144c 34                 +       FCB 52
3364 144d 31                     INS
3365 144e 31                     INS             CLEAN STACK
3366 144f 31                     INS
3367 1450 31                     INS
3368 1451 d1 02                  CMP B 2         BAD NAME?
3369 1453 27 be                  BEQ DIR3        FORMAT ERROR
3370                         *
3371 1455 7f 13 6c           DIRCD3 CLR NSEC
3372 1458 7f 13 6d               CLR NSEC+1      NO USED SECTORS YET
3373 145b 7d 13 a4               TST LPTFLG      WANT LINE-PRINTER?
3374 145e 27 0f                  BEQ DIR7        NO
3375                         *
3376 1460 ce 0a 59               LDX #CONRCB     MAKE CONSOLE INTO 'LPT'
3377 1463 86 4c                  LDA A #'L
3378 1465 a7 02                  STA A RCBGDT,X
3379 1467 86 50                  LDA A #'P
3380 1469 a7 03                  STA A RCBGDT+1,X
3381 146b 86 54                  LDA A #'T
3382 146d a7 04                  STA A RCBGDT+2,X
3383                         *
3384 146f b6 13 a5           DIR7 LDA A SAVEA    GET DRIVE NO.
3385 1472 8b 30                  ADD A #$30      MAKE ASCII
3386 1474 b7 13 17               STA A DIRDRV
3387 1477 ce 13 04               LDX #DIRHDR     PRINT HEADER LINE 1
3388                             PRTMSG
3389 147a 3f                 +       SWI
3390 147b 31                 +       FCB 49
3391 147c ce 13 1a               LDX #DIRFLD     PRINT HEADER LINE 2
3392                             PRTMSG
3393 147f 3f                 +       SWI
3394 1480 31                 +       FCB 49
3395 1481 ce 07 cd               LDX #SYSFCB     POINT TO SYSTEM FCB
3396                             TXAB
3397 1484 3f                 +       SWI
3398 1485 02                 +       FCB 2
3399 1486 ce 07 f7               LDX #BUFFER     PUT BUFFER ADDRESS IN
3400                             XABX
3401 1489 3f                 +       SWI
3402 148a 04                 +       FCB 4
3403 148b a7 07                  STA A FCBDBA,X
3404 148d e7 08                  STA B FCBDBA+1,X
3405 148f b6 13 a5               LDA A SAVEA
3406 1492 a7 09                  STA A FCBDRV,X  PUT DRIVE NO. IN
3407                             OPEND           OPEN DIRECTORY
3408 1494 3f                 +       SWI
3409 1495 17                 +       FCB 23
3410                         *
3411 1496 a6 05              DIRCD4 LDA A FCBSTA,X   CHECK STATUS
3412 1498 27 4b                  BEQ DIRLST      VALID ENTRY?
3413                         *
3414 149a 81 01                  CMP A #1        END-OF-DIRECTORY?
3415 149c 26 44                  BNE DIRERR      IF NOT, ERROR
3416                         *
3417 149e b6 13 6c               LDA A NSEC      OUTPUT NUMBER OF SECTORS USED
3418 14a1 f6 13 6d               LDA B NSEC+1
3419 14a4 ce 13 7f               LDX #DIRLN2+1
3420                         *
3421                         * CONVERT BINARY (16 BITS) TO 5 DECIMAL CHARS.
3422                         * (A,B)=BINARY VALUE
3423                         * (X)= ADDRESS TO PLACE CHARS IN ASCII
3424                         *
3425 14a7 ff 13 9e           CVBTD STX SAVEX     SAVE DATA POINTER
3426 14aa ce 13 94               LDX #KIOK       POINT TO CONSTANT TABLE
3427 14ad 7f 13 a5           CVDEC1 CLR SAVEA    INIT. CHAR
3428 14b0 e0 01              CVDEC2 SUB B 1,X
3429 14b2 a2 00                  SBC A 0,X
3430 14b4 25 05                  BCS CVDEC5      OVERFLOW?
3431                         *
3432 14b6 7c 13 a5               INC SAVEA       NO, BUMP CHAR.
3433 14b9 20 f5                  BRA CVDEC2
3434                         *
3435 14bb eb 01              CVDEC5 ADD B 1,X    RESTORE PARTIAL RESULT
3436 14bd a9 00                  ADC A 0,X
3437 14bf 36                     PSH A
3438 14c0 ff 13 a0               STX SAVEX1      SAVE REGISTERS
3439 14c3 fe 13 9e               LDX SAVEX       GET POINTER
3440 14c6 b6 13 a5               LDA A SAVEA     GET CHAR.
3441 14c9 8b 30                  ADD A #$30      MAKE ASCII
3442 14cb a7 00                  STA A 0,X       STORE CHAR.
3443 14cd 32                     PUL A
3444 14ce 08                     INX
3445 14cf ff 13 9e               STX SAVEX       SAVE POINTER
3446 14d2 fe 13 a0               LDX SAVEX1      RECOVER REGISTER
3447 14d5 08                     INX             MOVE TO NEXT TABLE ENTRY
3448 14d6 08                     INX
3449 14d7 8c 13 9e               CPX #KIOK+10    DONE?
3450 14da 26 d1                  BNE CVDEC1      NO
3451                         *
3452 14dc ce 13 7e               LDX #DIRLN2     PRINT END LINE
3453                             PRTMSG
3454 14df 3f                 +       SWI
3455 14e0 31                 +       FCB 49
3456 14e1 39                     RTS             DONE!!.
3457                         *
3458                         DIRERR PRTERR       PRINT ERROR MESSAGE
3459 14e2 3f                 +       SWI
3460 14e3 1e                 +       FCB 30
3461 14e4 39                     RTS             RETURN TO CLI
3462                         *
3463                         * OUTPUT FORMATTED DIRECTORY RECORD HERE
3464                         *
3465 14e5 ee 27              DIRLST LDX FCBIND,X GET FIRST CHAR. OF BLOCK
3466 14e7 a6 00                  LDA A 0,X
3467 14e9 81 20                  CMP A #$20      FIRST CHAR=BLANK?
3468 14eb 26 03                  BNE *+5         NO
3469                         *
3470 14ed 7e 15 f2               JMP DIRNXT      GET NEXT ENTRY
3471                         *
3472                             PSHX
3473 14f0 3f                 +       SWI
3474 14f1 05                 +       FCB 5
3475 14f2 ce 13 6e               LDX #BUFLIN
3476                             PSHX
3477 14f5 3f                 +       SWI
3478 14f6 05                 +       FCB 5
3479 14f7 c6 0c                  LDA B #12
3480                             CMWC            COMPARE NAMES (WITH WILD-CARDS)
3481 14f9 3f                 +       SWI
3482 14fa 35                 +       FCB 53
3483 14fb 31                     INS
3484 14fc 31                     INS
3485 14fd 31                     INS
3486 14fe 31                     INS
3487 14ff 27 03                  BEQ *+5         NAMES MATCH
3488                         *
3489 1501 7e 15 f2               JMP DIRNXT      NO MATCH, GET NEXT NAME
3490                         *
3491 1504 ce 13 6a               LDX #DIRLIN+39
3492 1507 c6 20                  LDA B #$20      BLANK OUT DIRECTORY LINE
3493 1509 86 27                  LDA A #39
3494 150b e7 00              DIRCD5 STA B 0,X
3495 150d 09                     DEX
3496 150e 4a                     DEC A
3497 150f 26 fa                  BNE DIRCD5
3498                         *
3499                             PSHX            STACK 'TO' ADDRESS
3500 1511 3f                 +       SWI
3501 1512 05                 +       FCB 5
3502 1513 ce 07 cd               LDX #SYSFCB
3503 1516 ee 27                  LDX FCBIND,X
3504                             PSHX            STACK 'FROM' ADDRESS
3505 1518 3f                 +       SWI
3506 1519 05                 +       FCB 5
3507 151a c6 0c                  LDA B #12       SET UP FOR MOVE (FROM DATA BLOCK)
3508                             MOVC            TO DIRECTORY LINE, 12 CHARACTER
3509 151c 3f                 +       SWI
3510 151d 11                 +       FCB 17
3511                             PULX
3512 151e 3f                 +       SWI
3513 151f 06                 +       FCB 6
3514                             PULX            RECOVER LINE POINTER
3515 1520 3f                 +       SWI
3516 1521 06                 +       FCB 6
3517 1522 08                     INX
3518 1523 08                     INX
3519 1524 08                     INX             POINT TO LINE (15)
3520                             PSHX
3521 1525 3f                 +       SWI
3522 1526 05                 +       FCB 5
3523 1527 ce 07 cd               LDX #SYSFCB     POINT TO FCB
3524 152a ee 27                  LDX FCBIND,X    POINT TO DATA BLOCK
3525 152c a6 0d                  LDA A FIBTYP,X  GET FILE TYPE
3526 152e 16                     TAB
3527 152f bd 15 fa               JSR OUTHL       CONVERT TO ASCII
3528                             PULX
3529 1532 3f                 +       SWI
3530 1533 06                 +       FCB 6
3531 1534 a7 00                  STA A 0,X       PUT INTO LINE
3532 1536 08                     INX
3533 1537 17                     TBA
3534 1538 bd 15 fe               JSR OUTHR
3535 153b a7 00                  STA A 0,X
3536 153d 08                     INX
3537 153e 08                     INX
3538 153f 08                     INX             POINT TO LINE (19)
3539                             PSHX
3540 1540 3f                 +       SWI
3541 1541 05                 +       FCB 5
3542 1542 ce 07 cd               LDX #SYSFCB
3543 1545 ee 27                  LDX FCBIND,X
3544 1547 a6 0e                  LDA A FIBACS,X  GET FILE ACCESS CODE
3545 1549 16                     TAB
3546 154a bd 15 fa               JSR OUTHL       CONVERT TO ASCII
3547                             PULX
3548 154d 3f                 +       SWI
3549 154e 06                 +       FCB 6
3550 154f a7 00                  STA A 0,X       PUT INTO LINE
3551 1551 08                     INX
3552 1552 17                     TBA
3553 1553 bd 15 fe               JSR OUTHR
3554 1556 a7 00                  STA A 0,X
3555 1558 08                     INX
3556 1559 08                     INX
3557 155a 08                     INX             POINT TO LINE (23)
3558                             PSHX
3559 155b 3f                 +       SWI
3560 155c 05                 +       FCB 5
3561 155d ce 07 cd               LDX #SYSFCB
3562 1560 ee 27                  LDX FCBIND,X
3563 1562 a6 0f                  LDA A FIBFTS,X  GET FIRST TRACK
3564 1564 16                     TAB
3565 1565 bd 15 fa               JSR OUTHL       CONVERT HIGH NIBBLE
3566                             PULX
3567 1568 3f                 +       SWI
3568 1569 06                 +       FCB 6
3569 156a a7 00                  STA A 0,X       PUT INTO LINE
3570 156c 08                     INX             POINT TO LINE (24)
3571 156d 17                     TBA
3572 156e bd 15 fe               JSR OUTHR       CONVERT LOW NIBBLE
3573 1571 a7 00                  STA A 0,X       PUT INTO LINE
3574 1573 08                     INX
3575 1574 08                     INX             POINT TO LINE (26)
3576                             PSHX
3577 1575 3f                 +       SWI
3578 1576 05                 +       FCB 5
3579 1577 ce 07 cd               LDX #SYSFCB
3580 157a ee 27                  LDX FCBIND,X
3581 157c a6 10                  LDA A FIBFTS+1,X    GET FIRST SECTOR
3582 157e 16                     TAB
3583 157f bd 15 fa               JSR OUTHL       CONVERT HIGH NIBBLE
3584                             PULX
3585 1582 3f                 +       SWI
3586 1583 06                 +       FCB 6
3587 1584 a7 00                  STA A 0,X       PUT INTO LINE
3588 1586 08                     INX             POINT TO LINE (27)
3589 1587 17                     TBA
3590 1588 bd 15 fe               JSR OUTHR       CONVERT LOW NIBBLE
3591 158b a7 00                  STA A 0,X       PUT INTO LINE
3592 158d 08                     INX
3593 158e 08                     INX
3594 158f 08                     INX             POINT TO LINE (30)
3595                             PSHX
3596 1590 3f                 +       SWI
3597 1591 05                 +       FCB 5
3598 1592 ce 07 cd               LDX #SYSFCB
3599 1595 ee 27                  LDX FCBIND,X
3600 1597 a6 11                  LDA A FIBLTS,X  GET LAST TRACK
3601 1599 16                     TAB
3602 159a 8d 5e                  BSR OUTHL       CONVERT HIGH NIBBLE
3603                             PULX
3604 159c 3f                 +       SWI
3605 159d 06                 +       FCB 6
3606 159e a7 00                  STA A 0,X       PUT INTO LINE
3607 15a0 08                     INX             POINT TO LINE (31)
3608 15a1 17                     TBA
3609 15a2 8d 5a                  BSR OUTHR       CONVERT LOW NIBBLE
3610 15a4 a7 00                  STA A 0,X       PUT INTO LINE
3611 15a6 08                     INX
3612 15a7 08                     INX             POINT TO LINE (33)
3613                             PSHX
3614 15a8 3f                 +       SWI
3615 15a9 05                 +       FCB 5
3616 15aa ce 07 cd               LDX #SYSFCB
3617 15ad ee 27                  LDX FCBIND,X
3618 15af a6 12                  LDA A FIBLTS+1,X    GET LAST SECTOR
3619 15b1 16                     TAB
3620 15b2 8d 46                  BSR OUTHL       CONVERT HIGH NIBBLE
3621                             PULX
3622 15b4 3f                 +       SWI
3623 15b5 06                 +       FCB 6
3624 15b6 a7 00                  STA A 0,X       PUT INTO LINE
3625 15b8 08                     INX             POINT TO LINE (34)
3626 15b9 17                     TBA
3627 15ba 8d 42                  BSR OUTHR       CONVERT LOW NIBBLE
3628 15bc a7 00                  STA A 0,X       PUT INTO LINE
3629 15be 08                     INX
3630 15bf 08                     INX
3631 15c0 08                     INX             POINT TO LINE (37)
3632                             PSHX
3633 15c1 3f                 +       SWI
3634 15c2 05                 +       FCB 5
3635 15c3 ce 07 cd               LDX #SYSFCB
3636 15c6 ee 27                  LDX FCBIND,X
3637 15c8 ee 13                  LDX FIBNMS,X    GET SECTOR COUNT
3638                             TXAB
3639 15ca 3f                 +       SWI
3640 15cb 02                 +       FCB 2
3641 15cc fe 13 6c               LDX NSEC
3642                             ADDABX          ADD NSEC TO COUNT
3643 15cf 3f                 +       SWI
3644 15d0 08                 +       FCB 8
3645 15d1 ff 13 6c               STX NSEC
3646                             PULX
3647 15d4 3f                 +       SWI
3648 15d5 06                 +       FCB 6
3649 15d6 36                     PSH A           SAVE 'A'
3650 15d7 8d 21                  BSR OUTHL       CONVERT HIGH NIBBLE
3651 15d9 a7 00                  STA A 0,X       PUT INTO LINE
3652 15db 08                     INX             POINT TO LINE (38)
3653 15dc 32                     PUL A           RESTORE 'A'
3654 15dd 8d 1f                  BSR OUTHR       CONVERT LOW NIBBLE
3655 15df a7 00                  STA A 0,X       PUT INTO LINE
3656 15e1 08                     INX             POINT TO LINE (39)
3657 15e2 17                     TBA
3658 15e3 8d 15                  BSR OUTHL       CONVERT HIGH NIBBLE (LOW BYTE)
3659 15e5 a7 00                  STA A 0,X       PUT INTO LINE
3660 15e7 08                     INX             POINT TO LINE (40)
3661 15e8 17                     TBA
3662 15e9 8d 13                  BSR OUTHR       CONVERT LOW NIBBLE (LOW BYTE)
3663 15eb a7 00                  STA A 0,X       PUT INTO LINE
3664 15ed ce 13 43               LDX #DIRLIN     PRINT LINE OF DIRECTORY
3665                             PRTMSG
3666 15f0 3f                 +       SWI
3667 15f1 31                 +       FCB 49
3668                         *
3669 15f2 ce 07 cd           DIRNXT LDX #SYSFCB  POINT TO FCB
3670                             GETDR           GET NEW DIRECTORY BLOCK
3671 15f5 3f                 +       SWI
3672 15f6 1a                 +       FCB 26
3673 15f7 7e 14 96               JMP DIRCD4      CONTINUE
3674                         *
3675 15fa 44                 OUTHL LSR A         CONVERT LEFT NIBBLE TO ASCII
3676 15fb 44                     LSR A
3677 15fc 44                     LSR A
3678 15fd 44                     LSR A
3679                         *
3680 15fe 84 0f              OUTHR AND A #$0F    CONVERT RIGHT NIBBLE TO ASCII
3681 1600 8b 30                  ADD A #$30
3682 1602 81 39                  CMP A #$39
3683 1604 23 02                  BLS *+4
3684                         *
3685 1606 8b 07                  ADD A #$07
3686                         *
3687 1608 39                     RTS
3688                         *
3689                         * LOAD AND RUN A TRANSIENT FILE
3690                         * INDEX (STACKED) POINTS TO FCB WITH FILENAME AND DRIVE
3691                         *
3692 1609 ce 10 6d           _CHAIN LDX #SAVFCB  MOVE DATA TO SYSTEM FCB
3693                             PSHX
3694 160c 3f                 +       SWI
3695 160d 05                 +       FCB 5
3696 160e 30                     TSX
3697 160f ee 07                  LDX UXH+2,X     PASSED FCB ADDRESS
3698                             PSHX
3699 1611 3f                 +       SWI
3700 1612 05                 +       FCB 5
3701 1613 c6 1e                  LDA B #30       MOVE 30 CHARACTERS
3702                             MOVC
3703 1615 3f                 +       SWI
3704 1616 11                 +       FCB 17
3705 1617 31                     INS
3706 1618 31                     INS             CLEAN STACK
3707 1619 31                     INS
3708 161a 31                     INS
3709 161b ce 10 6d               LDX #SAVFCB
3710                             TXAB
3711 161e 3f                 +       SWI
3712 161f 02                 +       FCB 2
3713 1620 ce 10 97               LDX #SAVBUF     USE SYSTEM BUFFER
3714                             XABX
3715 1623 3f                 +       SWI
3716 1624 04                 +       FCB 4
3717 1625 a7 07                  STA A FCBDBA,X
3718 1627 e7 08                  STA B FCBDBA+1,X
3719 1629 6f 05                  CLR FCBSTA,X
3720                             LOADB           LOAD BINARY FILE
3721 162b 3f                 +       SWI
3722 162c 25                 +       FCB 37
3723 162d 6d 05                  TST FCBSTA,X    CHECK STATUS
3724 162f 26 0f                  BNE CHANER      ERROR?
3725                         *
3726 1631 de 27                  LDX VALUE       TRANSFER ADDRESS?
3727 1633 27 0b                  BEQ CHANER      IF NOT, ERROR
3728                         *
3729 1635 31                     INS
3730 1636 31                     INS
3731 1637 31                     INS             CLEAN STACK (9 BYTES)
3732 1638 31                     INS
3733 1639 31                     INS             7 BYTES FROM SWI
3734 163a 31                     INS             2 BYTES FROM JSR
3735 163b 31                     INS
3736 163c 31                     INS
3737 163d 31                     INS
3738 163e 6e 00                  JMP 0,X         GO TO TRANS. ADDRESS
3739                         *
3740 1640 ce 16 78           CHANER LDX #CHANME  CHAIN ERROR
3741                             PSHX
3742 1643 3f                 +       SWI
3743 1644 05                 +       FCB 5
3744 1645 ce 10 7d               LDX #SAVFCB+FCBNAM  NAME OF FILE
3745                             PSHX
3746 1648 3f                 +       SWI
3747 1649 05                 +       FCB 5
3748 164a c6 0c                  LDA B #12       12 CHARACTERS
3749                             MOVC
3750 164c 3f                 +       SWI
3751 164d 11                 +       FCB 17
3752 164e 31                     INS
3753 164f 31                     INS             CLEAN STACK
3754 1650 31                     INS
3755 1651 31                     INS
3756 1652 ce 16 66               LDX #CHANLN
3757                             PRTMSG
3758 1655 3f                 +       SWI
3759 1656 31                 +       FCB 49
3760 1657 31                     INS
3761 1658 31                     INS
3762 1659 31                     INS
3763 165a 31                     INS             CLEAN STACK (SWI+JSR)
3764 165b 31                     INS
3765 165c 31                     INS
3766 165d 31                     INS
3767 165e 31                     INS
3768 165f 31                     INS
3769 1660 ce 10 6d               LDX #SAVFCB
3770                             CLOSE           CLOSE FILE
3771 1663 3f                 +       SWI
3772 1664 15                 +       FCB 21
3773 1665 39                     RTS             QUIT--WILL GO TO CLI
3774                         *
3775 1666 20 55 4e 41 42 4c  CHANLN FCC ' UNABLE TO CHAIN: '
     45 20 54 4f 20 43
     48 41 49 4e 3a 20
3776 1678                    CHANME RMB 12
3777 1684 0a 0d                  FDB $0A0D
3778                         * SEARCH DIRECTORY FILE FOR EMPTY SLOT
3779                         * USES SYSTEM FCB AND BUFFER
3780                         * PASS DRIVE NO. IN 'A' REGISTER
3781                         * RETURNS TRACK, SECTOR OF SLOT IN FCBTRK,FCBSCT
3782                         * RETURNS ADDRESS OF DIR. SLOT IN FCBIND
3783                         * RETURNS ERROR STATUS IN FCBSTA
3784                         *   0=FOUND SLOT
3785                         *   1=NO AVAILABLE SLOT
3786                         * OTHERWISE = ERROR VALUE
3787                         *
3788                         * DISK ATTRIBUTES:
3789                         *
3790 001a                    TRKSIZ EQU 26       26 SECTORS/TRACK
3791                         *
3792 1686 ce 07 cd           SEMPTY LDX #SYSFCB  POINT TO SYSTEM FCB
3793 1689 a7 09                  STA A FCBDRV,X  SET DRIVE NO.
3794                             TXAB
3795 168b 3f                 +       SWI
3796 168c 02                 +       FCB 2
3797 168d ce 07 f7               LDX #BUFFER     SET BUFFER ADDRESS
3798                             XABX
3799 1690 3f                 +       SWI
3800 1691 04                 +       FCB 4
3801 1692 a7 07                  STA A FCBDBA,X
3802 1694 e7 08                  STA B FCBDBA+1,X
3803 1696 6f 05                  CLR FCBSTA,X    INIT. STATUS
3804                             OPEND           OPEN DIRECTORY
3805 1698 3f                 +       SWI
3806 1699 17                 +       FCB 23
3807                         *
3808 169a a6 05              SEMPT2 LDA A FCBSTA,X   CHECK STATUS
3809 169c 27 07                  BEQ SEMPT3      STATUS O.K.
3810                         *
3811 169e 81 01                  CMP A #1        END-DIRECTORY?
3812 16a0 27 13                  BEQ SEMPT4      YES
3813                         *
3814 16a2 7e 14 e2               JMP DIRERR      OTHERWISE ERROR
3815                         *
3816 16a5 ee 27              SEMPT3 LDX FCBIND,X
3817 16a7 a6 00                  LDA A 0,X       CHECK FIRST CHAR. OF SLOT
3818 16a9 81 20                  CMP A #$20      BLANK?
3819 16ab 26 01                  BNE *+3         NO
3820                         *
3821 16ad 39                     RTS             YES, FOUND EMPTY SLOT
3822                         *
3823 16ae ce 07 cd               LDX #SYSFCB     POINT TO FCB
3824                             GETDR           GET NEXT DIR. BLOCK
3825 16b1 3f                 +       SWI
3826 16b2 1a                 +       FCB 26
3827 16b3 20 e5                  BRA SEMPT2      KEEP LOOKING FOR EMPTY
3828 16b5 a6 0b              SEMPT4 LDA A FCBSCT,X
3829 16b7 81 1a                  CMP A #TRKSIZ   END OF TRACK?
3830 16b9 26 01                  BNE *+3         NO, FOUND EMPTY
3831                         *
3832 16bb 39                     RTS             YES, OUT OF SPACE
3833                         *
3834 16bc 6f 05                  CLR FCBSTA,X    RETURN GOOD STATUS
3835 16be 39                     RTS
3836                         *
3837                         * SEARCH DIRECTORY FOR UNAMBIGUOUS FILE REFERENCE
3838                         * PASS IN INDEX REGISTER THE ADDRESS OF AN FCB
3839                         * CONTAINING DESIRED FILE NAME AND DRIVE NO.
3840                         * RETURNS ADDRESS OF DIRECTORY BLOCK IN FCBIND
3841                         * RETURNS STATUS IN FCBSTA
3842                         *   0=FOUND FILE
3843                         *   1=FILE NOT FOUND
3844                         * OTHERWISE=ERROR CODE
3845                         *
3846                         SFILE PSHX          SAVE FCB ADDRESS
3847 16bf 3f                 +       SWI
3848 16c0 05                 +       FCB 5
3849 16c1 a6 09                  LDA A FCBDRV,X  GET DRIVE NO.
3850 16c3 ce 07 cd               LDX #SYSFCB
3851 16c6 a7 09                  STA A FCBDRV,X  PUT INTO SYSTEM FCB
3852                             TXAB
3853 16c8 3f                 +       SWI
3854 16c9 02                 +       FCB 2
3855 16ca ce 07 f7               LDX #BUFFER     PROVIDE A BUFFER ADDRESS
3856                             XABX
3857 16cd 3f                 +       SWI
3858 16ce 04                 +       FCB 4
3859 16cf a7 07                  STA A FCBDBA,X
3860 16d1 e7 08                  STA B FCBDBA+1,X
3861 16d3 6f 05                  CLR FCBSTA,X    INIT. STATUS
3862                             OPEND           OPEN THE DIRECTORY ON DRIVE
3863 16d5 3f                 +       SWI
3864 16d6 17                 +       FCB 23
3865                         *
3866 16d7 a6 05              SFILE2 LDA A FCBSTA,X   CHECK STATUS
3867 16d9 27 0b                  BEQ SFILE3      STATUS OK?
3868                         *
3869 16db 81 01                  CMP A #1        END OF DIRECTORY?
3870 16dd 27 3b                  BEQ SFILE5      YES
3871                         *
3872                             PULX
3873 16df 3f                 +       SWI
3874 16e0 06                 +       FCB 6
3875 16e1 a7 05                  STA A FCBSTA,X  NO, ERROR STATUS
3876 16e3 7e 14 e2               JMP DIRERR      ISSUE ERROR MESSAGE
3877                         *
3878 16e6 ee 27              SFILE3 LDX FCBIND,X
3879 16e8 a6 00                  LDA A 0,X       CHECK DIRECTORY BLOCK
3880 16ea 81 20                  CMP A #$20      FIRST CHAR. OF NAME=BLANK?
3881 16ec 26 07                  BNE SFILE4
3882                         *
3883 16ee ce 07 cd           SFNEXT LDX #SYSFCB  POINT TO SYSTEM FCB
3884                             GETDR           GET NEXT DIRECTORY BLOCK
3885 16f1 3f                 +       SWI
3886 16f2 1a                 +       FCB 26
3887 16f3 20 e2                  BRA SFILE2      KEEP SEARCHING
3888                         *
3889                         SFILE4 PSHX         STACK DIRECTORY NAME ADDRESS
3890 16f5 3f                 +       SWI
3891 16f6 05                 +       FCB 5
3892 16f7 30                     TSX
3893 16f8 ee 02                  LDX 2,X         POINT TO SAVED FCB ADDRESS
3894 16fa 86 10                  LDA A #FCBNAM
3895                             ADDAX           POINT TO NAME FIELD IN FCB
3896 16fc 3f                 +       SWI
3897 16fd 09                 +       FCB 9
3898                             PSHX            STACK SEARCH NAME ADDRESS
3899 16fe 3f                 +       SWI
3900 16ff 05                 +       FCB 5
3901 1700 c6 0c                  LDA B #12       12 CHARACTER COMPARISON
3902                             CMPC            COMPARE NAMES
3903 1702 3f                 +       SWI
3904 1703 12                 +       FCB 18
3905 1704 31                     INS             CLEAN STACK
3906 1705 31                     INS
3907 1706 31                     INS
3908 1707 31                     INS
3909 1708 26 e4                  BNE SFNEXT      NO MATCH, KEEP LOOKING
3910                         *
3911 170a ce 07 cd           SFOUND LDX #SYSFCB
3912 170d ee 27                  LDX FCBIND,X    RECOVER DIR. BLOCK ADDRESS
3913                             TXAB
3914 170f 3f                 +       SWI
3915 1710 02                 +       FCB 2
3916                             PULX            RECOVER FCB ADDRESS
3917 1711 3f                 +       SWI
3918 1712 06                 +       FCB 6
3919 1713 a7 27                  STA A FCBIND,X
3920 1715 e7 28                  STA B FCBIND+1,X
3921 1717 6f 05                  CLR FCBSTA,X    GOOD STATUS
3922 1719 39                     RTS             RETURN TO CLI
3923                         *
3924                         SFILE5 PULX         RECOVER 'X'
3925 171a 3f                 +       SWI
3926 171b 06                 +       FCB 6
3927 171c a7 05                  STA A FCBSTA,X  RETURN STATUS
3928 171e 39                     RTS
3929                         *
3930                         * DELETE A FILE FROM DISK
3931                         * INDEX (STACKED) POINTS TO FCB WITH FILENAME AND DRIVE NO.
3932                         * RETURN ERROR STATUS IN FCBSTA
3933                         * CHECK ACCESS CODE FOR PROTECTION ERRORS
3934                         * MUST HAVE ALL OUTPUT FILES ON THIS DISK CLOSED
3935                         *
3936 171f 30                 _DELETE TSX
3937 1720 ee 05                  LDX UXH,X       POINT TO FCB
3938 1722 8d 9b                  BSR SFILE       SEARCH DIRECTORY
3939 1724 30                     TSX
3940 1725 ee 05                  LDX UXH,X
3941 1727 6d 05                  TST FCBSTA,X    FOUND FILE?
3942 1729 27 01                  BEQ DEL2        YES
3943                         *
3944 172b 39                     RTS             NO, QUIT
3945                         *
3946 172c ee 27              DEL2 LDX FCBIND,X   POINT TO DIR. ENTRY
3947 172e 6d 0e                  TST FIBACS,X    ACCESS CODE=0?
3948 1730 27 24                  BEQ DEL3        O.K.
3949                         *
3950 1732 ce 17 3f               LDX #DELERR     NO, CANNOT DELETE
3951                             PRTMSG
3952 1735 3f                 +       SWI
3953 1736 31                 +       FCB 49
3954 1737 30                     TSX
3955 1738 ee 05                  LDX UXH,X       POINT TO FCB
3956 173a 86 12                  LDA A #18       ERROR CODE
3957 173c a7 05                  STA A FCBSTA,X
3958 173e 39                     RTS
3959                         *
3960 173f 20 46 49 4c 45 20  DELERR FCC ' FILE DELETE-PROTECTED'
     44 45 4c 45 54 45
     2d 50 52 4f 54 45
     43 54 45 44
3961 1755 00                     FCB $00
3962                         *
3963 1756 de 29              DEL3 LDX FCBCHN     SEARCH OPEN FCBS
3964 1758 27 46                  BEQ DEL33
3965                         *
3966 175a 6d 06              DEL30 TST FCBDTT,X  FCB OUTPUT?
3967 175c 27 0d                  BEQ DEL31       NO, KEEP LOOKING
3968                         *
3969 175e a6 09                  LDA A FCBDRV,X  GET DRIVE NO.
3970                             PSHX            SAVE FCB POINTER
3971 1760 3f                 +       SWI
3972 1761 05                 +       FCB 5
3973 1762 30                     TSX
3974 1763 ee 07                  LDX UXH+2,X     POINT TO THIS FCB
3975 1765 a1 09                  CMP A FCBDRV,X  SAME DRIVE?
3976 1767 27 08                  BEQ DEL32       YES
3977                         *
3978                             PULX            RESTORE POINTER
3979 1769 3f                 +       SWI
3980 176a 06                 +       FCB 6
3981 176b ee 25              DEL31 LDX FCBNFB,X  GET NEXT FCB
3982 176d 26 eb                  BNE DEL30       KEEP LOOKING
3983                         *
3984 176f 20 2f                  BRA DEL33       DONE
3985                         *
3986 1771 31                 DEL32 INS           CLEAN STACK
3987 1772 31                     INS
3988 1773 ce 17 80               LDX #FOPERR     ERROR MESSAGE
3989                             PRTMSG
3990 1776 3f                 +       SWI
3991 1777 31                 +       FCB 49
3992 1778 86 12                  LDA A #18       ERROR CODE
3993 177a 30                     TSX
3994 177b ee 05                  LDX UXH,X
3995 177d a7 05                  STA A FCBSTA,X  RETURN ERROR CODE
3996 177f 39                     RTS
3997                         *
3998 1780 20 44 45 4c 45 54  FOPERR FCC ' DELETE ERROR-OPEN OUTPUT FILES'
     45 20 45 52 52 4f
     52 2d 4f 50 45 4e
     20 4f 55 54 50 55
     54 20 46 49 4c 45
     53
3999 179f 0d                     FCB $0D
4000                         *
4001 17a0 30                 DEL33 TSX
4002 17a1 ee 05                  LDX UXH,X           POINT TO FCB
4003 17a3 ee 27                  LDX FCBIND,X        POINT TO DIRECTORY ENTRY
4004 17a5 a6 0f                  LDA A FIBFTS,X
4005 17a7 e6 10                  LDA B FIBFTS+1,X    GET FIRST T/S OF FILE
4006 17a9 30                     TSX
4007 17aa ee 05                  LDX UXH,X
4008 17ac a7 1f                  STA A FCBFTS,X      SAVE IN FCB
4009 17ae e7 20                  STA B FCBFTS+1,X
4010 17b0 ee 27                  LDX FCBIND,X        POINT TO DIRECTORY ENTRY
4011 17b2 a6 11                  LDA A FIBLTS,X
4012 17b4 e6 12                  LDA B FIBLTS+1,X    GET LAST T/S OF FILE
4013 17b6 30                     TSX
4014 17b7 ee 05                  LDX UXH,X
4015 17b9 a7 21                  STA A FCBLTS,X      STORE IN FCB
4016 17bb e7 22                  STA B FCBLTS+1,X
4017 17bd ee 27                  LDX FCBIND,X        POINT TO DIRECTORY ENTRY
4018 17bf 86 20                  LDA A #$20
4019 17c1 a7 00                  STA A 0,X           PUT BLANK INTO NAME FIELD
4020 17c3 ce 07 cd               LDX #SYSFCB
4021 17c6 86 ff                  LDA A #$FF
4022 17c8 a7 06                  STA A FCBDTT,X      MAKE 'OUTPUT'
4023                             IOHDR               WRITE UPDATED DIRECTORY
4024 17ca 3f                 +       SWI
4025 17cb 13                 +       FCB 19
4026 17cc 6f 06                  CLR FCBDTT,X        RESTORE 'INPUT' STATE
4027 17ce 6d 05              DEL3A TST FCBSTA,X      CHECK STATUS
4028 17d0 27 01                  BEQ DEL4            GOOD STATUS?
4029                         *
4030 17d2 39                     RTS                 IF NOT, QUIT
4031                         *
4032 17d3 a6 09              DEL4 LDA A FCBDRV,X     GET DRIVE NO.
4033 17d5 ce 10 6d               LDX #SAVFCB         USE SYSTEM FCB
4034 17d8 a7 09                  STA A FCBDRV,X      SET DRIVE NO.
4035 17da 86 00                  LDA A #0            GET FREE-SPACE SECTOR
4036 17dc c6 03                  LDA B #3
4037 17de a7 0a                  STA A FCBTRK,X      TRACK=0
4038 17e0 e7 0b                  STA B FCBSCT,X      SECTOR=3
4039 17e2 6f 06                  CLR FCBDTT,X        INPUT
4040                             IOHDR               READ SECTOR
4041 17e4 3f                 +       SWI
4042 17e5 13                 +       FCB 19
4043 17e6 a6 05                  LDA A FCBSTA,X      ERRORS?
4044 17e8 26 e4                  BNE DEL3A           YES
4045                         *
4046 17ea ee 07                  LDX FCBDBA,X        POINT TO SECTOR BUFFER
4047 17ec a6 7e                  LDA A SECSIZ-2,X    GET T/S OF FREE-SECTOR
4048 17ee e6 7f                  LDA B SECSIZ-1,X
4049 17f0 b7 13 9e               STA A SAVEX         SAVE THEM
4050 17f3 f7 13 9f               STA B SAVEX+1
4051 17f6 30                     TSX
4052 17f7 ee 05                  LDX UXH,X
4053 17f9 a6 1f                  LDA A FCBFTS,X      GET FIRST T/S OF FILE
4054 17fb e6 20                  LDA B FCBFTS+1,X
4055 17fd ce 10 6d               LDX #SAVFCB         USE SYSTEM FCB
4056 1800 ee 07                  LDX FCBDBA,X        POINT TO SECTOR BUFFER
4057 1802 a7 7e                  STA A SECSIZ-2,X    UPDATE LINKAGE
4058 1804 e7 7f                  STA B SECSIZ-1,X
4059 1806 36                     PSH A               SAVE 'A'
4060 1807 ce 10 6d               LDX #SAVFCB         USE SYSTEM FCB
4061 180a a6 09                  LDA A FCBDRV,X      GET DRIVE NUMBER
4062 180c 48                     ASL A               TIMES 2
4063 180d ce 00 2b               LDX #FRETAB         ACCESS FREE-SPACE TABLE
4064                             ADDAX
4065 1810 3f                 +       SWI
4066 1811 09                 +       FCB 9
4067 1812 32                     PUL A               RESTORE 'A'
4068 1813 a7 00                  STA A 0,X           UPDATE TABLE
4069 1815 e7 01                  STA B 1,X
4070 1817 ce 10 6d               LDX #SAVFCB         USE SYSTEM FCB
4071 181a 63 06                  COM FCBDTT,X        MAKE FCB 'OUTPUT'
4072                             IOHDR               WRITE UPDATED FREE-SPACE SECTCOR
4073 181c 3f                 +       SWI
4074 181d 13                 +       FCB 19
4075 181e 6f 06                  CLR FCBDTT,X        MAKE FCB 'INPUT'
4076 1820 a6 05                  LDA A FCBSTA,X      ERRORS?
4077 1822 26 aa                  BNE DEL3A           YES
4078                         *
4079 1824 30                     TSX
4080 1825 ee 05                  LDX UXH,X           POINT TO USER FCB
4081 1827 a6 21                  LDA A FCBLTS,X      GET LAST T/S OF FILE
4082 1829 e6 22                  LDA B FCBLTS+1,X
4083 182b ce 10 6d               LDX #SAVFCB         USE SYSTEM FCB
4084 182e a7 0a                  STA A FCBTRK,X
4085 1830 e7 0b                  STA B FCBSCT,X
4086                             IOHDR               READ THAT SECTOR
4087 1832 3f                 +       SWI
4088 1833 13                 +       FCB 19
4089 1834 a6 05                  LDA A FCBSTA,X      ERRORS?
4090 1836 26 96                  BNE DEL3A           YES
4091                         *
4092 1838 ee 07                  LDX FCBDBA,X        POINT TO SECTOR BUFFER
4093 183a b6 13 9e               LDA A SAVEX         GET T/S OF OLD FREE-SPACE
4094 183d f6 13 9f               LDA B SAVEX+1
4095 1840 a7 00                  STA A 0,X           UPDATE LINKAGES
4096 1842 e7 01                  STA B 1,X
4097 1844 ce 10 6d               LDX #SAVFCB         USE SYSTEM FCB
4098 1847 63 06                  COM FCBDTT,X        MAKE FCB 'OUTPUT'
4099                             IOHDR               WRITE UPDATED SECTOR
4100 1849 3f                 +       SWI
4101 184a 13                 +       FCB 19
4102 184b 6f 06                  CLR FCBDTT,X        MAKE FCB 'INPUT'
4103 184d 39                     RTS
4104                         *
4105                         * ROUTINE TO PARSE AN UNAMBIGUOUS FILE NAME
4106                         *
4107                         * [DRIVE:] FILENAME.EXT
4108                         *
4109                         * ADDRESS OF TEXT STRING IN 'CUCHAR'
4110                         * FCB ADDRESS PASSED IN INDEX REGISTER
4111                         * ERRORS RETURN '21' IN STATUS
4112                         *
4113 184e 30                 _FMTFCB TSX
4114 184f ee 05                  LDX UXH,X       POINT TO FCB
4115 1851 6f 05                  CLR FCBSTA,X    NO ERRORS YET
4116 1853 6f 09                  CLR FCBDRV,X    DEFAULT DRIVE=0
4117                             NXTOK           GET A TOKEN
4118 1855 3f                 +       SWI
4119 1856 2f                 +       FCB 47
4120 1857 d6 25                  LDA B RC        CHECK RC
4121 1859 c1 03                  CMP B #3        NUMBER?
4122 185b 26 29                  BNE PARS2       NO
4123                         *
4124 185d 7d 00 27               TST VALUE       VALID DRIVE NO.?
4125 1860 26 0a                  BNE PARS1       NO
4126                         *
4127 1862 96 28                  LDA A VALUE+1   VALID DRIVE NO.?
4128 1864 81 03                  CMP A #3        (4 DRIVES)
4129 1866 22 04                  BHI PARS1       NOT VALID
4130                         *
4131 1868 a7 09                  STA A FCBDRV,X  INIT. DRIVE
4132 186a 20 0e                  BRA PARS1A
4133                         *
4134 186c 30                 PARS1 TSX
4135 186d ee 05                  LDX UXH,X       POINT TO FCB
4136 186f 86 15                  LDA A #21
4137 1871 a7 05                  STA A FCBSTA,X  RETURN ERROR CODE 21
4138 1873 7f 00 27               CLR VALUE
4139 1876 7f 00 28               CLR VALUE+1     RETURN NO VALUE
4140 1879 39                     RTS
4141                         *
4142                         PARS1A NXTOK        GET A TOKEN FROM CLI
4143 187a 3f                 +       SWI
4144 187b 2f                 +       FCB 47
4145 187c d6 25                  LDA B RC        CHECK RC
4146 187e c1 3a                  CMP B #':       COLON?
4147 1880 26 ea                  BNE PARS1       NO, ERROR
4148                         *
4149                             NXTOK           GET A TOKEN FROM CLI
4150 1882 3f                 +       SWI
4151 1883 2f                 +       FCB 47
4152 1884 d6 25                  LDA B RC        CHECK RC
4153 1886 c1 01              PARS2 CMP B #1      UNAMBIG. NAME?
4154 1888 27 08                  BEQ PARS4       YES
4155                         *
4156 188a 30                 PARS3 TSX
4157 188b ee 05                  LDX UXH,X       POINT TO FCB
4158 188d 86 15                  LDA A #21
4159 188f a7 05                  STA A FCBSTA,X  RETURN ERROR STATUS 21
4160 1891 39                     RTS
4161                         *
4162 1892 de 20              PARS4 LDX DESCRA    POINT TO NAME
4163 1894 ff 13 9e               STX SAVEX       SAVE POINTER
4164 1897 96 22                  LDA A DESCRC    GET LENGTH
4165 1899 b7 13 a5               STA A SAVEA     SAVE IT
4166                             NXTOK           GET A TOKEN FROM CLI
4167 189c 3f                 +       SWI
4168 189d 2f                 +       FCB 47
4169 189e d6 25                  LDA B RC        CHECK RC
4170 18a0 c1 2e                  CMP B #'.       PERIOD?
4171 18a2 26 e6                  BNE PARS3       NO, ERROR
4172                         *
4173 18a4 7c 13 a5               INC SAVEA       COUNT PERIOD
4174                             NXTOK           GET A TOKEN FROM CLI
4175 18a7 3f                 +       SWI
4176 18a8 2f                 +       FCB 47
4177 18a9 d6 25                  LDA B RC        CHECK RC
4178 18ab c1 01                  CMP B #1        UNAMBIG. NAME?
4179 18ad 26 db                  BNE PARS3       NO, ERROR
4180                         *
4181 18af d6 22                  LDA B DESCRC    GET LENGTH OF EXT
4182 18b1 fb 13 a5               ADD B SAVEA     TOTAL LENGTH
4183 18b4 30                     TSX
4184 18b5 ee 05                  LDX UXH,X       POINT TO FCB
4185 18b7 86 10                  LDA A #FCBNAM
4186                             ADDAX           POINT TO NAME FIELD IN FCB
4187 18b9 3f                 +       SWI
4188 18ba 09                 +       FCB 9
4189                             PSHX
4190 18bb 3f                 +       SWI
4191 18bc 05                 +       FCB 5
4192 18bd fe 13 9e               LDX SAVEX       POINT TO NAME IN CLI
4193                             PSHX
4194 18c0 3f                 +       SWI
4195 18c1 05                 +       FCB 5
4196                             FMTS            FORMAT NAME INTO FCB
4197 18c2 3f                 +       SWI
4198 18c3 34                 +       FCB 52
4199 18c4 31                     INS
4200 18c5 31                     INS             CLEAN STACK
4201 18c6 31                     INS
4202 18c7 31                     INS
4203 18c8 5d                     TST B           ERRORS?
4204 18c9 26 bf                  BNE PARS3       YES
4205                         *
4206 18cb 39                     RTS
4207                         
4208                         ***********************************************************
4209                         *   NAM DIRECTORY
4210                         *
4211                         * OPEN, READ, WRITE DIRECTORY RECORDS ON DISK
4212                         * CP-68 AND ICOM 8 INCH FLOPPIES
4213                         *   
4214                         * @OPEND OPENS DIRECTORY TO FIRST DATA BLOCK
4215                         * @GETDR GETS NEXT DATA BLOCK
4216                         * @PUTDR WRITES A DATA BLOCK
4217                         *
4218                         * ADDRESS OF FCB TO USE PASSED IN 'X' (ON STACK)
4219                         * MUST SET UP DRIVE NUMBER IN FCB
4220                         * MUST SET UP FCB AS 'DSK'
4221                         *
4222                         * RETURN STATUS IN FCBSTA:  0=BLOCK FOUND
4223                         *               1=END OF DIRECTORY
4224                         *               ELSE ERROR
4225                         *
4226                         * ADDRESS OF DATA BLOCK IN FCBIND
4227                         ***********************************************************
4228                         
4229                         *
4230                         * DISK ATTRIBUTES
4231                         *
4232 0020                    DIRBLK  EQU 32          32 BYTES/DIRECTORY BLOCK
4233                         *
4234 18cf                        ENT _OPEND
4235 1900                        ENT _GETDR
4236 1930                        ENT _PUTDR
4237                         *
4238 18cc 7e 07 cd               EXT SYSFCB          SYSTEM FCB LOCATION
4239                         *
4240 18cf 30                 _OPEND TSX
4241 18d0 ee 05                  LDX UXH,X           POINT TO FCB
4242 18d2 6f 06                  CLR FCBDTT,X        INPUT
4243 18d4 6f 0a                  CLR FCBTRK,X        TRACK=0
4244 18d6 86 04                  LDA A #4            SECTOR=4 (START OF DIRECTORY)
4245                         *
4246 18d8 a7 0b              OPEND0 STA A FCBSCT,X
4247 18da 6f 05                  CLR FCBSTA,X        ERRORS
4248 18dc a6 07                  LDA A FCBDBA,X
4249 18de e6 08                  LDA B FCBDBA+1,X    POINTER TO BUFFER START
4250 18e0 a7 27                  STA A FCBIND,X      INIT. DIR. BLOCK POINTER
4251 18e2 e7 28                  STA B FCBIND+1,X
4252                             IOHDR               READ SECTOR
4253 18e4 3f                 +       SWI
4254 18e5 13                 +       FCB 19
4255 18e6 4d                     TST A               ERRORS?
4256 18e7 26 0c                  BNE OPEND2          YES
4257                         *
4258 18e9 ee 27              OPEND1 LDX FCBIND,X     POINT TO DATA BLOCK
4259 18eb 6d 00                  TST 0,X             FIRST CHAR=0?
4260 18ed 27 09                  BEQ OPEND3          YES, EOF
4261                         *
4262 18ef 30                     TSX
4263 18f0 ee 05                  LDX UXH,X           POINT TO FCB
4264 18f2 6f 05                  CLR FCBSTA,X        RETURN NO ERRORS
4265 18f4 39                     RTS                 RETURN
4266                         *
4267 18f5 a7 05              OPEND2 STA A FCBSTA,X   RETURN ERROR CODE
4268 18f7 39                     RTS
4269                         *
4270 18f8 30                 OPEND3 TSX
4271 18f9 ee 05                  LDX UXH,X           POINT TO FCB
4272 18fb 86 01                  LDA A #1
4273 18fd a7 05                  STA A FCBSTA,X      RETURN STATUS=1
4274 18ff 39                     RTS
4275                         *
4276                         *
4277                         *
4278 1900 30                 _GETDR TSX
4279 1901 ee 05                  LDX UXH,X           POINT TO FCB
4280 1903 a6 27                  LDA A FCBIND,X
4281 1905 e6 28                  LDA B FCBIND+1,X
4282 1907 cb 20                  ADD B #DIRBLK       MOVE INDEX TO NEXT BLOCK
4283 1909 89 00                  ADC A #0
4284 190b a7 27                  STA A FCBIND,X
4285 190d e7 28                  STA B FCBIND+1,X
4286 190f ee 07                  LDX FCBDBA,X        BUFFER ADDRESS
4287 1911 36                     PSH A               SAVE 'A'
4288 1912 86 80                  LDA A #SECSIZ
4289                             ADDAX               BUFFER END ADDRESS
4290 1914 3f                 +       SWI
4291 1915 09                 +       FCB 9
4292 1916 32                     PUL A               RESTORE 'A'
4293                             SUBXAB              COMPARE INDEX TO END-ADDRESS
4294 1917 3f                 +       SWI
4295 1918 0b                 +       FCB 11
4296 1919 27 08                  BEQ GETDR2          NEED NEW SECTOR?
4297                         *
4298 191b 30                     TSX                 NO
4299 191c ee 05                  LDX UXH,X           POINT TO FCB
4300 191e 4f                     CLR A
4301 191f a7 05                  STA A FCBSTA,X      CLEAR ERROR STATUS
4302 1921 20 c6                  BRA OPEND1          FINISH UP
4303                         *
4304 1923 30                 GETDR2 TSX
4305 1924 ee 05                  LDX UXH,X           POINT TO FCB
4306 1926 a6 0b                  LDA A FCBSCT,X
4307 1928 4c                     INC A               NEXT SECTOR
4308 1929 81 1b                  CMP A #TRKSIZ+1     END OF TRACK?
4309 192b 27 cb                  BEQ OPEND3          YES, RETURN EOF
4310                         *
4311 192d 7e 18 d8               JMP OPEND0          NO, GET NEW SECTOR
4312                         *
4313                         *
4314 1930 30                 _PUTDR TSX
4315 1931 ee 05                  LDX UXH,X           POINT TO FCB
4316 1933 ee 27                  LDX FCBIND,X        GET ADDRESS OF DIR. BLOCK
4317                             PSHX                STACK IT
4318 1935 3f                 +       SWI
4319 1936 05                 +       FCB 5
4320 1937 30                     TSX
4321 1938 ee 07                  LDX UXH+2,X         GET ADDRESS OF FCB
4322 193a 86 10                  LDA A #FCBNAM
4323                             ADDAX               POINT TO NAME FIELD IN FCB
4324 193c 3f                 +       SWI
4325 193d 09                 +       FCB 9
4326                             PSHX                STACK IT
4327 193e 3f                 +       SWI
4328 193f 05                 +       FCB 5
4329 1940 c6 15                  LDA B #21           21 BYTES TO MOVE
4330                             MOVC                MOVE FROM FCB TO DIR. BLOCK
4331 1942 3f                 +       SWI
4332 1943 11                 +       FCB 17
4333 1944 31                     INS
4334 1945 31                     INS                 CLEAN STACK
4335 1946 31                     INS
4336 1947 31                     INS
4337 1948 fe 07 ce               LDX >SYSFCB+1       POINT TO SYSTEM FCB
4338 194b 63 06                  COM FCBDTT,X        MAKE OUTPUT
4339                             IOHDR               ISSUE I/O REQUEST
4340 194d 3f                 +       SWI
4341 194e 13                 +       FCB 19
4342 194f 30                     TSX
4343 1950 ee 05                  LDX UXH,X           POINT TO FCB
4344 1952 a7 05                  STA A FCBSTA,X      RETURN STATUS
4345 1954 39                     RTS
4346                         *
4347                         
4348                         ***********************************************************
4349                         *   NAM SFIO
4350                         *
4351                         * SEQUENTIAL FILE I/O PACKAGE
4352                         * @OPEN     OPEN SEQUENTIAL FILE FOR R/W
4353                         * @CLOSE    CLOSE SEQUENTIAL FILE
4354                         * @READ     READ A BYTE FROM SEQUENTIAL FILE
4355                         * @WRITE    WRITE A BYTE INTO A SEQUENTIAL FILE
4356                         * @REWD     REWIND A SEQUENTIAL FILE
4357                         *
4358                         * INDEX REGISTER (STACKED) POINTS TO FCB
4359                         * CHARACTERS PASSED IN 'A' REGISTER
4360                         *
4361                         * STATUS CODES: (IN FCBSTA)
4362                         *
4363                         *    0=GOOD
4364                         *    1=END OF DIRECTORY
4365                         *    2=FILE IN USE
4366                         *    3=FILE ALREADY EXISTS
4367                         *    4=NO SUCH FILE
4368                         *    5=I/0 ERROR
4369                         *    6=TOO MANY FILES FOR DIRECTORY
4370                         *    7=DISK FULL
4371                         *    8=END-FILE FOUND
4372                         *    9=BAD SECTOR
4373                         *   10=DEVICE NOT READY
4374                         *   13=ILLEGAL USE OF FCB
4375                         *   18=ILLEGAL OPERATION (WRITE TO READ FILE, ETC.)
4376                         *   21=BAD FILE NAME
4377                         ***********************************************************
4378                         
4379                         *
4380                         * DISK ATTRIBUTES:
4381                         *
4382 1955 00 80              BUFSIZ  FDB SECSIZ
4383                         *
4384                         *
4385 1960                        ENT _OPEN
4386 1af1                        ENT _CLOSE
4387 1ba6                        ENT _READ
4388 1c41                        ENT _WRITE
4389 1d42                        ENT _REWD
4390                         *
4391 1957 7e 16 86               EXT SEMPTY
4392 195a 7e 16 bf               EXT SFILE
4393 195d 7e 07 cd               EXT SYSFCB
4394                         *
4395 1960 30                 _OPEN TSX
4396 1961 ee 05                  LDX UXH,X           POINT TO FCB
4397                             TXAB
4398 1963 3f                 +       SWI
4399 1964 02                 +       FCB 2
4400 1965 de 29                  LDX FCBCHN          START OF ACTIVE-FCB CHAIN
4401 1967 27 15                  BEQ OPEN3           EMPTY CHAIN?
4402                         *
4403                         OPEN1 PSHX
4404 1969 3f                 +       SWI
4405 196a 05                 +       FCB 5
4406                             SUBABX              FOUND FCB?
4407 196b 3f                 +       SWI
4408 196c 0c                 +       FCB 12
4409                             PULX
4410 196d 3f                 +       SWI
4411 196e 06                 +       FCB 6
4412 196f 27 06                  BEQ OPEN2           YES, ERROR
4413                         *
4414 1971 ee 25                  LDX FCBNFB,X        GET NEXT CHAINED FCB
4415 1973 26 f4                  BNE OPEN1           IF NOT END OF CHAIN, LOOP
4416                         *
4417 1975 20 07                  BRA OPEN3           IF END, OK
4418                         *
4419                         OPEN2 TABX              POINT TO FCB
4420 1977 3f                 +       SWI
4421 1978 03                 +       FCB 3
4422 1979 86 0d                  LDA A #13           ERROR STATUS (FILE ALREADY 0PEN)
4423 197b a7 05                  STA A FCBSTA,X
4424 197d 39                     RTS
4425                         *
4426                         OPEN3 TABX              POINT TO FCB
4427 197e 3f                 +       SWI
4428 197f 03                 +       FCB 3
4429 1980 6d 06                  TST FCBDTT,X        READ OR WRITE?
4430 1982 27 03                  BEQ OPENR           READ
4431                         *
4432 1984 7e 1a 19               JMP OPENW           WRITE
4433                         *
4434                         * OPEN SEQUENTIAL FILE FOR INPUT
4435                         *
4436 1987 bd 16 bf           OPENR JSR SFILE         SEARCH DIRECTORY
4437 198a 6d 05                  TST FCBSTA,X        CHECK STATUS
4438 198c 27 05                  BEQ OPENR1          GOOD?
4439                         *
4440 198e 86 04                  LDA A #4            ERROR STATUS (NO SUCH FILE)
4441 1990 a7 05                  STA A FCBSTA,X
4442 1992 39                     RTS
4443                         *
4444 1993 86 1d              OPENR1 LDA A #FCBTYP
4445                             ADDAX               POINT TO TYPE FIELD IN FCB
4446 1995 3f                 +       SWI
4447 1996 09                 +       FCB 9
4448                             PSHX                STACK ADDRESS
4449 1997 3f                 +       SWI
4450 1998 05                 +       FCB 5
4451 1999 30                     TSX
4452 199a ee 07                  LDX UXH+2,X         POINT TO FCB
4453 199c ee 27                  LDX FCBIND,X        POINT TO DIRECTORY BLOCK
4454 199e 86 0d                  LDA A #FIBTYP
4455                             ADDAX               POINT TO TYPE FIELD IN DIR. BLOCK
4456 19a0 3f                 +       SWI
4457 19a1 09                 +       FCB 9
4458                             PSHX                STACK ADDRESS
4459 19a2 3f                 +       SWI
4460 19a3 05                 +       FCB 5
4461 19a4 c6 08                  LDA B #8            8 BYTES TO MOVE FROM DIR. TO FCB.
4462                             MOVC
4463 19a6 3f                 +       SWI
4464 19a7 11                 +       FCB 17
4465 19a8 31                     INS
4466 19a9 31                     INS                 CLEAN STACK
4467 19aa 31                     INS
4468 19ab 31                     INS
4469 19ac 30                     TSX
4470 19ad ee 05                  LDX UXH,X           POINT TO FCB
4471 19af a6 1f                  LDA A FCBFTS,X
4472 19b1 e6 20                  LDA B FCBFTS+1,X
4473 19b3 a7 0a                  STA A FCBTRK,X      INIT. TRACK/SECTOR
4474 19b5 e7 0b                  STA B FCBSCT,X
4475                             IOHDR               READ FIRST SECTOR OF FILE
4476 19b7 3f                 +       SWI
4477 19b8 13                 +       FCB 19
4478 19b9 4d                     TST A               ERROR?
4479 19ba 27 03                  BEQ OPENR2          NO
4480                         *
4481 19bc a7 05                  STA A FCBSTA,X      RETURN ERROR STATUS
4482 19be 39                     RTS
4483                         *
4484 19bf ee 07              OPENR2 LDX FCBDBA,X     POINT TO SECTOR BUFFER
4485 19c1 a6 00                  LDA A 0,X           GET FORWARD LINKS
4486 19c3 e6 01                  LDA B 1,X
4487 19c5 30                     TSX
4488 19c6 ee 05                  LDX UXH,X           POINT TO FCB
4489 19c8 a7 0c                  STA A FCBFWD,X      PUT IN LINKS
4490 19ca e7 0d                  STA B FCBFWD+1,X
4491 19cc ee 07                  LDX FCBDBA,X        POINT TO SECTOR BUFFER
4492 19ce a6 02                  LDA A 2,X           GET BACKWARD LINKS
4493 19d0 e6 03                  LDA B 3,X
4494 19d2 30                     TSX
4495 19d3 ee 05                  LDX UXH,X           POINT TO FCB
4496 19d5 a7 0e                  STA A FCBBAK,X      PUT IN BACKWARD LINKS
4497 19d7 e7 0f                  STA B FCBBAK+1,X
4498 19d9 a6 07              OPENR3 LDA A FCBDBA,X
4499 19db e6 08                  LDA B FCBDBA+1,X
4500 19dd cb 04                  ADD B #4            INIT. BUFFER INDEX
4501 19df 89 00                  ADC A #0
4502 19e1 a7 27                  STA A FCBIND,X
4503 19e3 e7 28                  STA B FCBIND+1,X
4504                         *   
4505                         * PUT FCB ONTO ACTIVE-FCB CHAIN
4506                         * COMMON TO READ AND WRITE
4507                         * (X) POINTS TO FCB
4508                         *
4509 19e5 6f 25              OPEN4 CLR FCBNFB,X      MAKE FCB END OF CHAIN
4510 19e7 6f 26                  CLR FCBNFB+1,X
4511 19e9 de 29                  LDX FCBCHN          SEARCH CHAIN FOR END LINK
4512 19eb 26 0e                  BNE OPEN5           EMPTY CHAIN?
4513                         *
4514 19ed 30                     TSX
4515 19ee a6 05                  LDA A UXH,X         GET FCB ADDRESS INTO (A,B)
4516 19f0 e6 06                  LDA B UXL,X
4517 19f2 97 29                  STA A FCBCHN        INIT. CHAIN
4518 19f4 d7 2a                  STA B FCBCHN+1
4519                             TABX                RESTORE FCB ADDRESS
4520 19f6 3f                 +       SWI
4521 19f7 03                 +       FCB 3
4522 19f8 6f 05                  CLR FCBSTA,X        GOOD STATUS
4523 19fa 39                     RTS
4524                         *
4525 19fb 6d 25              OPEN5 TST FCBNFB,X      AT END OF CHAIN?
4526 19fd 26 16                  BNE OPEN6           NO
4527 19ff 6d 26                  TST FCBNFB+1,X      AT END OF CHAIN?
4528 1a01 26 12                  BNE OPEN6           NO
4529                         *
4530                             PSHX                SAVE END OF CHAIN ADDRESS
4531 1a03 3f                 +       SWI
4532 1a04 05                 +       FCB 5
4533 1a05 30                     TSX
4534 1a06 a6 07                  LDA A UXH+2,X       GET FCB ADDRESS INTO (A,B)
4535 1a08 e6 08                  LDA B UXL+2,X
4536                             PULX
4537 1a0a 3f                 +       SWI
4538 1a0b 06                 +       FCB 6
4539 1a0c a7 25                  STA A FCBNFB,X      PATCH CHAIN
4540 1a0e e7 26                  STA B FCBNFB+1,X
4541                             TABX                RESTORE FCB ADDRESS
4542 1a10 3f                 +       SWI
4543 1a11 03                 +       FCB 3
4544 1a12 6f 05                  CLR FCBSTA,X        GOOD STATUS
4545 1a14 39                     RTS
4546                         *
4547 1a15 ee 25              OPEN6 LDX FCBNFB,X      GET NEXT LINK IN CHAIN
4548 1a17 20 e2                  BRA OPEN5
4549                         *
4550                         *
4551                         * OPEN SEQUENTIAL FILE FOR OUTPUT
4552                         *
4553 1a19 bd 16 bf           OPENW JSR SFILE         SEARCH DIRECTORY
4554 1a1c a6 05                  LDA A FCBSTA,X      CHECK STATUS
4555 1a1e 81 01                  CMP A #1            FILE FOUND?
4556 1a20 27 05                  BEQ OPENW1          NO
4557                         *
4558 1a22 86 03                  LDA A #3            ERROR STATUS (FILE EXISTS)
4559 1a24 a7 05                  STA A FCBSTA,X
4560 1a26 39                     RTS
4561                         *
4562 1a27 a6 09              OPENW1 LDA A FCBDRV,X   GET DRIVE NO.
4563 1a29 bd 16 86               JSR SEMPTY          SEARCH FOR DIR. SPACE
4564 1a2c fe 07 ce               LDX >SYSFCB+1       POINT TO SYSTEM FCB
4565 1a2f a6 05                  LDA A FCBSTA,X      CHECK STATUS
4566 1a31 27 0e                  BEQ OPENW4          GOOD?
4567                         *
4568 1a33 81 01                  CMP A #1            NO ROOM IN DIRECTORY?
4569 1a35 27 06                  BEQ OPENW3          YES
4570                         *
4571 1a37 30                 OPENW2 TSX
4572 1a38 ee 05                  LDX UXH,X           POINT TO FCB
4573 1a3a a7 05                  STA A FCBSTA,X      RETURN ERROR STATUS
4574 1a3c 39                     RTS
4575                         *
4576 1a3d 86 06              OPENW3 LDA A #6         ERROR STATUS (NO ROOM)
4577 1a3f 20 f6                  BRA OPENW2
4578                         *
4579 1a41 a6 27              OPENW4 LDA A FCBIND,X   GET DIR. BLOCK ADDRESS FROM SYS.
4580 1a43 e6 28                  LDA B FCBIND+1,X
4581 1a45 30                     TSX
4582 1a46 ee 05                  LDX UXH,X           POINT TO FCB
4583 1a48 a7 27                  STA A FCBIND,X      SAVE ADDRESS
4584 1a4a e7 28                  STA B FCBIND+1,X
4585 1a4c 6f 23                  CLR FCBNMS,X        INIT. NO. SECTORS=0
4586 1a4e 6f 24                  CLR FCBNMS+1,X
4587 1a50 6f 21                  CLR FCBLTS,X        INIT. LAST T/S=0,0
4588 1a52 6f 22                  CLR FCBLTS+1,X
4589 1a54 6f 0e                  CLR FCBBAK,X        INIT. BACKWARD POINTERS
4590 1a56 6f 0f                  CLR FCBBAK+1,X
4591 1a58 a6 09                  LDA A FCBDRV,X      GET DRIVE NO.
4592 1a5a 84 03                  AND A #$03          LIMIT RANGE (0-3)
4593 1a5c 48                     ASL A               2 BYTES PER ENTRY
4594 1a5d ce 00 2b               LDX #FRETAB         ACCESS FREE-SPACE TABLE
4595                             ADDAX
4596 1a60 3f                 +       SWI
4597 1a61 09                 +       FCB 9
4598                             PSHX                SAVE TABLE POINTER
4599 1a62 3f                 +       SWI
4600 1a63 05                 +       FCB 5
4601 1a64 a6 00                  LDA A 0,X           GET FREE T/S
4602 1a66 e6 01                  LDA B 1,X
4603 1a68 4d                     TST A               TABLE INIT. YET?
4604 1a69 27 03                  BEQ OPNW4           NO
4605                         *
4606 1a6b 5d                     TST B               TABLE INIT. YET?
4607 1a6c 26 27                  BNE OPENW6          YES
4608                         *
4609                         * MUST READ IN FREE-SPACE SECTOR AND INIT. FREE-SPACE TABLE
4610                         *
4611 1a6e 30                 OPNW4 TSX
4612 1a6f ee 07                  LDX UXH+2,X         POINT TO FCB
4613 1a71 6f 06                  CLR FCBDTT,X        MAKE 'INPUT'
4614 1a73 86 00                  LDA A #0            TRACK=0
4615 1a75 c6 03                  LDA B #3            SECTOR=3 (FREE-SPACE RECORD)
4616 1a77 a7 0a                  STA A FCBTRK,X
4617 1a79 e7 0b                  STA B FCBSCT,X
4618                             IOHDR               ISSUE READ COMMAND
4619 1a7b 3f                 +       SWI
4620 1a7c 13                 +       FCB 19
4621 1a7d 63 06                  COM FCBDTT,X        PUT 'OUPUT' BACK
4622 1a7f 4d                     TST A               ERROR?
4623 1a80 27 05                  BEQ OPENW5          NO
4624                         *
4625 1a82 a7 05                  STA A FCBSTA,X      RETURN ERROR CODE
4626 1a84 31                     INS                 CLEAN STACK
4627 1a85 31                     INS
4628 1a86 39                     RTS                 QUIT
4629                         *
4630 1a87 ee 07              OPENW5 LDX FCBDBA,X     POINT TO DATA BUFFER
4631 1a89 a6 7e                  LDA A SECSIZ-2,X    GET T/S OF FREE SPACE
4632 1a8b e6 7f                  LDA B SECSIZ-1,X
4633                             PULX                RECOVER FREE-SPACE TABLE POINTER
4634 1a8d 3f                 +       SWI
4635 1a8e 06                 +       FCB 6
4636                             PSHX                PUT BACK ON STACK
4637 1a8f 3f                 +       SWI
4638 1a90 05                 +       FCB 5
4639 1a91 a7 00                  STA A 0,X           INIT. FREE-SPACE TABLE
4640 1a93 e7 01                  STA B 1,X
4641                         *
4642 1a95 30                 OPENW6 TSX
4643 1a96 ee 07                  LDX UXH+2,X         POINT TO FCB
4644 1a98 4d                     TST A               AT END OF DISK?
4645 1a99 27 03                  BEQ OPNW6A          YES
4646                         *
4647 1a9b 5d                     TST B               AT END OF DISK?
4648 1a9c 26 07                  BNE OPNW6B          NO
4649                         *
4650 1a9e 86 07              OPNW6A LDA A #7         END OF DISK ERROR
4651 1aa0 a7 05                  STA A FCBSTA,X
4652 1aa2 31                     INS
4653 1aa3 31                     INS
4654 1aa4 39                     RTS
4655                         *
4656 1aa5 a7 1f              OPNW6B STA A FCBFTS,X   INIT. FIRST T/S
4657 1aa7 e7 20                  STA B FCBFTS+1,X
4658 1aa9 a7 0a                  STA A FCBTRK,X      POINT TO THAT T/S
4659 1aab e7 0b                  STA B FCBSCT,X
4660                             PUTDR               UPDATE DIRECTORY
4661 1aad 3f                 +       SWI
4662 1aae 1b                 +       FCB 27
4663 1aaf 6d 05                  TST FCBSTA,X        CHECK STATUS
4664 1ab1 27 03                  BEQ OPENW7          GOOD
4665                         *
4666 1ab3 31                     INS
4667 1ab4 31                     INS                 CLEAN STACK
4668 1ab5 39                     RTS                 QUIT
4669                         *
4670 1ab6 6f 06              OPENW7 CLR FCBDTT,X     MAKE 'INPUT'
4671                             IOHDR               ISSUE READ COMMAND
4672 1ab8 3f                 +       SWI
4673 1ab9 13                 +       FCB 19
4674 1aba 63 06                  COM FCBDTT,X        RESTORE 'OUTPUT'
4675 1abc 4d                     TST A               CHECK FOR ERROR
4676 1abd 27 05                  BEQ OPENW8          GOOD
4677                         *
4678 1abf a7 05                  STA A FCBSTA,X      RETURN ERROR CODE
4679 1ac1 31                     INS
4680 1ac2 31                     INS                 CLEAN STACK
4681 1ac3 39                     RTS                 QUIT
4682                         *
4683 1ac4 ee 07              OPENW8 LDX FCBDBA,X     POINT TO DATA BUFFER
4684 1ac6 a6 00                  LDA A 0,X           GET FORWARD POINTERS
4685 1ac8 e6 01                  LDA B 1,X
4686                             PULX                RECOVER FREE-SPACE TABLE POINTER
4687 1aca 3f                 +       SWI
4688 1acb 06                 +       FCB 6
4689 1acc 4d                     TST A               OUT OF SPACE?
4690 1acd 26 0b                  BNE OPENW9          NO
4691                         *
4692 1acf 5d                     TST B               OUT OF SPACE?
4693 1ad0 26 08                  BNE OPENW9          NO
4694                         *
4695 1ad2 86 07                  LDA A #7            RETURN ERROR CODE (OUT OF SPACE)
4696 1ad4 30                     TSX
4697 1ad5 ee 05                  LDX UXH,X           POINT TO FCB
4698 1ad7 a7 05                  STA A FCBSTA,X
4699 1ad9 39                     RTS
4700                         *
4701 1ada a7 00              OPENW9 STA A 0,X        UPDATE FREE-SPACE TABLE
4702 1adc e7 01                  STA B 1,X
4703 1ade 30                     TSX
4704 1adf ee 05                  LDX UXH,X           POINT TO FCB
4705 1ae1 ee 07                  LDX FCBDBA,X        POINT TO DATA BUFFER
4706 1ae3 c6 7c                  LDA B #SECSIZ-4
4707 1ae5 6f 04              OPNW9A CLR 4,X          CLEAR OUT BUFFER
4708 1ae7 08                     INX
4709 1ae8 5a                     DEC B
4710 1ae9 26 fa                  BNE OPNW9A
4711                         *
4712 1aeb 30                     TSX
4713 1aec ee 05                  LDX UXH,X           POINT TO FCB
4714 1aee 7e 19 d9               JMP OPENR3          FINISH UP LIKE READ
4715 1af1 30                 _CLOSE  TSX
4716 1af2 a6 05                  LDA A UXH,X
4717 1af4 e6 06                  LDA B UXL,X         GET FCB ADDRESS
4718 1af6 de 29                  LDX FCBCHN          GET HEAD OF FCB CHAIN
4719 1af8 27 2e                  BEQ NOCHN           NO ACTIVE FCBS?
4720                         *
4721                             PSHX                SAVE X
4722 1afa 3f                 +       SWI
4723 1afb 05                 +       FCB 5
4724                             SUBABX              AT DESIRED FCB?
4725 1afc 3f                 +       SWI
4726 1afd 0c                 +       FCB 12
4727                             PULX                RESTORE X
4728 1afe 3f                 +       SWI
4729 1aff 06                 +       FCB 6
4730 1b00 26 0a                  BNE NOTFND          NO
4731                         *
4732 1b02 a6 25                  LDA A FCBNFB,X
4733 1b04 e6 26                  LDA B FCBNFB+1,X
4734 1b06 97 29                  STA A FCBCHN        NEW CHAIN HEAD
4735 1b08 d7 2a                  STA B FCBCHN+1
4736 1b0a 20 23                  BRA CLOSE2          FINISH
4737                         *
4738 1b0c a1 25              NOTFND CMP A FCBNFB,X   AT DESIRED FCB?
4739 1b0e 26 14                  BNE NXTFCB          NO
4740                         *
4741 1b10 e1 26                  CMP B FCBNFB+1,X    AT DESIRED FCB?
4742 1b12 26 10                  BNE NXTFCB          NO
4743                         *
4744                         * FIX ACTIVE FCB CHAIN TO GO AROUND THIS FCB
4745                         * (X) POINTS TO PREVIOUS FCB
4746                         * (A,B) POINTS TO THIS FCB
4747                         *
4748                             PSHX
4749 1b14 3f                 +       SWI
4750 1b15 05                 +       FCB 5
4751                             TABX                POINT TO THIS FCB
4752 1b16 3f                 +       SWI
4753 1b17 03                 +       FCB 3
4754 1b18 a6 25                  LDA A FCBNFB,X      GET ITS LINKAGE
4755 1b1a e6 26                  LDA B FCBNFB+1,X
4756                             PULX                POINT TO PREVIOUS FCB
4757 1b1c 3f                 +       SWI
4758 1b1d 06                 +       FCB 6
4759 1b1e a7 25                  STA A FCBNFB,X      UPDATE ITS LINKAGE
4760 1b20 e7 26                  STA B FCBNFB+1,X
4761 1b22 20 0b                  BRA CLOSE2          FINISH PROCESSING
4762                         *
4763 1b24 ee 25              NXTFCB LDX FCBNFB,X     GET NEXT FCB ADDRESS
4764 1b26 26 e4                  BNE NOTFND          IF NOT END OF CHAIN, KEEP GOING
4765                         *
4766                         NOCHN TABX              POINT TO THIS FCB
4767 1b28 3f                 +       SWI
4768 1b29 03                 +       FCB 3
4769 1b2a 86 0d                  LDA A #13           RETURN ERROR CODE (CAN'T FIND FCB)
4770 1b2c a7 05                  STA A FCBSTA,X
4771 1b2e 39                     RTS
4772                         *
4773                         *
4774                         *
4775 1b2f 30                 CLOSE2 TSX
4776 1b30 ee 05                  LDX UXH,X           POINT TO THIS FCB
4777 1b32 6d 06                  TST FCBDTT,X        READ OR WRITE?
4778 1b34 26 01                  BNE CLOSEW          WRITE
4779                         *
4780 1b36 39                     RTS                 READ IS DONE
4781                         *
4782 1b37 6d 0a              CLOSEW TST FCBTRK,X     AT END OF DISK?
4783 1b39 27 04                  BEQ CLSW1           YES
4784                         *
4785 1b3b 6d 0b                  TST FCBSCT,X        AT END OF DISK?
4786 1b3d 26 0a                  BNE CLSW2           NO
4787                         *
4788 1b3f a6 0e              CLSW1 LDA A FCBBAK,X
4789 1b41 e6 0f                  LDA B FCBBAK+1,X
4790 1b43 a7 0a                  STA A FCBTRK,X
4791 1b45 e7 0b                  STA B FCBSCT,X
4792 1b47 20 0e                  BRA CLSW3           ERROR FIX-UP FOR END-OF-DISK
4793                         *
4794                         CLSW2 IOHDR             WRITE OUT LAST SECTOR OF FILE
4795 1b49 3f                 +       SWI
4796 1b4a 13                 +       FCB 19
4797 1b4b a6 23                  LDA A FCBNMS,X
4798 1b4d e6 24                  LDA B FCBNMS+1,X
4799 1b4f cb 01                  ADD B #1            ONE MORE SECTOR IN COUNT
4800 1b51 89 00                  ADC A #0
4801 1b53 a7 23                  STA A FCBNMS,X
4802 1b55 e7 24                  STA B FCBNMS+1,X
4803                         *
4804                         * LAST SECTOR NOW ON DISK
4805                         * UPDATE DIRECTORY INFORMATION
4806                         *
4807 1b57 6f 06              CLSW3 CLR FCBDTT,X      MAKE 'INPUT'
4808 1b59 bd 16 bf               JSR SFILE           FIND DIRECTORY SLOT
4809 1b5c 30                     TSX
4810 1b5d ee 05                  LDX UXH,X           POINT TO FCB
4811 1b5f 63 06                  COM FCBDTT,X        RESTORE 'OUTPUT'
4812 1b61 6d 05                  TST FCBSTA,X        CHECK STATUS
4813 1b63 27 01                  BEQ CLOSE3          GOOD
4814                         *
4815 1b65 39                     RTS                 IF NO GOOD, PUNT!!!
4816                         *
4817 1b66 a6 0a              CLOSE3 LDA A FCBTRK,X   GET LAST TRACK WRITTEN
4818 1b68 e6 0b                  LDA B FCBSCT,X      SECTOR
4819 1b6a a7 21                  STA A FCBLTS,X      PUT INTO FCB POSITION
4820 1b6c e7 22                  STA B FCBLTS+1,X
4821                             PUTDR               WRITE DATA INTO DIRECTORY
4822 1b6e 3f                 +       SWI
4823 1b6f 1b                 +       FCB 27
4824 1b70 6d 05                  TST FCBSTA,X        GOOD WRITE?
4825 1b72 27 01                  BEQ CLOSE4          YES
4826                         *
4827 1b74 39                     RTS                 NO GOOD, QUIT!!
4828                         *
4829 1b75 6f 06              CLOSE4 CLR FCBDTT,X     MAKE 'INPUT'
4830 1b77 86 00                  LDA A #0            TRACK=0
4831 1b79 d6 03                  LDA B 3             SECTOR=3 (FREE-SPACE RECORD)
4832 1b7b a7 0a                  STA A FCBTRK,X
4833 1b7d e7 0b                  STA B FCBSCT,X
4834                             IOHDR               READ FREE-SPACE RECORD
4835 1b7f 3f                 +       SWI
4836 1b80 13                 +       FCB 19
4837 1b81 63 06                  COM FCBDTT,X        RESTORE 'OUTPUT'
4838 1b83 4d                     TST A               ERROR?
4839 1b84 27 01                  BEQ CLOSE5          NO
4840                         *
4841 1b86 39                     RTS                 BAD READ, QUIT!!
4842                         *
4843 1b87 a6 09              CLOSE5 LDA A FCBDRV,X   GET DRIVE NO.
4844 1b89 84 03                  AND A #$03          LIMIT RANGE (0-3)
4845 1b8b 48                     ASL A               2 BYTES/ENTRY
4846 1b8c ce 00 2b               LDX #FRETAB         ACCESS FREE-SPACE TABLE
4847                             ADDAX
4848 1b8f 3f                 +       SWI
4849 1b90 09                 +       FCB 9
4850 1b91 a6 00                  LDA A 0,X           GET TRACK/SECTOR
4851 1b93 e6 01                  LDA B 1,X
4852 1b95 30                     TSX
4853 1b96 ee 05                  LDX UXH,X           POINT TO FCB
4854 1b98 ee 07                  LDX FCBDBA,X        POINT TO DATA BUFFER
4855 1b9a a7 7e                  STA A SECSIZ-2,X    PUT NEW T/S INTO BUFFER
4856 1b9c e7 7f                  STA B SECSIZ-1,X
4857 1b9e 30                     TSX
4858 1b9f ee 05                  LDX UXH,X           POINT TO FCB
4859                             IOHDR               WRITE OUT UPDATED SECTOR
4860 1ba1 3f                 +       SWI
4861 1ba2 13                 +       FCB 19
4862 1ba3 a7 05                  STA A FCBSTA,X      SAVE STATUS
4863 1ba5 39                     RTS
4864 1ba6 30                 _READ TSX
4865 1ba7 ee 05                  LDX UXH,X           POINT TO FCB
4866 1ba9 6d 06                  TST FCBDTT,X        INPUT REQUESTED?
4867 1bab 27 05                  BEQ READ2           OK
4868                         *
4869 1bad 86 12                  LDA A #18           ERROR CODE
4870 1baf a7 05                  STA A FCBSTA,X
4871 1bb1 39                     RTS                 QUIT
4872                         *
4873 1bb2 a6 27              READ2 LDA A FCBIND,X    CHECK FOR END OF BUFFER
4874 1bb4 e6 28                  LDA B FCBIND+1,X
4875 1bb6 e0 08                  SUB B FCBDBA+1,X
4876 1bb8 a2 07                  SBC A FCBDBA,X
4877 1bba b1 19 55               CMP A >BUFSIZ       AT END?
4878 1bbd 26 05                  BNE READ2A          NO
4879                         *
4880 1bbf f1 19 56               CMP B >BUFSIZ+1     AT END?
4881 1bc2 27 36                  BEQ READ3           YES
4882                         *
4883 1bc4 ee 27              READ2A LDX FCBIND,X     POINT TO BUFFER
4884 1bc6 a6 00                  LDA A 0,X           GET BYTE
4885                         *
4886                         * CHECK FOR SPACE COMPRESSION
4887                         * IN SPACE-COMPRESSION MODE, BYTE= NEGATIVE SPACE COUNT
4888                         *
4889 1bc8 2a 1e                  BPL READ2C          NOT A COMPRESSED SPACE
4890                         *
4891 1bca 30                     TSX
4892 1bcb ee 05                  LDX UXH,X           POINT TO FCB
4893 1bcd 6d 29                  TST FCBSCF,X        IN COMPRESSED MODE?
4894 1bcf 27 15                  BEQ READ2B          NO
4895                         *
4896 1bd1 ee 27                  LDX FCBIND,X        POINT TO BUFFER
4897 1bd3 4c                     INC A               ONE FEWER SPACE
4898 1bd4 26 04                  BNE NOTLST          LAST SPACE?
4899                         *
4900 1bd6 86 20                  LDA A #$20          IF SO, REPLACE WITH SPACE
4901 1bd8 20 0e                  BRA READ2C
4902                         *
4903 1bda a7 00              NOTLST STA A 0,X        PUT NEW CHAR. IN BUFFER
4904 1bdc 86 20                  LDA A #$20          OUTPUT A SPACE
4905 1bde 30                     TSX
4906 1bdf a7 04                  STA A UA,X
4907 1be1 ee 05                  LDX UXH,X           POINT TO FCB
4908 1be3 6f 05                  CLR FCBSTA,X        GOOD STATUS
4909 1be5 39                     RTS                 DONE
4910                         *
4911 1be6 ee 27              READ2B  LDX FCBIND,X    POINT TO BUFFER
4912                         *
4913 1be8 08                 READ2C INX              MOVE BUFFER POINTER
4914                             PSHX                STACK IT
4915 1be9 3f                 +       SWI
4916 1bea 05                 +       FCB 5
4917 1beb 30                     TSX
4918 1bec a7 06                  STA A UA+2,X        RETURN BYTE
4919 1bee 32                     PUL A               GET POINTER FROM STACK
4920 1bef 33                     PUL B
4921 1bf0 30                     TSX
4922 1bf1 ee 05                  LDX UXH,X           POINT TO FCB
4923 1bf3 a7 27                  STA A FCBIND,X      SAVE NEW POINTER
4924 1bf5 e7 28                  STA B FCBIND+1,X
4925 1bf7 6f 05                  CLR FCBSTA,X        GOOD STATUS
4926 1bf9 39                     RTS                 DONE
4927                         *
4928                         *
4929                         *
4930 1bfa a6 0a              READ3 LDA A FCBTRK,X
4931 1bfc a1 21                  CMP A FCBLTS,X      AT END OF FILE?
4932 1bfe 26 0b                  BNE READ4           NO
4933                         *
4934 1c00 a6 0b                  LDA A FCBSCT,X
4935 1c02 a1 22                  CMP A FCBLTS+1,X    AT END OF FILE?
4936 1c04 26 05                  BNE READ4           NO
4937                         *
4938 1c06 86 08                  LDA A #8            RETURN END-FILE STATUS
4939 1c08 a7 05              READ3A  STA A FCBSTA,X
4940 1c0a 39                     RTS
4941                         *
4942 1c0b a6 0c              READ4 LDA A FCBFWD,X    GET FORWARD LINK T/S
4943 1c0d e6 0d                  LDA B FCBFWD+1,X
4944 1c0f a7 0a                  STA A FCBTRK,X      PUT LINK INTO T/S
4945 1c11 e7 0b                  STA B FCBSCT,X
4946                             IOHDR               READ LINKED SECTOR
4947 1c13 3f                 +       SWI
4948 1c14 13                 +       FCB 19
4949 1c15 4d                     TST A               ERROR CHECK
4950 1c16 26 f0                  BNE READ3A          RETURN ERROR CODE
4951                         *
4952 1c18 a6 07                  LDA A FCBDBA,X
4953 1c1a e6 08                  LDA B FCBDBA+1,X
4954 1c1c cb 04                  ADD B #4            RE-INIT. INDEX
4955 1c1e 89 00                  ADC A #0            SKIP FOUR BYTES OF LINK
4956 1c20 a7 27                  STA A FCBIND,X
4957 1c22 e7 28                  STA B FCBIND+1,X
4958 1c24 ee 07                  LDX FCBDBA,X        POINT TO BUFFER
4959 1c26 a6 00                  LDA A 0,X           GET NEW FORWARD LINKS
4960 1c28 e6 01                  LDA B 1,X
4961 1c2a 30                     TSX
4962 1c2b ee 05                  LDX UXH,X           POINT TO FCB
4963 1c2d a7 0c                  STA A FCBFWD,X      STORE FORWARD LINKS
4964 1c2f e7 0d                  STA B FCBFWD+1,X
4965 1c31 ee 07                  LDX FCBDBA,X        POINT TO BUFFER
4966 1c33 a6 02                  LDA A 2,X           GET NEW BACKWARD LINKS
4967 1c35 e6 03                  LDA B 3,X
4968 1c37 30                     TSX
4969 1c38 ee 05                  LDX UXH,X           POINT TO FCB
4970 1c3a a7 0e                  STA A FCBBAK,X      STORE BACKWARD LINKS
4971 1c3c e7 0f                  STA B FCBBAK+1,X
4972 1c3e 7e 1b c4               JMP READ2A          NOW READ BYTE
4973                         *
4974 1c41 30                 _WRITE  TSX
4975 1c42 ee 05                  LDX UXH,X           POINT TO FCB
4976 1c44 6d 06                  TST FCBDTT,X        CHECK FOR OUTPUT
4977 1c46 26 05                  BNE WRITE2          OK
4978                         *
4979 1c48 86 12                  LDA A #18
4980 1c4a a7 05                  STA A FCBSTA,X      RETURN ERROR CODE
4981 1c4c 39                     RTS                 QUIT
4982                         *
4983 1c4d a6 27              WRITE2 LDA A FCBIND,X   CHECK FOR END OF BUFFER
4984 1c4f e6 28                  LDA B FCBIND+1,X
4985 1c51 e0 08              WRIT20 SUB B FCBDBA+1,X
4986 1c53 a2 07                  SBC A FCBDBA,X
4987 1c55 b1 19 55               CMP A >BUFSIZ       END OF BUFFER?
4988 1c58 26 05                  BNE WRIT2A          NO
4989                         *
4990 1c5a f1 19 56               CMP B >BUFSIZ+1     END OF BUFFER?
4991 1c5d 27 45                  BEQ WRITE3          YES
4992                         *
4993 1c5f 30                 WRIT2A TSX
4994 1c60 a6 04                  LDA A UA,X          GET CHARACTER TO BE WRITTEN
4995 1c62 ee 05                  LDX UXH,X           POINT TO FCB
4996 1c64 6d 29                  TST FCBSCF,X        IN SPACE-COMPRESSION MODE?
4997 1c66 27 27                  BEQ WRIT2B          NO
4998                         *
4999                         *
5000                         * HANDLE COMPRESSION OF SPACES HERE
5001                         * USE NEGATIVE COUNT OF SPACES
5002                         *
5003 1c68 84 7f                  AND A #$7F          STRIP HIGH BIT
5004 1c6a 81 20                  CMP A #$20          SPACE?
5005 1c6c 26 21                  BNE WRIT2B          NO
5006                         *
5007 1c6e ee 27                  LDX FCBIND,X        POINT TO BUFFER
5008 1c70 e6 00                  LDA B 0,X           GET BYTE FROM BUFFER
5009 1c72 2a 0b                  BPL NEWSPC          FIRST SPACE?
5010                         *
5011 1c74 5a                     DEC B               ONE MORE SPACE ADDED
5012 1c75 2a 0c                  BPL SPC128          SPACE COUNT>128?
5013                         *
5014 1c77 e7 00              STRSPC STA B 0,X        PUT COUNT BACK
5015 1c79 30                     TSX
5016 1c7a ee 05                  LDX UXH,X           POINT TO FCB
5017 1c7c 6f 05                  CLR FCBSTA,X        GOOD STATUS
5018 1c7e 39                     RTS                 DONE
5019                         *
5020 1c7f c6 ff              NEWSPC LDA B #$FF       FIRST COMPRESSED SPACE
5021 1c81 20 f4                  BRA STRSPC
5022                         *
5023 1c83 08                 SPC128 INX              MOVE POINTER
5024                             TXAB
5025 1c84 3f                 +       SWI
5026 1c85 02                 +       FCB 2
5027 1c86 30                     TSX
5028 1c87 ee 05                  LDX UXH,X           POINT TO FCB
5029 1c89 a7 27                  STA A FCBIND,X      SAVE NEW POINTER
5030 1c8b e7 28                  STA B FCBIND+1,X    
5031 1c8d 20 c2                  BRA WRIT20          CONTINUE WITH SPACE
5032                         *
5033                         *
5034                         *
5035 1c8f ee 27              WRIT2B LDX FCBIND,X     POINT TO BUFFER
5036 1c91 6d 00                  TST 0,X             CHAR. ALREADY THERE?
5037 1c93 26 ee                  BNE SPC128          YES
5038                         *
5039 1c95 a7 00                  STA A 0,X           STORE CHARACTER IN BUFFER
5040 1c97 08                     INX                 MOVE POINTER
5041                             TXAB
5042 1c98 3f                 +       SWI
5043 1c99 02                 +       FCB 2
5044 1c9a 30                     TSX
5045 1c9b ee 05                  LDX UXH,X           POINT TO FCB
5046 1c9d a7 27                  STA A FCBIND,X      PUT NEW INDEX IN FCB
5047 1c9f e7 28                  STA B FCBIND+1,X
5048 1ca1 6f 05                  CLR FCBSTA,X        GOOD STATUS
5049 1ca3 39                     RTS                 DONE
5050                         *
5051 1ca4 a6 09              WRITE3 LDA A FCBDRV,X   GET DRIVE NO.
5052 1ca6 84 03                  AND A #$03          LIMIT RANGE (0-3)
5053 1ca8 ce 00 2b               LDX #FRETAB         ACCESS FREE-SPACE TABLE
5054 1cab 48                     ASL A               TWO BYTES/ENTRY
5055                             ADDAX
5056 1cac 3f                 +       SWI
5057 1cad 09                 +       FCB 9
5058 1cae a6 00                  LDA A 0,X           GET FREE-TRACK
5059 1cb0 27 18                  BEQ WRIT3A          END OF DISK?
5060                         *
5061 1cb2 e6 01                  LDA B 1,X           GET FREE-SECTOR
5062 1cb4 27 14                  BEQ WRIT3A          END OF DISK?
5063                         *
5064 1cb6 30                     TSX
5065 1cb7 ee 05                  LDX UXH,X           POINT TO FCB
5066 1cb9 ee 07                  LDX FCBDBA,X        POINT TO DATA BUFFER
5067 1cbb a7 00                  STA A 0,X           NEW FORWARD LINK TRACK
5068 1cbd e7 01                  STA B 1,X           NEW FORWARD LINK SECTOR
5069 1cbf 30                     TSX
5070 1cc0 ee 05                  LDX UXH,X           POINT TO FCB
5071                             IOHDR               WRITE OUT SECTOR
5072 1cc2 3f                 +       SWI
5073 1cc3 13                 +       FCB 19
5074 1cc4 4d                     TST A               ERROR?
5075 1cc5 27 06                  BEQ WRITE4          NO
5076                         *
5077 1cc7 a7 05                  STA A FCBSTA,X      RETURN ERROR STATUS
5078 1cc9 39                     RTS
5079                         *
5080 1cca 7e 1d 3a           WRIT3A JMP WRITE7       MAKE ERROR RETURN
5081                         *
5082 1ccd a6 23              WRITE4 LDA A FCBNMS,X   GET SECTOR COUNT
5083 1ccf e6 24                  LDA B FCBNMS+1,X
5084 1cd1 cb 01                  ADD B #1            INCREMENT IT
5085 1cd3 89 00                  ADC A #0
5086 1cd5 a7 23                  STA A FCBNMS,X
5087 1cd7 e7 24                  STA B FCBNMS+1,X
5088 1cd9 a6 0a                  LDA A FCBTRK,X      GET TRACK JUST WRITTEN
5089 1cdb e6 0b                  LDA B FCBSCT,X      GET SECTOR
5090 1cdd a7 0e                  STA A FCBBAK,X      PUT IN BACK LINK
5091 1cdf e7 0f                  STA B FCBBAK+1,X    
5092 1ce1 a6 09                  LDA A FCBDRV,X      GET DRIVE NO.
5093 1ce3 84 03                  AND A #$03          LIMIT RANGE (0-3)
5094 1ce5 ce 00 2b               LDX #FRETAB         ACCESS FREE-SPACE TABLE
5095 1ce8 48                     ASL A               2 BYTES/ENTRY
5096                             ADDAX
5097 1ce9 3f                 +       SWI
5098 1cea 09                 +       FCB 9
5099 1ceb a6 00                  LDA A 0,X           GET NEXT TRACK
5100 1ced e6 01                  LDA B 1,X           GET NEXT SECTOR
5101                             PSHX                SAVE INDEX TO FREE-SPACE TABLE
5102 1cef 3f                 +       SWI
5103 1cf0 05                 +       FCB 5
5104 1cf1 30                     TSX
5105 1cf2 ee 07                  LDX UXH+2,X         POINT TO FCB
5106 1cf4 a7 0a                  STA A FCBTRK,X      NEW TRACK TO GET
5107 1cf6 e7 0b                  STA B FCBSCT,X      NEW SECTOR
5108 1cf8 6f 06                  CLR FCBDTT,X        MAKE INPUT
5109                             IOHDR               READ IN SECTOR
5110 1cfa 3f                 +       SWI
5111 1cfb 13                 +       FCB 19
5112 1cfc 63 06                  COM FCBDTT,X        REPLACE 'OUTPUT'
5113 1cfe 4d                     TST A               ERROR?
5114 1cff 27 05                  BEQ WRITE5          NO
5115                         *
5116 1d01 a7 05                  STA A FCBSTA,X      RETURN ERROR CODE
5117 1d03 31                     INS                 CLEAN STACK
5118 1d04 31                     INS
5119 1d05 39                     RTS
5120                         *
5121 1d06 ee 07              WRITE5 LDX FCBDBA,X     POINT TO BUFFER
5122 1d08 a6 00                  LDA A 0,X           GET-NEW LINK TRACK
5123 1d0a e6 01                  LDA B 1,X           GET NEW SECTOR
5124                             PULX                RECOVER FREE-SPACE INDEX
5125 1d0c 3f                 +       SWI
5126 1d0d 06                 +       FCB 6
5127 1d0e a7 00                  STA A 0,X           PUT LINK INTO TABLE
5128 1d10 e7 01                  STA B 1,X
5129 1d12 30                     TSX
5130 1d13 ee 05                  LDX UXH,X           POINT TO FCB
5131 1d15 a7 0c                  STA A FCBFWD,X      SET FORWARD LINKS
5132 1d17 e7 0d                  STA B FCBFWD+1,X
5133 1d19 a6 07                  LDA A FCBDBA,X      GET BUFFER ADDRESS
5134 1d1b e6 08                  LDA B FCBDBA+1,X
5135 1d1d cb 04                  ADD B #4            RE-INIT. BUFFER INDEX
5136 1d1f 89 00                  ADC A #0
5137 1d21 a7 27                  STA A FCBIND,X
5138 1d23 e7 28                  STA B FCBIND+1,X
5139 1d25 a6 0e                  LDA A FCBBAK,X      GET BACKWARD LINK
5140 1d27 e6 0f                  LDA B FCBBAK+1,X
5141 1d29 ee 07                  LDX FCBDBA,X        POINT TO BUFFER
5142 1d2b a7 02                  STA A 2,X           PUT IN BACKWARD LINKS
5143 1d2d e7 03                  STA B 3,X
5144 1d2f c6 7c                  LDA B #SECSIZ-4
5145 1d31 6f 04              WRITE6 CLR 4,X          ZERO OUT REST OF BUFFER
5146 1d33 08                     INX
5147 1d34 5a                     DEC B
5148 1d35 26 fa                  BNE WRITE6
5149                         *
5150 1d37 7e 1c 5f               JMP WRIT2A          CONTINUE WITH NEW SECTOR
5151                         *
5152 1d3a 86 07              WRITE7 LDA A #7         DISK FULL ERROR
5153 1d3c 30                     TSX
5154 1d3d ee 05                  LDX UXH,X           POINT TO FCB
5155 1d3f a7 05                  STA A FCBSTA,X
5156 1d41 39                     RTS
5157 1d42 30                 _REWD TSX
5158 1d43 ee 05                  LDX UXH,X           POINT TO FCB
5159 1d45 6d 06                  TST FCBDTT,X        CHECK FOR INPUT
5160 1d47 27 05                  BEQ REWD2           OK?
5161                         *
5162 1d49 86 12                  LDA A #18           ERROR CODE (REWIND OUTPUT FILE)
5163 1d4b a7 05                  STA A FCBSTA,X
5164 1d4d 39                     RTS
5165                         *
5166 1d4e 6f 05              REWD2 CLR FCBSTA,X
5167                             CLOSE               CLOSE FILE
5168 1d50 3f                 +       SWI
5169 1d51 15                 +       FCB 21
5170 1d52 6d 05                  TST FCBSTA,X        CHECK STATUS
5171 1d54 27 01                  BEQ REWD3           OK?
5172                         *
5173 1d56 39                     RTS                 RETURN ERROR STATUS
5174                         *
5175                         REWD3 OPEN              RE-OPEN FILE
5176 1d57 3f                 +       SWI
5177 1d58 14                 +       FCB 20
5178 1d59 39                     RTS
5179                         *
5180                         
5181                         ***********************************************************
5182                         *   NAM ICOMDRV
5183                         *
5184                         * DISK DRIVERS FOR ICOM
5185                         * SINGLE-SECTOR READ/WRITE
5186                         * TO BE USED WITH CP-68 SYSTEM
5187                         ***********************************************************
5188                         
5189 1d5a                            ENT _INTDK      INITIALIZE INTERFACE
5190 1d86                            ENT .RDSEC      READ A SECTOR
5191 1df1                            ENT .WTSEC      WRITE A SECTOR
5192                         *
5193                         * PIA DEFINTIONS
5194                         *
5195 ec00                    INDAT   EQU $EC00       DATA/STATUS INPUT
5196 ec01                    INCTL   EQU $EC01       DATA/STATUS CONTROL
5197 ec02                    CMDDAT  EQU $EC02       COMMAND OUTPUT
5198 ec03                    CMDCTL  EQU $EC03       COMMAND CONTROL
5199 ec06                    OUTDAT  EQU $EC06       DATA OUTPUT
5200 ec07                    OUTCTL  EQU $EC07       DATA OUTPUT CONTROL
5201                         *
5202                         * CONTROL COMMAND DEFINTIONS
5203                         *
5204 0002                    READX   EQU $02         READ
5205 0004                    WRITEX  EQU $04         WRITE
5206 0006                    RDCRC   EQU $06         READ CRC
5207 0008                    SEEK    EQU $08         SEEK
5208 000a                    CLRERF  EQU $0A         RESET ERROR FLAGS
5209 000c                    SEEKT0  EQU $0C         SEEK TRACK 0
5210 0010                    LDTRAD  EQU $10         LOAD TRACK ADDRESS
5211 0020                    LDUS    EQU $20         LOAD UNIT/SECTOR
5212 0030                    LDWBF   EQU $30         LOAD WRITE BUFFER
5213 0040                    SHFTRB  EQU $40         SHIFT READ BUFFER
5214 0080                    CLEAR   EQU $80         CLEAR
5215                         *
5216                         * NOTE: .RDSEC AND .WTSEC CALLED AS SUBROUTINES
5217                         *
5218                         * INITIALIZE DISK INTERFACE
5219                         *
5220 1d5a 7f ec 01           _INTDK CLR INCTL        CLEAR CONTROL REGISTER
5221 1d5d 7f ec 03               CLR CMDCTL
5222 1d60 7f ec 07               CLR OUTCTL
5223 1d63 7f ec 00               CLR INDAT           DDR=INPUT
5224                         *
5225 1d66 86 ff                  LDA A #$FF
5226 1d68 b7 ec 02               STA A CMDDAT        DDR=OUTPUT
5227 1d6b b7 ec 06               STA A OUTDAT
5228                         *
5229 1d6e 86 04                  LDA A #$04
5230 1d70 b7 ec 01               STA A INCTL         INIT. CREG
5231 1d73 b7 ec 07               STA A OUTCTL
5232 1d76 86 2c                  LDA A #$2C
5233 1d78 b7 ec 03               STA A CMDCTL        INIT. CREG
5234                         *
5235 1d7b 86 80                  LDA A #CLEAR
5236 1d7d b7 ec 02               STA A CMDDAT        ISSUE CLEAR COMMAND
5237                         *
5238 1d80 86 0c                  LDA A #SEEKT0
5239 1d82 bd 1e 4d               JSR OUTCMD          SEEK TRACK 0
5240                         *
5241 1d85 39                     RTS
5242                         *
5243                         * SET UP FOR SINGLE-SECTOR READ
5244                         * GET DATA FROM FCB
5245                         * FCB ADDRESS IN (A,B)
5246                         *
5247                         .RDSEC TABX             POINT X TO FCB
5248 1d86 3f                 +       SWI
5249 1d87 03                 +       FCB 3
5250 1d88 a6 09                  LDA A FCBDRV,X
5251 1d8a 0c                     CLC
5252 1d8b 46                     ROR A               MOVE UNIT BITS
5253 1d8c 46                     ROR A
5254 1d8d 46                     ROR A
5255 1d8e aa 0b                  ORA A FCBSCT,X
5256 1d90 e6 0a                  LDA B FCBTRK,X
5257 1d92 ee 07                  LDX FCBDBA,X
5258                         *
5259                         * READ A SECTOR INTO BUFFER
5260                         *
5261                         * A=U/S
5262                         * B=TRACK
5263                         * X=BUFFER ADDRESS
5264                         *
5265 1d94 bd 1e 41           GETBUF JSR XMITUS       SEND UNIT/SECTOR
5266 1d97 bd 1e 74               JSR DRIVCK          DRIVE OK?
5267 1d9a 24 02                  BCC GETBF0          YES
5268                         *
5269 1d9c 20 49                  BRA QUIT            NO, DRIVE BAD
5270                         *
5271 1d9e 17                 GETBF0 TBA              A=TRACK
5272 1d9f bd 1e 66               JSR SEEKTK          SEEK TRACK
5273                         *
5274 1da2 c6 05                  LDA B #5            5 RETRIES
5275                         *
5276 1da4 86 02              GETBF1 LDA A #READX
5277 1da6 bd 1e 4d               JSR OUTCMD          ISSUE READ COMMAND
5278 1da9 b6 ec 00               LDA A INDAT         GET STATUS
5279 1dac 85 08                  BIT A #$08          CRC ERROR?
5280 1dae 27 0a                  BEQ GETBF2          NO
5281                         *
5282 1db0 bd 1e 5e               JSR ERFRST          RESET ERROR FLAGS
5283 1db3 5a                     DEC B               TRIED ENOUGH?
5284 1db4 26 ee                  BNE GETBF1          NO. KEEP TRYING
5285                         *
5286 1db6 86 05                  LDA A #5            RETURN ERROR CODE=5
5287 1db8 20 2d                  BRA QUIT
5288                         *
5289 1dba 85 80              GETBF2 BIT A #$80       DDAM?
5290 1dbc 27 04                  BEQ GETBF3          NO
5291                         *
5292 1dbe 86 09                  LDA A #9            RETURN ERROR CODE=9
5293 1dc0 20 25                  BRA QUIT
5294                         *
5295 1dc2 c6 80              GETBF3  LDA B #128      128 BYTES IN SECTOR
5296                         *
5297 1dc4 86 3c              GETBF4  LDA A #$3C
5298 1dc6 b7 ec 03               STA A CMDCTL        INIT. COMMAND CONTROL REGISTER
5299 1dc9 86 40                  LDA A #SHFTRB
5300 1dcb b7 ec 02               STA A CMDDAT        READ DATA COMMAND
5301                         *
5302 1dce b6 ec 00               LDA A INDAT         GET A BYTE
5303 1dd1 36                     PSH A               SAVE IT
5304                         *
5305 1dd2 86 2c                  LDA A #$2C
5306 1dd4 b7 ec 03               STA A CMDCTL        RESET COMMAND CONTROL
5307                         *
5308 1dd7 86 40                  LDA A #SHFTRB       STROBE
5309 1dd9 b7 ec 02               STA A CMDDAT        READ
5310 1ddc 7f ec 02               CLR CMDDAT          BUFFER
5311                         *
5312 1ddf 32                     PUL A               GET DATA BYTE
5313 1de0 a7 00                  STA A 0,X           MOVE TO BUFFER
5314 1de2 08                     INX
5315 1de3 5a                     DEC B               DONE WITH BUFFER?
5316 1de4 26 de                  BNE GETBF4          NO
5317                         *
5318 1de6 4f                     CLR A               YES, SET RC
5319                         *
5320 1de7 30                 QUIT TSX
5321 1de8 a7 04                  STA A UA,X          RETURN 'A' CONTENTS
5322 1dea ee 05                  LDX UXH,X           GET RCBADR
5323 1dec aa 05                  ORA A FCBSTA,X
5324 1dee a7 05                  STA A FCBSTA,X      RETURN STATUS
5325 1df0 39                     RTS
5326                         *
5327                         * SET UP FOR SINGLE SECTOR WRITE
5328                         * ADDRESS OF FCB PASSED IN (A,B)
5329                         *
5330                         .WTSEC  TABX            POINT X TO FCB
5331 1df1 3f                 +       SWI
5332 1df2 03                 +       FCB 3
5333 1df3 a6 09                  LDA A FCBDRV,X
5334 1df5 0c                     CLC
5335 1df6 46                     ROR A
5336 1df7 46                     ROR A
5337 1df8 46                     ROR A               MOVE UNIT BITS
5338 1df9 aa 0b                  ORA A FCBSCT,X
5339 1dfb e6 0a                  LDA B FCBTRK,X
5340 1dfd ee 07                  LDX FCBDBA,X
5341                         *
5342                         * WRITE A SECTOR TO DISK
5343                         *
5344                         * A=U/S
5345                         * B=TRACK
5346                         * X=BUFFER ADDRESS
5347                         *
5348 1dff 36                 WRTBUF PSH A        SAVE U/S
5349 1e00 37                     PSH B           SAVE TRACK
5350                         *
5351 1e01 c6 80                  LDA B #128      128 BYTES IN BUFFER
5352                         *
5353 1e03 a6 00              WRTBF0 LDA A 0,X    GET A BYTE
5354 1e05 08                     INX
5355 1e06 b7 ec 06               STA A OUTDAT    OUTPUT BYTE
5356 1e09 86 30                  LDA A #LDWBF
5357 1e0b b7 ec 02               STA A CMDDAT    LOAD WRITE BUFFER
5358 1e0e 5a                     DEC B
5359 1e0f 26 f2                  BNE WRTBF0      LOOP UNTIL DONE
5360                         *
5361 1e11 33                     PUL B           RESTORE TRACK
5362 1e12 32                     PUL A           RESTORE U/S
5363                         *
5364 1e13 bd 1e 41               JSR XMITUS      SEND U/S
5365 1e16 bd 1e 74               JSR DRIVCK      DRIVE OK?
5366 1e19 24 02                  BCC WRTBF1      YES
5367                         *
5368 1e1b 20 ca                  BRA QUIT        NO. DRIVE BAD
5369                         *
5370 1e1d 17                 WRTBF1 TBA          A=TRACK
5371 1e1e bd 1e 66               JSR SEEKTK      SEEK TRACK
5372                         *
5373 1e21 c6 05                  LDA B #5        5 RETRIES
5374                         *
5375 1e23 86 04              WRTBF2 LDA A #WRITEX
5376 1e25 bd 1e 4d               JSR OUTCMD      SEND WRITE COMMAND
5377                         *
5378 1e28 86 06                  LDA A #RDCRC
5379 1e2a bd 1e 4d               JSR OUTCMD      SEND CHECK CRC COMMAND
5380 1e2d b6 ec 00               LDA A INDAT     GET STATUS
5381 1e30 85 08                  BIT A #$08      OK?
5382 1e32 27 0a                  BEQ WRTBF3      YES
5383                         *
5384 1e34 bd 1e 5e               JSR ERFRST      RESET ERROR FLAGS
5385 1e37 5a                     DEC B
5386 1e38 26 e9                  BNE WRTBF2      RETRIED 5 TIMES YET?
5387                         *
5388 1e3a 86 05                  LDA A #5        YES, ERROR CODE=5
5389 1e3c 20 a9                  BRA QUIT
5390                         *
5391 1e3e 4f                 WRTBF3 CLR A        SET RC
5392 1e3f 20 a6                  BRA QUIT
5393                         *
5394                         * TRANSMIT UNIT/SECTOR FROM 'A'
5395                         *
5396 1e41 bd 1e 5e           XMITUS JSR ERFRST   CLEAR ERROR FLAGS
5397 1e44 b7 ec 06               STA A OUTDAT    OUTPUT U/S
5398 1e47 86 20                  LDA A #LDUS
5399 1e49 b7 ec 02               STA A CMDDAT    SEND LOAD U/S COMMAND
5400 1e4c 39                     RTS
5401                         *
5402                         * OUTPUT COMMAND FROM 'A'
5403                         *
5404 1e4d 36                 OUTCMD PSH A        SAVE COMMAND
5405 1e4e b6 ec 00               LDA A INDAT     CLEAR BUSY FLAG
5406 1e51 32                     PUL A           RESTORE COMMAND
5407 1e52 b7 ec 02               STA A CMDDAT    OUTPUT COMMAND
5408                         *
5409 1e55 b6 ec 01           OUTCM1 LDA A INCTL  DONE?
5410 1e58 2a fb                  BPL OUTCM1      WAIT FOR DONE
5411                         *
5412 1e5a b6 ec 00               LDA A INDAT     CLEAR BUSY
5413 1e5d 39                     RTS
5414                         *
5415                         * CLEAR ERROR FLAGS
5416                         *
5417 1e5e 36                 ERFRST PSH A        SAVE U/S
5418 1e5f 86 0a                  LDA A #CLRERF
5419 1e61 b7 ec 02               STA A CMDDAT    ISSUE RESET-FLAGS COMMAND
5420 1e64 32                     PUL A           RESTORE U/S
5421 1e65 39                     RTS
5422                         *
5423                         * SEEK TRACK IN 'A'
5424                         *
5425 1e66 b7 ec 06           SEEKTK STA A OUTDAT OUTPUT TRACK
5426 1e69 86 10                  LDA A #LDTRAD
5427 1e6b b7 ec 02               STA A CMDDAT    SEND LOAD-TRACK-ADDRESS COMMAND
5428 1e6e 86 08                  LDA A #SEEK
5429 1e70 bd 1e 4d               JSR OUTCMD      SEND SEEK COMMAND
5430 1e73 39                     RTS
5431                         *
5432                         * DRIVE CHECK
5433                         *
5434 1e74 b6 ec 00           DRIVCK LDA A INDAT  GET STATUS
5435 1e77 84 20                  AND A #$20      DISK READY?
5436 1e79 26 03                  BNE DRVCK1      NO
5437                         *
5438 1e7b 4f                     CLR A           DRIVE OK
5439 1e7c 0c                     CLC
5440 1e7d 39                     RTS
5441                         *
5442 1e7e 0d                 DRVCK1 SEC
5443 1e7f 86 0a                  LDA A #10       RETURN ERROR=10
5444 1e81 39                     RTS
5445                         *
5446                             END


Total Errors: 0
Total Warnings: 0

