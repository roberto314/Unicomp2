------- FILE 6303Rom2.asm LEVEL 1 PASS 2
      1  0000					      org	$0000
      2  0000
      3  0000							;   ROM01.ASM	(HD6303YCP Microprocessor)
      4  0000							;   V2.1e  11/28/16 Fixed PATCH return and updated some DELAY values
      5  0000							;   V2.1d  11/25/16 Fixed a few bugs found in BASIC
      6  0000							;   V2.1c  11/23/16 Added SYS, PEEK & POKE to BASIC
      7  0000							;   V2.1   11/17/16 Fixed Assembeler bug in DESPACE & SHIFTBL
      8  0000							;   V2.0   12/23 Adding MicroBASIC
      9  0000							;   V1.6   12/19 RAM is now 32K, Stack in External Ram, IRQ Test Option '%'
     10  0000							;   V1.5   12/10 Added SNDIHXR Send iHex function, set RP5CR after reset.
     11  0000							;   V1.4   12/7  Improved BEEP, moved stack to internal RAM, 1a fix not needed
     12  0000							;   V1.3   12/7  Added INCHRIF some code cleanup
     13  0000							;   V1.2   12/5  Added Assemble (A) function
     14  0000							;   V1.1   12/2  Added List (B) BEEP function.
     15  0000							;   V1.0   11/30  Added List (L) function.
     16  0000							;   11/28   Functions d,D,S,T,G,g,@,F,M,:,I,O	all working
     17  0000							;	      Jump Tables installed for External calls and IRQs
     18  0000							;	     GetIHEX will process 8K in about 9sec.
     19  0000							;   V5.6    Added debug function and more ROM jump locs
     20  0000							;	     Aded  'g'	Go 2000 command
     21  0000							;
     22  0000					      processor	HD6303
     23  0000
     24  0000		       00 ff	   END	      equ	$FF	; Mark END OF TEXT
     25  0000		       00 01	   REG_DDRP2  equ	$01	; PORT 2 DDR
     26  0000		       00 03	   REG_PORT2  equ	$03	; PORT 2 I/O Address
     27  0000		       00 08	   REG_TCSR1  equ	$08	;Timer Control/Status Reg 1
     28  0000		       00 09	   REG_FRCH   equ	$09	; Free Running Counter MSB
     29  0000		       00 0a	   REG_FRCL   equ	$0A	; Free Running Counter LSB
     30  0000		       00 0b	   REG_OCR1H  equ	$0B	; Output Compare Reg 1 MSB
     31  0000		       00 0c	   REG_OCR1L  equ	$0C	; Output Compare Reg 1 LSB
     32  0000		       00 0f	   REG_TCSR2  equ	$0F	;Timer Control/Status Reg 2
     33  0000		       00 10	   REG_RMCR   equ	$10	;RATE AND MODE CONTROL REGISTER
     34  0000		       00 11	   REG_TRCSR1 equ	$11	;TXD/RXD CONTROL AND STATUS REG.
     35  0000		       00 12	   REG_RDR    equ	$12	;RECEIVE DATA REGISTER
     36  0000		       00 13	   REG_TDR    equ	$13	;TRANSMIT DATA REGISTER
     37  0000		       00 15	   REG_PORT5  equ	$15	; PORT 5 I/O Address
     38  0000		       00 16	   REG_DDRP6  equ	$16	; PORT 6 DDR
     39  0000		       00 17	   REG_PORT6  equ	$17	; PORT 6 I/O Address
     40  0000		       00 20	   REG_DDRP5  equ	$20	; PORT 5 DDR
     41  0000		       00 1e	   REG_TRCSR2 equ	$1E	;TXD/RXD CONTROL AND STATUS REG#2.
     42  0000		       00 1b	   REG_TCSSR3 equ	$1B	;TIMER CONTROL AND STATUS REG#3.
     43  0000		       00 1c	   REG_TCONR  equ	$1C	;TIMER2 CONSTANT REG.
     44  0000		       00 1d	   REG_T2CNT  equ	$1D	;TIMER2 COUNTER REG.
     45  0000
     46  0000							;**** INTERNAL RAM System Variables *****************************
     47  0000							;** The HD6303YCP has 256 bytes of internal RAM at $0040-$013F **
     48  0040					      org	$0040	; Start of Internal RAM
     49  0040		       00 40	   TX_BYTE    equ	$40	; Byte to send
     50  0040		       00 41	   RX_BYTE    equ	$41	; Byte recieved
     51  0040		       00 42	   FLAGS_A    equ	$42	; Flags A: Bit 0=ECHO
     52  0040		       00 43	   COUNT_A    equ	$43	; Counter A
     53  0040		       00 44	   COUNT_B    equ	$44	; Counter B
     54  0040		       00 45	   COUNT_C    equ	$45	; Counter C
     55  0040		       00 46	   ADDR_HI    equ	$46
     56  0040		       00 47	   ADDR_LO    equ	$47
     57  0040		       00 48	   TEMP_01    equ	$48	; Temp Storage 1
     58  0040		       00 49	   TEMP_02    equ	$49	; Temp Storage 2
     59  0040		       00 4a	   TEMP_03    equ	$4A	; Temp Storage 3
     60  0040		       00 4b	   TEMP_04    equ	$4B	; Temp Storage 4
     61  0040		       00 4c	   REC_LEN    equ	$4C	; iHex Record Length
     62  0040		       00 4d	   REC_TYPE   equ	$4D	; iHex Record Type
     63  0040		       00 4f	   REC_CSUM   equ	$4F	; iHex Record Checksum
     64  0040		       00 50	   BLINK_CT   equ	$50	; Blink Counter
     65  0040		       00 51	   IRQFLAG1   equ	$51	; IRQ Save Flag
     66  0040		       00 52	   IRQFLAG2   equ	$52	; IRQ Read Flag
     67  0040
     68  0040		       00 53	   OPCD       equ	$53	; Opcode for disassembly
     69  0040		       00 54	   ROWADDH    equ	$54	; Mnemonic Table Row Address
     70  0040		       00 55	   ROWADDL    equ	$55
     71  0040		       00 56	   OPCFLAGS   equ	$56	;Opcode flags
     72  0040		       00 57	   DISABUFP   equ	$57	;Dissasmbly buffer pointer (2 bytes)
     73  0040		       00 59	   DISADD1    equ	$59	;Disassembly start address (2 bytes)
     74  0040		       00 5b	   DISADD2    equ	$5B	;Disassembly End address (2 bytes)
     75  0040		       00 5d	   LINECT     equ	$5D	;Disassembly Line count
     76  0040
     77  0040		       00 60	   DISABUF    equ	$60	;Dissasmbly buffer (16 bytes $60-$6F)
     78  0040		       00 70	   PARMBUF    equ	$70	;Parameter buffer 5 bytes $70-$74
     79  0040		       00 75	   PARMLEN    equ	$75	;Parameter Length
     80  0040		       00 76	   MSTMRXL    equ	$76	;10ms Timer Low byte
     81  0040		       00 77	   MSTMRXM    equ	$77	;10ms Timer Mid byte
     82  0040		       00 78	   MSTMRXH    equ	$78	;10ms Timer Hi byte
     83  0040
     84  0040		       00 80	   IRQJUMP    equ	$80	; IRQ Jump Table Start(store ISR address at IRXxxx+1)
     85  0040		       00 83	   IRQNMI     equ	$83	; Non Maskable Interrupt
     86  0040		       00 86	   IRQSWI     equ	$86	; Software Interrupt
     87  0040		       00 89	   IRQIRQ1    equ	$89	; IRQ1
     88  0040		       00 8c	   IRQICI     equ	$8C	; Timer1 Input Capture
     89  0040		       00 8f	   IRQOCI     equ	$8F	; Timer 1 Output Capture
     90  0040		       00 92	   IRQTOI     equ	$92	; Timer 1 Overflow
     91  0040		       00 95	   IRQCMI     equ	$95	; Timer 2 Counter Match
     92  0040		       00 98	   IRQIRQ2    equ	$98	; IRQ2
     93  0040		       00 9b	   IRQSIO     equ	$9B	; RDRF+ORFE+TDRE+PER
     94  0040
     95  0040		       00 f0	   DREG_A     equ	$F0	;A Register
     96  0040		       00 f1	   DREG_B     equ	$F1	;B Register
     97  0040		       00 f2	   DREG_XH    equ	$F2	;X Register
     98  0040		       00 f3	   DREG_XL    equ	$F3
     99  0040		       00 f4	   DREG_SPH   equ	$F4	;Stack Pointer
    100  0040		       00 f5	   DREG_SPL   equ	$F5
    101  0040		       00 f6	   DREG_PCH   equ	$F6	;Program Counter
    102  0040		       00 f7	   DREG_PCL   equ	$F7
    103  0040		       00 f8	   DREG_F     equ	$F8	;Flags
    104  0040
    105  0040							; *************************************************************************
    106  0040							;   MicroBASIC Constants      $0220-$0390
    107  0040							; *************************************************************************
    108  0040		       00 72	   MAXLIN     equ	$72	; dc.b 72     ; Max Line Length
    109  0040		       00 7f	   BACKSP     equ	$7F	; dc.b $7F    ;// EMK puTTY backspace = 127
    110  0040		       00 1b	   CANCEL     equ	$1B	; dc.b $1B    ;// EMK Use ESC as cancel
    111  0040
    112  0040							;  **** ORG $0220  *** MEMORY VARIABLES *****
    113  0040		       02 20	   INDEX1     equ	$0220
    114  0040		       02 22	   INDEX2     equ	$0222
    115  0040		       02 24	   INDEX3     equ	$0224
    116  0040		       02 26	   INDEX4     equ	$0226
    117  0040		       02 28	   SAVESP     equ	$0228
    118  0040		       02 2a	   NEXTBA     equ	$022A	;  dc.w END/BASICTOP
    119  0040		       02 2c	   WORKBA     equ	$022C	;  dc.w END/BASICTOP
    120  0040		       02 2e	   SOURCE     equ	$022E	;  dc.w END/BASICTOP
    121  0040		       02 30	   PACKLN     equ	$0230
    122  0040		       02 32	   HIGHLN     equ	$0232
    123  0040		       02 34	   BASPNT     equ	$0234
    124  0040		       02 36	   BASLIN     equ	$0236
    125  0040		       02 38	   PUSHTX     equ	$0238
    126  0040		       02 3a	   XSTACK     equ	$023A	; dc.w $707F
    127  0040		       02 3c	   RNDVAL     equ	$023C
    128  0040		       02 3e	   DIMPNT     equ	$023E
    129  0040		       02 40	   DIMCAL     equ	$0240
    130  0040		       02 42	   PRCNT      equ	$0242	;Print counter
    131  0040		       02 46	   MEMEND     equ	$0246	; dc.w $6FFF	;FDB $1FFF			#### /DTU
    132  0040		       02 48	   ARRTAB     equ	$0248
    133  0040		       02 4a	   KEYWD      equ	$024A
    134  0040		       02 4c	   TSIGN      equ	$024C
    135  0040		       02 4d	   NCMPR      equ	$024D
    136  0040		       02 4e	   TNUMB      equ	$024E
    137  0040		       02 4f	   ANUMB      equ	$024F
    138  0040		       02 50	   BNUMB      equ	$0250
    139  0040		       02 51	   AESTK      equ	$0251	; dc.w ASTACK
    140  0040		       02 53	   FORPNT     equ	$0253	; dc.w FORSTK
    141  0040		       02 55	   VARPNT     equ	$0255	; dc.w VARTAB
    142  0040		       02 57	   SBRPNT     equ	$0257	; dc.w SBRSTK
    143  0040		       02 59	   SBRSTK     equ	$0259
    144  0040		       02 69	   FORSTK     equ	$0269
    145  0040		       02 99	   DIMVAR     equ	$0299	;dc.w VARTAB
    146  0040		       02 ac	   BUFNXT     equ	$02AC	;dc.w $00B0
    147  0040		       02 ae	   ENDBUF     equ	$02AE	;dc.w $00B0
    148  0040		       02 b0	   BUFFER     equ	$02B0
    149  0040		       03 00	   VARTAB     equ	$0300
    150  0040		       03 8c	   ASTACK     equ	$038C
    151  0040		       03 90	   BASICTOP   equ	$0390	;Use this in ROM implementation
    152  0040
    153  0040							; *************************************************************************
    154  0040							;;OPCDTYPE    equ    $F840
    155  0040							;;OPCDEXCP    equ    $F850
    156  0040							;;MNETBLH     equ    $F860
    157  0040							;;MNETBLL     equ    $F9F0
    158  0040							; ***********************************************************************
    159  0040							; * External Call Jump Table
    160  0040							; ***********************************************************************
    161  0040							;DELAYX    equ    $FBD0	 ;Delay based on contents of X approx 10.5us/count
    162  0040							;OUTCHR    equ    $FBD3	 ;Send byte in A to Serial Port
    163  0040							;INCHR     equ    $FBD6	 ;wait for a serial byte and return in A
    164  0040							;INCHRE    equ    $FBD9	 ;wait for a serial byte and return in A with echo
    165  0040							;PUTS	    equ    $FBDC	 ;Transmit data indexed by X
    166  0040							;OUTHEX    equ    $FBDF	 ;Output A as 2 HEX digits
    167  0040							;GETHEXB   equ    $FBE2	 ;Wait until a HEX byte is entered
    168  0040							;INHEXB    equ    $FBE5	 ;Input 2 hex digits return with byte value in A
    169  0040							;GETADDR   equ    $FBE8	 ;Get 4 byte address, save in ADDR_HI & ADDR_LO
    170  0040							;DODUMP    equ    $FBEB	 ;Jump here to save regs, print regs and return
    171  0040							;DMPREG    equ    $FBEE	 ;Save current state of registers in RAM
    172  0040							;PRTREGS   equ    $FBF1	 ;Send saved register values to terminal
    173  0040							;BEEP	    equ    $FBF4	 ;Beep based on contents of A & B
    174  0040							;INCHRIF   equ    $FBF7	 ;Input char if available .. Returns zero if none
    175  0040
    176  8000					      org	$8000	;Start of ROM $8000
    177  8000
    178  8000				   RESET		;subroutine
    179  8000		       0f		      SEI		;Disable interrupts
    180  8001		       86 60		      LDAA	#$60
    181  8003		       97 14		      STAA	$14	;Set RAM/Port5 Ctrl RAME=1,STBY=1,AMRE=0,HLTE=0,MRE=0,IRQ1&2=0
    182  8005
    183  8005		       8e 7f f0 	      LDS	#$7FF0	;Set Stack Pointer (top of external RAM - 16bytes)
    184  8008
    185  8008		       86 01		      LDAA	#$01
    186  800a		       97 42		      STAA	FLAGS_A	; Echo Flag ON
    187  800c
    188  800c		       ce 0d b6 	      LDX	#3510	; delay approx 20ms
    189  800f		       09	   DELBOOT    DEX
    190  8010		       26 fd		      BNE	DELBOOT
    191  8012
    192  8012		       86 f7		      LDAA	#$F7
    193  8014		       97 01		      STAA	REG_DDRP2	;Set Port2 to OUTPUT (except P2.3=Input for RXD)
    194  8016		       86 ff		      LDAA	#$FF
    195  8018		       97 20		      STAA	REG_DDRP5	;P5 DDR  = OUTPUT
    196  801a		       97 15		      STAA	REG_PORT5	;P5 OUTPUTS ALL HIGH
    197  801c		       97 16		      STAA	REG_DDRP6	;P6 DDR  = OUTPUT
    198  801e		       86 00		      LDAA	#$00
    199  8020		       97 17		      STAA	REG_PORT6	;P6 PORT = All LEDs OFF
    200  8022
    201  8022		       86 fa		      LDAA	#250
    202  8024		       97 50		      STAA	BLINK_CT
    203  8026		       bd 82 66 	      JSR	SERINIT	;INIT INTERNAL UART, INTERNAL CLOCK, 9600 BAUD
    204  8029		       bd 82 94 	      JSR	IRQINIT	;Populate IRQ Jump Table
    205  802c
    206  802c		       bd 81 ff 	      JSR	FLASHP6	;Blink LEDs 5x
    207  802f
    208  802f		       86 19		      LDAA	#25	;Duration=1/4sec.
    209  8031		       c6 10		      LDAB	#$10	;Frequency ($10 approx 3KHZ)
    210  8033		       bd 82 1b 	      JSR	BEEP	;Call BEEP
    211  8036
    212  8036		       ce fc 00    MONITOR    LDX	#BOOTMSG
    213  8039		       bd 83 04 	      JSR	PUTS	;Startup Message
    214  803c
    215  803c		       96 12		      LDAA	REG_RDR	;Clear RXD flags & flush buffer
    216  803e
    217  803e		       ce 00 af    LOOP1      LDX	#175	; MAIN Program Loop starting point.
    218  8041		       bd 81 f8 	      JSR	DELAYX	;delay approx 1ms
    219  8044
    220  8044		       7a 00 50    BLINK1     DEC	BLINK_CT	;Decrement the blink counter (250ms based on delay above)
    221  8047		       26 15		      BNE	GETCHR	; NO = look for input & continue
    222  8049		       86 fa		      LDAA	#250	; YES = Reset the blink counter
    223  804b		       97 50		      STAA	BLINK_CT
    224  804d		       96 17		      LDAA	REG_PORT6
    225  804f		       81 80		      CMPA	#$80	;Was previous output = MSB only set?
    226  8051		       27 07		      BEQ	BLINK2	;Yes = Set $70 output
    227  8053		       86 80		      LDAA	#$80	; No = Set $80 output
    228  8055		       97 17		      STAA	REG_PORT6	;P6 PORT
    229  8057		       7e 80 5e 	      JMP	GETCHR	; continue...
    230  805a		       86 70	   BLINK2     LDAA	#$70	; Set $70 output
    231  805c		       97 17		      STAA	REG_PORT6	;P6 PORT
    232  805e
    233  805e		       bd 82 ed    GETCHR     JSR	INCHRIF	;Get input if available
    234  8061		       25 23		      BCS	NOCHR	; No Data Ready then loop again
    235  8063		       bd 82 c5 	      JSR	OUTCHR	;echo it
    236  8066		       ce fc 23 	      LDX	#MSGNL	;Send Newline
    237  8069		       bd 83 04 	      JSR	PUTS
    238  806c
    239  806c		       96 41	   DOMENU     LDAA	RX_BYTE	;Get inbyte
    240  806e		       81 64		      CMPA	#'d	;**** Lowercase 'd' = Dump 16 bytes ****
    241  8070		       26 17		      BNE	IS_D
    242  8072		       bd 83 69 	      JSR	GETADDR	;Enter Address:
    243  8075		       25 09		      BCS	DOMENUX
    244  8077		       ce fc 23 	      LDX	#MSGNL	;Send Newline
    245  807a		       bd 83 04 	      JSR	PUTS
    246  807d		       bd 83 9d 	      JSR	DUMP16	;DUMP16
    247  8080		       ce fc 30    DOMENUX    LDX	#MSGOK
    248  8083		       bd 83 04 	      JSR	PUTS	; Print OK
    249  8086		       7e 80 3e    NOCHR      JMP	LOOP1
    250  8089
    251  8089		       81 44	   IS_D       CMPA	#'D	;**** DUMP256 Command ****
    252  808b		       26 11		      BNE	IS_G	;Uppercase 'D'= Dump 256
    253  808d		       bd 83 69 	      JSR	GETADDR	;Get Start address
    254  8090		       25 ee		      BCS	DOMENUX
    255  8092		       ce fc 23 	      LDX	#MSGNL	;Send Newline
    256  8095		       bd 83 04 	      JSR	PUTS
    257  8098		       bd 83 f7 	      JSR	DUMP256	;Call DUMP256
    258  809b		       7e 81 ef 	      JMP	MENUXOK	;Print OK and resume main loop
    259  809e
    260  809e		       81 47	   IS_G       CMPA	#'G	;**** GO Command ****
    261  80a0		       26 12		      BNE	IS_LG
    262  80a2		       bd 83 69 	      JSR	GETADDR	;Enter Address
    263  80a5		       25 d9		      BCS	DOMENUX
    264  80a7		       ce fc 23 	      LDX	#MSGNL	;Send Newline
    265  80aa		       bd 83 04 	      JSR	PUTS
    266  80ad		       de 46		      LDX	ADDR_HI
    267  80af		       ad 00		      JSR	0,X
    268  80b1		       7e 81 ef 	      JMP	MENUXOK	;Print OK and resume main loop
    269  80b4
    270  80b4		       81 67	   IS_LG      CMPA	#'g	;******** go 2000 Command ****
    271  80b6		       26 08		      BNE	IS_S
    272  80b8		       ce 20 00 	      LDX	#$2000	; Load address of $2000
    273  80bb		       ad 00		      JSR	0,X
    274  80bd		       7e 81 ef 	      JMP	MENUXOK	;Print OK and resume main loop
    275  80c0
    276  80c0		       81 53	   IS_S       CMPA	#'S	;******** Set Memory **********
    277  80c2		       26 22		      BNE	IS_T
    278  80c4		       bd 83 69 	      JSR	GETADDR	;Enter Start Address
    279  80c7		       25 b7		      BCS	DOMENUX
    280  80c9		       ce fc 23 	      LDX	#MSGNL
    281  80cc		       bd 83 04 	      JSR	PUTS	;Newline
    282  80cf		       bd 83 7f    SETMEM     JSR	INHEXB	;Get 1 hex byte
    283  80d2		       25 0f		      BCS	SETMEMX	;If enter was pressed then exit
    284  80d4		       de 46		      LDX	ADDR_HI	;Get address -> X
    285  80d6		       a7 00		      STAA	0,X	;Store input byte
    286  80d8		       08		      INX		;Point at next address
    287  80d9		       df 46		      STX	ADDR_HI	;Save it
    288  80db		       86 20		      LDAA	#$20
    289  80dd		       bd 82 c5 	      JSR	OUTCHR	;Output a space
    290  80e0		       7e 80 cf 	      JMP	SETMEM	;Do it again
    291  80e3		       7e 81 ef    SETMEMX    JMP	MENUXOK	;Print OK and resume main loop
    292  80e6
    293  80e6		       81 54	   IS_T       CMPA	#'T	;**** Text Chars to Memory ****
    294  80e8		       26 1f		      BNE	IS_O
    295  80ea		       bd 83 69 	      JSR	GETADDR	;Enter Start Address
    296  80ed		       25 17		      BCS	TXTMEMX
    297  80ef		       ce fc 23 	      LDX	#MSGNL
    298  80f2		       bd 83 04 	      JSR	PUTS	;Newline
    299  80f5		       bd 82 e4    TXTMEM     JSR	INCHRE	;Get 1 character and echo
    300  80f8		       81 0d		      CMPA	#$0D	;Is it Return?
    301  80fa		       27 0a		      BEQ	TXTMEMX	;Exit
    302  80fc		       de 46		      LDX	ADDR_HI	;Get Address
    303  80fe		       a7 00		      STAA	0,X	;Save byte
    304  8100		       08		      INX		;Inc Address
    305  8101		       df 46		      STX	ADDR_HI	;Save Address
    306  8103		       7e 80 f5 	      JMP	TXTMEM	;Repeat
    307  8106		       7e 81 ef    TXTMEMX    JMP	MENUXOK	;Print OK and resume main loop
    308  8109
    309  8109		       81 4f	   IS_O       CMPA	#'O	;**** PORT OUTPUT ****
    310  810b		       26 12		      BNE	IS_I
    311  810d		       bd 84 f4 	      JSR	PORTOUT
    312  8110		       ce fc 30 	      LDX	#MSGOK
    313  8113		       bd 83 04 	      JSR	PUTS	;Send OK
    314  8116		       ce ff ff 	      LDX	#$FFFF	;delay approx 373ms
    315  8119		       bd 81 f8 	      JSR	DELAYX
    316  811c		       7e 80 3e 	      JMP	LOOP1
    317  811f
    318  811f		       81 49	   IS_I       CMPA	#'I	;**** PORT INPUT ****
    319  8121		       26 06		      BNE	IS_L
    320  8123		       bd 85 31 	      JSR	PORTIN
    321  8126		       7e 81 ef 	      JMP	MENUXOK	;Print OK and resume main loop
    322  8129
    323  8129		       81 4c	   IS_L       CMPA	#'L	;**** List Memory (Dissamble)****
    324  812b		       26 06		      BNE	IS_A
    325  812d		       bd 86 58 	      JSR	LISTMEM
    326  8130		       7e 81 ef 	      JMP	MENUXOK	;Print OK and resume main loop
    327  8133
    328  8133		       81 41	   IS_A       CMPA	#'A	;**** Assemble to Memory ****
    329  8135		       26 18		      BNE	IS_M
    330  8137		       ce fc 58 	      LDX	#MSGSTART	;Enter Start Address:
    331  813a		       bd 83 04 	      JSR	PUTS
    332  813d		       bd 83 7f 	      JSR	INHEXB	;Get 2 hex digits
    333  8140		       25 0a		      BCS	IS_AX	; Exit if enter was pressed ...just exit
    334  8142		       97 46		      STAA	ADDR_HI
    335  8144		       bd 83 7f 	      JSR	INHEXB	;Get 2 hex digits
    336  8147		       97 47		      STAA	ADDR_LO
    337  8149
    338  8149		       bd 88 3e 	      JSR	ASM2MEM	;Assemble to memory
    339  814c		       7e 81 ef    IS_AX      JMP	MENUXOK	;Print OK and resume main loop
    340  814f
    341  814f		       81 4d	   IS_M       CMPA	#'M	;******** Display Menu ********
    342  8151		       26 09		      BNE	IS_LCM
    343  8153		       ce fd 0e    SHOMNU     LDX	#MSGHLP
    344  8156		       bd 83 04 	      JSR	PUTS	;Show Menu
    345  8159		       7e 80 3e 	      JMP	LOOP1
    346  815c		       81 6d	   IS_LCM     CMPA	#'m
    347  815e		       27 f3		      BEQ	SHOMNU
    348  8160
    349  8160		       81 43	   IS_C       CMPA	#'C	;********* Clear Screen ********
    350  8162		       26 09		      BNE	IS_F
    351  8164		       ce fc cd 	      LDX	#MSGCLS
    352  8167		       bd 83 04 	      JSR	PUTS	;Clear Screen VT100 Sequence: Esc[2J Esc[H
    353  816a		       7e 80 3e 	      JMP	LOOP1
    354  816d
    355  816d		       81 46	   IS_F       CMPA	#'F	;******** Fill Memory *******
    356  816f		       26 06		      BNE	IS_LCF
    357  8171		       bd 86 1a 	      JSR	FILLMEM
    358  8174		       7e 81 ef 	      JMP	MENUXOK	;Print OK and resume main loop
    359  8177
    360  8177		       81 66	   IS_LCF     CMPA	#'f	;******** Flash LEDs 10x *******
    361  8179		       26 08		      BNE	IS_H
    362  817b		       c6 0a		      LDAB	#10
    363  817d		       bd 82 01 	      JSR	FLASH1
    364  8180		       7e 81 ef 	      JMP	MENUXOK	;Print OK and resume main loop
    365  8183
    366  8183		       81 48	   IS_H       CMPA	#'H	;** Set High Speed 19200 baud ***
    367  8185		       26 0c		      BNE	IS_Z
    368  8187		       ce fc f6 	      LDX	#MSG19200	;Baud Rate to 19200..
    369  818a		       bd 83 04 	      JSR	PUTS
    370  818d		       bd 82 75 	      JSR	SERINI2
    371  8190		       7e 81 f5 	      JMP	MENUX	;resume main loop
    372  8193
    373  8193		       81 5a	   IS_Z       CMPA	#'Z	;******** Beep *****************
    374  8195		       26 0a		      BNE	IS_B
    375  8197		       86 64		      LDAA	#100	;Duration = 1 sec.
    376  8199		       c6 30		      LDAB	#$30	;Frequency    ($30 approx 1KHZ)
    377  819b		       bd 82 1b 	      JSR	BEEP	;Call BEEP
    378  819e		       7e 81 ef 	      JMP	MENUXOK	;Print OK and resume main loop
    379  81a1
    380  81a1		       81 42	   IS_B       CMPA	#'B	;******** START BASIC (COLD)***********
    381  81a3		       26 09		      BNE	IS_LCB
    382  81a5		       ce fc d7 	      LDX	#MSGBASIC	;  NAM MICRO  MICROBASIC V1.3C
    383  81a8		       bd 83 04 	      JSR	PUTS
    384  81ab		       7e 8b 00    IS_B2      JMP	COLDST
    385  81ae
    386  81ae		       81 62	   IS_LCB     CMPA	#'b	;******** START BASIC (WARM)***********
    387  81b0		       26 0b		      BNE	IS_PCT
    388  81b2		       fe 8b ac 	      LDX	IMPLET
    389  81b5		       8c 95 67 	      CPX	#LET
    390  81b8		       26 f1		      BNE	IS_B2	;** IF BASIC not started use COLD START
    391  81ba		       7e 90 89 	      JMP	READY	;** else jump to warm start location
    392  81bd
    393  81bd		       81 25	   IS_PCT     CMPA	#'%	;**** Start/Stop 10ms Timer ****
    394  81bf		       26 07		      BNE	IS_IHR
    395  81c1		       0f		      SEI
    396  81c2		       bd 8a 91 	      JSR	MS10TMR
    397  81c5		       7e 81 ef 	      JMP	MENUXOK	;Print OK and resume main loop
    398  81c8
    399  81c8		       81 3a	   IS_IHR     CMPA	#$3A	;**** Get IHEX Rec (no echo) ****
    400  81ca		       26 0c		      BNE	IS_SIHX
    401  81cc		       bd 84 12 	      JSR	GETIHEX
    402  81cf		       ce fc 23 	      LDX	#MSGNL
    403  81d2		       bd 83 04 	      JSR	PUTS	;Newline
    404  81d5		       7e 80 3e 	      JMP	LOOP1
    405  81d8
    406  81d8		       81 3b	   IS_SIHX    CMPA	#$3B	; is it a ";"
    407  81da		       26 06		      BNE	IS_AT
    408  81dc		       bd 84 89 	      JSR	SNDIHXR	;Do Send iHex Rec
    409  81df		       7e 80 3e 	      JMP	LOOP1	;No response just continue
    410  81e2
    411  81e2		       81 40	   IS_AT      CMPA	#'@	;**** Attention Command - Response = "$$$" ****
    412  81e4		       26 0f		      BNE	MENUX
    413  81e6		       ce fc aa 	      LDX	#MSGATNRSP
    414  81e9		       bd 83 04 	      JSR	PUTS	;Attention Respones Message = "$$$"
    415  81ec		       7e 80 3e 	      JMP	LOOP1
    416  81ef
    417  81ef		       ce fc 30    MENUXOK    LDX	#MSGOK
    418  81f2		       bd 83 04 	      JSR	PUTS	;Newline
    419  81f5		       7e 80 3e    MENUX      JMP	LOOP1
    420  81f8
    421  81f8
    422  81f8							;;************************************************************************
    423  81f8							;; DELAYX							       OK
    424  81f8							;; Delay routine  approx 5.696us/count  (X * 5.696us)+8.3us
    425  81f8							;; $AB71(43889) 1/4sec   $FFFF(65535)	0.373287sec
    426  81f8							;;************************************************************************
    427  81f8				   DELAYX		;subroutine	   ;approx 5.696 us/count
    428  81f8		       09	   DELAY1     DEX
    429  81f9		       8c 00 00 	      CPX	#$0000
    430  81fc		       26 fa		      BNE	DELAY1
    431  81fe		       39		      RTS
    432  81ff
    433  81ff							;;************************************************************************
    434  81ff							;; FLASHP6							       OK
    435  81ff							;; Toggle all the bits (LEDs) on P6 ON/OFF 5 times using 1/4sec. delay
    436  81ff							;;************************************************************************
    437  81ff				   FLASHP6		;subroutine
    438  81ff		       c6 05		      LDAB	#05
    439  8201		       86 00	   FLASH1     LDAA	#$00
    440  8203		       97 17		      STAA	$17	;P6 PORT
    441  8205		       ce 55 b1 	      LDX	#21937	;approx 1/8 sec
    442  8208		       bd 81 f8 	      JSR	DELAYX
    443  820b
    444  820b		       86 ff		      LDAA	#$FF
    445  820d		       97 17		      STAA	$17	;P6 PORT
    446  820f		       ce 55 b1 	      LDX	#21937	;approx 1/8 sec
    447  8212		       bd 81 f8 	      JSR	DELAYX
    448  8215		       5a		      DECB
    449  8216		       c1 00		      CMPB	#$00
    450  8218		       26 e7		      BNE	FLASH1
    451  821a		       39		      RTS
    452  821b
    453  821b							;;************************************************************************
    454  821b							;; BEEP    Beep using Timer1(FRC) for duration timing
    455  821b							;; Call with: A=Duration $00-$FF(in 10ms increments)  B=PulseWidth $01-$FF
    456  821b							;; Frequency byte calculation	f = 1/(PW+3 * 0.0000114)
    457  821b							;; eg: PW=84 = Approx 1KHZ ((84+3)*0.0000114)=0.000992 1/0.000992=1008Hz
    458  821b							;; PW=((1/f)/0.0000114)-3  eg: (1/1000)=0.001 (0.001/0.0000114)=87.7  (87-3)=84
    459  821b							;; Returns with X,A,B and OCR1 unchanged      (340hz - 21.9Khz)
    460  821b							;;************************************************************************
    461  821b				   BEEP 		;subroutine
    462  821b		       3c		      PSHX		;Save X
    463  821c		       36		      PSHA
    464  821d		       37		      PSHB
    465  821e		       de 0b		      LDX	REG_OCR1H
    466  8220		       3c		      PSHX
    467  8221
    468  8221		       d7 61		      STAB	DISABUF+1	;Pulse Width Value -> DISABUF & DISABUF+1
    469  8223		       97 62		      STAA	DISABUF+2	;Duration Value -> DISABUF+2
    470  8225		       7f 00 60 	      CLR	DISABUF	;Clear High Bytes
    471  8228
    472  8228		       dc 09		      LDD	REG_FRCH	;Set FRC Output $300c = 12300 = 10ms
    473  822a		       c3 30 0c 	      ADDD	#$300C
    474  822d		       dd 0b		      STD	REG_OCR1H
    475  822f		       96 01		      LDAA	REG_DDRP2	;Set PORT2 BIT0 = OUTPUT
    476  8231		       8a 01		      ORAA	#$01
    477  8233		       97 01		      STAA	REG_DDRP2
    478  8235		       0f		      SEI		;Disable interrupts
    479  8236		       96 03	   BEEP1      LDAA	REG_PORT2
    480  8238		       8a 01		      ORAA	#$01
    481  823a		       97 03		      STAA	REG_PORT2	; set the bit
    482  823c
    483  823c		       de 60		      LDX	DISABUF	;Get Pulse Width Value ->X
    484  823e		       bd 81 f8 	      JSR	DELAYX	;Delay based on DISABUF
    485  8241
    486  8241		       96 03		      LDAA	REG_PORT2
    487  8243		       84 fe		      ANDA	#$FE
    488  8245		       97 03		      STAA	REG_PORT2	; clear the bit
    489  8247
    490  8247		       de 60		      LDX	DISABUF	;Get Pulse Width Value ->X
    491  8249		       bd 81 f8 	      JSR	DELAYX	;Delay based on DISABUF
    492  824c
    493  824c		       96 08		      LDAA	REG_TCSR1	;Test OCFI flag
    494  824e		       84 40		      ANDA	#$40
    495  8250		       27 e4		      BEQ	BEEP1	;If Not Set continue...   else...
    496  8252		       dc 09		      LDD	REG_FRCH	;  Otherwise re-load the OCR1 Register
    497  8254		       c3 30 0c 	      ADDD	#$300C	;  with current value + 12300 ($300C)
    498  8257		       dd 0b		      STD	REG_OCR1H
    499  8259
    500  8259		       7a 00 62 	      DEC	DISABUF+2	; Decrement Duration Counter...Done?
    501  825c		       26 d8		      BNE	BEEP1	; If Not Done, continue...
    502  825e
    503  825e							;Restore values from stack & exit
    504  825e		       38	   BEEPX      PULX
    505  825f		       df 0b		      STX	REG_OCR1H	;Restore original OCR1 value
    506  8261		       33		      PULB
    507  8262		       32		      PULA
    508  8263		       38		      PULX		;Restore ORIGINAL X
    509  8264		       0e		      CLI		;Enable interrupts
    510  8265		       39		      RTS
    511  8266							;;************************************************************************
    512  8266							;; SERINIT   Initialize the Serial Port using Timer1
    513  8266							;;************************************************************************
    514  8266				   SERINIT		;subroutine
    515  8266		       86 05		      LDAA	#$05	;ENABLE INTERNAL UART, INTERNAL CLOCK, 9600 BAUD
    516  8268		       97 10		      STAA	REG_RMCR
    517  826a		       86 0a		      LDAA	#$0A	;ENABLE RECIEVE AND TRANSMITT DATA
    518  826c		       97 11		      STAA	REG_TRCSR1
    519  826e		       86 00		      LDAA	#$00	;1 Stop bits No Parity
    520  8270		       97 1e		      STAA	REG_TRCSR2
    521  8272		       96 12		      LDAA	REG_RDR	;FLUSH BUFFER AND CLEAR ERROR FLAGS
    522  8274		       39		      RTS
    523  8275							;;************************************************************************
    524  8275							;; SERINI2   Initialize the Serial Port to 19200 baud using Timer2
    525  8275							;; TCONR: 0=38400, 1=19200, 3=9600, 7=4800, 15=2400 (baud with 4.9152MHZ Xtal)
    526  8275							;;************************************************************************
    527  8275				   SERINI2		;subroutine
    528  8275		       86 01		      LDAA	#$01
    529  8277		       97 1c	   SERINI3    STAA	REG_TCONR	;Timer2 Constan Reg=1 (19200 baud with 4.9152MHZ Xtal)
    530  8279		       96 11		      LDAA	REG_TRCSR1
    531  827b		       84 f5		      ANDA	#$F5	;DISABLE RECIEVE AND TRANSMITT DATA
    532  827d		       97 11		      STAA	REG_TRCSR1
    533  827f		       86 24		      LDAA	#$24	;ENABLE INTERNAL UART, SS2=1(use T2) & CC0=1(8 bit data)
    534  8281		       97 10		      STAA	REG_RMCR
    535  8283		       86 00		      LDAA	#$00	;1 Stop bits No Parity
    536  8285		       97 1e		      STAA	REG_TRCSR2
    537  8287
    538  8287		       96 11		      LDAA	REG_TRCSR1
    539  8289		       8a 0a		      ORAA	#$0A	;ENABLE RECIEVE AND TRANSMITT DATA
    540  828b		       97 11		      STAA	REG_TRCSR1
    541  828d		       86 10		      LDAA	#$10
    542  828f		       97 1b		      STAA	REG_TCSSR3	;Enable Timer2 Counter (T2E=1)
    543  8291		       96 12		      LDAA	REG_RDR	;FLUSH BUFFER AND CLEAR ERROR FLAGS
    544  8293		       39		      RTS
    545  8294
    546  8294							;;************************************************************************
    547  8294							;; IRQINIT   Initialize the Interrupt Jump Table
    548  8294							;;************************************************************************
    549  8294				   IRQINIT		;subroutine
    550  8294		       86 7e		      LDAA	#$7E	;Jump Instruction
    551  8296		       97 80		      STAA	IRQJUMP	;$80	       ; User Jump or TRAP
    552  8298		       97 83		      STAA	IRQNMI	;$83	       ; Non Maskable Interrupt
    553  829a		       97 86		      STAA	IRQSWI	;$86	       ; Software Interrupt
    554  829c		       97 89		      STAA	IRQIRQ1	;$89	       ; IRQ1
    555  829e		       97 8c		      STAA	IRQICI	;$8C	       ; Timer1 Input Capture
    556  82a0		       97 8f		      STAA	IRQOCI	;$8F	       ; Timer 1 Output Capture
    557  82a2		       97 92		      STAA	IRQTOI	;$92	       ; Timer 1 Overflow
    558  82a4		       97 95		      STAA	IRQCMI	;$95	       ; Timer 2 Counter Match
    559  82a6		       97 98		      STAA	IRQIRQ2	;$98	       ; IRQ2
    560  82a8		       97 9b		      STAA	IRQSIO	;$9B	       ; RDRF+ORFE+TDRE+PER
    561  82aa		       fe 8a e8 	      LDX	TRAP01
    562  82ad		       df 81		      STX	IRQJUMP+1
    563  82af		       ce 8a dc 	      LDX	#IRQDEFT
    564  82b2		       df 84		      STX	IRQNMI+1	;$83	       ; Non Maskable Interrupt
    565  82b4		       df 87		      STX	IRQSWI+1	;$86	       ; Software Interrupt
    566  82b6		       df 8a		      STX	IRQIRQ1+1	;$89	       ; IRQ1
    567  82b8		       df 8d		      STX	IRQICI+1	;$8C	       ; Timer1 Input Capture
    568  82ba		       df 90		      STX	IRQOCI+1	;$8F	       ; Timer 1 Output Capture
    569  82bc		       df 93		      STX	IRQTOI+1	;$92	       ; Timer 1 Overflow
    570  82be		       df 96		      STX	IRQCMI+1	;$95	       ; Timer 2 Counter Match
    571  82c0		       df 99		      STX	IRQIRQ2+1	;$98	       ; IRQ2
    572  82c2		       df 9c		      STX	IRQSIO+1	;$9B	       ; RDRF+ORFE+TDRE+PER
    573  82c4		       39		      RTS
    574  82c5
    575  82c5							;;************************************************************************
    576  82c5							;; OUTCHR  Transmit a serial byte from A				OK
    577  82c5							;;
    578  82c5							;; TRCSR1: |RDRF|ORFE|TDRE|RiE|RE|TIE|TE|WU|
    579  82c5							;;************************************************************************
    580  82c5				   OUTCHR		;subroutine
    581  82c5		       37		      PSHB		;SAVE B-REG
    582  82c6		       d6 11	   OUTCHR1    LDAB	REG_TRCSR1	;Get Status Reg
    583  82c8		       58		      ASLB		;TDRE->C
    584  82c9		       58		      ASLB
    585  82ca		       58		      ASLB
    586  82cb		       24 f9		      BCC	OUTCHR1	;READY FOR NEXT CHARACTER
    587  82cd		       97 13		      STAA	REG_TDR
    588  82cf		       33		      PULB		;RESTORE B-REG
    589  82d0		       39		      RTS
    590  82d1
    591  82d1							;;************************************************************************
    592  82d1							;; INCHR  wait for a serial byte and return in A
    593  82d1							;;
    594  82d1							;;************************************************************************
    595  82d1				   INCHRER		;subroutine
    596  82d1		       96 12		      LDAA	REG_RDR	;ON ERROR, FLUSH BUFFER AND CLEAR ERROR FLAG
    597  82d3		       96 11	   INCHR      LDAA	REG_TRCSR1
    598  82d5		       84 c0		      ANDA	#$C0	;FILTER OUT RDRF AND ORFE
    599  82d7		       81 00		      CMPA	#$00
    600  82d9		       27 f8		      BEQ	INCHR	;WAIT FOR CHARACTER
    601  82db		       81 40		      CMPA	#$40
    602  82dd		       27 f2		      BEQ	INCHRER	;	  ;CHECK FOR FRAMING ERROR
    603  82df		       96 12		      LDAA	REG_RDR	;READ RECIEVED CHARACTER
    604  82e1		       97 41		      STAA	RX_BYTE	;Save in RX_BYTE
    605  82e3		       39		      RTS
    606  82e4							;;************************************************************************
    607  82e4							;; INCHRE  wait for a serial byte and return in A with echo
    608  82e4							;;************************************************************************
    609  82e4				   INCHRE		;subroutine
    610  82e4		       bd 82 d3 	      JSR	INCHR
    611  82e7		       bd 82 c5 	      JSR	OUTCHR
    612  82ea		       96 41		      LDAA	RX_BYTE
    613  82ec		       39		      RTS
    614  82ed							;******************************************************************
    615  82ed							; INCHRIF  Input a character if available
    616  82ed							; Returns with input character or zero (with C=1) if none available
    617  82ed							;******************************************************************
    618  82ed		       96 11	   INCHRIF    LDAA	REG_TRCSR1
    619  82ef		       84 c0		      ANDA	#$C0	;FILTER OUT RDRF AND ORFE
    620  82f1		       81 00		      CMPA	#$00
    621  82f3		       27 05		      BEQ	INCHRNC	; No Data Ready loop again
    622  82f5		       bd 82 d3 	      JSR	INCHR	; Data Available so GET Byte
    623  82f8		       0c		      CLC		; Clear The Carry
    624  82f9		       39		      RTS		; Return
    625  82fa		       96 12	   INCHRNC    LDAA	REG_RDR	;Clear RXD flags & flush buffer
    626  82fc		       86 00		      LDAA	#$00	; No Data - Return zero and C=1
    627  82fe		       0d		      SEC
    628  82ff		       39		      RTS
    629  8300
    630  8300							;;************************************************************************
    631  8300							;; PUTS								OK
    632  8300							;; PRINT DATA POINTED AT BY X-REG
    633  8300							;;************************************************************************
    634  8300				   PUTS2		;subroutine
    635  8300		       bd 82 c5 	      JSR	OUTCHR
    636  8303		       08		      INX
    637  8304		       a6 00	   PUTS       LDAA	0,X
    638  8306		       81 ff		      CMPA	#$FF
    639  8308		       26 f6		      BNE	PUTS2	;GO ON IF NOT EOT
    640  830a		       39		      RTS
    641  830b
    642  830b							;;************************************************************************
    643  830b							;; OUTNIBH
    644  830b							;; OUTPUT High 4 bits of A as 1 HEX Digit
    645  830b							;; OUTNIBL
    646  830b							;; OUTPUT Low 4 bits of A as 1 HEX Digit
    647  830b							;;************************************************************************
    648  830b				   OUTNIBH		;subroutine
    649  830b		       44		      LSRA		;OUT HEX LEFT HEX DIGIT
    650  830c		       44		      LSRA
    651  830d		       44		      LSRA
    652  830e		       44		      LSRA
    653  830f		       84 0f	   OUTNIBL    ANDA	#$0F	;OUT HEX RIGHT HEX DIGIT
    654  8311		       8a 30		      ORAA	#$30
    655  8313		       81 39		      CMPA	#$39
    656  8315		       23 02		      BLS	OUTNIBX
    657  8317		       8b 07		      ADDA	#$7
    658  8319		       bd 82 c5    OUTNIBX    JSR	OUTCHR
    659  831c		       39		      RTS
    660  831d
    661  831d							;;************************************************************************
    662  831d							;; OUTHEX
    663  831d							;; Output A as 2 HEX digits
    664  831d							;;************************************************************************
    665  831d				   OUTHEX		;subroutine
    666  831d		       37		      PSHB		;Save B
    667  831e		       16		      TAB		;Save A in B
    668  831f		       bd 83 0b 	      JSR	OUTNIBH	;Print High 4 bits
    669  8322		       17		      TBA		;Get A from B
    670  8323		       bd 83 0f 	      JSR	OUTNIBL	;Print Low 4 Bits
    671  8326		       33		      PULB		;Restore B
    672  8327		       39		      RTS
    673  8328
    674  8328
    675  8328							;;************************************************************************
    676  8328							;; GETHEXB    Wait for 2 HEX chars to be entered, return with value in A
    677  8328							;;************************************************************************
    678  8328				   GETHEXB		;subroutine
    679  8328		       bd 82 d3 	      JSR	INCHR	;Get 1 char
    680  832b		       81 0d		      CMPA	#$0D	; Is it CR?
    681  832d		       27 2e		      BEQ	GETHEX5	; Return with C=1
    682  832f		       81 1b		      CMPA	#$1B	; is it Esc?
    683  8331		       27 2a		      BEQ	GETHEX5	; Return with C=1
    684  8333							;	  CMPA	#$20
    685  8333							;	  BEQ	GETHEX5
    686  8333
    687  8333		       81 30		      CMPA	#'0	; < '0'  ?
    688  8335		       2b f1		      BMI	GETHEXB	; Get another keystroke
    689  8337		       81 67		      CMPA	#'g	; > 'f'  ?
    690  8339		       2a ed		      BPL	GETHEXB	; Get another keystroke
    691  833b		       81 3a		      CMPA	#$3A	; <= '9' ?
    692  833d		       2a 03		      BPL	GETHEX1	; NO = continue  else...
    693  833f		       7e 83 4e 	      JMP	GETHEX3	; Echo & Return
    694  8342		       84 4f	   GETHEX1    ANDA	#$4F	;Convert to Uppercase
    695  8344		       81 47		      CMPA	#'G	; > 'F' ?
    696  8346		       2a e0		      BPL	GETHEXB	; Get another keystroke
    697  8348		       81 40		      CMPA	#$40	; < 'A'
    698  834a		       23 dc		      BLS	GETHEXB	; Get another keystroke
    699  834c		       97 41		      STAA	RX_BYTE	; Save Uppercase version in RX_BYTE
    700  834e		       96 42	   GETHEX3    LDAA	FLAGS_A
    701  8350		       84 01		      ANDA	#$01	;Is ECHO ON?
    702  8352		       27 05		      BEQ	GETHEX4	;NO = Skip OUTCHR
    703  8354		       96 41		      LDAA	RX_BYTE
    704  8356		       bd 82 c5 	      JSR	OUTCHR
    705  8359		       96 41	   GETHEX4    LDAA	RX_BYTE	;Get Input byte
    706  835b		       0c		      CLC		;Return with C=0  OK
    707  835c		       39		      RTS
    708  835d		       0d	   GETHEX5    SEC		;Return with C=1  Exit Char entered (Esc or CR)
    709  835e		       39		      RTS
    710  835f
    711  835f							;;************************************************************************
    712  835f							;; CHR2VAL   Convert ASCII hex char to value in A
    713  835f							;;************************************************************************
    714  835f				   CHR2VAL		;subroutine
    715  835f		       81 41		      CMPA	#'A	; < 'A'
    716  8361		       2a 03		      BPL	CHR2VL1
    717  8363		       84 0f		      ANDA	#$0F
    718  8365		       39		      RTS
    719  8366		       80 37	   CHR2VL1    SUBA	#55	; 'A'-'F'
    720  8368		       39		      RTS
    721  8369
    722  8369							;;************************************************************************
    723  8369							;; GETADDR Prompt for & input 4 hex chars save value in ADDR_HI & ADDR_LO
    724  8369							;;************************************************************************
    725  8369				   GETADDR		;subroutine
    726  8369		       ce fc 47 	      LDX	#MSG001	;Enter Address:
    727  836c		       bd 83 04 	      JSR	PUTS
    728  836f		       bd 83 7f    GETADR1    JSR	INHEXB
    729  8372		       25 0a		      BCS	GETADDX
    730  8374		       97 46		      STAA	ADDR_HI
    731  8376		       bd 83 7f 	      JSR	INHEXB
    732  8379		       25 03		      BCS	GETADDX
    733  837b		       97 47		      STAA	ADDR_LO
    734  837d		       0c		      CLC
    735  837e		       39	   GETADDX    RTS
    736  837f
    737  837f							;;************************************************************************
    738  837f							;; INHEXB   Input 2 hex digits return with byte value in A
    739  837f							;;	     If C=1  exit char was entered
    740  837f							;;************************************************************************
    741  837f				   INHEXB		;subroutine
    742  837f		       bd 83 28 	      JSR	GETHEXB
    743  8382		       25 18		      BCS	INHEXBX
    744  8384		       bd 83 5f 	      JSR	CHR2VAL
    745  8387		       48		      ASLA
    746  8388		       48		      ASLA
    747  8389		       48		      ASLA
    748  838a		       48		      ASLA
    749  838b		       84 f0		      ANDA	#$F0
    750  838d		       97 48		      STAA	TEMP_01
    751  838f		       bd 83 28 	      JSR	GETHEXB
    752  8392		       25 08		      BCS	INHEXBX
    753  8394		       bd 83 5f 	      JSR	CHR2VAL
    754  8397		       9a 48		      ORAA	TEMP_01
    755  8399		       97 48		      STAA	TEMP_01
    756  839b		       0c		      CLC
    757  839c		       39	   INHEXBX    RTS
    758  839d
    759  839d							;;************************************************************************
    760  839d							;; DUMP16								OK
    761  839d							;; Call with start address in ADDR_HI & ADDR_LO
    762  839d							;;************************************************************************
    763  839d				   DUMP16		;subroutine
    764  839d		       96 46		      LDAA	ADDR_HI	;Print Address as 4 HEX chrs
    765  839f		       bd 83 1d 	      JSR	OUTHEX
    766  83a2		       96 47		      LDAA	ADDR_LO
    767  83a4		       bd 83 1d 	      JSR	OUTHEX
    768  83a7		       86 20		      LDAA	#$20	;Print 2 spaces
    769  83a9		       bd 82 c5 	      JSR	OUTCHR
    770  83ac		       bd 82 c5 	      JSR	OUTCHR
    771  83af		       de 46		      LDX	ADDR_HI
    772  83b1		       c6 10		      LDAB	#16	;Set Byte count
    773  83b3		       a6 00	   DUMP161    LDAA	0,X	;Get Data byte
    774  83b5		       bd 83 1d 	      JSR	OUTHEX	;Print as HEX
    775  83b8		       86 20		      LDAA	#$20
    776  83ba		       5a		      DECB
    777  83bb		       c1 08		      CMPB	#8	;On 8th byte print '-' instead of space
    778  83bd		       26 02		      BNE	DUMP162
    779  83bf		       86 2d		      LDAA	#'-
    780  83c1		       bd 82 c5    DUMP162    JSR	OUTCHR
    781  83c4		       08		      INX
    782  83c5		       c1 00		      CMPB	#00	; Done?
    783  83c7		       26 ea		      BNE	DUMP161	; Do next byte
    784  83c9		       bd 82 c5 	      JSR	OUTCHR	; print 3 spaces
    785  83cc		       bd 82 c5 	      JSR	OUTCHR
    786  83cf		       bd 82 c5 	      JSR	OUTCHR
    787  83d2		       de 46		      LDX	ADDR_HI
    788  83d4		       c6 10		      LDAB	#16	;Set Byte count
    789  83d6		       a6 00	   DUMP163    LDAA	0,X	;Get Data byte
    790  83d8		       81 20		      CMPA	#$20	;Less than blank?
    791  83da		       2a 02		      BPL	DUMP164
    792  83dc		       86 2e		      LDAA	#'.
    793  83de		       81 7f	   DUMP164    CMPA	#$7F	;Greater than `~`
    794  83e0		       2b 02		      BMI	DUMP165
    795  83e2		       86 2e		      LDAA	#'.
    796  83e4		       bd 82 c5    DUMP165    JSR	OUTCHR	;print it (or the .)
    797  83e7		       08		      INX
    798  83e8		       5a		      DECB
    799  83e9		       c1 00		      CMPB	#00	;Done?
    800  83eb		       26 e9		      BNE	DUMP163	;Do next byte
    801  83ed		       86 0a		      LDAA	#10
    802  83ef		       bd 82 c5 	      JSR	OUTCHR	;Print LF&CR then return
    803  83f2		       86 0d		      LDAA	#13
    804  83f4		       7e 82 c5 	      JMP	OUTCHR
    805  83f7
    806  83f7							;;************************************************************************
    807  83f7							;; DUMP256								 OK
    808  83f7							;; Call with start address in ADDR_HI & ADDR_LO
    809  83f7							;;************************************************************************
    810  83f7				   DUMP256		;subroutine
    811  83f7		       86 10		      LDAA	#16
    812  83f9		       97 43		      STAA	COUNT_A
    813  83fb		       bd 83 9d    DMP2561    JSR	DUMP16
    814  83fe		       96 43		      LDAA	COUNT_A
    815  8400		       4a		      DECA
    816  8401		       81 00		      CMPA	#00
    817  8403		       27 0c		      BEQ	DMP256X
    818  8405		       97 43		      STAA	COUNT_A
    819  8407		       dc 46		      LDD	ADDR_HI
    820  8409		       c3 00 10 	      ADDD	#16
    821  840c		       dd 46		      STD	ADDR_HI
    822  840e		       7e 83 fb 	      JMP	DMP2561
    823  8411		       39	   DMP256X    RTS
    824  8412
    825  8412							;******************************************************************
    826  8412							; GETIHEX:
    827  8412							; the ':' command - wait for an iHEX record and store it
    828  8412							;		     verify checksum and respond with '*' if OK
    829  8412							;******************************************************************
    830  8412				   GETIHEX		;subroutine
    831  8412		       86 00		      LDAA	#00
    832  8414		       97 45		      STAA	COUNT_C	;Clear Checksum
    833  8416		       97 43		      STAA	COUNT_A	;Byte Counter
    834  8418		       97 42		      STAA	FLAGS_A	;Echo Off
    835  841a
    836  841a		       bd 83 7f 	      JSR	INHEXB	;GET RECORD LENGTH
    837  841d		       25 56		      BCS	GIHERR	;If non hex goto exit
    838  841f		       97 4c		      STAA	REC_LEN	;Save REC LEN
    839  8421		       97 43		      STAA	COUNT_A	;Save in Byte counter
    840  8423
    841  8423		       bd 83 7f 	      JSR	INHEXB	;Get Address save in ADDR_HI & ADDR_LO
    842  8426		       97 46		      STAA	ADDR_HI
    843  8428		       bd 83 7f 	      JSR	INHEXB
    844  842b		       97 47		      STAA	ADDR_LO
    845  842d
    846  842d		       bd 83 7f 	      JSR	INHEXB	;GET RECORD TYPE
    847  8430		       25 43		      BCS	GIHERR	;If non hex goto exit
    848  8432		       97 4d		      STAA	REC_TYPE	;Save REC TYPE
    849  8434
    850  8434		       de 46		      LDX	ADDR_HI	;Get Address
    851  8436
    852  8436		       bd 83 7f    NEXTIHB    JSR	INHEXB	;Get Data Byte
    853  8439		       25 3a		      BCS	GIHERR	;If non hex goto exit
    854  843b		       97 48		      STAA	TEMP_01	;Save in TEMP_01
    855  843d		       9b 45		      ADDA	COUNT_C	; Add to Checksum Count
    856  843f		       97 45		      STAA	COUNT_C
    857  8441		       96 48		      LDAA	TEMP_01	; Get input byte
    858  8443		       a7 00		      STAA	0,X	; Store in Memory
    859  8445		       08		      INX		; Inc Address Pointer
    860  8446		       96 43		      LDAA	COUNT_A	; Get Byte Counter
    861  8448		       4a		      DECA		; Decrement
    862  8449		       81 00		      CMPA	#00
    863  844b		       27 05		      BEQ	GIHCSUM	; Done? - Calculate Checksum
    864  844d		       97 43		      STAA	COUNT_A	; Update Counter
    865  844f		       7e 84 36 	      JMP	NEXTIHB	; Get next byte
    866  8452
    867  8452		       bd 83 7f    GIHCSUM    JSR	INHEXB	; GET INPUT CHECKSUM
    868  8455		       25 1e		      BCS	GIHERR	;If non hex goto exit
    869  8457		       97 4f		      STAA	REC_CSUM	;Save Checksum
    870  8459		       d6 45		      LDAB	COUNT_C	; Get Checksum counter ->B
    871  845b		       96 4c		      LDAA	REC_LEN	; Get Rec Len
    872  845d		       1b		      ABA		; Add Total  B+A->A
    873  845e		       16		      TAB		; Save New Total A->B
    874  845f		       96 4d		      LDAA	REC_TYPE	; Get Rec Type
    875  8461		       1b		      ABA		; Add Total  B+A->A
    876  8462		       16		      TAB		; Save New Total A->B
    877  8463		       96 46		      LDAA	ADDR_HI	; Address HI
    878  8465		       1b		      ABA		; Add Total  B+A->A
    879  8466		       16		      TAB		; Save New Total A->B
    880  8467		       96 47		      LDAA	ADDR_LO	; Address LO
    881  8469		       1b		      ABA		; Add Total
    882  846a		       40		      NEGA		; 2's complement
    883  846b		       97 45		      STAA	COUNT_C	; Save in Checksum counter
    884  846d		       16		      TAB		; also in B
    885  846e
    886  846e		       d1 4f		      CMPB	REC_CSUM	; Get Input Checksum
    887  8470		       26 08		      BNE	GIHERR2	; Checksum Error
    888  8472							; Otherwise
    889  8472		       7e 84 7f 	      JMP	GIHEXIT	; Good Record - Exit
    890  8475
    891  8475		       86 3f	   GIHERR     LDAA	#'?	; Input Error (NON-HEX data)
    892  8477		       7e 84 81 	      JMP	GIHEXX1
    893  847a
    894  847a		       86 45	   GIHERR2    LDAA	#'E	; Checksum Error
    895  847c		       7e 84 81 	      JMP	GIHEXX1
    896  847f
    897  847f		       86 2a	   GIHEXIT    LDAA	#'*
    898  8481		       bd 82 c5    GIHEXX1    JSR	OUTCHR
    899  8484		       86 01		      LDAA	#$01
    900  8486		       97 42		      STAA	FLAGS_A	; Turn ECHO BACK ON
    901  8488		       39		      RTS
    902  8489
    903  8489							;******************************************************************
    904  8489							; SNDIHXRC  the ';' command
    905  8489							; Get Length and start address and send an iHEX record with checksum
    906  8489							;******************************************************************
    907  8489		       4f	   SNDIHXR    CLRA
    908  848a		       97 45		      STAA	COUNT_C	;Clear Checksum
    909  848c		       97 43		      STAA	COUNT_A	;Byte Counter
    910  848e		       97 4d		      STAA	REC_TYPE	;Record Type always = 0
    911  8490
    912  8490		       96 42		      LDAA	FLAGS_A
    913  8492		       84 fe		      ANDA	#$FE
    914  8494		       97 42		      STAA	FLAGS_A	;Set ECHO OFF
    915  8496
    916  8496		       bd 83 7f 	      JSR	INHEXB	;GET RECORD LENGTH
    917  8499		       25 47		      BCS	SIHRERR	; Goto ERROR Exit
    918  849b		       97 4c		      STAA	REC_LEN	; Save in REC_LEN
    919  849d		       97 43		      STAA	COUNT_A	; Save in Byte Counter
    920  849f
    921  849f		       bd 83 7f 	      JSR	INHEXB	;GET Start Address HI
    922  84a2		       25 3e		      BCS	SIHRERR	; Goto ERROR Exit
    923  84a4		       97 46		      STAA	ADDR_HI
    924  84a6		       bd 83 7f 	      JSR	INHEXB	;GET Start Address LO
    925  84a9		       25 37		      BCS	SIHRERR	; Goto ERROR Exit
    926  84ab		       97 47		      STAA	ADDR_LO
    927  84ad
    928  84ad		       86 20		      LDAA	#$20
    929  84af		       bd 82 c5 	      JSR	OUTCHR	;Send Space to Indicate good len & address.
    930  84b2
    931  84b2		       de 46		      LDX	ADDR_HI	;Address->X
    932  84b4		       a6 00	   NXTSHXB    LDAA	0,X	;Get Data from memory
    933  84b6		       bd 83 1d 	      JSR	OUTHEX	;Send as 2 hex chars
    934  84b9		       a6 00		      LDAA	0,X	;Get Data from memory (again)
    935  84bb		       9b 45		      ADDA	COUNT_C	;Add to Checksum counter
    936  84bd		       97 45		      STAA	COUNT_C
    937  84bf		       08		      INX		; Inc Address Pointer
    938  84c0
    939  84c0		       7a 00 43 	      DEC	COUNT_A	; Decrement Byte Counter
    940  84c3		       27 03		      BEQ	SIHCSUM	; Done? - Calculate Checksum
    941  84c5		       7e 84 b4 	      JMP	NXTSHXB	; Send next byte
    942  84c8
    943  84c8		       d6 45	   SIHCSUM    LDAB	COUNT_C	; Get Checksum counter in B
    944  84ca		       96 4c		      LDAA	REC_LEN	; Get Rec Len in A
    945  84cc		       1b		      ABA		; Add Total
    946  84cd		       16		      TAB		; Save New Total in B
    947  84ce		       96 4d		      LDAA	REC_TYPE	; Get Rec Type
    948  84d0		       1b		      ABA		; Add Total
    949  84d1		       16		      TAB		; Save New Total in B
    950  84d2		       96 46		      LDAA	ADDR_HI	; Address HI
    951  84d4		       1b		      ABA		; Add Total
    952  84d5		       16		      TAB		; Save New Total
    953  84d6		       96 47		      LDAA	ADDR_LO	; Address LO
    954  84d8		       1b		      ABA		; Add Total
    955  84d9		       40		      NEGA		; 2's complement
    956  84da		       97 45		      STAA	COUNT_C	; Save in Checksum counter
    957  84dc		       bd 83 1d 	      JSR	OUTHEX	; Send Checksum
    958  84df		       7e 84 e7 	      JMP	SIHREX	; Exit
    959  84e2
    960  84e2		       86 3f	   SIHRERR    LDAA	#'?	; Input Error (NON-HEX data)
    961  84e4		       bd 82 c5 	      JSR	OUTCHR
    962  84e7
    963  84e7		       ce fc 23    SIHREX     LDX	#MSGNL	; send CR & LF
    964  84ea		       bd 83 04 	      JSR	PUTS
    965  84ed
    966  84ed		       96 42		      LDAA	FLAGS_A
    967  84ef		       8a 01		      ORAA	#$01
    968  84f1		       97 42		      STAA	FLAGS_A	;Set ECHO ON
    969  84f3		       39		      RTS
    970  84f4
    971  84f4							;;************************************************************************
    972  84f4							;; PORTOUT
    973  84f4							;;************************************************************************
    974  84f4				   PORTOUT		;subroutine
    975  84f4		       ce fc ae 	      LDX	#MSGPRT
    976  84f7		       bd 83 04 	      JSR	PUTS	;Enter Port#
    977  84fa		       bd 82 e4 	      JSR	INCHRE
    978  84fd		       97 4a		      STAA	TEMP_03
    979  84ff		       ce fc c5 	      LDX	#MSGVAL
    980  8502		       bd 83 04 	      JSR	PUTS	;Enter Value:
    981  8505		       bd 83 7f 	      JSR	INHEXB
    982  8508		       97 4b		      STAA	TEMP_04	;Save Value
    983  850a		       96 4a		      LDAA	TEMP_03	;Get Port#
    984  850c		       81 32		      CMPA	#'2
    985  850e		       26 08		      BNE	OUTP5
    986  8510		       86 ff		      LDAA	#$FF
    987  8512		       97 01		      STAA	$01	;Port2 DDR
    988  8514		       96 4b		      LDAA	TEMP_04
    989  8516		       97 03		      STAA	$03
    990  8518		       81 35	   OUTP5      CMPA	#'5
    991  851a		       26 08		      BNE	OUTP6
    992  851c		       86 ff		      LDAA	#$FF
    993  851e		       97 20		      STAA	$20	;Port5 DDR
    994  8520		       96 4b		      LDAA	TEMP_04
    995  8522		       97 15		      STAA	$15
    996  8524		       81 36	   OUTP6      CMPA	#'6
    997  8526		       26 08		      BNE	OUTPX
    998  8528		       86 ff		      LDAA	#$FF
    999  852a		       97 16		      STAA	$16	;Port6 DDR
   1000  852c		       96 4b		      LDAA	TEMP_04
   1001  852e		       97 17		      STAA	$17
   1002  8530		       39	   OUTPX      RTS
   1003  8531							;;************************************************************************
   1004  8531							;; PORTOUT
   1005  8531							;;************************************************************************
   1006  8531				   PORTIN		;subroutine
   1007  8531		       ce fc ae 	      LDX	#MSGPRT
   1008  8534		       bd 83 04 	      JSR	PUTS	;Enter Port#
   1009  8537		       bd 82 e4 	      JSR	INCHRE
   1010  853a		       16		      TAB
   1011  853b		       86 20		      LDAA	#$20
   1012  853d		       bd 82 c5 	      JSR	OUTCHR
   1013  8540		       c1 32		      CMPB	#'2
   1014  8542		       26 09		      BNE	INP5
   1015  8544		       86 00		      LDAA	#$00
   1016  8546		       97 01		      STAA	$01	;Port2 DDR
   1017  8548		       96 03		      LDAA	$03
   1018  854a		       bd 83 1d 	      JSR	OUTHEX
   1019  854d		       c1 35	   INP5       CMPB	#'5
   1020  854f		       26 09		      BNE	INP6
   1021  8551		       86 00		      LDAA	#$00
   1022  8553		       97 20		      STAA	$20	;Port5 DDR
   1023  8555		       96 15		      LDAA	$15
   1024  8557		       bd 83 1d 	      JSR	OUTHEX
   1025  855a		       c1 36	   INP6       CMPB	#'6
   1026  855c		       26 0d		      BNE	INPX
   1027  855e		       86 00		      LDAA	#$00
   1028  8560		       97 16		      STAA	$16	;Port6 DDR
   1029  8562		       96 17		      LDAA	$17
   1030  8564		       bd 83 1d 	      JSR	OUTHEX
   1031  8567		       86 ff		      LDAA	#$FF
   1032  8569		       97 16		      STAA	$16	;Restore Port6 DDR
   1033  856b		       39	   INPX       RTS
   1034  856c
   1035  856c							;;******************************************************************
   1036  856c							;; Debugging ;subroutines
   1037  856c							;;******************************************************************
   1038  856c		       bd 85 72    DODUMP     JSR	DMPREG	;DEBUG!! Dump registers	DEBUG!!
   1039  856f		       7e 85 86 	      JMP	PRTREGS	;DEBUG!! Print saved registers DEBUG!!
   1040  8572							;;******************************************************************
   1041  8572							;;******************************************************************
   1042  8572							;;DMPREG  Save current state of registers in RAM
   1043  8572							;;******************************************************************
   1044  8572				   DMPREG     Subroutine
   1045  8572		       97 f0		      STAA	DREG_A	;A Register
   1046  8574		       d7 f1		      STAB	DREG_B	;B Register
   1047  8576		       df f2		      STX	DREG_XH	;X Register
   1048  8578		       9f f4		      STS	DREG_SPH	;Stack Pointer
   1049  857a		       38		      PULX
   1050  857b		       df f6		      STX	DREG_PCH	;Program Counter (from stack)
   1051  857d		       3c		      PSHX
   1052  857e		       de f2		      LDX	DREG_XH	;Restore X
   1053  8580		       07		      TPA		;FLAGS->A
   1054  8581		       97 f8		      STAA	DREG_F	;Flags
   1055  8583		       96 f0		      LDAA	DREG_A	;Restore A
   1056  8585		       39		      RTS
   1057  8586
   1058  8586							;;******************************************************************
   1059  8586							;; PRTREGS  Send saved register values to terminal
   1060  8586							;;******************************************************************
   1061  8586				   PRTREGS    Subroutine
   1062  8586		       ce fc 23 	      LDX	#MSGNL
   1063  8589		       bd 83 04 	      JSR	PUTS	;Newline
   1064  858c		       86 20		      LDAA	#$20
   1065  858e		       bd 82 c5 	      JSR	OUTCHR
   1066  8591		       86 41		      LDAA	#'A
   1067  8593		       bd 82 c5 	      JSR	OUTCHR
   1068  8596		       86 3a		      LDAA	#':
   1069  8598		       bd 82 c5 	      JSR	OUTCHR
   1070  859b		       96 f0		      LDAA	DREG_A	;Get Saved A
   1071  859d		       bd 83 1d 	      JSR	OUTHEX
   1072  85a0		       86 20		      LDAA	#$20
   1073  85a2		       bd 82 c5 	      JSR	OUTCHR
   1074  85a5		       86 42		      LDAA	#'B
   1075  85a7		       bd 82 c5 	      JSR	OUTCHR
   1076  85aa		       86 3a		      LDAA	#':
   1077  85ac		       bd 82 c5 	      JSR	OUTCHR
   1078  85af		       96 f1		      LDAA	DREG_B	;Get Saved B
   1079  85b1		       bd 83 1d 	      JSR	OUTHEX
   1080  85b4		       86 20		      LDAA	#$20
   1081  85b6		       bd 82 c5 	      JSR	OUTCHR
   1082  85b9		       86 58		      LDAA	#'X
   1083  85bb		       bd 82 c5 	      JSR	OUTCHR
   1084  85be		       86 3a		      LDAA	#':
   1085  85c0		       bd 82 c5 	      JSR	OUTCHR
   1086  85c3		       96 f2		      LDAA	DREG_XH	;Get Saved X
   1087  85c5		       bd 83 1d 	      JSR	OUTHEX
   1088  85c8		       96 f3		      LDAA	DREG_XL	;Get Saved X
   1089  85ca		       bd 83 1d 	      JSR	OUTHEX
   1090  85cd		       86 20		      LDAA	#$20
   1091  85cf		       bd 82 c5 	      JSR	OUTCHR
   1092  85d2		       86 53		      LDAA	#'S
   1093  85d4		       bd 82 c5 	      JSR	OUTCHR
   1094  85d7		       86 3a		      LDAA	#':
   1095  85d9		       bd 82 c5 	      JSR	OUTCHR
   1096  85dc		       96 f4		      LDAA	DREG_SPH	;Get Saved Stack Pointer
   1097  85de		       bd 83 1d 	      JSR	OUTHEX
   1098  85e1		       96 f5		      LDAA	DREG_SPL	;Get Saved Stack Pointer
   1099  85e3		       bd 83 1d 	      JSR	OUTHEX
   1100  85e6		       86 20		      LDAA	#$20
   1101  85e8		       bd 82 c5 	      JSR	OUTCHR
   1102  85eb		       86 50		      LDAA	#'P
   1103  85ed		       bd 82 c5 	      JSR	OUTCHR
   1104  85f0		       86 3a		      LDAA	#':
   1105  85f2		       bd 82 c5 	      JSR	OUTCHR
   1106  85f5		       96 f6		      LDAA	DREG_PCH	;Get Saved Program Counter
   1107  85f7		       bd 83 1d 	      JSR	OUTHEX
   1108  85fa		       96 f7		      LDAA	DREG_PCL	;Get Saved Program Counter
   1109  85fc		       bd 83 1d 	      JSR	OUTHEX
   1110  85ff		       86 20		      LDAA	#$20
   1111  8601		       bd 82 c5 	      JSR	OUTCHR
   1112  8604		       86 46		      LDAA	#'F
   1113  8606		       bd 82 c5 	      JSR	OUTCHR
   1114  8609		       86 3a		      LDAA	#':
   1115  860b		       bd 82 c5 	      JSR	OUTCHR
   1116  860e		       96 f8		      LDAA	DREG_F	;Get Saved Flags
   1117  8610		       bd 83 1d 	      JSR	OUTHEX
   1118  8613		       ce fc 23 	      LDX	#MSGNL
   1119  8616		       bd 83 04 	      JSR	PUTS	;Newline
   1120  8619		       39		      RTS
   1121  861a
   1122  861a							;;******************************************************************
   1123  861a							;; FILLMEM  Fill Memory routine (F fill)
   1124  861a							;;******************************************************************
   1125  861a				   FILLMEM		;subroutine
   1126  861a		       ce fc 58 	      LDX	#MSGSTART	;Enter Start Address:
   1127  861d		       bd 83 04 	      JSR	PUTS
   1128  8620		       bd 83 7f 	      JSR	INHEXB
   1129  8623		       25 32		      BCS	FILLEX
   1130  8625		       97 46		      STAA	ADDR_HI
   1131  8627		       bd 83 7f 	      JSR	INHEXB
   1132  862a		       25 2b		      BCS	FILLEX
   1133  862c		       97 47		      STAA	ADDR_LO
   1134  862e
   1135  862e		       ce fc 70 	      LDX	#MSGENDAD	;Enter End Address:
   1136  8631		       bd 83 04 	      JSR	PUTS
   1137  8634		       bd 83 7f 	      JSR	INHEXB
   1138  8637		       25 1e		      BCS	FILLEX
   1139  8639		       97 59		      STAA	DISADD1
   1140  863b		       bd 83 7f 	      JSR	INHEXB
   1141  863e		       25 17		      BCS	FILLEX
   1142  8640		       97 5a		      STAA	DISADD1+1
   1143  8642
   1144  8642		       ce fc c5 	      LDX	#MSGVAL	;Value:
   1145  8645		       bd 83 04 	      JSR	PUTS
   1146  8648		       bd 83 7f 	      JSR	INHEXB
   1147  864b							;Start of fill process
   1148  864b		       de 46		      LDX	ADDR_HI	;Get address
   1149  864d		       a7 00	   FILL01     STAA	0,X	;Store the Value
   1150  864f		       9c 59		      CPX	DISADD1	;Match on End Adress?
   1151  8651		       27 04		      BEQ	FILLEX	;Exit
   1152  8653		       08		      INX
   1153  8654		       7e 86 4d 	      JMP	FILL01
   1154  8657		       39	   FILLEX     RTS
   1155  8658
   1156  8658
   1157  8658							;;******************************************************************
   1158  8658							;; LISTMEM  Disassemble code routine (L List)
   1159  8658							;;******************************************************************
   1160  8658				   LISTMEM		;subroutine
   1161  8658		       ce fc 58 	      LDX	#MSGSTART	;Enter Start Address:
   1162  865b		       bd 83 04 	      JSR	PUTS
   1163  865e		       bd 83 7f 	      JSR	INHEXB
   1164  8661		       97 46		      STAA	ADDR_HI
   1165  8663		       bd 83 7f 	      JSR	INHEXB
   1166  8666		       97 47		      STAA	ADDR_LO
   1167  8668
   1168  8668		       86 ff		      LDAA	#$FF
   1169  866a		       97 5d		      STAA	LINECT	;Default line count to indicate use end address
   1170  866c
   1171  866c		       ce fc 70 	      LDX	#MSGENDAD	;Enter End Address:
   1172  866f		       bd 83 04 	      JSR	PUTS
   1173  8672		       bd 83 7f 	      JSR	INHEXB
   1174  8675		       97 59		      STAA	DISADD1
   1175  8677		       24 07		      BCC	LIST01	;If Enter NOT pressed skip ahead else set LINECT=16
   1176  8679		       86 10		      LDAA	#16
   1177  867b		       97 5d		      STAA	LINECT
   1178  867d		       7e 86 8b 	      JMP	LIST02
   1179  8680		       bd 83 7f    LIST01     JSR	INHEXB
   1180  8683		       97 5a		      STAA	DISADD1+1
   1181  8685		       24 04		      BCC	LIST02	;If Enter NOT pressed skip ahead else set LINECT=16
   1182  8687		       86 10		      LDAA	#16
   1183  8689		       97 5d		      STAA	LINECT
   1184  868b							;Start of disassembly
   1185  868b		       de 46	   LIST02     LDX	ADDR_HI	;Get address of opcode
   1186  868d		       a6 00		      LDAA	0,X	;Get the opcode and save it in OPCD
   1187  868f		       97 53		      STAA	OPCD
   1188  8691		       ce fc 23 	      LDX	#MSGNL
   1189  8694		       bd 83 04 	      JSR	PUTS	;Print a Newline
   1190  8697
   1191  8697		       bd 87 e0 	      JSR	OPCTYPE	;determine opcode type and parmcount
   1192  869a		       96 53		      LDAA	OPCD
   1193  869c		       84 c0		      ANDA	#$C0
   1194  869e		       81 00		      CMPA	#$00
   1195  86a0		       26 06		      BNE	LIST03
   1196  86a2		       bd 88 27 	      JSR	SRCHMNL	;Search Mnemonic Table LO for opcode in A
   1197  86a5		       7e 86 b5 	      JMP	LIST04
   1198  86a8		       bd 88 09    LIST03     JSR	SRCHMNH	;Search Mnemonic Table HI for opcode in A
   1199  86ab		       81 00		      CMPA	#$00
   1200  86ad		       26 15		      BNE	LIST05	;Continue only if opcode found in table
   1201  86af		       ce f9 70 	      LDX	#MNETBLM	;Get Table Start Address of table M
   1202  86b2		       bd 88 0c 	      JSR	SRCHMH1	;Search Mnemonic Table 'M' for opcode in A
   1203  86b5		       81 00	   LIST04     CMPA	#$00
   1204  86b7		       26 0b		      BNE	LIST05	;Continue only if opcode found in table
   1205  86b9		       86 3f		      LDAA	#'?	;If not found report error
   1206  86bb		       bd 82 c5 	      JSR	OUTCHR
   1207  86be		       bd 82 c5 	      JSR	OUTCHR
   1208  86c1		       7e 87 72 	      JMP	LISTEX
   1209  86c4
   1210  86c4		       86 20	   LIST05     LDAA	#$20	;Print a space
   1211  86c6		       bd 82 c5 	      JSR	OUTCHR
   1212  86c9
   1213  86c9		       bd 87 73 	      JSR	CLRDABUF	;Clear the disassembly buffer & reset pointer
   1214  86cc		       bd 87 8a 	      JSR	PUTMNEM	;Transfer the mnemonic for the opcode found to the disassembly buffer
   1215  86cf
   1216  86cf		       96 46		      LDAA	ADDR_HI	;Print Address
   1217  86d1		       bd 83 1d 	      JSR	OUTHEX
   1218  86d4		       96 47		      LDAA	ADDR_LO
   1219  86d6		       bd 83 1d 	      JSR	OUTHEX
   1220  86d9		       86 20		      LDAA	#$20	;Print 1 space
   1221  86db		       bd 82 c5 	      JSR	OUTCHR
   1222  86de
   1223  86de		       96 53		      LDAA	OPCD
   1224  86e0		       bd 83 1d 	      JSR	OUTHEX	;print Opcode
   1225  86e3		       86 20		      LDAA	#$20	;Print 1 space
   1226  86e5		       bd 82 c5 	      JSR	OUTCHR
   1227  86e8
   1228  86e8		       96 56		      LDAA	OPCFLAGS	;Get OPCFLAGA
   1229  86ea		       84 03		      ANDA	#$03	;Mask for parm count (0, 1 or 2)
   1230  86ec		       81 00		      CMPA	#$00	;If zero parms just print spaces
   1231  86ee		       27 1c		      BEQ	LIST07
   1232  86f0		       de 46		      LDX	ADDR_HI	;GET opcode address in X
   1233  86f2		       81 01		      CMPA	#$01	;Check parm count .. if 1 only print 1 parm
   1234  86f4		       27 0b		      BEQ	LIST06
   1235  86f6		       08		      INX		;point X at parm
   1236  86f7		       a6 00		      LDAA	0,X
   1237  86f9		       bd 83 1d 	      JSR	OUTHEX	;print parm#
   1238  86fc		       86 20		      LDAA	#$20	;Print 1 space
   1239  86fe		       bd 82 c5 	      JSR	OUTCHR
   1240  8701		       08	   LIST06     INX		;point X at parm
   1241  8702		       a6 00		      LDAA	0,X
   1242  8704		       bd 83 1d 	      JSR	OUTHEX	;print parm
   1243  8707		       86 20		      LDAA	#$20	;Print 1 space
   1244  8709		       bd 82 c5 	      JSR	OUTCHR
   1245  870c							;print the appropriate number of spaces based on parm count
   1246  870c		       d6 56	   LIST07     LDAB	OPCFLAGS	;Get OPCFLAGA
   1247  870e		       c4 03		      ANDB	#$03	;Mask for parm count (0, 1 or 2)
   1248  8710		       86 04		      LDAA	#$04
   1249  8712		       10		      SBA		;3 - parmcount -> A
   1250  8713		       16		      TAB		;A->B
   1251  8714		       86 20	   LIST08     LDAA	#$20	;Print 3 spaces
   1252  8716		       bd 82 c5 	      JSR	OUTCHR
   1253  8719		       bd 82 c5 	      JSR	OUTCHR
   1254  871c		       bd 82 c5 	      JSR	OUTCHR
   1255  871f		       5a		      DECB
   1256  8720		       c1 00		      CMPB	#$00	;If not done print 3 more spaces
   1257  8722		       26 f0		      BNE	LIST08
   1258  8724
   1259  8724		       ce 00 60 	      LDX	#DISABUF
   1260  8727		       bd 83 04 	      JSR	PUTS	;Print the Mnemonic buffer
   1261  872a
   1262  872a		       de 46		      LDX	ADDR_HI	;GET opcode address
   1263  872c		       96 56		      LDAA	OPCFLAGS	;Get OPCFLAGA
   1264  872e		       84 03		      ANDA	#$03	;Mask for parm count (0, 1 or 2)
   1265  8730		       81 00		      CMPA	#$00	;If zero parms just update X and exit
   1266  8732		       27 10		      BEQ	LIST10
   1267  8734		       81 01		      CMPA	#$01	;Check parm count .. if 1 only print 1 parm
   1268  8736		       27 06		      BEQ	LIST09
   1269  8738		       08		      INX		;point X at parm
   1270  8739		       a6 00		      LDAA	0,X
   1271  873b		       bd 83 1d 	      JSR	OUTHEX
   1272  873e		       08	   LIST09     INX		;point X at parm
   1273  873f		       a6 00		      LDAA	0,X
   1274  8741		       bd 83 1d 	      JSR	OUTHEX	;print parm
   1275  8744
   1276  8744		       08	   LIST10     INX		;point X at next opcode
   1277  8745		       df 46		      STX	ADDR_HI	;Save new address
   1278  8747		       96 56		      LDAA	OPCFLAGS	;Get OPCFLAGA
   1279  8749		       84 30		      ANDA	#$30	;Mask for type (0, 1 or 2)
   1280  874b		       81 30		      CMPA	#$30
   1281  874d		       26 0a		      BNE	LISTNXT	;If Not type 3 just continue otherwise add ",X" to output
   1282  874f		       86 2c		      LDAA	#',
   1283  8751		       bd 82 c5 	      JSR	OUTCHR
   1284  8754		       86 58		      LDAA	#'X
   1285  8756		       bd 82 c5 	      JSR	OUTCHR
   1286  8759
   1287  8759		       96 5d	   LISTNXT    LDAA	LINECT
   1288  875b		       81 ff		      CMPA	#$FF	;Using END Address?
   1289  875d		       27 0a		      BEQ	LSTCKEA
   1290  875f		       4a		      DECA
   1291  8760		       97 5d		      STAA	LINECT
   1292  8762		       81 00		      CMPA	#00
   1293  8764		       27 0c		      BEQ	LISTEX
   1294  8766		       7e 86 8b 	      JMP	LIST02
   1295  8769
   1296  8769		       de 59	   LSTCKEA    LDX	DISADD1	;Get the end address ->X
   1297  876b		       9c 46		      CPX	ADDR_HI	;Subtract current address (next opcode to process)
   1298  876d		       2b 03		      BMI	LISTEX	;If done exit otherwise ...
   1299  876f		       7e 86 8b 	      JMP	LIST02	;   process the next opcode
   1300  8772		       39	   LISTEX     RTS
   1301  8773
   1302  8773							;******************************************************************
   1303  8773							;CLRDABUF
   1304  8773							;******************************************************************
   1305  8773				   CLRDABUF		;subroutine
   1306  8773		       ce 00 60 	      LDX	#$0060
   1307  8776		       86 20		      LDAA	#$20
   1308  8778		       a7 00	   CLRDAB1    STAA	0,X
   1309  877a		       08		      INX
   1310  877b		       8c 00 6f 	      CPX	#$6F
   1311  877e		       26 f8		      BNE	CLRDAB1
   1312  8780		       86 ff		      LDAA	#$FF
   1313  8782		       a7 00		      STAA	0,X
   1314  8784		       ce 00 60 	      LDX	#$0060
   1315  8787		       97 57		      STAA	DISABUFP
   1316  8789		       39		      RTS
   1317  878a
   1318  878a							;******************************************************************
   1319  878a							; PUTMNEM
   1320  878a							; transfer the mnemonic for the opcode found to the disassembly buffer
   1321  878a							; populate the parameter format that will be used
   1322  878a							;******************************************************************
   1323  878a				   PUTMNEM		;subroutine
   1324  878a		       ce 00 60 	      LDX	#DISABUF
   1325  878d		       df 57		      STX	DISABUFP
   1326  878f		       de 54	   PUTMNE1    LDX	ROWADDH
   1327  8791		       a6 00		      LDAA	0,X
   1328  8793		       08		      INX
   1329  8794		       df 54		      STX	ROWADDH
   1330  8796		       de 57		      LDX	DISABUFP
   1331  8798		       a7 00		      STAA	0,X
   1332  879a		       08		      INX
   1333  879b		       df 57		      STX	DISABUFP
   1334  879d		       8c 00 64 	      CPX	#$64
   1335  87a0		       26 ed		      BNE	PUTMNE1
   1336  87a2
   1337  87a2		       96 56		      LDAA	OPCFLAGS	;Add 'A' or 'B' if indicated by flags
   1338  87a4		       84 0c		      ANDA	#$0C
   1339  87a6		       81 04		      CMPA	#$04
   1340  87a8		       26 07		      BNE	PUTMNE2
   1341  87aa		       86 41		      LDAA	#'A
   1342  87ac		       97 63		      STAA	DISABUF+3
   1343  87ae		       7e 87 b9 	      JMP	PUTMNE3
   1344  87b1		       81 08	   PUTMNE2    CMPA	#$08
   1345  87b3		       26 04		      BNE	PUTMNE3
   1346  87b5		       86 42		      LDAA	#'B
   1347  87b7		       97 63		      STAA	DISABUF+3
   1348  87b9		       96 56	   PUTMNE3    LDAA	OPCFLAGS
   1349  87bb		       84 30		      ANDA	#$30
   1350  87bd		       81 00		      CMPA	#$00
   1351  87bf		       26 05		      BNE	PUTMNE4
   1352  87c1		       86 ff		      LDAA	#$FF
   1353  87c3		       97 66		      STAA	DISABUF+6
   1354  87c5		       39		      RTS
   1355  87c6		       81 10	   PUTMNE4    CMPA	#$10
   1356  87c8		       26 0d		      BNE	PUTMNE5
   1357  87ca		       86 23		      LDAA	#'#
   1358  87cc		       97 66		      STAA	DISABUF+6
   1359  87ce		       86 24		      LDAA	#'$
   1360  87d0		       97 67		      STAA	DISABUF+7
   1361  87d2		       86 ff		      LDAA	#$FF
   1362  87d4		       97 68		      STAA	DISABUF+8
   1363  87d6		       39		      RTS
   1364  87d7		       86 24	   PUTMNE5    LDAA	#'$
   1365  87d9		       97 66		      STAA	DISABUF+6
   1366  87db		       86 ff		      LDAA	#$FF
   1367  87dd		       97 67		      STAA	DISABUF+7
   1368  87df		       39		      RTS
   1369  87e0
   1370  87e0							;******************************************************************
   1371  87e0							;OPCTYPE  Set OPCFLAGS indicating type, action and parm count
   1372  87e0							;	   RETURN with OPCFLAGS in A
   1373  87e0							;******************************************************************
   1374  87e0				   OPCTYPE		;subroutine
   1375  87e0		       ce f8 40 	      LDX	#OPCDTYPE	;Get address of OPCDTYPE lookup table in X
   1376  87e3		       d6 53		      LDAB	OPCD	;Get opcode
   1377  87e5		       54		      LSRB		;Shift hi bits to low 4 bits
   1378  87e6		       54		      LSRB
   1379  87e7		       54		      LSRB
   1380  87e8		       54		      LSRB
   1381  87e9		       c4 0f		      ANDB	#$0F	;mask high 4 bits
   1382  87eb		       3a		      ABX		;add to X
   1383  87ec		       a6 00		      LDAA	0,X	;Get the flags from the table
   1384  87ee		       97 56		      STAA	OPCFLAGS	;Store in OPCFLAGS
   1385  87f0		       84 03		      ANDA	#$03	;Mask parm count bits
   1386  87f2		       81 00		      CMPA	#$00	; If Zero no parms
   1387  87f4		       27 12		      BEQ	OPCTYPX	; so just exit  .. otherwise...
   1388  87f6		       ce f8 50    OPCEXCP    LDX	#OPCDEXCP	; Check exception table
   1389  87f9		       d6 53		      LDAB	OPCD
   1390  87fb		       a6 00	   OPCEXP1    LDAA	0,X
   1391  87fd		       81 00		      CMPA	#00
   1392  87ff		       27 07		      BEQ	OPCTYPX
   1393  8801		       08		      INX
   1394  8802		       11		      CBA
   1395  8803		       26 f6		      BNE	OPCEXP1
   1396  8805		       7c 00 56 	      INC	OPCFLAGS	;If found add 1 to parm count
   1397  8808
   1398  8808		       39	   OPCTYPX    RTS
   1399  8809
   1400  8809							;******************************************************************
   1401  8809							;SRCHMNH    Search Mnemonic Table 'H'
   1402  8809							;******************************************************************
   1403  8809				   SRCHMNH		;subroutine
   1404  8809		       ce f8 60 	      LDX	#MNETBLH	;Get Table Start Address
   1405  880c		       df 54	   SRCHMH1    STX	ROWADDH	;Save in ROWADDH & L
   1406  880e		       08		      INX		;Skip past Mnemonic bytes
   1407  880f		       08		      INX
   1408  8810		       08		      INX
   1409  8811		       08		      INX
   1410  8812		       c6 04		      LDAB	#$04	;byte count = 4 (4 bytes per mnemonic row)
   1411  8814		       a6 00	   SRCHMH2    LDAA	0,X	;Get opcode from table
   1412  8816		       91 53		      CMPA	OPCD	;compare to save opcode
   1413  8818		       27 0c		      BEQ	SRCHMHX	;Match found then exit
   1414  881a							; else
   1415  881a		       08		      INX		;point next opcode
   1416  881b		       5a		      DECB		;dec byte count
   1417  881c		       c1 00		      CMPB	#00	;done with this mnemonic/row
   1418  881e		       26 f4		      BNE	SRCHMH2	;not yet .. then test this opcode
   1419  8820		       a6 00		      LDAA	0,X	;get 1st byte from next row
   1420  8822		       81 00		      CMPA	#00	;zero indicates end of table reached - search failed
   1421  8824		       26 e6		      BNE	SRCHMH1	; not zero then keep looking
   1422  8826		       39	   SRCHMHX    RTS		; otherwise return with A=0
   1423  8827
   1424  8827							;******************************************************************
   1425  8827							;SRCHMNL    Search Mnemonic Table 'L'
   1426  8827							;******************************************************************
   1427  8827				   SRCHMNL		;subroutine
   1428  8827		       ce f9 f8 	      LDX	#MNETBLL	;Get Table Start Address
   1429  882a		       df 54	   SRCHML1    STX	ROWADDH	;Save in ROWADDH & L
   1430  882c		       08		      INX		;Skip past Mnemonic bytes
   1431  882d		       08		      INX
   1432  882e		       08		      INX
   1433  882f		       08		      INX
   1434  8830		       a6 00	   SRCHML2    LDAA	0,X	;Get opcode from table
   1435  8832		       91 53		      CMPA	OPCD	;compare to save opcode
   1436  8834		       27 07		      BEQ	SRCHMLX	;Match found then exit
   1437  8836							; else
   1438  8836		       08		      INX		;point start of next row
   1439  8837		       a6 00		      LDAA	0,X	;get 1st byte from next row
   1440  8839		       81 00		      CMPA	#00	;zero indicates end of table reached - search failed
   1441  883b		       26 ed		      BNE	SRCHML1	; not zero then keep looking
   1442  883d		       39	   SRCHMLX    RTS		; otherwise return with A=0
   1443  883e
   1444  883e							;;************************************************************************
   1445  883e							;;  Assemble Function ASM2MEM
   1446  883e							;;************************************************************************
   1447  883e							;;******************************************************************
   1448  883e							;; ASM2MEM  Assemble to Memory function
   1449  883e							;;    Call with start address in ADDR_HI & ADDR_LO
   1450  883e							;;******************************************************************
   1451  883e				   ASM2MEM		;subroutine
   1452  883e		       86 00		      LDAA	#$00	;Reset line count
   1453  8840		       97 5d		      STAA	LINECT
   1454  8842
   1455  8842		       ce fc 23 	      LDX	#MSGNL
   1456  8845		       bd 83 04 	      JSR	PUTS	;Newline
   1457  8848
   1458  8848		       96 46		      LDAA	ADDR_HI	;Print Address
   1459  884a		       bd 83 1d 	      JSR	OUTHEX
   1460  884d		       96 47		      LDAA	ADDR_LO
   1461  884f		       bd 83 1d 	      JSR	OUTHEX
   1462  8852		       86 20		      LDAA	#$20	;Print a space
   1463  8854		       bd 82 c5 	      JSR	OUTCHR
   1464  8857
   1465  8857		       bd 87 73 	      JSR	CLRDABUF	; Clear input buffer
   1466  885a		       bd 8a 61 	      JSR	GETSTR	; Input 1 line of text
   1467  885d		       df 57		      STX	DISABUFP	; save buffer exit position
   1468  885f		       8c 00 63 	      CPX	#DISABUF+3
   1469  8862		       24 01		      BCC	ASM201
   1470  8864		       39	   ASM2X1     RTS		; Less than 3 bytes entered = DONE just exit
   1471  8865
   1472  8865		       bd 8a 28    ASM201     JSR	DESPACE	; Remove spaces from input
   1473  8868		       bd 89 fb 	      JSR	MOVPRM	; Move parm bytes to PARMBUF & set PARMLEN
   1474  886b		       bd 89 74 	      JSR	SETTYPE	; Set type flags
   1475  886e		       81 ff		      CMPA	#$FF	;Check for error
   1476  8870		       26 03		      BNE	ASM202
   1477  8872		       7e 89 0f 	      JMP	ASM2ERX
   1478  8875
   1479  8875		       ce f9 f8    ASM202     LDX	#MNETBLL	;Address of MNETBLL->X
   1480  8878		       c6 05		      LDAB	#$05	; Table Row length ->B
   1481  887a		       bd 89 b4 	      JSR	ASMSH4	;Search Table L
   1482  887d		       81 00		      CMPA	#$00
   1483  887f		       26 61		      BNE	ASM2PR	;if found search continue to process...
   1484  8881
   1485  8881		       86 00	   ASM2SH     LDAA	#$00	;Reset line count
   1486  8883		       97 5d		      STAA	LINECT
   1487  8885		       ce f8 60 	      LDX	#MNETBLH	;Address of MNETBLH->X
   1488  8888		       c6 08		      LDAB	#$08
   1489  888a		       bd 89 b4 	      JSR	ASMSH4	;Search Table H
   1490  888d		       81 00		      CMPA	#$00
   1491  888f		       27 1d		      BEQ	ASM2SM	; if not found search table M
   1492  8891		       d6 56		      LDAB	OPCFLAGS	; Get Type 0,1,2,4 or 8
   1493  8893		       c1 02		      CMPB	#$02
   1494  8895		       26 05		      BNE	ASM2SH1
   1495  8897		       a6 05		      LDAA	5,X	;if type=2 use opcode col#1
   1496  8899		       7e 88 e2 	      JMP	ASM2PR
   1497  889c		       c1 04	   ASM2SH1    CMPB	#$04
   1498  889e		       26 05		      BNE	ASM2SH2
   1499  88a0		       a6 06		      LDAA	6,X	;if type=4 use opcode col#2
   1500  88a2		       7e 88 e2 	      JMP	ASM2PR
   1501  88a5		       c1 08	   ASM2SH2    CMPB	#$08
   1502  88a7		       26 39		      BNE	ASM2PR
   1503  88a9		       a6 07		      LDAA	7,X	;if type=8 use opcode col#3
   1504  88ab		       7e 88 e2 	      JMP	ASM2PR	; else using opcd col#0 (already saved)
   1505  88ae
   1506  88ae		       86 00	   ASM2SM     LDAA	#$00	;Reset line count
   1507  88b0		       97 5d		      STAA	LINECT
   1508  88b2		       ce f9 70 	      LDX	#MNETBLM	;Address of MNETBLM->X
   1509  88b5		       c6 08		      LDAB	#$08
   1510  88b7		       bd 89 d3 	      JSR	ASMSH3	;Search Table M (compare 1st 3 bytes only)
   1511  88ba		       81 00		      CMPA	#$00
   1512  88bc		       27 51		      BEQ	ASM2ERX	;if not found --> ERROR exit
   1513  88be		       d6 63		      LDAB	$63	;Check 4th mnemonic byte
   1514  88c0		       c1 41		      CMPB	#'A
   1515  88c2		       26 05		      BNE	ASM2SM1
   1516  88c4		       a6 06		      LDAA	6,X	;if='A' use opcode col#2
   1517  88c6		       7e 88 e2 	      JMP	ASM2PR
   1518  88c9		       c1 42	   ASM2SM1    CMPB	#'B
   1519  88cb		       26 05		      BNE	ASM2SM2
   1520  88cd		       a6 07		      LDAA	7,X	;if='B' use opcode col#3
   1521  88cf		       7e 88 e2 	      JMP	ASM2PR
   1522  88d2		       d6 56	   ASM2SM2    LDAB	OPCFLAGS	;4th byte must be blank so ..Get Type 0,1,2,4 or 8
   1523  88d4		       c1 04		      CMPB	#$04
   1524  88d6		       26 05		      BNE	ASM2SM3
   1525  88d8		       a6 04		      LDAA	4,X	;if type=4 use opcode col#0
   1526  88da		       7e 88 e2 	      JMP	ASM2PR	;  else
   1527  88dd		       a6 05	   ASM2SM3    LDAA	5,X	; use opcode col#1
   1528  88df		       7e 88 e2 	      JMP	ASM2PR
   1529  88e2
   1530  88e2		       97 53	   ASM2PR     STAA	OPCD
   1531  88e4		       de 46		      LDX	ADDR_HI	;Store opcode..
   1532  88e6		       96 53		      LDAA	OPCD
   1533  88e8		       a7 00		      STAA	0,X
   1534  88ea		       df 5b		      STX	DISADD2
   1535  88ec
   1536  88ec		       86 20		      LDAA	#$20	;Print a space
   1537  88ee		       bd 82 c5    ASMPAD     JSR	OUTCHR
   1538  88f1		       7c 00 58 	      INC	DISABUFP+1	;Pad with spaces depending on input line length
   1539  88f4		       d6 58		      LDAB	DISABUFP+1
   1540  88f6		       c1 6f		      CMPB	#DISABUF+15
   1541  88f8		       25 f4		      BCS	ASMPAD
   1542  88fa
   1543  88fa		       96 53		      LDAA	OPCD
   1544  88fc		       bd 83 1d 	      JSR	OUTHEX	;Print OPCODE and 1 space
   1545  88ff		       86 20		      LDAA	#$20	;Print a space
   1546  8901		       bd 82 c5 	      JSR	OUTCHR
   1547  8904		       bd 89 3b 	      JSR	CVTPRMS
   1548  8907		       bd 89 16 	      JSR	OUTPRMS
   1549  890a		       df 46		      STX	ADDR_HI
   1550  890c		       7e 88 3e 	      JMP	ASM2MEM	; process another line of input
   1551  890f
   1552  890f		       ce fc 26    ASM2ERX    LDX	#MSGERR	;print ERROR message
   1553  8912		       bd 83 04 	      JSR	PUTS
   1554  8915		       39	   ASM2END    RTS
   1555  8916
   1556  8916							;******************************************************************
   1557  8916							; OUTPRMS  Output values in PARMBUF move parm data to target memory
   1558  8916							;  Call with X=target address
   1559  8916							;  returns with X updated to next target address
   1560  8916							;******************************************************************
   1561  8916				   OUTPRMS		;subroutine
   1562  8916		       08		      INX		;Skip past opcode location
   1563  8917		       96 75		      LDAA	PARMLEN	;Get Parm buffer pointer
   1564  8919		       81 70		      CMPA	#$70	; $70 = NO PARMS
   1565  891b		       26 01		      BNE	OUTPRM1
   1566  891d		       39		      RTS		; exit if no parms
   1567  891e		       96 70	   OUTPRM1    LDAA	PARMBUF	; get 1st parm byte
   1568  8920		       a7 00		      STAA	0,X	; save to target address
   1569  8922		       08		      INX		; point to next address
   1570  8923		       bd 83 1d 	      JSR	OUTHEX	; print parm byte
   1571  8926		       86 20		      LDAA	#$20	;Print a space
   1572  8928		       bd 82 c5 	      JSR	OUTCHR
   1573  892b		       96 75		      LDAA	PARMLEN	;Get Parm buffer pointer
   1574  892d		       81 74		      CMPA	#$74	; $74= 2 bytes of parm data
   1575  892f		       27 01		      BEQ	OUTPRM2	; If = $74 continue
   1576  8931		       39		      RTS		; else exit
   1577  8932		       96 71	   OUTPRM2    LDAA	PARMBUF+1	; get 2nd parm byte, save, print & exit
   1578  8934		       a7 00		      STAA	0,X
   1579  8936		       08		      INX
   1580  8937		       bd 83 1d 	      JSR	OUTHEX
   1581  893a		       39		      RTS
   1582  893b
   1583  893b							;******************************************************************
   1584  893b							; CVTPRMS   convert ASCII in PARMBUF to value(s) in PARMBUF
   1585  893b							;******************************************************************
   1586  893b				   CVTPRMS		;subroutine
   1587  893b		       d6 75		      LDAB	PARMLEN	;Get parm buffer pointer
   1588  893d		       c1 70		      CMPB	#$70	;$70 = NO PARMS
   1589  893f		       26 01		      BNE	CVTPRM1	;If we do have parm data continue..
   1590  8941		       39		      RTS		;else exit
   1591  8942		       96 70	   CVTPRM1    LDAA	PARMBUF	;Get 1st parm character
   1592  8944		       bd 83 5f 	      JSR	CHR2VAL	;convert to it's HEX value
   1593  8947		       48		      ASLA		;Shift LEFT 4x
   1594  8948		       48		      ASLA
   1595  8949		       48		      ASLA
   1596  894a		       48		      ASLA
   1597  894b		       84 f0		      ANDA	#$F0	;Mask low 4bits
   1598  894d		       97 70		      STAA	PARMBUF	;Save it
   1599  894f		       96 71		      LDAA	PARMBUF+1	;Get 2nd parm character
   1600  8951		       bd 83 5f 	      JSR	CHR2VAL	;Convert to HEX value
   1601  8954		       9b 70		      ADDA	PARMBUF	;combine with 1st byte data
   1602  8956		       97 70		      STAA	PARMBUF	;Save it
   1603  8958		       c1 74		      CMPB	#$74	; PARMLEN = $74 = 2 parm bytes
   1604  895a		       27 01		      BEQ	CVTPRM2
   1605  895c		       39		      RTS		;if only 1 byte entered just exit
   1606  895d		       96 72	   CVTPRM2    LDAA	PARMBUF+2	;Get 3rd parm character
   1607  895f		       bd 83 5f 	      JSR	CHR2VAL	;convert to it's HEX value
   1608  8962		       48		      ASLA		;Shift LEFT 4x
   1609  8963		       48		      ASLA
   1610  8964		       48		      ASLA
   1611  8965		       48		      ASLA
   1612  8966		       84 f0		      ANDA	#$F0	;Mask low 4bits
   1613  8968		       97 71		      STAA	PARMBUF+1	;Save it
   1614  896a		       96 73		      LDAA	PARMBUF+3	;Get 4th parm character
   1615  896c		       bd 83 5f 	      JSR	CHR2VAL	;Convert to HEX value
   1616  896f		       9b 71		      ADDA	PARMBUF+1	;combine with 3rd byte data
   1617  8971		       97 71		      STAA	PARMBUF+1	;Save it
   1618  8973		       39		      RTS
   1619  8974
   1620  8974							;******************************************************************
   1621  8974							; SETTYP Set the type flags in OPCFLAGS
   1622  8974							;	type4 may already  have already been set if indexed ('X')
   1623  8974							;	was detected in DESPACE.
   1624  8974							;	Type 0 = IMPLIED, 1=IMMEDIATE, 2=DIRECT, 4=INDEXED, 8=EXTENDED
   1625  8974							;******************************************************************
   1626  8974				   SETTYPE		;subroutine
   1627  8974		       96 75		      LDAA	PARMLEN	;Get Parmlen
   1628  8976		       81 70		      CMPA	#$70	;$70 = zero length NO PARMs
   1629  8978		       26 05		      BNE	SETTYP4
   1630  897a		       86 00		      LDAA	#$00	;set type=0
   1631  897c		       7e 89 ac 	      JMP	SETTYPN	;Save type & exit
   1632  897f		       96 56	   SETTYP4    LDAA	OPCFLAGS
   1633  8981		       81 04		      CMPA	#$04	;Indexed flag set? (set in DESPACE)
   1634  8983		       26 01		      BNE	SETTYP1
   1635  8985		       39		      RTS
   1636  8986		       96 64	   SETTYP1    LDAA	DISABUF+4
   1637  8988		       81 23		      CMPA	#'#	;'#' indicates immediate instruction
   1638  898a		       26 0b		      BNE	SETTYP2
   1639  898c		       96 65		      LDAA	DISABUF+5	;Next byte MUST be '$' else ERROR
   1640  898e		       81 24		      CMPA	#'$
   1641  8990		       26 1d		      BNE	SETTYPX
   1642  8992		       86 01		      LDAA	#$01	;set type=1
   1643  8994		       7e 89 a9 	      JMP	SETTYPA
   1644  8997		       96 64	   SETTYP2    LDAA	DISABUF+4
   1645  8999		       81 24		      CMPA	#'$	;If 1st byte afer mnemonic is not '#' it MUST be '$'
   1646  899b		       26 12		      BNE	SETTYPX	;   else ERROR
   1647  899d		       86 02		      LDAA	#$02
   1648  899f		       97 56		      STAA	OPCFLAGS	;Could be type 2 or 8... start with type 2
   1649  89a1		       96 75		      LDAA	PARMLEN
   1650  89a3		       81 74		      CMPA	#PARMBUF+4	;if 4 parm bytes the set type 8
   1651  89a5		       26 05		      BNE	SETTYPN	; else leave it at 2
   1652  89a7		       86 08		      LDAA	#$08
   1653  89a9		       97 56	   SETTYPA    STAA	OPCFLAGS	;save result
   1654  89ab		       39		      RTS
   1655  89ac
   1656  89ac		       96 56	   SETTYPN    LDAA	OPCFLAGS	;always return with flags in A
   1657  89ae		       39		      RTS
   1658  89af
   1659  89af		       86 ff	   SETTYPX    LDAA	#$FF	;Syntax ERROR return code = $FF
   1660  89b1		       97 56		      STAA	OPCFLAGS
   1661  89b3		       39		      RTS
   1662  89b4
   1663  89b4							;******************************************************************
   1664  89b4							; ASMSH4   Compare the first 4 bytes of mnemonic with table value
   1665  89b4							; call with X loaded with start of table and b=table row len (8 or 5)
   1666  89b4							; updates LINECT with table row# and OPCD with return value
   1667  89b4							; returns with next table byte set or A=0 if not found
   1668  89b4							;******************************************************************
   1669  89b4				   ASMSH4		;subroutine
   1670  89b4		       bd 89 d3 	      JSR	ASMSH3
   1671  89b7		       81 00		      CMPA	#$00
   1672  89b9		       27 08		      BEQ	ASMSH4X
   1673  89bb		       96 63		      LDAA	DISABUF+3
   1674  89bd		       a1 03		      CMPA	3,X
   1675  89bf		       26 05		      BNE	ASMSH4N
   1676  89c1		       a6 04		      LDAA	4,X
   1677  89c3		       97 53	   ASMSH4X    STAA	OPCD
   1678  89c5		       39		      RTS
   1679  89c6		       3a	   ASMSH4N    ABX
   1680  89c7		       a6 00		      LDAA	0,X
   1681  89c9		       81 00		      CMPA	#00
   1682  89cb		       27 f6		      BEQ	ASMSH4X
   1683  89cd		       7c 00 5d 	      INC	LINECT
   1684  89d0		       7e 89 b4 	      JMP	ASMSH4
   1685  89d3
   1686  89d3							;******************************************************************
   1687  89d3							; ASMSH3   Compare the first 3 bytes of mnemonic with table value
   1688  89d3							; call with X loaded with start of table and b=table row len (8 or 5)
   1689  89d3							; updates LINECT with table row# and OPCD with return value
   1690  89d3							; returns with next table byte set or A=0 if not found
   1691  89d3							;******************************************************************
   1692  89d3				   ASMSH3		;subroutine
   1693  89d3		       bd 89 ea 	      JSR	ASMCMP3	;compare 3 byte of mnemonic data
   1694  89d6		       26 05		      BNE	ASMSH3N	;match failed try next row
   1695  89d8		       a6 03		      LDAA	3,X	;match found
   1696  89da		       97 53	   ASMSH3X    STAA	OPCD	;save last matched byte in OPCD and exit A!=0
   1697  89dc		       39		      RTS
   1698  89dd		       3a	   ASMSH3N    ABX		;Point X at start of next table row
   1699  89de		       a6 00		      LDAA	0,X	;Check 1st byte of mnemonic
   1700  89e0		       81 00		      CMPA	#00	;if this is a zero - end of table - search failed
   1701  89e2		       27 f6		      BEQ	ASMSH3X	;exit with A=0  OPCD=0
   1702  89e4		       7c 00 5d 	      INC	LINECT	; else add 1 to line counter
   1703  89e7		       7e 89 d3 	      JMP	ASMSH3	;continue search
   1704  89ea
   1705  89ea							;******************************************************************
   1706  89ea							; ASMCMP3   Compare the first 3 bytes of mnemonic with table value
   1707  89ea							;	    call with X loaded with start of bytes to compare
   1708  89ea							;	    returns Z flag set if all 3 match or cleared if not
   1709  89ea							;******************************************************************
   1710  89ea				   ASMCMP3		;subroutine
   1711  89ea		       96 60		      LDAA	DISABUF
   1712  89ec		       a1 00		      CMPA	0,X
   1713  89ee		       26 0a		      BNE	ASMCP3X
   1714  89f0		       96 61		      LDAA	DISABUF+1
   1715  89f2		       a1 01		      CMPA	1,X
   1716  89f4		       26 04		      BNE	ASMCP3X
   1717  89f6		       96 62		      LDAA	DISABUF+2
   1718  89f8		       a1 02		      CMPA	2,X
   1719  89fa		       39	   ASMCP3X    RTS
   1720  89fb
   1721  89fb							;******************************************************************
   1722  89fb							; MOVPRM   Move parameter bytes from input buffer to PARMBUF
   1723  89fb							;	    set PARMLEN to offset of last byte+1
   1724  89fb							;******************************************************************
   1725  89fb				   MOVPRM		;subroutine
   1726  89fb		       86 70		      LDAA	#PARMBUF
   1727  89fd		       97 75		      STAA	PARMLEN	;Reset parm length pointer
   1728  89ff		       ce 00 63 	      LDX	#DISABUF+3	;Set X = start of data-1
   1729  8a02		       08	   MOVPRM1    INX		;Next byte
   1730  8a03		       a6 00		      LDAA	0,X	;Get Byte
   1731  8a05		       81 2f		      CMPA	#$2F	;Is it < '0'
   1732  8a07		       23 f9		      BLS	MOVPRM1	;Keep looking
   1733  8a09		       81 47		      CMPA	#'G	;Is it >'F'
   1734  8a0b		       24 1a		      BCC	MOVPRMX	; Done
   1735  8a0d		       3c		      PSHX		;Save X
   1736  8a0e		       d6 75		      LDAB	PARMLEN	;Get parm buf pointer
   1737  8a10		       c1 74		      CMPB	#PARMBUF+4	;Parm Buffer Full?
   1738  8a12		       27 0d		      BEQ	MOVPRM2
   1739  8a14		       ce 00 00 	      LDX	#$0000
   1740  8a17		       3a		      ABX		;parm buf pointer -> X
   1741  8a18		       a7 00		      STAA	0,X	;Save parm byte in parm buf
   1742  8a1a		       7c 00 75 	      INC	PARMLEN	;inc parmlen
   1743  8a1d		       86 ff		      LDAA	#$FF	;Terminate parm buffer
   1744  8a1f		       a7 01		      STAA	1,X
   1745  8a21		       38	   MOVPRM2    PULX		;restore x
   1746  8a22		       8c 00 70 	      CPX	#DISABUF+16	;end of buffer reached?
   1747  8a25		       26 db		      BNE	MOVPRM1	; keep going ... otherwise return
   1748  8a27		       39	   MOVPRMX    RTS
   1749  8a28
   1750  8a28							;******************************************************************
   1751  8a28							; DESPACE  Remove spaces from buffer  detect 'X' in buffer
   1752  8a28							;******************************************************************
   1753  8a28				   DESPACE		;subroutine
   1754  8a28		       86 00		      LDAA	#00
   1755  8a2a		       97 56		      STAA	OPCFLAGS	;CLEAR ALL FLAGS
   1756  8a2c		       ce 00 64 	      LDX	#DISABUF+4
   1757  8a2f		       a6 00	   DSPACE1    LDAA	0,X	;Get A Byte
   1758  8a31		       81 58		      CMPA	#'X	;If we encounter an 'X' set bit 2 of OPCFLAGS
   1759  8a33		       26 04		      BNE	DSPACE2
   1760  8a35		       86 04		      LDAA	#$04	;Set type=4(indexed) if we encounter 'X'
   1761  8a37		       97 56		      STAA	OPCFLAGS
   1762  8a39		       81 20	   DSPACE2    CMPA	#$20	;Is the byte a space?
   1763  8a3b		       26 06		      BNE	DSPACE3	;NO= Process next byte
   1764  8a3d		       bd 8a 54 	      JSR	SHIFTBL	;YES=Shift everything left 1 position
   1765  8a40		       7e 8a 2f 	      JMP	DSPACE1	;Continue...
   1766  8a43		       08	   DSPACE3    INX
   1767  8a44		       8c 00 6f 	      CPX	#DISABUF+15	;Processed entire buffer?
   1768  8a47		       26 e6		      BNE	DSPACE1	;No = Continue
   1769  8a49		       96 63		      LDAA	DISABUF+3
   1770  8a4b		       81 ff		      CMPA	#$FF
   1771  8a4d		       26 04		      BNE	DESPACX
   1772  8a4f		       86 20		      LDAA	#$20
   1773  8a51		       97 63		      STAA	DISABUF+3
   1774  8a53		       39	   DESPACX    RTS
   1775  8a54
   1776  8a54							;******************************************************************
   1777  8a54							; SHIFTBL  Shift DISABUF left 1 position
   1778  8a54							;******************************************************************
   1779  8a54				   SHIFTBL		;subroutine
   1780  8a54		       3c		      PSHX
   1781  8a55		       a6 01	   SHFTBL1    LDAA	1,X
   1782  8a57		       a7 00		      STAA	0,X
   1783  8a59		       08		      INX
   1784  8a5a		       8c 00 6f 	      CPX	#DISABUF+15
   1785  8a5d		       26 f6		      BNE	SHFTBL1
   1786  8a5f		       38		      PULX
   1787  8a60		       39		      RTS
   1788  8a61
   1789  8a61							;******************************************************************
   1790  8a61							; GETSTR  Input up to 16bytes and store in DISABUF
   1791  8a61							;******************************************************************
   1792  8a61				   GETSTR		;subroutine
   1793  8a61		       ce 00 60 	      LDX	#DISABUF
   1794  8a64		       bd 82 d3    GETSTR1    JSR	INCHR	;Get a byte
   1795  8a67		       81 0d		      CMPA	#$0D	;Is It CR?
   1796  8a69		       27 21		      BEQ	GETSTRX	; if so then exit
   1797  8a6b		       81 7f		      CMPA	#$7F	; Backspace?
   1798  8a6d		       26 0c		      BNE	GETSTR2
   1799  8a6f		       8c 00 60 	      CPX	#DISABUF
   1800  8a72		       27 f0		      BEQ	GETSTR1
   1801  8a74		       09		      DEX
   1802  8a75		       bd 82 c5 	      JSR	OUTCHR
   1803  8a78		       7e 8a 64 	      JMP	GETSTR1
   1804  8a7b		       81 5a	   GETSTR2    CMPA	#'Z	;  <=Z?
   1805  8a7d		       2b 02		      BMI	GETSTR3	; dont convert
   1806  8a7f		       84 5f		      ANDA	#$5F	;Convert to UPPERCASE
   1807  8a81		       bd 82 c5    GETSTR3    JSR	OUTCHR	;echo it
   1808  8a84		       a7 00		      STAA	0,X	; Save the byte
   1809  8a86		       08		      INX		;Inc buffer pointer
   1810  8a87		       8c 00 70 	      CPX	#DISABUF+16	;Buffer Full?
   1811  8a8a		       26 d8		      BNE	GETSTR1	; If not then get another byte else exit
   1812  8a8c		       86 ff	   GETSTRX    LDAA	#$FF	; Terminate buffer with $FF
   1813  8a8e		       a7 00		      STAA	0,X
   1814  8a90		       39		      RTS
   1815  8a91
   1816  8a91							;******************************************************************
   1817  8a91							;10MSTMR	Enable 10ms system counter
   1818  8a91							;REG_TCSSR3  equ $1B	  ;TIMER CONTROL AND STATUS REG#3.
   1819  8a91							;REG_TCONR   equ $1C	  ;TIMER2 CONSTANT REG.
   1820  8a91							;REG_T2CNT   equ $1D	  ;TIMER2 COUNTER REG.
   1821  8a91							;******************************************************************
   1822  8a91		       96 1b	   MS10TMR    LDAA	REG_TCSSR3
   1823  8a93		       84 50		      ANDA	#$50
   1824  8a95		       81 00		      CMPA	#$00
   1825  8a97		       26 1d		      BNE	TMROFF
   1826  8a99		       ce 8a c6 	      LDX	#MS10IRQ
   1827  8a9c		       df 96		      STX	IRQCMI+1	;Set IRQ Vector
   1828  8a9e		       86 60		      LDAA	#$60	;Set Match Register = $60 (10ms)
   1829  8aa0		       97 1c		      STAA	REG_TCONR
   1830  8aa2		       86 72		      LDAA	#$72	;Set TSCR3  ECMI=1, T2E=1 CKS1=1 CKS0=0 (E/128)
   1831  8aa4		       97 1b		      STAA	REG_TCSSR3
   1832  8aa6		       86 00		      LDAA	#$00
   1833  8aa8		       97 76		      STAA	MSTMRXL
   1834  8aaa		       97 77		      STAA	MSTMRXM
   1835  8aac		       97 78		      STAA	MSTMRXH
   1836  8aae		       0e		      CLI		; Clear IRQ mask bit
   1837  8aaf		       ce fc 37 	      LDX	#MSGON
   1838  8ab2		       bd 83 04 	      JSR	PUTS
   1839  8ab5		       39		      RTS
   1840  8ab6
   1841  8ab6		       86 00	   TMROFF     LDAA	#$00	;Reset Match Register
   1842  8ab8		       97 1c		      STAA	REG_TCONR
   1843  8aba		       86 20		      LDAA	#$20	;Set TSCR3  ECMI=0, T2E=0 CKS1=0 CKS0=0 (E/128)
   1844  8abc		       97 1b		      STAA	REG_TCSSR3
   1845  8abe		       0f		      SEI
   1846  8abf		       ce fc 3f 	      LDX	#MSGOFF
   1847  8ac2		       bd 83 04 	      JSR	PUTS
   1848  8ac5		       39		      RTS
   1849  8ac6
   1850  8ac6							;******************************************************************
   1851  8ac6							; MS10IRQ  Timer2 Interrupt Service Routine for 10ms counter function
   1852  8ac6							;******************************************************************
   1853  8ac6		       0f	   MS10IRQ    SEI		;Disable interrupts
   1854  8ac7		       86 72		      LDAA	#$72	;Set TSCR3  ECMI=1, T2E=1 CKS1=1 CKS0=0 (E/128)
   1855  8ac9		       97 1b		      STAA	REG_TCSSR3	;(Clears CMF flag)
   1856  8acb
   1857  8acb		       7c 00 76 	      INC	MSTMRXL	;INC Low counter
   1858  8ace		       26 0a		      BNE	MS10IRX
   1859  8ad0		       7c 00 77 	      INC	MSTMRXM	;INC Mid counter
   1860  8ad3		       26 05		      BNE	MS10IRX
   1861  8ad5		       7c 00 78 	      INC	MSTMRXH	;INC Hi counter
   1862  8ad8		       26 00		      BNE	MS10IRX
   1863  8ada
   1864  8ada		       0e	   MS10IRX    CLI
   1865  8adb		       3b		      RTI
   1866  8adc
   1867  8adc							;;************************************************************************
   1868  8adc							;;  Default IRQ Routine
   1869  8adc							;;************************************************************************
   1870  8adc		       97 51	   IRQDEFT    STAA	IRQFLAG1
   1871  8ade		       ff ff ff 	      STX	$FFFF
   1872  8ae1		       ff ff ff 	      STX	$FFFF
   1873  8ae4		       ff ff ff 	      STX	$FFFF
   1874  8ae7		       3b		      RTI
   1875  8ae8							;;************************************************************************
   1876  8ae8							;;  Trap IRQ Routine
   1877  8ae8							;;************************************************************************
   1878  8ae8				   TRAP01		;subroutine
   1879  8ae8		       86 55		      LDAA	#$55
   1880  8aea		       97 17		      STAA	$17	;P6 PORT
   1881  8aec		       01		      NOP
   1882  8aed		       01		      NOP
   1883  8aee		       01		      NOP
   1884  8aef		       01		      NOP
   1885  8af0		       01		      NOP
   1886  8af1		       01		      NOP
   1887  8af2		       01		      NOP
   1888  8af3		       01		      NOP
   1889  8af4		       7e 8a e8 	      JMP	TRAP01
   1890  8af4		       8a f7	   MONEND     equ	.
   1891  8af7
   1892  8af7							;;************************************************************************
   1893  8af7							;;************************************************************************
   1894  8b00					      org	$8B00	;BASIC COLD START	   v2.1b
   1895  8b00							; NAM MICRO  MICROBASIC
   1896  8b00							;* ***** VERSION 1.3A *****
   1897  8b00							;* BY ROBERT H UITERWYK, TAMPA, FLORIDA
   1898  8b00							;*
   1899  8b00							;* MODIFIED TO RUN ON THE MC3
   1900  8b00							;* BY DANIEL TUFVESSON (DTU) 2013
   1901  8b00							;*
   1902  8b00							;* ADDITIONAL BUGFIXES
   1903  8b00							;* BY LES HILDENBRANDT (LHI) 2013
   1904  8b00							;*
   1905  8b00							;*  EMK ROM Version 2.1
   1906  8b00							;*  12/22/15 * Split code from data memory
   1907  8b00							;*  12/23/15 * Added a few comments, moved MAXLIN,BACKSP,CANCEL to constants
   1908  8b00							;*  11/23/16 * Added SYS(),PEEK() & POKE() commands to BASIC
   1909  8b00							;
   1910  8b00							;;************************************************************************
   1911  8b00							;;************************************************************************
   1912  8b00		       ce 02 20    COLDST     LDX	#INDEX1
   1913  8b03		       4f		      CLRA
   1914  8b04		       a7 00	   CLRVMEM    STAA	0,X
   1915  8b06		       08		      INX
   1916  8b07		       8c 03 8c 	      CPX	#ASTACK
   1917  8b0a		       26 f8		      BNE	CLRVMEM
   1918  8b0c
   1919  8b0c		       ce 03 90    INITVM     LDX	#BASICTOP	;Init the menory variables(USE #ENDBASIC for RAM version)
   1920  8b0f		       ff 02 2a 	      STX	NEXTBA
   1921  8b12		       ff 02 2c 	      STX	WORKBA
   1922  8b15		       ff 02 2e 	      STX	SOURCE
   1923  8b18		       ce 70 7f 	      LDX	#$707F
   1924  8b1b		       ff 02 3a 	      STX	XSTACK
   1925  8b1e		       ce 6f ff 	      LDX	#$6FFF
   1926  8b21		       ff 02 46 	      STX	MEMEND
   1927  8b24		       ce 03 8c 	      LDX	#ASTACK
   1928  8b27		       ff 02 51 	      STX	AESTK
   1929  8b2a		       ce 02 69 	      LDX	#FORSTK
   1930  8b2d		       ff 02 53 	      STX	FORPNT
   1931  8b30		       ce 03 00 	      LDX	#VARTAB
   1932  8b33		       ff 02 55 	      STX	VARPNT
   1933  8b36		       ce 02 59 	      LDX	#SBRSTK
   1934  8b39		       ff 02 57 	      STX	SBRPNT
   1935  8b3c		       ce 03 00 	      LDX	#VARTAB
   1936  8b3f		       ff 02 99 	      STX	DIMVAR
   1937  8b42		       ce 00 b0 	      LDX	#$00B0
   1938  8b45		       ff 02 ac 	      STX	BUFNXT
   1939  8b48		       ff 02 ae 	      STX	ENDBUF
   1940  8b4b
   1941  8b4b		       7e 90 63    PROGM      JMP	START	;	Start Basic
   1942  8b4e		       52 55 4e    COMMAN     dc.b	"RUN"
   1943  8b51		       1e		      dc.b	$1E
   1944  8b52		       90 f2		      dc.w	RUN
   1945  8b54		       4c 49 53 54	      dc.b	"LIST"
   1946  8b58		       1e		      dc.b	$1E
   1947  8b59		       91 28		      dc.w	CLIST
   1948  8b5b		       4e 45 57 	      dc.b	"NEW"
   1949  8b5e		       1e		      dc.b	$1E
   1950  8b5f		       90 63		      dc.w	START
   1951  8b61		       50 41 54 	      dc.b	"PAT"
   1952  8b64		       1e		      dc.b	$1E
   1953  8b65		       91 6e		      dc.w	PATCH
   1954  8b67		       53 59 53 	      dc.b	"SYS"
   1955  8b6a		       1e		      dc.b	$1E
   1956  8b6b		       91 85		      dc.w	SYSCALL
   1957  8b6d		       50 45 45 4b	      dc.b	"PEEK"
   1958  8b71		       1e		      dc.b	$1E
   1959  8b72		       91 c5		      dc.w	DOPEEK
   1960  8b74		       50 4f 4b 45	      dc.b	"POKE"
   1961  8b78		       1e		      dc.b	$1E
   1962  8b79		       91 de		      dc.w	DOPOKE
   1963  8b7b		       47 4f 53 55*GOLIST     dc.b	"GOSUB"
   1964  8b80		       1e		      dc.b	$1E
   1965  8b81		       93 17		      dc.w	GOSUB
   1966  8b83		       47 4f 54 4f	      dc.b	"GOTO"
   1967  8b87		       1e		      dc.b	$1E
   1968  8b88		       93 42		      dc.w	GOTO
   1969  8b8a		       47 4f 20 54*	      dc.b	"GO TO"
   1970  8b8f		       1e		      dc.b	$1E
   1971  8b90		       93 42		      dc.w	GOTO
   1972  8b92		       53 49 5a 45	      dc.b	"SIZE"
   1973  8b96		       1e		      dc.b	$1E
   1974  8b97		       95 8c		      dc.w	SIZE
   1975  8b99		       54 48 45 4e	      dc.b	"THEN"
   1976  8b9d		       1e		      dc.b	$1E
   1977  8b9e		       97 77		      dc.w	IF2
   1978  8ba0		       50 52 49 4e*	      dc.b	"PRINT"
   1979  8ba5		       1e		      dc.b	$1E
   1980  8ba6		       94 5b		      dc.w	PRINT
   1981  8ba8		       4c 45 54 	      dc.b	"LET"
   1982  8bab		       1e		      dc.b	$1E
   1983  8bac		       95 67	   IMPLET     dc.w	LET
   1984  8bae		       49 4e 50 55*	      dc.b	"INPUT"
   1985  8bb3		       1e		      dc.b	$1E
   1986  8bb4		       93 93		      dc.w	INPUT
   1987  8bb6		       49 46		      dc.b	"IF"
   1988  8bb8		       1e		      dc.b	$1E
   1989  8bb9		       97 5f		      dc.w	IF
   1990  8bbb		       45 4e 44 	      dc.b	"END"
   1991  8bbe		       1e		      dc.b	$1E
   1992  8bbf		       90 89		      dc.w	READY
   1993  8bc1		       52 45 54 55*	      dc.b	"RETURN"
   1994  8bc7		       1e		      dc.b	$1E
   1995  8bc8		       93 57		      dc.w	RETURN
   1996  8bca		       44 49 4d 	      dc.b	"DIM"
   1997  8bcd		       1e		      dc.b	$1E
   1998  8bce		       95 b6		      dc.w	DIM
   1999  8bd0		       46 4f 52 	      dc.b	"FOR"
   2000  8bd3		       1e		      dc.b	$1E
   2001  8bd4		       96 7f		      dc.w	FOR
   2002  8bd6		       4e 45 58 54	      dc.b	"NEXT"
   2003  8bda		       1e		      dc.b	$1E
   2004  8bdb		       96 fd		      dc.w	NEXT
   2005  8bdd		       52 45 4d 	      dc.b	"REM"
   2006  8be0		       1e		      dc.b	$1E
   2007  8be1		       95 b0		      dc.w	REMARK
   2008  8be3		       50 41 55 53*PAUMSG     dc.b	"PAUSE"
   2009  8be8		       1e		      dc.b	$1E
   2010  8be9		       93 71		      dc.w	PAUSE
   2011  8beb		       20		      dc.b	$20
   2012  8bec		       1e	   COMEND     dc.b	$1E
   2013  8bed		       95 67		      dc.w	LET
   2014  8bef
   2015  8bef		       0d	   RDYMSG     dc.b	$0D
   2016  8bf0		       0a		      dc.b	$0A
   2017  8bf1		       52 45 41 44*	      dc.b	"READY"
   2018  8bf6		       1e		      dc.b	$1E
   2019  8bf7		       23	   PROMPT     dc.b	$23
   2020  8bf8		       1e		      dc.b	$1E
   2021  8bf9		       1e		      dc.b	$1E
   2022  8bfa		       10	   PGCNTL     dc.b	$10
   2023  8bfb		       16		      dc.b	$16
   2024  8bfc		       1e		      dc.b	$1E
   2025  8bfd		       1e		      dc.b	$1E
   2026  8bfe		       1e		      dc.b	$1E
   2027  8bff		       45 52 52 4f*ERRMS1     dc.b	"ERROR# "
   2028  8c06		       1e		      dc.b	$1E
   2029  8c07		       20 49 4e 20*ERRMS2     dc.b	" IN LINE "
   2030  8c10		       1e		      dc.b	$1E
   2031  8c11
   2032  8c11		       86 3f	   KEYBD      LDAA	#$3F
   2033  8c13		       8d 4e		      BSR	OUTCH
   2034  8c15		       ce 02 b0    KEYBD0     LDX	#BUFFER
   2035  8c18		       c6 0a		      LDAB	#10
   2036  8c1a		       8d 4d	   KEYBD1     BSR	INCH
   2037  8c1c		       81 00		      CMPA	#$00
   2038  8c1e		       26 06		      BNE	KEYB11
   2039  8c20		       5a		      DECB
   2040  8c21		       26 f7		      BNE	KEYBD1	;BNE KEYBD11			#### /LHI
   2041  8c23		       7e 90 89    KEYB10     JMP	READY
   2042  8c26		       81 1b	   KEYB11     CMPA	#CANCEL
   2043  8c28		       27 26		      BEQ	DEL
   2044  8c2a		       81 0d		      CMPA	#$0D
   2045  8c2c		       27 2b		      BEQ	IEXIT
   2046  8c2e		       81 0a	   KEYBD2     CMPA	#$0A
   2047  8c30		       27 e8		      BEQ	KEYBD1
   2048  8c32		       81 15		      CMPA	#$15
   2049  8c34		       27 e4		      BEQ	KEYBD1
   2050  8c36		       81 13		      CMPA	#$13
   2051  8c38		       27 e0		      BEQ	KEYBD1
   2052  8c3a		       81 7f	   KEYB55     CMPA	#BACKSP
   2053  8c3c		       26 08		      BNE	KEYBD3
   2054  8c3e		       8c 02 b0 	      CPX	#BUFFER
   2055  8c41		       27 d7		      BEQ	KEYBD1
   2056  8c43		       09		      DEX
   2057  8c44		       20 d4		      BRA	KEYBD1
   2058  8c46		       8c 02 f7    KEYBD3     CPX	#BUFFER+71
   2059  8c49		       27 cf		      BEQ	KEYBD1
   2060  8c4b		       a7 00		      STAA	0,X
   2061  8c4d		       08		      INX
   2062  8c4e		       20 ca		      BRA	KEYBD1
   2063  8c50		       8d 2d	   DEL	      BSR	CRLF
   2064  8c52		       ce 8b f7    CNTLIN     LDX	#PROMPT
   2065  8c55		       8d 21		      BSR	OUTNCR
   2066  8c57		       20 bc		      BRA	KEYBD0
   2067  8c59		       86 1e	   IEXIT      LDAA	#$1E
   2068  8c5b		       a7 00		      STAA	,X
   2069  8c5d		       ff 02 ae 	      STX	ENDBUF
   2070  8c60		       8d 1d		      BSR	CRLF
   2071  8c62		       39		      RTS
   2072  8c63
   2073  8c63		       bd 97 f6    OUTCH      JSR	CHKBRK	;BSR BREAK			#### /DTU
   2074  8c66		       7e 82 c5    ECHO       JMP	OUTCHR	; JMP OUTEEE	 /EMK
   2075  8c69
   2076  8c69		       bd 82 d3    INCH       JSR	INCHR	;JMP INEEE   /EMK
   2077  8c6c		       81 1b		      CMPA	#CANCEL
   2078  8c6e		       26 f6		      BNE	ECHO
   2079  8c70		       39		      RTS
   2080  8c71
   2081  8c71							;BREAK2  PULA
   2082  8c71							;	  RTS
   2083  8c71
   2084  8c71		       8d 05	   OUTPUT     BSR	OUTNCR	;Send chars based on X, to terminal until $1E is encountered
   2085  8c73		       20 0a		      BRA	CRLF
   2086  8c75
   2087  8c75		       8d ec	   OUTPU2     BSR	OUTCH
   2088  8c77		       08	   OUTPU3     INX
   2089  8c78		       a6 00	   OUTNCR     LDAA	0,X
   2090  8c7a		       81 1e		      CMPA	#$1E
   2091  8c7c		       26 f7		      BNE	OUTPU2
   2092  8c7e		       39		      RTS
   2093  8c7f
   2094  8c7f		       8d 10	   CRLF       BSR	PUSHX	;Send CR & LF (X is retained)
   2095  8c81		       ce 8c 89 	      LDX	#CRLFST
   2096  8c84		       8d f2		      BSR	OUTNCR
   2097  8c86		       8d 24		      BSR	PULLX
   2098  8c88		       39		      RTS
   2099  8c89
   2100  8c89		       0d	   CRLFST     dc.b	$0D
   2101  8c8a		       0a		      dc.b	$0A
   2102  8c8b		       1e	   CREND      dc.b	$1E
   2103  8c8c		       ff ff		      dc.b	$FF,$FF
   2104  8c8e		       ff ff		      dc.b	$FF,$FF
   2105  8c90		       1e		      dc.b	$1E
   2106  8c91
   2107  8c91		       ff 02 38    PUSHX      STX	PUSHTX	;PUSH X into  XSTACK
   2108  8c94		       fe 02 3a 	      LDX	XSTACK
   2109  8c97		       09		      DEX
   2110  8c98		       09		      DEX
   2111  8c99		       ff 02 3a 	      STX	XSTACK
   2112  8c9c		       36		      PSHA
   2113  8c9d		       b6 02 38 	      LDAA	PUSHTX
   2114  8ca0		       a7 00		      STAA	0,X
   2115  8ca2		       b6 02 39 	      LDAA	PUSHTX+1
   2116  8ca5		       a7 01		      STAA	1,X
   2117  8ca7		       32		      PULA
   2118  8ca8		       fe 02 38 	      LDX	PUSHTX
   2119  8cab		       39		      RTS
   2120  8cac
   2121  8cac		       fe 02 3a    PULLX      LDX	XSTACK	;PULL X from  XSTACK
   2122  8caf		       ee 00		      LDX	0,X
   2123  8cb1		       7c 02 3b 	      INC	XSTACK+1
   2124  8cb4		       7c 02 3b 	      INC	XSTACK+1
   2125  8cb7		       39		      RTS
   2126  8cb8
   2127  8cb8		       36	   STORE      PSHA
   2128  8cb9		       37		      PSHB
   2129  8cba		       8d d5		      BSR	PUSHX
   2130  8cbc		       bd 8e 68 	      JSR	PULLAE
   2131  8cbf		       fe 02 51 	      LDX	AESTK
   2132  8cc2		       08		      INX
   2133  8cc3		       08		      INX
   2134  8cc4		       ff 02 51 	      STX	AESTK
   2135  8cc7		       09		      DEX
   2136  8cc8		       ee 00		      LDX	0,X
   2137  8cca		       a7 00		      STAA	0,X
   2138  8ccc		       e7 01		      STAB	1,X
   2139  8cce		       8d dc		      BSR	PULLX
   2140  8cd0		       33		      PULB
   2141  8cd1		       32		      PULA
   2142  8cd2		       39		      RTS
   2143  8cd3
   2144  8cd3		       8d bc	   IND	      BSR	PUSHX
   2145  8cd5		       36		      PSHA
   2146  8cd6		       37		      PSHB
   2147  8cd7		       fe 02 51 	      LDX	AESTK
   2148  8cda		       08		      INX
   2149  8cdb		       08		      INX
   2150  8cdc		       ff 02 51 	      STX	AESTK
   2151  8cdf		       09		      DEX
   2152  8ce0		       ee 00		      LDX	0,X
   2153  8ce2		       a6 00		      LDAA	0,X
   2154  8ce4		       e6 01		      LDAB	1,X
   2155  8ce6		       bd 8e 59 	      JSR	PUSHAE
   2156  8ce9		       33		      PULB
   2157  8cea		       32		      PULA
   2158  8ceb		       8d bf		      BSR	PULLX
   2159  8ced		       39		      RTS
   2160  8cee
   2161  8cee		       fe 02 2a    LIST       LDX	NEXTBA
   2162  8cf1		       ff 02 2c 	      STX	WORKBA
   2163  8cf4		       fe 02 2e 	      LDX	SOURCE
   2164  8cf7		       20 03		      BRA	LIST1
   2165  8cf9		       fe 02 24    LIST0      LDX	INDEX3
   2166  8cfc		       bc 02 2c    LIST1      CPX	WORKBA
   2167  8cff		       27 05		      BEQ	LEXIT
   2168  8d01		       8d 04		      BSR	OUTLIN
   2169  8d03		       08		      INX
   2170  8d04		       20 f6		      BRA	LIST1
   2171  8d06		       39	   LEXIT      RTS
   2172  8d07
   2173  8d07		       a6 00	   OUTLIN     LDAA	0,X
   2174  8d09		       7f 02 42 	      CLR	PRCNT
   2175  8d0c		       08		      INX
   2176  8d0d		       e6 00		      LDAB	0,X
   2177  8d0f		       08		      INX
   2178  8d10		       7f 02 4c 	      CLR	TSIGN
   2179  8d13		       bd 95 1f 	      JSR	PRN0
   2180  8d16		       8d 26		      BSR	PRINSP
   2181  8d18		       a6 00	   OUTLI1     LDAA	0,X
   2182  8d1a		       08		      INX
   2183  8d1b		       bd 8c 91 	      JSR	PUSHX
   2184  8d1e		       ce 8b 4e 	      LDX	#COMMAN
   2185  8d21		       ff 02 4a 	      STX	KEYWD
   2186  8d24		       b7 02 4b 	      STAA	KEYWD+1
   2187  8d27		       fe 02 4a 	      LDX	KEYWD
   2188  8d2a		       09		      DEX
   2189  8d2b		       09	   OUTLI2     DEX
   2190  8d2c		       a6 00		      LDAA	0,X
   2191  8d2e		       81 1e		      CMPA	#$1E
   2192  8d30		       26 f9		      BNE	OUTLI2
   2193  8d32		       08		      INX
   2194  8d33		       08		      INX
   2195  8d34		       08		      INX
   2196  8d35		       bd 8c 78 	      JSR	OUTNCR
   2197  8d38		       bd 8c ac 	      JSR	PULLX
   2198  8d3b		       7e 8c 71 	      JMP	OUTPUT
   2199  8d3e
   2200  8d3e		       36	   PRINSP     PSHA
   2201  8d3f		       86 20		      LDAA	#$20
   2202  8d41		       bd 8c 63 	      JSR	OUTCH
   2203  8d44		       32		      PULA
   2204  8d45		       39		      RTS
   2205  8d46
   2206  8d46		       08	   RANDOM     INX
   2207  8d47		       08		      INX
   2208  8d48		       a6 00		      LDAA	0,X
   2209  8d4a		       81 44		      CMPA	#'D
   2210  8d4c		       26 74		      BNE	TSTVER
   2211  8d4e		       bd 8c 91 	      JSR	PUSHX
   2212  8d51		       b6 02 3c 	      LDAA	RNDVAL
   2213  8d54		       f6 02 3d 	      LDAB	RNDVAL+1
   2214  8d57		       ce 00 00 	      LDX	#0000
   2215  8d5a		       e9 01	   RAND1      ADCB	1,X
   2216  8d5c		       a9 00		      ADCA	0,X
   2217  8d5e		       08		      INX
   2218  8d5f		       08		      INX
   2219  8d60		       8c 02 3c 	      CPX	#RNDVAL
   2220  8d63		       26 f5		      BNE	RAND1
   2221  8d65		       84 7f		      ANDA	#$7F
   2222  8d67		       b7 02 3c 	      STAA	RNDVAL
   2223  8d6a		       f7 02 3d 	      STAB	RNDVAL+1
   2224  8d6d		       ff 02 20 	      STX	INDEX1
   2225  8d70		       b6 02 20 	      LDAA	INDEX1
   2226  8d73		       f6 02 21 	      LDAB	INDEX1+1
   2227  8d76		       7e 8e 3a 	      JMP	TSTV9
   2228  8d79
   2229  8d79		       bd 8f f2    TSTV       JSR	SKIPSP
   2230  8d7c		       bd 97 f6 	      JSR	CHKBRK	;JSR BREAK			#### /DTU
   2231  8d7f		       bd 8e 43 	      JSR	TSTLTR
   2232  8d82		       24 01		      BCC	TSTV1
   2233  8d84		       39		      RTS
   2234  8d85
   2235  8d85		       81 52	   TSTV1      CMPA	#'R
   2236  8d87		       26 06		      BNE	TSTV2
   2237  8d89		       e6 01		      LDAB	1,X
   2238  8d8b		       c1 4e		      CMPB	#'N
   2239  8d8d		       27 b7		      BEQ	RANDOM
   2240  8d8f		       bd 8c 91    TSTV2      JSR	PUSHX
   2241  8d92		       80 40		      SUBA	#$40
   2242  8d94		       b7 02 56 	      STAA	VARPNT+1
   2243  8d97		       48		      ASLA
   2244  8d98		       bb 02 56 	      ADDA	VARPNT+1
   2245  8d9b		       b7 02 56 	      STAA	VARPNT+1
   2246  8d9e		       fe 02 55 	      LDX	VARPNT
   2247  8da1		       b6 02 55 	      LDAA	VARPNT
   2248  8da4		       f6 02 56 	      LDAB	VARPNT+1
   2249  8da7		       6d 02		      TST	2,X
   2250  8da9		       26 03		      BNE	TSTV20
   2251  8dab		       7e 8e 3a 	      JMP	TSTV9
   2252  8dae
   2253  8dae		       ee 00	   TSTV20     LDX	0,X
   2254  8db0		       ff 02 3e 	      STX	DIMPNT
   2255  8db3		       08		      INX
   2256  8db4		       08		      INX
   2257  8db5		       ff 02 40 	      STX	DIMCAL
   2258  8db8		       bd 8c ac 	      JSR	PULLX
   2259  8dbb		       bd 8f f8 	      JSR	INXSKP
   2260  8dbe		       81 28		      CMPA	#'(
   2261  8dc0		       27 03		      BEQ	TSTV22
   2262  8dc2		       7e 93 e5    TSTVER     JMP	DBLLTR
   2263  8dc5		       08	   TSTV22     INX
   2264  8dc6		       bd 8e bb 	      JSR	EXPR
   2265  8dc9		       bd 8c 91 	      JSR	PUSHX
   2266  8dcc		       bd 8e 68 	      JSR	PULLAE
   2267  8dcf		       4d		      TSTA
   2268  8dd0		       27 03		      BEQ	TSTV3
   2269  8dd2		       7e 96 0a    SUBER1     JMP	SUBERR
   2270  8dd5
   2271  8dd5		       fe 02 3e    TSTV3      LDX	DIMPNT
   2272  8dd8		       5d		      TSTB
   2273  8dd9		       27 f7		      BEQ	SUBER1
   2274  8ddb		       e1 00		      CMPB	0,X
   2275  8ddd		       22 f3		      BHI	SUBER1
   2276  8ddf		       a6 01		      LDAA	1,X
   2277  8de1		       b7 02 4f 	      STAA	ANUMB
   2278  8de4		       27 34		      BEQ	TST666
   2279  8de6		       fe 02 40 	      LDX	DIMCAL
   2280  8de9		       5a	   TSTV4      DECB
   2281  8dea		       27 0a		      BEQ	TSTV6
   2282  8dec		       b6 02 4f 	      LDAA	ANUMB
   2283  8def		       08	   TSTV5      INX
   2284  8df0		       08		      INX
   2285  8df1		       4a		      DECA
   2286  8df2		       26 fb		      BNE	TSTV5
   2287  8df4		       20 f3		      BRA	TSTV4
   2288  8df6
   2289  8df6		       ff 02 40    TSTV6      STX	DIMCAL
   2290  8df9		       bd 8c ac 	      JSR	PULLX
   2291  8dfc		       bd 8f f2 	      JSR	SKIPSP
   2292  8dff		       81 2c		      CMPA	#',
   2293  8e01		       26 bf		      BNE	TSTVER
   2294  8e03		       08		      INX
   2295  8e04		       bd 8e bb 	      JSR	EXPR
   2296  8e07		       bd 8c 91 	      JSR	PUSHX
   2297  8e0a		       bd 8e 68 	      JSR	PULLAE
   2298  8e0d		       4d		      TSTA
   2299  8e0e		       26 c2		      BNE	SUBER1
   2300  8e10		       fe 02 3e 	      LDX	DIMPNT
   2301  8e13		       5d		      TSTB
   2302  8e14		       27 bc		      BEQ	SUBER1
   2303  8e16		       e1 01		      CMPB	1,X
   2304  8e18		       22 b8		      BHI	SUBER1
   2305  8e1a		       fe 02 40    TST666     LDX	DIMCAL
   2306  8e1d		       08	   TSTV7      INX
   2307  8e1e		       08		      INX
   2308  8e1f		       5a		      DECB
   2309  8e20		       26 fb		      BNE	TSTV7
   2310  8e22		       09		      DEX
   2311  8e23		       09		      DEX
   2312  8e24		       ff 02 40 	      STX	DIMCAL
   2313  8e27		       bd 8c ac 	      JSR	PULLX
   2314  8e2a		       bd 8f f2 	      JSR	SKIPSP
   2315  8e2d		       81 29	   TSTV8      CMPA	#')
   2316  8e2f		       26 91		      BNE	TSTVER
   2317  8e31		       bd 8c 91 	      JSR	PUSHX
   2318  8e34		       b6 02 40 	      LDAA	DIMCAL
   2319  8e37		       f6 02 41 	      LDAB	DIMCAL+1
   2320  8e3a		       bd 8c ac    TSTV9      JSR	PULLX
   2321  8e3d		       08		      INX
   2322  8e3e		       bd 8e 59 	      JSR	PUSHAE
   2323  8e41		       0c		      CLC
   2324  8e42		       39		      RTS
   2325  8e43
   2326  8e43		       81 41	   TSTLTR     CMPA	#$41	;Subroutine TSTLTR - Return C=0 if 'A'-'Z'
   2327  8e45		       2b 0c		      BMI	NONO
   2328  8e47		       81 5a		      CMPA	#$5A
   2329  8e49		       2f 0a		      BLE	YESNO
   2330  8e4b		       81 30	   TESTNO     CMPA	#$30	;Subroutine TESTNO - Return C=0 if '0'-'9'
   2331  8e4d		       2b 04		      BMI	NONO
   2332  8e4f		       81 39		      CMPA	#$39
   2333  8e51		       2f 02		      BLE	YESNO
   2334  8e53		       0d	   NONO       SEC
   2335  8e54		       39		      RTS
   2336  8e55		       0c	   YESNO      CLC
   2337  8e56		       39		      RTS
   2338  8e57
   2339  8e57		       8d 0f	   PULPSH     BSR	PULLAE	;PULL A & B from AESTK without removing the values
   2340  8e59		       bf 02 28    PUSHAE     STS	SAVESP	;PUSH A & B onto AESTK
   2341  8e5c		       be 02 51 	      LDS	AESTK
   2342  8e5f		       37		      PSHB
   2343  8e60		       36		      PSHA
   2344  8e61		       bf 02 51 	      STS	AESTK
   2345  8e64		       be 02 28 	      LDS	SAVESP
   2346  8e67		       39		      RTS
   2347  8e68
   2348  8e68		       bf 02 28    PULLAE     STS	SAVESP	;PULL A & B from AESTK
   2349  8e6b		       be 02 51 	      LDS	AESTK
   2350  8e6e		       32		      PULA
   2351  8e6f		       33		      PULB
   2352  8e70		       bf 02 51 	      STS	AESTK
   2353  8e73		       be 02 28 	      LDS	SAVESP
   2354  8e76		       39		      RTS
   2355  8e77
   2356  8e77		       bd 8f f2    FACT       JSR	SKIPSP
   2357  8e7a		       bd 8d 79 	      JSR	TSTV
   2358  8e7d		       25 04		      BCS	FACT0
   2359  8e7f		       bd 8c d3 	      JSR	IND
   2360  8e82		       39		      RTS
   2361  8e83
   2362  8e83		       bd 93 ea    FACT0      JSR	TSTN
   2363  8e86		       25 01		      BCS	FACT1
   2364  8e88		       39		      RTS
   2365  8e89
   2366  8e89		       81 28	   FACT1      CMPA	#'(
   2367  8e8b		       26 0c		      BNE	FACT2
   2368  8e8d		       08		      INX
   2369  8e8e		       8d 2b		      BSR	EXPR
   2370  8e90		       bd 8f f2 	      JSR	SKIPSP
   2371  8e93		       81 29		      CMPA	#')
   2372  8e95		       26 02		      BNE	FACT2
   2373  8e97		       08		      INX
   2374  8e98		       39		      RTS
   2375  8e99
   2376  8e99		       c6 0d	   FACT2      LDAB	#13
   2377  8e9b		       7e 90 bd 	      JMP	ERROR
   2378  8e9e
   2379  8e9e		       8d d7	   TERM       BSR	FACT
   2380  8ea0		       bd 8f f2    TERM0      JSR	SKIPSP
   2381  8ea3		       81 2a		      CMPA	#'*
   2382  8ea5		       26 07		      BNE	TERM1
   2383  8ea7		       08		      INX
   2384  8ea8		       8d cd		      BSR	FACT
   2385  8eaa		       8d 41		      BSR	MPY
   2386  8eac		       20 f2		      BRA	TERM0
   2387  8eae
   2388  8eae		       81 2f	   TERM1      CMPA	#'/
   2389  8eb0		       26 08		      BNE	TERM2
   2390  8eb2		       08		      INX
   2391  8eb3		       8d c2		      BSR	FACT
   2392  8eb5		       bd 8f 43 	      JSR	DIV
   2393  8eb8		       20 e6		      BRA	TERM0
   2394  8eba
   2395  8eba		       39	   TERM2      RTS
   2396  8ebb
   2397  8ebb		       bd 8f f2    EXPR       JSR	SKIPSP
   2398  8ebe		       81 2d		      CMPA	#'-
   2399  8ec0		       26 08		      BNE	EXPR0
   2400  8ec2		       08		      INX
   2401  8ec3		       8d d9		      BSR	TERM
   2402  8ec5		       bd 8f 8e 	      JSR	NEG
   2403  8ec8		       20 07		      BRA	EXPR1
   2404  8eca		       81 2b	   EXPR0      CMPA	#'+
   2405  8ecc		       26 01		      BNE	EXPR00
   2406  8ece		       08		      INX
   2407  8ecf		       8d cd	   EXPR00     BSR	TERM
   2408  8ed1		       bd 8f f2    EXPR1      JSR	SKIPSP
   2409  8ed4		       81 2b		      CMPA	#'+
   2410  8ed6		       26 08		      BNE	EXPR2
   2411  8ed8		       08		      INX
   2412  8ed9		       8d c3		      BSR	TERM
   2413  8edb		       bd 8f a4 	      JSR	ADD
   2414  8ede		       20 f1		      BRA	EXPR1
   2415  8ee0		       81 2d	   EXPR2      CMPA	#'-
   2416  8ee2		       26 08		      BNE	EXPR3
   2417  8ee4		       08		      INX
   2418  8ee5		       8d b7		      BSR	TERM
   2419  8ee7		       bd 8f a2 	      JSR	SUB
   2420  8eea		       20 e5		      BRA	EXPR1
   2421  8eec		       39	   EXPR3      RTS
   2422  8eed
   2423  8eed		       8d 32	   MPY	      BSR	MDSIGN
   2424  8eef		       86 0f		      LDAA	#15
   2425  8ef1		       a7 00		      STAA	0,X
   2426  8ef3		       5f		      CLRB
   2427  8ef4		       4f		      CLRA
   2428  8ef5		       64 03	   MPY4       LSR	3,X
   2429  8ef7		       66 04		      ROR	4,X
   2430  8ef9		       24 0b		      BCC	MPY5
   2431  8efb		       eb 02		      ADDB	2,X
   2432  8efd		       a9 01		      ADCA	1,X
   2433  8eff		       24 05		      BCC	MPY5
   2434  8f01		       86 02	   MPYERR     LDAA	#2
   2435  8f03		       7e 90 bd 	      JMP	ERROR
   2436  8f06		       68 02	   MPY5       ASL	2,X
   2437  8f08		       69 01		      ROL	1,X
   2438  8f0a		       6a 00		      DEC	0,X
   2439  8f0c		       26 e7		      BNE	MPY4
   2440  8f0e		       4d		      TSTA
   2441  8f0f		       2b f0		      BMI	MPYERR
   2442  8f11		       7d 02 4c 	      TST	TSIGN
   2443  8f14		       2a 03		      BPL	MPY6
   2444  8f16		       bd 8f 9b 	      JSR	NEGAB
   2445  8f19		       e7 04	   MPY6       STAB	4,X
   2446  8f1b		       a7 03		      STAA	3,X
   2447  8f1d		       bd 8c ac 	      JSR	PULLX
   2448  8f20		       39		      RTS
   2449  8f21
   2450  8f21		       bd 8c 91    MDSIGN     JSR	PUSHX
   2451  8f24		       4f		      CLRA
   2452  8f25		       fe 02 51 	      LDX	AESTK
   2453  8f28		       6d 01		      TST	1,X
   2454  8f2a		       2a 04		      BPL	MDS2
   2455  8f2c		       8d 60		      BSR	NEG
   2456  8f2e		       86 80		      LDAA	#$80
   2457  8f30		       08	   MDS2       INX
   2458  8f31		       08		      INX
   2459  8f32		       ff 02 51 	      STX	AESTK
   2460  8f35		       6d 01		      TST	1,X
   2461  8f37		       2a 04		      BPL	MDS3
   2462  8f39		       8d 53		      BSR	NEG
   2463  8f3b		       8b 80		      ADDA	#$80
   2464  8f3d		       b7 02 4c    MDS3       STAA	TSIGN
   2465  8f40		       09		      DEX
   2466  8f41		       09		      DEX
   2467  8f42		       39		      RTS
   2468  8f43
   2469  8f43		       8d dc	   DIV	      BSR	MDSIGN
   2470  8f45		       6d 01		      TST	1,X
   2471  8f47		       26 09		      BNE	DIV33
   2472  8f49		       6d 02		      TST	2,X
   2473  8f4b		       26 05		      BNE	DIV33
   2474  8f4d		       c6 08		      LDAB	#8
   2475  8f4f		       7e 90 bd 	      JMP	ERROR
   2476  8f52		       86 01	   DIV33      LDAA	#1
   2477  8f54		       4c	   DIV4       INCA
   2478  8f55		       68 02		      ASL	2,X
   2479  8f57		       69 01		      ROL	1,X
   2480  8f59		       2b 04		      BMI	DIV5
   2481  8f5b		       81 11		      CMPA	#17
   2482  8f5d		       26 f5		      BNE	DIV4
   2483  8f5f		       a7 00	   DIV5       STAA	0,X
   2484  8f61		       a6 03		      LDAA	3,X
   2485  8f63		       e6 04		      LDAB	4,X
   2486  8f65		       6f 03		      CLR	3,X
   2487  8f67		       6f 04		      CLR	4,X
   2488  8f69		       e0 02	   DIV163     SUBB	2,X
   2489  8f6b		       a2 01		      SBCA	1,X
   2490  8f6d		       24 07		      BCC	DIV165
   2491  8f6f		       eb 02		      ADDB	2,X
   2492  8f71		       a9 01		      ADCA	1,X
   2493  8f73		       0c		      CLC
   2494  8f74		       20 01		      BRA	DIV167
   2495  8f76		       0d	   DIV165     SEC
   2496  8f77		       69 04	   DIV167     ROL	4,X
   2497  8f79		       69 03		      ROL	3,X
   2498  8f7b		       64 01		      LSR	1,X
   2499  8f7d		       66 02		      ROR	2,X
   2500  8f7f		       6a 00		      DEC	0,X
   2501  8f81		       26 e6		      BNE	DIV163
   2502  8f83		       7d 02 4c 	      TST	TSIGN
   2503  8f86		       2a 02		      BPL	DIV169
   2504  8f88		       8d 04		      BSR	NEG
   2505  8f8a		       bd 8c ac    DIV169     JSR	PULLX
   2506  8f8d		       39		      RTS
   2507  8f8e
   2508  8f8e		       36	   NEG	      PSHA
   2509  8f8f		       37		      PSHB
   2510  8f90		       bd 8e 68 	      JSR	PULLAE
   2511  8f93		       8d 06		      BSR	NEGAB
   2512  8f95		       bd 8e 59 	      JSR	PUSHAE
   2513  8f98		       33		      PULB
   2514  8f99		       32		      PULA
   2515  8f9a		       39		      RTS
   2516  8f9b
   2517  8f9b		       43	   NEGAB      COMA
   2518  8f9c		       53		      COMB
   2519  8f9d		       cb 01		      ADDB	#1
   2520  8f9f		       89 00		      ADCA	#0
   2521  8fa1		       39		      RTS
   2522  8fa2
   2523  8fa2		       8d ea	   SUB	      BSR	NEG
   2524  8fa4		       bd 8e 68    ADD	      JSR	PULLAE
   2525  8fa7		       f7 02 50    ADD1       STAB	BNUMB
   2526  8faa		       b7 02 4f 	      STAA	ANUMB
   2527  8fad		       bd 8e 68 	      JSR	PULLAE
   2528  8fb0		       fb 02 50 	      ADDB	BNUMB
   2529  8fb3		       b9 02 4f 	      ADCA	ANUMB
   2530  8fb6		       bd 8e 59 	      JSR	PUSHAE
   2531  8fb9		       0c		      CLC
   2532  8fba		       39		      RTS
   2533  8fbb
   2534  8fbb		       b6 02 32    FINDNO     LDAA	HIGHLN
   2535  8fbe		       f6 02 33 	      LDAB	HIGHLN+1
   2536  8fc1		       f0 02 31 	      SUBB	PACKLN+1
   2537  8fc4		       b2 02 30 	      SBCA	PACKLN
   2538  8fc7		       25 1e		      BCS	HIBALL
   2539  8fc9		       fe 02 2e    FINDN1     LDX	SOURCE
   2540  8fcc		       bd 8e 57    FIND0      JSR	PULPSH
   2541  8fcf		       e0 01		      SUBB	1,X
   2542  8fd1		       a2 00		      SBCA	0,X
   2543  8fd3		       25 15		      BCS	FIND3
   2544  8fd5		       26 03		      BNE	FIND1
   2545  8fd7		       5d		      TSTB
   2546  8fd8		       27 11		      BEQ	FIND4
   2547  8fda		       08	   FIND1      INX
   2548  8fdb		       8d 1b	   FIND2      BSR	INXSKP
   2549  8fdd		       81 1e		      CMPA	#$1E
   2550  8fdf		       26 fa		      BNE	FIND2
   2551  8fe1		       08		      INX
   2552  8fe2		       bc 02 2a 	      CPX	NEXTBA
   2553  8fe5		       26 e5		      BNE	FIND0
   2554  8fe7		       fe 02 2a    HIBALL     LDX	NEXTBA
   2555  8fea		       0d	   FIND3      SEC
   2556  8feb		       ff 02 2c    FIND4      STX	WORKBA
   2557  8fee		       bd 8e 68 	      JSR	PULLAE
   2558  8ff1		       39		      RTS
   2559  8ff2
   2560  8ff2		       a6 00	   SKIPSP     LDAA	0,X	;Get the next non-space character (advances X)
   2561  8ff4		       81 20		      CMPA	#$20
   2562  8ff6		       26 03		      BNE	SKIPEX
   2563  8ff8		       08	   INXSKP     INX
   2564  8ff9		       20 f7		      BRA	SKIPSP
   2565  8ffb		       39	   SKIPEX     RTS
   2566  8ffc
   2567  8ffc		       bd 94 06    LINENO     JSR	INTSTN	;Subroutine LINENO
   2568  8fff		       24 05		      BCC	LINE1	;If Valid Number continue
   2569  9001		       c6 07		      LDAB	#7	; Otherwise return ERROR #7
   2570  9003		       7e 90 bd 	      JMP	ERROR
   2571  9006		       bd 8e 57    LINE1      JSR	PULPSH	;Get A & B from ASTK
   2572  9009		       b7 02 30 	      STAA	PACKLN	;Update PACKLN
   2573  900c		       f7 02 31 	      STAB	PACKLN+1
   2574  900f		       ff 02 ac 	      STX	BUFNXT	;Update buffer pointer
   2575  9012		       39		      RTS
   2576  9013
   2577  9013		       fe 02 34    NXTLIN     LDX	BASPNT	;Advance X to the start of the next BASIC line
   2578  9016		       a6 00	   NXTL12     LDAA	0,X
   2579  9018		       08		      INX
   2580  9019		       81 1e		      CMPA	#$1E
   2581  901b		       26 f9		      BNE	NXTL12	;BNE NXTLIN			#### /DTU
   2582  901d		       ff 02 36 	      STX	BASLIN
   2583  9020		       39		      RTS
   2584  9021
   2585  9021		       8d cf	   CCODE      BSR	SKIPSP
   2586  9023		       ff 02 26 	      STX	INDEX4
   2587  9026		       bf 02 28 	      STS	SAVESP
   2588  9029		       ce 8b 4d 	      LDX	#COMMAN-1
   2589  902c		       be 02 26    LOOP3      LDS	INDEX4
   2590  902f		       34		      DES
   2591  9030		       08	   LOOP4      INX
   2592  9031		       32		      PULA
   2593  9032		       e6 00		      LDAB	0,X
   2594  9034		       c1 1e		      CMPB	#$1E
   2595  9036		       27 13		      BEQ	LOOP7
   2596  9038		       11		      CBA
   2597  9039		       27 f5		      BEQ	LOOP4
   2598  903b		       08	   LOOP5      INX
   2599  903c		       8c 8b ec 	      CPX	#COMEND
   2600  903f		       27 15		      BEQ	CCEXIT
   2601  9041		       e6 00		      LDAB	0,X
   2602  9043		       c1 1e		      CMPB	#$1E
   2603  9045		       26 f4		      BNE	LOOP5
   2604  9047		       08	   LOOP6      INX
   2605  9048		       08		      INX
   2606  9049		       20 e1		      BRA	LOOP3
   2607  904b		       08	   LOOP7      INX
   2608  904c		       bf 02 ac 	      STS	BUFNXT
   2609  904f		       bf 02 34 	      STS	BASPNT
   2610  9052		       be 02 28    LOOP8      LDS	SAVESP
   2611  9055		       39		      RTS
   2612  9056
   2613  9056		       be 02 28    CCEXIT     LDS	SAVESP
   2614  9059		       ce 02 b0 	      LDX	#BUFFER	;EMK  - Command lookup failed - Reset BASPNT
   2615  905c		       ff 02 34 	      STX	BASPNT	;EMK
   2616  905f		       ce 8b ac 	      LDX	#IMPLET	;Command lookup failed - Use LET
   2617  9062		       39		      RTS
   2618  9063
   2619  9063		       fe 02 2e    START      LDX	SOURCE	;Reset pointer to start of source workspace
   2620  9066		       ff 02 2a 	      STX	NEXTBA
   2621  9069		       ff 02 2c 	      STX	WORKBA
   2622  906c		       ff 02 48 	      STX	ARRTAB
   2623  906f		       09		      DEX
   2624  9070		       4f		      CLRA
   2625  9071		       08	   START2     INX		;Fill workspace with zeros
   2626  9072		       a7 00		      STAA	0,X
   2627  9074		       bc 02 46 	      CPX	MEMEND
   2628  9077		       26 f8		      BNE	START2
   2629  9079		       4f	   START1     CLRA		;Reset Line# pointers & counters
   2630  907a		       b7 02 30 	      STAA	PACKLN
   2631  907d		       b7 02 31 	      STAA	PACKLN+1
   2632  9080		       b7 02 42 	      STAA	PRCNT	;Reset Print counter
   2633  9083		       fe 02 30 	      LDX	PACKLN
   2634  9086		       ff 02 32 	      STX	HIGHLN
   2635  9089
   2636  9089		       8e 70 45    READY      LDS	#$7045	;WARM START HERE
   2637  908c		       ce 8b ef 	      LDX	#RDYMSG	; Print "READY"
   2638  908f		       bd 8c 71 	      JSR	OUTPUT
   2639  9092
   2640  9092		       8e 70 45    NEWLIN     LDS	#$7045	;Reset Stack Pointer
   2641  9095		       ce 70 7f 	      LDX	#$707F
   2642  9098		       ff 02 3a 	      STX	XSTACK	;Reset XSTACK
   2643  909b		       7f 02 42 	      CLR	PRCNT	;Reset print counter
   2644  909e		       bd 8c 52    NEWL3      JSR	CNTLIN
   2645  90a1		       ce 02 b0 	      LDX	#BUFFER
   2646  90a4		       bd 8f f2 	      JSR	SKIPSP
   2647  90a7		       ff 02 ac 	      STX	BUFNXT
   2648  90aa		       bd 8e 4b 	      JSR	TESTNO
   2649  90ad		       25 03		      BCS	LOOP2
   2650  90af		       7e 91 f4 	      JMP	NUMBER
   2651  90b2		       81 1e	   LOOP2      CMPA	#$1E
   2652  90b4		       27 dc		      BEQ	NEWLIN
   2653  90b6		       bd 90 21 	      JSR	CCODE
   2654  90b9		       ee 00		      LDX	0,X
   2655  90bb		       6e 00		      JMP	0,X
   2656  90bd
   2657  90bd		       8e 70 45    ERROR      LDS	#$7045
   2658  90c0		       bd 8c 7f 	      JSR	CRLF
   2659  90c3		       ce 8b ff 	      LDX	#ERRMS1
   2660  90c6		       bd 8c 78 	      JSR	OUTNCR
   2661  90c9		       4f		      CLRA
   2662  90ca		       bd 8e 59 	      JSR	PUSHAE
   2663  90cd		       bd 95 03 	      JSR	PRN
   2664  90d0		       ce 8c 07 	      LDX	#ERRMS2
   2665  90d3		       bd 8c 78 	      JSR	OUTNCR
   2666  90d6		       5f		      CLRB
   2667  90d7		       b6 02 36 	      LDAA	BASLIN
   2668  90da		       81 02		      CMPA	#$02	;// EMK changed due to Relocation of zero page storage:
   2669  90dc		       26 05		      BNE	ERROR1	;// EMK  ORG $20 -> ORG $220
   2670  90de		       86 00		      LDAA	#$00	;// EMK
   2671  90e0		       7e 90 ea 	      JMP	ERROR2	;// EMK
   2672  90e3		       fe 02 36    ERROR1     LDX	BASLIN
   2673  90e6		       a6 00		      LDAA	0,X
   2674  90e8		       e6 01		      LDAB	1,X
   2675  90ea		       bd 95 1f    ERROR2     JSR	PRN0
   2676  90ed		       bd 8c 7f 	      JSR	CRLF
   2677  90f0		       20 97		      BRA	READY
   2678  90f2
   2679  90f2		       fe 02 2e    RUN	      LDX	SOURCE
   2680  90f5		       ff 02 36 	      STX	BASLIN
   2681  90f8		       ce 02 59 	      LDX	#SBRSTK
   2682  90fb		       ff 02 57 	      STX	SBRPNT
   2683  90fe		       ce 02 69 	      LDX	#FORSTK
   2684  9101		       ff 02 53 	      STX	FORPNT
   2685  9104		       ce 70 7f 	      LDX	#$707F
   2686  9107		       ff 02 3a 	      STX	XSTACK
   2687  910a		       fe 02 2a 	      LDX	NEXTBA
   2688  910d		       ff 02 48 	      STX	ARRTAB
   2689  9110		       4f		      CLRA
   2690  9111		       09		      DEX
   2691  9112		       08	   RUN1       INX
   2692  9113		       a7 00		      STAA	0,X
   2693  9115		       bc 02 46 	      CPX	MEMEND
   2694  9118		       26 f8		      BNE	RUN1
   2695  911a		       ce 03 00 	      LDX	#VARTAB
   2696  911d		       c6 4e		      LDAB	#78
   2697  911f		       a7 00	   RUN2       STAA	0,X
   2698  9121		       08		      INX
   2699  9122		       5a		      DECB
   2700  9123		       26 fa		      BNE	RUN2
   2701  9125		       7e 92 e7 	      JMP	BASIC
   2702  9128
   2703  9128		       ce 8b fa    CLIST      LDX	#PGCNTL
   2704  912b		       bd 8c 71 	      JSR	OUTPUT
   2705  912e		       fe 02 34 	      LDX	BASPNT
   2706  9131		       bd 8f f2    CLIST1     JSR	SKIPSP
   2707  9134		       81 1e		      CMPA	#$1E
   2708  9136		       27 2f		      BEQ	CLIST4
   2709  9138		       bd 94 06 	      JSR	INTSTN
   2710  913b		       ff 02 34 	      STX	BASPNT
   2711  913e		       bd 8f c9 	      JSR	FINDN1
   2712  9141		       ff 02 24 	      STX	INDEX3
   2713  9144		       fe 02 34 	      LDX	BASPNT
   2714  9147		       36		      PSHA
   2715  9148		       bd 8f f2 	      JSR	SKIPSP
   2716  914b		       81 1e		      CMPA	#$1E
   2717  914d		       32		      PULA
   2718  914e		       26 05		      BNE	CLIST2
   2719  9150		       bd 8e 59 	      JSR	PUSHAE
   2720  9153		       20 04		      BRA	CLIST3
   2721  9155		       08	   CLIST2     INX
   2722  9156		       bd 94 06 	      JSR	INTSTN
   2723  9159		       4f	   CLIST3     CLRA
   2724  915a		       c6 01		      LDAB	#1
   2725  915c		       bd 8f a7 	      JSR	ADD1
   2726  915f		       bd 8f c9 	      JSR	FINDN1
   2727  9162		       bd 8c f9 	      JSR	LIST0
   2728  9165		       20 03		      BRA	CLIST5
   2729  9167		       bd 8c ee    CLIST4     JSR	LIST
   2730  916a		       7e 95 b0    CLIST5     JMP	REMARK
   2731  916d		       01		      NOP
   2732  916e
   2733  916e		       bd 90 13    PATCH      JSR	NXTLIN
   2734  9171		       ce 92 e7 	      LDX	#BASIC
   2735  9174		       ff 02 28 	      STX	SAVESP
   2736  9177		       8e 02 28 	      LDS	#SAVESP
   2737  917a		       0f		      SEI		;Disable interrupts
   2738  917b		       86 60		      LDAA	#$60
   2739  917d		       97 14		      STAA	$14	;Set RAM/Port5 Ctrl RAME=1,STBY=1,AMRE=1,HLTE=0,MRE=0,IRQ1&2=0
   2740  917f		       8e 7f f0 	      LDS	#$7FF0	;Set Stack Pointer (top of external RAM - 16bytes)
   2741  9182		       7e 80 36 	      JMP	MONITOR	;JMP CONTRL	      /EMK
   2742  9185							;CONTRL  EQU  $C000  /EMK
   2743  9185
   2744  9185							;***** SYS(aaaa,A,B) ************** /EMK
   2745  9185		       bd 98 0b    SYSCALL    JSR	GETPRMP	;X Points to byte after "("
   2746  9188		       bd 98 1d 	      JSR	CVTADDR	;4 Char Address to BUFFER+32 & BUFFER+33
   2747  918b		       a6 05		      LDAA	5,X	;X+5= v1
   2748  918d		       bd 98 5d 	      JSR	GETVALU	;Get 8bit Variable Value
   2749  9190		       b7 02 d2 	      STAA	BUFFER+34
   2750  9193		       a6 07		      LDAA	7,X	;X+7= v2
   2751  9195		       bd 98 5d 	      JSR	GETVALU	;Get 8bit Variable Value
   2752  9198		       b7 02 d3 	      STAA	BUFFER+35
   2753  919b		       b6 02 d2 	      LDAA	BUFFER+34	;Load v1
   2754  919e		       f6 02 d3 	      LDAB	BUFFER+35	;Load v2
   2755  91a1		       fe 02 d0 	      LDX	BUFFER+32	;X = Converted Address
   2756  91a4		       ad 00		      JSR	0,X	;JSR (eg if "SYS(FBF4,A,B)" then beep should be called)
   2757  91a6		       b7 02 d2 	      STAA	BUFFER+34	;Save A Return Value
   2758  91a9		       f7 02 d3 	      STAB	BUFFER+35	;Save B Return value
   2759  91ac		       bd 98 0b 	      JSR	GETPRMP	;X Points to byte after "("
   2760  91af		       a6 05		      LDAA	5,X	;X+5= v1
   2761  91b1		       f6 02 d2 	      LDAB	BUFFER+34
   2762  91b4		       bd 98 65 	      JSR	SETVALU	;Set 8bit Variable Value
   2763  91b7		       a6 07		      LDAA	7,X	;X+7= v2
   2764  91b9		       f6 02 d3 	      LDAB	BUFFER+35
   2765  91bc		       bd 98 65 	      JSR	SETVALU	;Set 8bit Variable Value
   2766  91bf		       bd 90 13    SYSCALX    JSR	NXTLIN	;Process Next Statement
   2767  91c2		       7e 92 e7 	      JMP	BASIC
   2768  91c5							;***** PEEK(aaaa,A) ************** /EMK
   2769  91c5		       bd 98 0b    DOPEEK     JSR	GETPRMP	;X Points to byte after "("
   2770  91c8		       bd 98 1d 	      JSR	CVTADDR	;4 Char Address to BUFFER+32 & BUFFER+33
   2771  91cb		       fe 02 d0 	      LDX	BUFFER+32	;X = Converted Address
   2772  91ce		       e6 00		      LDAB	0,X	;Get Value pointed to by aaaa ->b
   2773  91d0		       f7 02 d2 	      STAB	BUFFER+34	;save for debugging
   2774  91d3		       bd 98 0b 	      JSR	GETPRMP	;X Points to byte after "("
   2775  91d6		       a6 05		      LDAA	5,X	;X+9=v ->A
   2776  91d8		       bd 98 65 	      JSR	SETVALU	;Set 8bit Variable Value = B
   2777  91db		       7e 91 bf 	      JMP	SYSCALX	;Process Next Statement
   2778  91de							;***** PEEK(aaaa,A) ************** /EMK
   2779  91de		       bd 98 0b    DOPOKE     JSR	GETPRMP	;X Points to byte after "("
   2780  91e1		       bd 98 1d 	      JSR	CVTADDR	;4 Char Address to BUFFER+32 & BUFFER+33
   2781  91e4		       a6 05		      LDAA	5,X	;X+9=v -> A
   2782  91e6		       bd 98 5d 	      JSR	GETVALU	;Get 8bit Variable Value
   2783  91e9		       b7 02 d3 	      STAA	BUFFER+35	;save for debugging
   2784  91ec		       fe 02 d0 	      LDX	BUFFER+32	;X = Converted Address
   2785  91ef		       a7 00		      STAA	0,X	;Store the value form v into memory at aaaa
   2786  91f1		       7e 91 bf 	      JMP	SYSCALX	;Process Next Statement
   2787  91f4
   2788  91f4		       bd 8f fc    NUMBER     JSR	LINENO	;Validate number and update PACKLN & BUFNXT
   2789  91f7		       bd 8f bb    NUM1       JSR	FINDNO	;Is it an Existing Line# ?
   2790  91fa		       24 16		      BCC	DELREP	; YES = Jump to DELREP
   2791  91fc		       fe 02 ac 	      LDX	BUFNXT	;
   2792  91ff		       bd 8f f2 	      JSR	SKIPSP
   2793  9202		       81 1e		      CMPA	#$1E	;Line# with no data following it?
   2794  9204		       27 26		      BEQ	NEXIT	; YES = Do Nothing Just exit
   2795  9206		       fe 02 2c 	      LDX	WORKBA
   2796  9209		       bc 02 2a 	      CPX	NEXTBA	;Adding A NEW LINE#
   2797  920c		       27 21		      BEQ	CAPPEN	; Yes = GOTO CAPPEN
   2798  920e		       8d 61		      BSR	INSERT	;Otherwise ...Insert a new line
   2799  9210		       20 1a		      BRA	NEXIT	;Print CR,LF & Exit
   2800  9212
   2801  9212		       fe 02 ac    DELREP     LDX	BUFNXT
   2802  9215		       bd 8f f2 	      JSR	SKIPSP
   2803  9218		       81 1e		      CMPA	#$1E	;Line# with no data following it?
   2804  921a		       26 0c		      BNE	REPLAC	; NO= Do Replace  YES = Delete Line
   2805  921c		       fe 02 2a 	      LDX	NEXTBA
   2806  921f		       bc 02 2e 	      CPX	SOURCE
   2807  9222		       27 08		      BEQ	NEXIT
   2808  9224		       8d 13		      BSR	DELETE
   2809  9226		       20 04		      BRA	NEXIT
   2810  9228
   2811  9228		       8d 0f	   REPLAC     BSR	DELETE	;Replace Existing line
   2812  922a		       8d 45		      BSR	INSERT
   2813  922c		       7e 90 92    NEXIT      JMP	NEWLIN
   2814  922f		       8d 40	   CAPPEN     BSR	INSERT
   2815  9231		       fe 02 30 	      LDX	PACKLN
   2816  9234		       ff 02 32 	      STX	HIGHLN
   2817  9237		       20 f3		      BRA	NEXIT
   2818  9239		       bf 02 28    DELETE     STS	SAVESP	;Delete existing line
   2819  923c		       fe 02 2c 	      LDX	WORKBA
   2820  923f		       be 02 2a 	      LDS	NEXTBA
   2821  9242		       c6 02		      LDAB	#2
   2822  9244		       08		      INX
   2823  9245		       08		      INX
   2824  9246		       34		      DES
   2825  9247		       34		      DES
   2826  9248		       a6 00	   DEL2       LDAA	0,X
   2827  924a		       34		      DES
   2828  924b		       08		      INX
   2829  924c		       5c		      INCB
   2830  924d		       81 1e		      CMPA	#$1E
   2831  924f		       26 f7		      BNE	DEL2
   2832  9251		       bf 02 2a 	      STS	NEXTBA
   2833  9254		       bf 02 48 	      STS	ARRTAB
   2834  9257		       fe 02 2c 	      LDX	WORKBA
   2835  925a							;STAB DEL5+1	   ;Writes B to Program Memory. Not ROM friendly
   2836  925a							;* IN AT OBJECT TIME
   2837  925a		       bc 02 2a    DEL4       CPX	NEXTBA
   2838  925d		       27 0e		      BEQ	DELEX
   2839  925f		       ff 02 20 	      STX	INDEX1	;EMK  Save X
   2840  9262		       3a		      ABX		;EMK  X=B+X
   2841  9263		       a6 00	   DEL5       LDAA	0,X
   2842  9265		       fe 02 20 	      LDX	INDEX1	;EMK  Restore Old X
   2843  9268		       a7 00		      STAA	0,X
   2844  926a		       08		      INX
   2845  926b		       20 ed		      BRA	DEL4
   2846  926d
   2847  926d		       be 02 28    DELEX      LDS	SAVESP
   2848  9270		       39		      RTS
   2849  9271
   2850  9271		       fe 02 ac    INSERT     LDX	BUFNXT	;Insert a line between 2 existing lines
   2851  9274		       bd 90 21 	      JSR	CCODE
   2852  9277		       ff 02 4a    INS1       STX	KEYWD
   2853  927a		       f6 02 af 	      LDAB	ENDBUF+1
   2854  927d		       f0 02 ad 	      SUBB	BUFNXT+1
   2855  9280		       cb 04		      ADDB	#$04
   2856  9282							;STAB OFFSET+1 	;Writes B to Program Memory. Not ROM friendly
   2857  9282		       f7 02 22 	      STAB	INDEX2	;EMK	Save B
   2858  9285		       fb 02 2b 	      ADDB	NEXTBA+1
   2859  9288		       86 00		      LDAA	#$00
   2860  928a		       b9 02 2a 	      ADCA	NEXTBA
   2861  928d		       b1 02 46 	      CMPA	MEMEND
   2862  9290		       22 50		      BHI	OVERFL
   2863  9292		       f7 02 2b 	      STAB	NEXTBA+1
   2864  9295		       b7 02 2a 	      STAA	NEXTBA
   2865  9298		       fe 02 2a 	      LDX	NEXTBA
   2866  929b		       ff 02 48 	      STX	ARRTAB
   2867  929e		       bc 02 2c    INS2       CPX	WORKBA
   2868  92a1		       27 17		      BEQ	BUFWRT
   2869  92a3		       09		      DEX
   2870  92a4		       a6 00		      LDAA	0,X
   2871  92a6		       ff 02 20 	      STX	INDEX1	;EMK	  Save X
   2872  92a9		       f7 02 24 	      STAB	INDEX3	;EMK	  Save B
   2873  92ac		       f6 02 22 	      LDAB	INDEX2	;EMK	  B = Saved B
   2874  92af		       3a		      ABX		;EMK	  X=X+B
   2875  92b0		       a7 00	   OFFSET     STAA	0,X
   2876  92b2		       fe 02 20 	      LDX	INDEX1	;EMK	  Restore X
   2877  92b5		       f6 02 24 	      LDAB	INDEX3	;EMK	  Restore B
   2878  92b8		       20 e4		      BRA	INS2
   2879  92ba		       fe 02 2c    BUFWRT     LDX	WORKBA
   2880  92bd		       bf 02 28 	      STS	SAVESP
   2881  92c0		       b6 02 30 	      LDAA	PACKLN
   2882  92c3		       a7 00		      STAA	0,X
   2883  92c5		       08		      INX
   2884  92c6		       b6 02 31 	      LDAA	PACKLN+1
   2885  92c9		       a7 00		      STAA	0,X
   2886  92cb		       08		      INX
   2887  92cc		       b6 02 4b 	      LDAA	KEYWD+1
   2888  92cf		       a7 00		      STAA	0,X
   2889  92d1		       08		      INX
   2890  92d2		       be 02 ac 	      LDS	BUFNXT
   2891  92d5		       34		      DES
   2892  92d6		       32	   BUF3       PULA
   2893  92d7		       a7 00		      STAA	0,X
   2894  92d9		       08		      INX
   2895  92da		       81 1e		      CMPA	#$1E
   2896  92dc		       26 f8		      BNE	BUF3
   2897  92de		       be 02 28 	      LDS	SAVESP
   2898  92e1		       39		      RTS
   2899  92e2
   2900  92e2		       c6 0e	   OVERFL     LDAB	#14
   2901  92e4		       7e 90 bd 	      JMP	ERROR
   2902  92e7		       fe 02 36    BASIC      LDX	BASLIN
   2903  92ea		       bc 02 2a 	      CPX	NEXTBA
   2904  92ed		       26 03		      BNE	BASIC1
   2905  92ef		       7e 90 89    BASIC0     JMP	READY
   2906  92f2		       b6 02 36    BASIC1     LDAA	BASLIN	; TST BASLIN  //EMK This change due to relocation: ORG $20 -> ORG $220
   2907  92f5		       81 02		      CMPA	#$02	; // EMK If local variables are moved to a different page this must change as well
   2908  92f7		       27 f6		      BEQ	BASIC0	; Processed last line so just print "Ready"
   2909  92f9		       08		      INX		; Otherwise...
   2910  92fa		       08		      INX		; Step past Line#
   2911  92fb		       a6 00		      LDAA	0,X	; Get keyword token
   2912  92fd		       08		      INX
   2913  92fe		       ff 02 34 	      STX	BASPNT	;BASPNT=byte after keyword token
   2914  9301		       ce 8b 4e 	      LDX	#COMMAN	;X= Address of COMMAND lookup table
   2915  9304		       ff 02 4a 	      STX	KEYWD	;KEYWD + KEYWD+1 = X
   2916  9307		       b7 02 4b 	      STAA	KEYWD+1	;Change low KEYWD address = token
   2917  930a		       ce 03 8c 	      LDX	#ASTACK
   2918  930d		       ff 02 51 	      STX	AESTK
   2919  9310		       fe 02 4a 	      LDX	KEYWD	;X=address of keyword in lookup table
   2920  9313		       ee 00		      LDX	0,X	;X=address of keyword routine
   2921  9315		       6e 00	   BASIC2     JMP	0,X	;Jump to keyword routine
   2922  9317
   2923  9317		       fe 02 36    GOSUB      LDX	BASLIN
   2924  931a		       ff 02 20 	      STX	INDEX1
   2925  931d		       bd 90 13 	      JSR	NXTLIN
   2926  9320		       fe 02 57 	      LDX	SBRPNT
   2927  9323		       8c 02 69 	      CPX	#SBRSTK+16
   2928  9326		       26 05		      BNE	GOSUB1
   2929  9328		       c6 09		      LDAB	#9
   2930  932a		       7e 90 bd 	      JMP	ERROR
   2931  932d		       b6 02 36    GOSUB1     LDAA	BASLIN
   2932  9330		       a7 00		      STAA	0,X
   2933  9332		       08		      INX
   2934  9333		       b6 02 37 	      LDAA	BASLIN+1
   2935  9336		       a7 00		      STAA	0,X
   2936  9338		       08		      INX
   2937  9339		       ff 02 57 	      STX	SBRPNT
   2938  933c		       fe 02 20 	      LDX	INDEX1
   2939  933f		       ff 02 36 	      STX	BASLIN
   2940  9342		       fe 02 34    GOTO       LDX	BASPNT
   2941  9345		       bd 8e bb 	      JSR	EXPR
   2942  9348		       bd 8f c9 	      JSR	FINDN1
   2943  934b		       24 05		      BCC	GOTO2
   2944  934d		       c6 07		      LDAB	#7
   2945  934f		       7e 90 bd 	      JMP	ERROR
   2946  9352		       ff 02 36    GOTO2      STX	BASLIN
   2947  9355		       20 90		      BRA	BASIC
   2948  9357
   2949  9357		       fe 02 57    RETURN     LDX	SBRPNT
   2950  935a		       8c 02 59 	      CPX	#SBRSTK
   2951  935d		       26 05		      BNE	RETUR1
   2952  935f		       c6 0a		      LDAB	#10
   2953  9361		       7e 90 bd 	      JMP	ERROR
   2954  9364		       09	   RETUR1     DEX
   2955  9365		       09		      DEX
   2956  9366		       ff 02 57 	      STX	SBRPNT
   2957  9369		       ee 00		      LDX	0,X
   2958  936b		       ff 02 36 	      STX	BASLIN
   2959  936e		       7e 92 e7 	      JMP	BASIC
   2960  9371
   2961  9371		       ce 8b e3    PAUSE      LDX	#PAUMSG
   2962  9374		       bd 8c 78 	      JSR	OUTNCR
   2963  9377		       bd 8d 3e 	      JSR	PRINSP
   2964  937a		       fe 02 36 	      LDX	BASLIN
   2965  937d		       a6 00		      LDAA	0,X
   2966  937f		       08		      INX
   2967  9380		       e6 00		      LDAB	0,X
   2968  9382		       08		      INX
   2969  9383		       bd 95 1f 	      JSR	PRN0
   2970  9386		       bd 8c 69    PAUSE1     JSR	INCH
   2971  9389		       81 0d		      CMPA	#$0D
   2972  938b		       26 f9		      BNE	PAUSE1
   2973  938d		       bd 8c 7f 	      JSR	CRLF
   2974  9390		       7e 95 b0    PAUSE2     JMP	REMARK
   2975  9393		       b6 02 34    INPUT      LDAA	BASPNT
   2976  9396		       26 04		      BNE	INPUT0
   2977  9398		       c6 0c		      LDAB	#12
   2978  939a		       20 24		      BRA	INPERR
   2979  939c		       bd 8c 11    INPUT0     JSR	KEYBD
   2980  939f		       ce 02 b0 	      LDX	#BUFFER
   2981  93a2		       ff 02 ac 	      STX	BUFNXT
   2982  93a5		       fe 02 34 	      LDX	BASPNT
   2983  93a8		       bd 8d 79    INPUT1     JSR	TSTV
   2984  93ab		       25 30		      BCS	INPEX
   2985  93ad		       ff 02 34 	      STX	BASPNT
   2986  93b0		       fe 02 ac 	      LDX	BUFNXT
   2987  93b3		       8d 45	   INPUT2     BSR	INNUM
   2988  93b5		       24 14		      BCC	INPUT4
   2989  93b7		       09		      DEX
   2990  93b8		       a6 00		      LDAA	0,X
   2991  93ba		       81 1e		      CMPA	#$1E
   2992  93bc		       27 05		      BEQ	INPUTS
   2993  93be		       c6 02		      LDAB	#2
   2994  93c0		       7e 90 bd    INPERR     JMP	ERROR
   2995  93c3		       bd 8c 11    INPUTS     JSR	KEYBD
   2996  93c6		       ce 02 b0 	      LDX	#BUFFER
   2997  93c9		       20 e8		      BRA	INPUT2
   2998  93cb		       bd 8c b8    INPUT4     JSR	STORE
   2999  93ce		       08		      INX
   3000  93cf		       ff 02 ac 	      STX	BUFNXT
   3001  93d2		       fe 02 34 	      LDX	BASPNT
   3002  93d5		       bd 8f f2 	      JSR	SKIPSP
   3003  93d8		       08		      INX
   3004  93d9		       81 2c		      CMPA	#',
   3005  93db		       27 cb		      BEQ	INPUT1
   3006  93dd		       09	   INPEX      DEX
   3007  93de		       7f 02 42 	      CLR	PRCNT
   3008  93e1		       81 1e		      CMPA	#$1E
   3009  93e3		       27 ab		      BEQ	PAUSE2
   3010  93e5		       c6 03	   DBLLTR     LDAB	#3
   3011  93e7		       7e 90 bd 	      JMP	ERROR
   3012  93ea		       8d 1a	   TSTN       BSR	INTSTN
   3013  93ec		       25 06		      BCS	TSTN0
   3014  93ee		       bd 8e 68 	      JSR	PULLAE
   3015  93f1		       4d		      TSTA
   3016  93f2		       2a 02		      BPL	TSTN1
   3017  93f4		       0d	   TSTN0      SEC
   3018  93f5		       39		      RTS
   3019  93f6		       bd 8e 59    TSTN1      JSR	PUSHAE
   3020  93f9		       39		      RTS
   3021  93fa
   3022  93fa		       bd 8f f2    INNUM      JSR	SKIPSP
   3023  93fd		       b7 02 4c 	      STAA	TSIGN
   3024  9400		       08		      INX
   3025  9401		       81 2d		      CMPA	#'-
   3026  9403		       27 04		      BEQ	INNUM0
   3027  9405		       09		      DEX
   3028  9406		       7f 02 4c    INTSTN     CLR	TSIGN	;Subroutine INTSTN -
   3029  9409		       bd 8f f2    INNUM0     JSR	SKIPSP	;Skip past spaces - X points to non-space
   3030  940c		       bd 8e 4b 	      JSR	TESTNO	;C=0 if '0'-'9'
   3031  940f		       24 01		      BCC	INNUM1	;IF NOT Number the return
   3032  9411		       39		      RTS
   3033  9412		       09	   INNUM1     DEX		;Back up 1 byte
   3034  9413		       4f		      CLRA		;A=0
   3035  9414		       5f		      CLRB		;B=0
   3036  9415		       08	   INNUM2     INX		;Forward 1 byte
   3037  9416		       36		      PSHA		;Save A
   3038  9417		       a6 00		      LDAA	0,X	;Get Byte
   3039  9419		       bd 8e 4b 	      JSR	TESTNO	;C=0 if '0'-'9'
   3040  941c		       25 2f		      BCS	INNEX	;If NOT Number then exit
   3041  941e		       80 30		      SUBA	#$30
   3042  9420		       b7 02 4e 	      STAA	TNUMB	;Save digit value in TNUMB
   3043  9423		       32		      PULA		;Restore A
   3044  9424		       58		      ASLB		;B <<
   3045  9425		       49		      ROLA		;A <<
   3046  9426		       25 20		      BCS	INNERR	;If C got set ERROR 2
   3047  9428		       f7 02 50 	      STAB	BNUMB
   3048  942b		       b7 02 4f 	      STAA	ANUMB
   3049  942e		       58		      ASLB
   3050  942f		       49		      ROLA
   3051  9430		       25 16		      BCS	INNERR
   3052  9432		       58		      ASLB
   3053  9433		       49		      ROLA
   3054  9434		       25 12		      BCS	INNERR
   3055  9436		       fb 02 50 	      ADDB	BNUMB
   3056  9439		       b9 02 4f 	      ADCA	ANUMB
   3057  943c		       25 0a		      BCS	INNERR
   3058  943e		       fb 02 4e 	      ADDB	TNUMB
   3059  9441		       89 00		      ADCA	#0
   3060  9443		       25 03		      BCS	INNERR
   3061  9445		       7e 94 15 	      JMP	INNUM2
   3062  9448		       c6 02	   INNERR     LDAB	#2
   3063  944a		       7e 90 bd 	      JMP	ERROR
   3064  944d		       32	   INNEX      PULA
   3065  944e		       7d 02 4c 	      TST	TSIGN
   3066  9451		       27 03		      BEQ	INNEX2
   3067  9453		       bd 8f 9b 	      JSR	NEGAB
   3068  9456		       bd 8e 59    INNEX2     JSR	PUSHAE
   3069  9459		       0c		      CLC
   3070  945a		       39		      RTS
   3071  945b
   3072  945b		       fe 02 34    PRINT      LDX	BASPNT
   3073  945e		       bd 8f f2    PRINT0     JSR	SKIPSP
   3074  9461		       81 22		      CMPA	#'"
   3075  9463		       26 18		      BNE	PRINT4
   3076  9465		       08		      INX
   3077  9466		       a6 00	   PRINT1     LDAA	0,X
   3078  9468		       08		      INX
   3079  9469		       81 22		      CMPA	#'"
   3080  946b		       27 5c		      BEQ	PRIN88
   3081  946d		       81 1e		      CMPA	#$1E
   3082  946f		       26 04		      BNE	PRINT2
   3083  9471		       c6 04		      LDAB	#4
   3084  9473		       20 35		      BRA	PRINTE
   3085  9475		       bd 8c 63    PRINT2     JSR	OUTCH
   3086  9478		       bd 94 f1 	      JSR	ENLINE
   3087  947b		       20 e9		      BRA	PRINT1
   3088  947d		       81 1e	   PRINT4     CMPA	#$1E
   3089  947f		       26 15		      BNE	PRINT6
   3090  9481		       09		      DEX
   3091  9482		       a6 00		      LDAA	0,X
   3092  9484		       08		      INX
   3093  9485		       81 3b		      CMPA	#';
   3094  9487		       27 06		      BEQ	PRINT5
   3095  9489		       bd 8c 7f 	      JSR	CRLF
   3096  948c		       7f 02 42 	      CLR	PRCNT
   3097  948f		       08	   PRINT5     INX
   3098  9490		       ff 02 36 	      STX	BASLIN
   3099  9493		       7e 92 e7 	      JMP	BASIC
   3100  9496		       81 54	   PRINT6     CMPA	#'T
   3101  9498		       26 29		      BNE	PRINT8
   3102  949a		       e6 01		      LDAB	1,X
   3103  949c		       c1 41		      CMPB	#'A
   3104  949e		       26 23		      BNE	PRINT8
   3105  94a0		       08		      INX
   3106  94a1		       08		      INX
   3107  94a2		       a6 00		      LDAA	0,X
   3108  94a4		       81 42		      CMPA	#'B
   3109  94a6		       27 05		      BEQ	PRINT7
   3110  94a8		       c6 0b		      LDAB	#11
   3111  94aa		       7e 90 bd    PRINTE     JMP	ERROR
   3112  94ad		       08	   PRINT7     INX
   3113  94ae		       bd 8e bb 	      JSR	EXPR
   3114  94b1		       bd 8e 68 	      JSR	PULLAE
   3115  94b4		       f0 02 42 	      SUBB	PRCNT
   3116  94b7		       23 10		      BLS	PRIN88
   3117  94b9		       bd 8d 3e    PRIN77     JSR	PRINSP
   3118  94bc		       8d 33		      BSR	ENLINE
   3119  94be		       5a		      DECB
   3120  94bf		       26 f8		      BNE	PRIN77
   3121  94c1		       20 06		      BRA	PRIN88
   3122  94c3		       bd 8e bb    PRINT8     JSR	EXPR
   3123  94c6		       bd 95 03 	      JSR	PRN
   3124  94c9		       bd 8f f2    PRIN88     JSR	SKIPSP
   3125  94cc		       81 2c		      CMPA	#',
   3126  94ce		       26 11		      BNE	PRIN99
   3127  94d0		       08		      INX
   3128  94d1		       b6 02 42    PRLOOP     LDAA	PRCNT
   3129  94d4		       16		      TAB
   3130  94d5		       c4 f8		      ANDB	#$F8
   3131  94d7		       10		      SBA
   3132  94d8		       27 0c		      BEQ	PRI999
   3133  94da		       bd 8d 3e 	      JSR	PRINSP
   3134  94dd		       8d 12		      BSR	ENLINE
   3135  94df		       20 f0		      BRA	PRLOOP
   3136  94e1		       81 3b	   PRIN99     CMPA	#';
   3137  94e3		       26 04		      BNE	PREND
   3138  94e5		       08		      INX
   3139  94e6		       7e 94 5e    PRI999     JMP	PRINT0
   3140  94e9		       81 1e	   PREND      CMPA	#$1E
   3141  94eb		       27 90		      BEQ	PRINT4
   3142  94ed		       c6 06		      LDAB	#6
   3143  94ef		       20 b9		      BRA	PRINTE
   3144  94f1		       36	   ENLINE     PSHA
   3145  94f2		       b6 02 42 	      LDAA	PRCNT
   3146  94f5		       4c		      INCA
   3147  94f6		       81 72		      CMPA	#MAXLIN
   3148  94f8		       26 04		      BNE	ENLEXT
   3149  94fa		       bd 8c 7f 	      JSR	CRLF
   3150  94fd		       4f		      CLRA
   3151  94fe		       b7 02 42    ENLEXT     STAA	PRCNT
   3152  9501		       32		      PULA
   3153  9502		       39		      RTS
   3154  9503		       bd 8d 3e    PRN	      JSR	PRINSP
   3155  9506		       8d e9		      BSR	ENLINE
   3156  9508		       86 ff		      LDAA	#$FF
   3157  950a		       b7 02 4c 	      STAA	TSIGN
   3158  950d		       bd 8e 68 	      JSR	PULLAE
   3159  9510		       4d		      TSTA
   3160  9511		       2a 0c		      BPL	PRN0
   3161  9513		       bd 8f 9b 	      JSR	NEGAB
   3162  9516		       36		      PSHA
   3163  9517		       86 2d		      LDAA	#'-
   3164  9519		       bd 8c 63 	      JSR	OUTCH
   3165  951c		       8d d3		      BSR	ENLINE
   3166  951e		       32		      PULA
   3167  951f		       bd 8c 91    PRN0       JSR	PUSHX
   3168  9522		       ce 95 5d 	      LDX	#KIOK
   3169  9525		       7f 02 4e    PRN1       CLR	TNUMB
   3170  9528		       e0 01	   PRN2       SUBB	1,X
   3171  952a		       a2 00		      SBCA	0,X
   3172  952c		       25 05		      BCS	PRN5
   3173  952e		       7c 02 4e 	      INC	TNUMB
   3174  9531		       20 f5		      BRA	PRN2
   3175  9533		       eb 01	   PRN5       ADDB	1,X
   3176  9535		       a9 00		      ADCA	0,X
   3177  9537		       36		      PSHA
   3178  9538		       b6 02 4e 	      LDAA	TNUMB
   3179  953b		       26 0a		      BNE	PRN6
   3180  953d		       8c 95 65 	      CPX	#KIOK+8
   3181  9540		       27 05		      BEQ	PRN6
   3182  9542		       7d 02 4c 	      TST	TSIGN
   3183  9545		       26 0a		      BNE	PRN7
   3184  9547		       8b 30	   PRN6       ADDA	#$30
   3185  9549		       7f 02 4c 	      CLR	TSIGN
   3186  954c		       bd 8c 63 	      JSR	OUTCH
   3187  954f		       8d a0		      BSR	ENLINE
   3188  9551		       32	   PRN7       PULA
   3189  9552		       08		      INX
   3190  9553		       08		      INX
   3191  9554		       8c 95 67 	      CPX	#KIOK+10
   3192  9557		       26 cc		      BNE	PRN1
   3193  9559		       bd 8c ac 	      JSR	PULLX
   3194  955c		       39		      RTS
   3195  955d
   3196  955d		       27 10	   KIOK       dc.w	10000
   3197  955f		       03 e8		      dc.w	1000
   3198  9561		       00 64		      dc.w	100
   3199  9563		       00 0a		      dc.w	10
   3200  9565		       00 01		      dc.w	1
   3201  9567
   3202  9567		       fe 02 34    LET	      LDX	BASPNT
   3203  956a		       bd 8d 79 	      JSR	TSTV
   3204  956d		       24 05		      BCC	LET1
   3205  956f		       c6 0c	   LET0       LDAB	#12
   3206  9571		       7e 90 bd    LET00      JMP	ERROR
   3207  9574		       bd 8f f2    LET1       JSR	SKIPSP
   3208  9577		       08		      INX
   3209  9578		       81 3d		      CMPA	#'=
   3210  957a		       27 04		      BEQ	LET3
   3211  957c		       c6 06	   LET2       LDAB	#6
   3212  957e		       20 f1		      BRA	LET00
   3213  9580		       bd 8e bb    LET3       JSR	EXPR
   3214  9583		       81 1e		      CMPA	#$1E
   3215  9585		       26 f5		      BNE	LET2
   3216  9587		       bd 8c b8 	      JSR	STORE
   3217  958a		       20 24		      BRA	REMARK
   3218  958c		       f6 02 49    SIZE       LDAB	ARRTAB+1
   3219  958f		       b6 02 48 	      LDAA	ARRTAB
   3220  9592		       f0 02 2f 	      SUBB	SOURCE+1
   3221  9595		       b2 02 2e 	      SBCA	SOURCE
   3222  9598		       bd 95 1f 	      JSR	PRN0
   3223  959b		       bd 8d 3e 	      JSR	PRINSP
   3224  959e		       f6 02 47 	      LDAB	MEMEND+1
   3225  95a1		       b6 02 46 	      LDAA	MEMEND
   3226  95a4		       f0 02 49 	      SUBB	ARRTAB+1
   3227  95a7		       b2 02 48 	      SBCA	ARRTAB
   3228  95aa		       bd 95 1f 	      JSR	PRN0
   3229  95ad		       bd 8c 7f 	      JSR	CRLF
   3230  95b0		       bd 90 13    REMARK     JSR	NXTLIN
   3231  95b3		       7e 92 e7 	      JMP	BASIC
   3232  95b6		       fe 02 34    DIM	      LDX	BASPNT
   3233  95b9		       bd 8f f2    DIM1       JSR	SKIPSP
   3234  95bc		       bd 8e 43 	      JSR	TSTLTR
   3235  95bf		       24 03		      BCC	DIM111
   3236  95c1		       7e 96 63 	      JMP	DIMEX
   3237  95c4		       80 40	   DIM111     SUBA	#$40
   3238  95c6		       b7 02 9a 	      STAA	DIMVAR+1
   3239  95c9		       48		      ASLA
   3240  95ca		       bb 02 9a 	      ADDA	DIMVAR+1
   3241  95cd		       b7 02 9a 	      STAA	DIMVAR+1
   3242  95d0		       bd 8c 91 	      JSR	PUSHX
   3243  95d3		       fe 02 99 	      LDX	DIMVAR
   3244  95d6		       6d 00		      TST	0,X
   3245  95d8		       26 1e		      BNE	DIMERR
   3246  95da		       6d 01		      TST	1,X
   3247  95dc		       26 1a		      BNE	DIMERR
   3248  95de		       6d 02		      TST	2,X
   3249  95e0		       26 16		      BNE	DIMERR
   3250  95e2		       b6 02 49 	      LDAA	ARRTAB+1
   3251  95e5		       a7 01		      STAA	1,X
   3252  95e7		       b6 02 48 	      LDAA	ARRTAB
   3253  95ea		       a7 00		      STAA	0,X
   3254  95ec		       a7 02		      STAA	2,X
   3255  95ee		       bd 8c ac 	      JSR	PULLX
   3256  95f1		       bd 8f f8 	      JSR	INXSKP
   3257  95f4		       81 28		      CMPA	#'(
   3258  95f6		       27 05		      BEQ	DIM2
   3259  95f8		       c6 05	   DIMERR     LDAB	#5
   3260  95fa		       7e 90 bd    DIMER1     JMP	ERROR
   3261  95fd		       08	   DIM2       INX
   3262  95fe		       bd 8e bb 	      JSR	EXPR
   3263  9601		       bd 8e 57 	      JSR	PULPSH
   3264  9604		       5d		      TSTB
   3265  9605		       27 03		      BEQ	SUBERR
   3266  9607		       4d		      TSTA
   3267  9608		       27 04		      BEQ	DIM3
   3268  960a		       c6 0f	   SUBERR     LDAB	#15
   3269  960c		       20 ec		      BRA	DIMER1
   3270  960e		       8d 5a	   DIM3       BSR	STRSUB
   3271  9610		       a6 00		      LDAA	0,X
   3272  9612		       81 2c		      CMPA	#',
   3273  9614		       26 12		      BNE	DIM6
   3274  9616		       08		      INX
   3275  9617		       bd 8e bb 	      JSR	EXPR
   3276  961a		       bd 8e 57 	      JSR	PULPSH
   3277  961d		       5d		      TSTB
   3278  961e		       27 ea		      BEQ	SUBERR
   3279  9620		       4d		      TSTA
   3280  9621		       26 e7		      BNE	SUBERR
   3281  9623		       8d 45		      BSR	STRSUB
   3282  9625		       bd 8e ed 	      JSR	MPY
   3283  9628		       4f	   DIM6       CLRA
   3284  9629		       c6 02		      LDAB	#2
   3285  962b		       bd 8e 59 	      JSR	PUSHAE
   3286  962e		       bd 8e ed 	      JSR	MPY
   3287  9631		       a6 00		      LDAA	0,X
   3288  9633		       81 29		      CMPA	#')
   3289  9635		       26 c1		      BNE	DIMERR
   3290  9637		       08		      INX
   3291  9638		       f6 02 49 	      LDAB	ARRTAB+1
   3292  963b		       b6 02 48 	      LDAA	ARRTAB
   3293  963e		       bd 8f a7 	      JSR	ADD1
   3294  9641		       4f		      CLRA
   3295  9642		       c6 02		      LDAB	#2
   3296  9644		       bd 8f a7 	      JSR	ADD1
   3297  9647		       bd 8e 68 	      JSR	PULLAE
   3298  964a		       b1 02 46 	      CMPA	MEMEND
   3299  964d		       23 03		      BLS	DIM7
   3300  964f		       7e 92 e2 	      JMP	OVERFL
   3301  9652		       b7 02 48    DIM7       STAA	ARRTAB
   3302  9655		       f7 02 49 	      STAB	ARRTAB+1
   3303  9658		       bd 8f f2 	      JSR	SKIPSP
   3304  965b		       81 2c		      CMPA	#',
   3305  965d		       26 04		      BNE	DIMEX
   3306  965f		       08		      INX
   3307  9660		       7e 95 b9 	      JMP	DIM1
   3308  9663		       81 1e	   DIMEX      CMPA	#$1E
   3309  9665		       26 91		      BNE	DIMERR
   3310  9667		       7e 95 b0 	      JMP	REMARK
   3311  966a		       bd 8c 91    STRSUB     JSR	PUSHX
   3312  966d		       fe 02 99 	      LDX	DIMVAR
   3313  9670		       ee 00		      LDX	0,X
   3314  9672		       6d 00	   STRSU2     TST	0,X
   3315  9674		       27 03		      BEQ	STRSU3
   3316  9676		       08		      INX
   3317  9677		       20 f9		      BRA	STRSU2
   3318  9679		       e7 00	   STRSU3     STAB	0,X
   3319  967b		       bd 8c ac 	      JSR	PULLX
   3320  967e		       39		      RTS
   3321  967f
   3322  967f		       fe 02 34    FOR	      LDX	BASPNT
   3323  9682		       bd 8d 79 	      JSR	TSTV
   3324  9685		       24 03		      BCC	FOR1
   3325  9687		       7e 95 6f 	      JMP	LET0
   3326  968a		       ff 02 34    FOR1       STX	BASPNT
   3327  968d		       bd 8e 57 	      JSR	PULPSH
   3328  9690		       fe 02 53 	      LDX	FORPNT
   3329  9693		       8c 02 99 	      CPX	#FORSTK+48
   3330  9696		       26 05		      BNE	FOR11
   3331  9698		       c6 10		      LDAB	#16
   3332  969a		       7e 90 bd 	      JMP	ERROR
   3333  969d		       a7 00	   FOR11      STAA	0,X
   3334  969f		       08		      INX
   3335  96a0		       e7 00		      STAB	0,X
   3336  96a2		       08		      INX
   3337  96a3		       ff 02 53 	      STX	FORPNT
   3338  96a6		       fe 02 34 	      LDX	BASPNT
   3339  96a9		       bd 8f f2 	      JSR	SKIPSP
   3340  96ac		       08		      INX
   3341  96ad		       81 3d		      CMPA	#'=
   3342  96af		       27 03		      BEQ	FOR3
   3343  96b1		       7e 95 7c    FOR2       JMP	LET2
   3344  96b4		       bd 8e bb    FOR3       JSR	EXPR
   3345  96b7		       bd 8c b8 	      JSR	STORE
   3346  96ba		       08		      INX
   3347  96bb		       81 54		      CMPA	#'T
   3348  96bd		       26 f2		      BNE	FOR2
   3349  96bf		       a6 00		      LDAA	0,X
   3350  96c1		       08		      INX
   3351  96c2		       81 4f		      CMPA	#'O
   3352  96c4		       26 eb		      BNE	FOR2
   3353  96c6		       bd 8e bb 	      JSR	EXPR
   3354  96c9		       bd 8e 68 	      JSR	PULLAE
   3355  96cc		       ff 02 34 	      STX	BASPNT
   3356  96cf		       fe 02 53 	      LDX	FORPNT
   3357  96d2		       a7 00		      STAA	0,X
   3358  96d4		       08		      INX
   3359  96d5		       e7 00		      STAB	0,X
   3360  96d7		       08		      INX
   3361  96d8		       ff 02 53 	      STX	FORPNT
   3362  96db		       fe 02 34 	      LDX	BASPNT
   3363  96de		       a6 00		      LDAA	0,X
   3364  96e0		       81 1e		      CMPA	#$1E
   3365  96e2		       26 cd	   FOR8       BNE	FOR2
   3366  96e4		       08		      INX
   3367  96e5		       ff 02 36 	      STX	BASLIN
   3368  96e8		       fe 02 53 	      LDX	FORPNT
   3369  96eb		       b6 02 36 	      LDAA	BASLIN
   3370  96ee		       a7 00		      STAA	0,X
   3371  96f0		       08		      INX
   3372  96f1		       f6 02 37 	      LDAB	BASLIN+1
   3373  96f4		       e7 00		      STAB	0,X
   3374  96f6		       08		      INX
   3375  96f7		       ff 02 53 	      STX	FORPNT
   3376  96fa		       7e 92 e7 	      JMP	BASIC
   3377  96fd
   3378  96fd		       fe 02 34    NEXT       LDX	BASPNT
   3379  9700		       bd 8d 79 	      JSR	TSTV
   3380  9703		       24 03		      BCC	NEXT1
   3381  9705		       7e 95 6f 	      JMP	LET0
   3382  9708		       bd 8f f2    NEXT1      JSR	SKIPSP
   3383  970b		       81 1e		      CMPA	#$1E
   3384  970d		       26 d3		      BNE	FOR8
   3385  970f		       08		      INX
   3386  9710		       ff 02 36 	      STX	BASLIN
   3387  9713		       ce 02 69 	      LDX	#FORSTK
   3388  9716		       bd 8e 57 	      JSR	PULPSH
   3389  9719		       bc 02 53    NEXT2      CPX	FORPNT
   3390  971c		       27 3c		      BEQ	NEXT6
   3391  971e		       a1 00		      CMPA	0,X
   3392  9720		       26 30		      BNE	NEXT5
   3393  9722		       e1 01		      CMPB	1,X
   3394  9724		       26 2c		      BNE	NEXT5
   3395  9726		       bd 8c d3 	      JSR	IND
   3396  9729		       bd 8e 57 	      JSR	PULPSH
   3397  972c		       e0 03		      SUBB	3,X
   3398  972e		       a2 02		      SBCA	2,X
   3399  9730		       25 06		      BCS	NEXT4
   3400  9732		       ff 02 53 	      STX	FORPNT
   3401  9735		       7e 92 e7    NEXT3      JMP	BASIC
   3402  9738		       bd 8e 68    NEXT4      JSR	PULLAE
   3403  973b		       cb 01		      ADDB	#1
   3404  973d		       89 00		      ADCA	#0
   3405  973f		       bd 8c 91 	      JSR	PUSHX
   3406  9742		       ee 00		      LDX	0,X
   3407  9744		       a7 00		      STAA	0,X
   3408  9746		       e7 01		      STAB	1,X
   3409  9748		       bd 8c ac 	      JSR	PULLX
   3410  974b		       ee 04		      LDX	4,X
   3411  974d		       ff 02 36 	      STX	BASLIN
   3412  9750		       20 e3		      BRA	NEXT3
   3413  9752		       08	   NEXT5      INX
   3414  9753		       08		      INX
   3415  9754		       08		      INX
   3416  9755		       08		      INX
   3417  9756		       08		      INX
   3418  9757		       08		      INX
   3419  9758		       20 bf		      BRA	NEXT2
   3420  975a		       c6 11	   NEXT6      LDAB	#17
   3421  975c		       7e 90 bd 	      JMP	ERROR
   3422  975f
   3423  975f		       fe 02 34    IF	      LDX	BASPNT
   3424  9762		       bd 8e bb 	      JSR	EXPR
   3425  9765		       8d 1a		      BSR	RELOP
   3426  9767		       b7 02 4d 	      STAA	NCMPR
   3427  976a		       bd 8e bb 	      JSR	EXPR
   3428  976d		       ff 02 34 	      STX	BASPNT
   3429  9770		       8d 4b		      BSR	CMPR
   3430  9772		       24 03		      BCC	IF2
   3431  9774		       7e 95 b0 	      JMP	REMARK
   3432  9777		       fe 02 34    IF2	      LDX	BASPNT
   3433  977a		       bd 90 21 	      JSR	CCODE
   3434  977d		       ee 00		      LDX	0,X
   3435  977f		       6e 00		      JMP	0,X
   3436  9781		       bd 8f f2    RELOP      JSR	SKIPSP
   3437  9784		       08		      INX
   3438  9785		       81 3d		      CMPA	#'=
   3439  9787		       26 03		      BNE	RELOP0
   3440  9789		       86 00		      LDAA	#0
   3441  978b		       39		      RTS
   3442  978c		       e6 00	   RELOP0     LDAB	0,X
   3443  978e		       81 3c		      CMPA	#'<
   3444  9790		       26 13		      BNE	RELOP4
   3445  9792		       c1 3d		      CMPB	#'=
   3446  9794		       26 04		      BNE	RELOP1
   3447  9796		       08		      INX
   3448  9797		       86 02		      LDAA	#2
   3449  9799		       39		      RTS
   3450  979a		       c1 3e	   RELOP1     CMPB	#'>
   3451  979c		       26 04		      BNE	RELOP3
   3452  979e		       08	   RELOP2     INX
   3453  979f		       86 03		      LDAA	#3
   3454  97a1		       39		      RTS
   3455  97a2		       86 01	   RELOP3     LDAA	#1
   3456  97a4		       39		      RTS
   3457  97a5		       81 3e	   RELOP4     CMPA	#'>
   3458  97a7		       27 05		      BEQ	REL44
   3459  97a9		       c6 06		      LDAB	#6
   3460  97ab		       7e 90 bd 	      JMP	ERROR
   3461  97ae		       c1 3d	   REL44      CMPB	#'=
   3462  97b0		       26 04		      BNE	RELOP5
   3463  97b2		       08		      INX
   3464  97b3		       86 05		      LDAA	#5
   3465  97b5		       39		      RTS
   3466  97b6		       c1 3c	   RELOP5     CMPB	#'<
   3467  97b8		       27 e4		      BEQ	RELOP2
   3468  97ba		       86 04		      LDAA	#4
   3469  97bc		       39		      RTS
   3470  97bd
   3471  97bd		       b6 02 4d    CMPR       LDAA	NCMPR
   3472  97c0		       48		      ASLA
   3473  97c1		       48		      ASLA
   3474  97c2		       37		      PSHB
   3475  97c3		       16		      TAB
   3476  97c4		       ce 97 d2 	      LDX	#CMPR1
   3477  97c7		       3a		      ABX
   3478  97c8		       33		      PULB
   3479  97c9		       bd 8f a2 	      JSR	SUB
   3480  97cc		       bd 8e 68 	      JSR	PULLAE
   3481  97cf		       4d		      TSTA
   3482  97d0		       6e 00	   FUNNY      JMP	0,X
   3483  97d2		       27 18	   CMPR1      BEQ	MAYEQ
   3484  97d4		       20 12		      BRA	NOCMPR
   3485  97d6		       2b 12		      BMI	OKCMPR
   3486  97d8		       20 0e		      BRA	NOCMPR
   3487  97da		       2b 0e		      BMI	OKCMPR
   3488  97dc		       20 f4		      BRA	CMPR1
   3489  97de		       26 0a		      BNE	OKCMPR
   3490  97e0		       20 0f		      BRA	MYNTEQ
   3491  97e2		       27 0d		      BEQ	MYNTEQ
   3492  97e4		       2b 02		      BMI	NOCMPR
   3493  97e6		       2a 02		      BPL	OKCMPR
   3494  97e8		       0d	   NOCMPR     SEC
   3495  97e9		       39		      RTS
   3496  97ea		       0c	   OKCMPR     CLC
   3497  97eb		       39		      RTS
   3498  97ec		       5d	   MAYEQ      TSTB
   3499  97ed		       27 fb		      BEQ	OKCMPR
   3500  97ef		       20 f7		      BRA	NOCMPR
   3501  97f1		       5d	   MYNTEQ     TSTB
   3502  97f2		       26 f6		      BNE	OKCMPR
   3503  97f4		       20 f2		      BRA	NOCMPR
   3504  97f6
   3505  97f6							;******************************
   3506  97f6							;* REPLACEMENT FOR BREAK ROUTINE /EMK
   3507  97f6		       36	   CHKBRK     PSHA
   3508  97f7		       96 11		      LDAA	REG_TRCSR1
   3509  97f9		       84 c0		      ANDA	#$C0	;FILTER OUT RDRF AND ORFE
   3510  97fb		       81 00		      CMPA	#$00	;IS THERE ANY CHARACTER?
   3511  97fd		       27 0a		      BEQ	CHKNBRK
   3512  97ff		       bd 82 d3 	      JSR	INCHR
   3513  9802		       81 1b		      CMPA	#CANCEL	;IS CHARACTER AN ESCAPE?
   3514  9804		       26 03		      BNE	CHKNBRK
   3515  9806		       7e 90 89 	      JMP	READY	;BREAK. GOTO PROMPT
   3516  9809		       32	   CHKNBRK    PULA		;NO BREAK. CONTINUE
   3517  980a		       39		      RTS
   3518  980b
   3519  980b							;***************************************************************
   3520  980b							; GETPRMP
   3521  980b							; Set X= 2nd Byte after Keyword or Keyword token (parm data)
   3522  980b							;***************************************************************
   3523  980b		       fe 02 34    GETPRMP    LDX	BASPNT	;X Points to end of keyword: (aaaa,v,v) in BUFFER
   3524  980e		       b6 02 34 	      LDAA	BASPNT
   3525  9811		       81 02		      CMPA	#$02	;If BASPNT=$02 then executing command directly
   3526  9813		       27 06		      BEQ	GETPRM1	;Otherwise executing from stored source code
   3527  9815		       fe 02 36 	      LDX	BASLIN	;X Points to statement: nnt(aaaa,v,v) in SOURCE
   3528  9818		       08		      INX
   3529  9819		       08		      INX
   3530  981a		       08		      INX
   3531  981b		       08	   GETPRM1    INX		;If exexuting directly just INC past the "("
   3532  981c		       39		      RTS
   3533  981d
   3534  981d							;***************************************************************
   3535  981d							;* CVTADDR
   3536  981d							; Convert 4 ASCII Hex Chrs at X=4 to 2 Bytes in BUFFER+32 & BUFFER+33
   3537  981d							;***************************************************************
   3538  981d		       a6 00	   CVTADDR    LDAA	0,X	;X=Address char1
   3539  981f		       bd 83 5f 	      JSR	CHR2VAL	;Convert to HEX
   3540  9822		       48		      LSLA		;Shift 4x Left
   3541  9823		       48		      LSLA
   3542  9824		       48		      LSLA
   3543  9825		       48		      LSLA
   3544  9826		       b7 02 d0 	      STAA	BUFFER+32	;Save
   3545  9829		       a6 01		      LDAA	1,X	;X+4=Address char2
   3546  982b		       bd 83 5f 	      JSR	CHR2VAL
   3547  982e		       ba 02 d0 	      ORAA	BUFFER+32
   3548  9831		       b7 02 d0 	      STAA	BUFFER+32
   3549  9834		       a6 02		      LDAA	2,X	;X+4=Address char3
   3550  9836		       bd 83 5f 	      JSR	CHR2VAL
   3551  9839		       48		      LSLA
   3552  983a		       48		      LSLA
   3553  983b		       48		      LSLA
   3554  983c		       48		      LSLA
   3555  983d		       b7 02 d1 	      STAA	BUFFER+33
   3556  9840		       a6 03		      LDAA	3,X	;X+4=Address char4
   3557  9842		       bd 83 5f 	      JSR	CHR2VAL
   3558  9845		       ba 02 d1 	      ORAA	BUFFER+33
   3559  9848		       b7 02 d1 	      STAA	BUFFER+33
   3560  984b		       39		      RTS
   3561  984c
   3562  984c							;********************************************************************
   3563  984c							;GETVARA  Set X to the address of the 8bit Value of the variable name(A-Y) from A
   3564  984c							;********************************************************************
   3565  984c		       80 40	   GETVARA    SUBA	#$40
   3566  984e		       b7 02 56 	      STAA	VARPNT+1
   3567  9851		       48		      ASLA
   3568  9852		       bb 02 56 	      ADDA	VARPNT+1
   3569  9855		       b7 02 56 	      STAA	VARPNT+1
   3570  9858		       fe 02 55 	      LDX	VARPNT
   3571  985b		       08		      INX
   3572  985c		       39		      RTS
   3573  985d
   3574  985d							;********************************************************************
   3575  985d							;GETVALU  Get the LOW 8bit Value of the variable name(A-Y) from A
   3576  985d							;********************************************************************
   3577  985d		       3c	   GETVALU    PSHX
   3578  985e		       bd 98 4c 	      JSR	GETVARA
   3579  9861		       a6 00		      LDAA	0,X
   3580  9863		       38		      PULX
   3581  9864		       39		      RTS
   3582  9865							;********************************************************************
   3583  9865							;SETVALU Set the LOW 8bit Value of the variable name(A-Y) from A = B
   3584  9865							;********************************************************************
   3585  9865		       3c	   SETVALU    PSHX
   3586  9866		       bd 98 4c 	      JSR	GETVARA
   3587  9869		       e7 00		      STAB	0,X
   3588  986b		       38		      PULX
   3589  986c		       39		      RTS
   3590  986d
   3591  986d		       98 6d	   ENDBASIC   EQU	*
   3592  986d							;;************************************************************************
   3593  986d							;;**** End of NAM MICRO  MICROBASIC V1.3C ********************************
   3594  986d							;;************************************************************************
   3595  986d
   3596  986d
   3597  986d							;******************************************************************
   3598  f840					      org	$F840	; Opcode Type Lookup Table (fixed ROM addr. $F840)
   3599  f840							;******************************************************************
   3600  f840		       00 00 21 00*OPCDTYPE   dc.b	$00,$00,$21,$00,$04,$08,$31,$22,$11,$21,$31,$22,$11,$21,$31,$22
   3601  f850		       62 83 8c 8e*OPCDEXCP   dc.b	$62,$83,$8C,$8E,$C3,$CC,$CE,$00
   3602  f858
   3603  f860					      org	$F860	; Mnemonic Lookup Table   0x02A5 (677)bytes  $F860-$FB05
   3604  f860							;******************************************************************
   3605  f860							;Mnemonic Lookup Table High Opcodes x40-xFF	(fixed ROM addr. $F860)
   3606  f860							;******************************************************************
   3607  f860		       41 44 43 41*MNETBLH    dc.b	"ADCA",$89,$99,$A9,$B9
   3608  f868		       41 44 43 42*	      dc.b	"ADCB",$C9,$D9,$E9,$F9
   3609  f870		       41 44 44 41*	      dc.b	"ADDA",$8B,$9B,$AB,$BB
   3610  f878		       41 44 44 42*	      dc.b	"ADDB",$CB,$DB,$EB,$FB
   3611  f880		       41 44 44 44*	      dc.b	"ADDD",$C3,$D3,$E3,$F3
   3612  f888		       41 4e 44 41*	      dc.b	"ANDA",$84,$94,$A4,$B4
   3613  f890		       41 4e 44 42*	      dc.b	"ANDB",$C4,$D4,$E4,$F4
   3614  f898		       42 49 54 41*	      dc.b	"BITA",$85,$95,$A5,$B5
   3615  f8a0		       42 49 54 42*	      dc.b	"BITB",$C5,$D5,$E5,$F5
   3616  f8a8		       42 53 52 20*	      dc.b	"BSR ",$8D,0 ,0 ,0
   3617  f8b0		       43 4d 50 41*	      dc.b	"CMPA",$81,$91,$A1,$B1
   3618  f8b8		       43 4d 50 42*	      dc.b	"CMPB",$C1,$D1,$E1,$F1
   3619  f8c0		       43 50 58 20*	      dc.b	"CPX ",$8C,$9C,$AC,$BC
   3620  f8c8		       45 4f 52 41*	      dc.b	"EORA",$88,$98,$A8,$B8
   3621  f8d0		       45 4f 52 42*	      dc.b	"EORB",$C8,$D8,$E8,$F8
   3622  f8d8		       4a 53 52 20*	      dc.b	"JSR ",1 ,$9D,$AD,$BD
   3623  f8e0		       4c 44 41 41*	      dc.b	"LDAA",$86,$96,$A6,$B6
   3624  f8e8		       4c 44 41 42*	      dc.b	"LDAB",$C6,$D6,$E6,$F6
   3625  f8f0		       4c 44 44 20*	      dc.b	"LDD ",$CC,$DC,$EC,$FC
   3626  f8f8		       4c 44 53 20*	      dc.b	"LDS ",$8E,$9E,$AE,$BE
   3627  f900		       4c 44 58 20*	      dc.b	"LDX ",$CE,$DE,$EE,$FE
   3628  f908		       4f 52 41 41*	      dc.b	"ORAA",$8A,$9A,$AA,$BA
   3629  f910		       4f 52 41 42*	      dc.b	"ORAB",$CA,$DA,$EA,$FA
   3630  f918		       53 42 43 41*	      dc.b	"SBCA",$82,$92,$A2,$B2
   3631  f920		       53 42 43 42*	      dc.b	"SBCB",$C2,$D2,$E2,$F2
   3632  f928		       53 54 41 41*	      dc.b	"STAA",1 ,$97,$A7,$B7
   3633  f930		       53 54 41 42*	      dc.b	"STAB",1 ,$D7,$E7,$F7
   3634  f938		       53 54 44 20*	      dc.b	"STD ",1 ,$DD,$ED,$FD
   3635  f940		       53 54 53 20*	      dc.b	"STS ",1 ,$9F,$AF,$BF
   3636  f948		       53 54 58 20*	      dc.b	"STX ",1 ,$DF,$EF,$FF
   3637  f950		       53 55 42 41*	      dc.b	"SUBA",$80,$90,$A0,$B0
   3638  f958		       53 55 42 42*	      dc.b	"SUBB",$C0,$D0,$E0,$F0
   3639  f960		       53 55 42 44*	      dc.b	"SUBD",$83,$93,$A3,$B3
   3640  f968		       00 00 00 00*	      dc.b	0,0,0,0,0,0,0,0
   3641  f970							;******************************************************************
   3642  f970							; MNETBLM   Mnemonic Table M	   (exception opcodes)
   3643  f970							;******************************************************************
   3644  f970		       43 4c 52 20*MNETBLM    dc.b	"CLR ",$6F,$7F,$4F,$5F
   3645  f978		       43 4f 4d 20*	      dc.b	"COM ",$63,$73,$43,$53
   3646  f980		       4e 45 47 20*	      dc.b	"NEG ",$60,$70,$40,$50
   3647  f988		       44 45 43 20*	      dc.b	"DEC ",$6A,$7A,$4A,$5A
   3648  f990		       49 4e 43 20*	      dc.b	"INC ",$6C,$7C,$4C,$5C
   3649  f998		       52 4f 4c 20*	      dc.b	"ROL ",$69,$79,$49,$59
   3650  f9a0		       52 4f 52 20*	      dc.b	"ROR ",$66,$76,$46,$56
   3651  f9a8		       41 53 4c 20*	      dc.b	"ASL ",$68,$78,$48,$58
   3652  f9b0		       41 53 52 20*	      dc.b	"ASR ",$67,$77,$47,$57
   3653  f9b8		       4c 53 52 20*	      dc.b	"LSR ",$64,$74,$44,$54
   3654  f9c0		       54 53 54 20*	      dc.b	"TST ",$6D,$7D,$4D,$5D
   3655  f9c8		       41 49 4d 20*	      dc.b	"AIM ",1 ,$71,$61,0
   3656  f9d0		       4f 49 4d 20*	      dc.b	"OIM ",1 ,$72,$62,0
   3657  f9d8		       45 49 4d 20*	      dc.b	"EIM ",1 ,$75,$65,0
   3658  f9e0		       54 49 4d 20*	      dc.b	"TIM ",1 ,$7B,$6B,0
   3659  f9e8		       4a 4d 50 20*	      dc.b	"JMP ",$6E,$7E,$7E,$7E
   3660  f9f0		       00 00 00 00*	      dc.b	0,0,0,0,0,0,0,0
   3661  f9f8							;******************************************************************
   3662  f9f8							;MNETBLL   Mnemonic Table L  Opcodes x01-x3F	(0 or 1 parm)
   3663  f9f8							;******************************************************************
   3664  f9f8		       41 42 41 20*MNETBLL    dc.b	"ABA ",$1B
   3665  f9fd		       41 42 58 20*	      dc.b	"ABX ",$3A
   3666  fa02		       41 53 4c 44*	      dc.b	"ASLD",$05
   3667  fa07		       42 43 43 20*	      dc.b	"BCC ",$24
   3668  fa0c		       42 43 53 20*	      dc.b	"BCS ",$25
   3669  fa11		       42 45 51 20*	      dc.b	"BEQ ",$27
   3670  fa16		       42 47 45 20*	      dc.b	"BGE ",$2C
   3671  fa1b		       42 47 54 20*	      dc.b	"BGT ",$2E
   3672  fa20		       42 48 49 20*	      dc.b	"BHI ",$22
   3673  fa25		       42 4c 45 20*	      dc.b	"BLE ",$2F
   3674  fa2a		       42 4c 53 20*	      dc.b	"BLS ",$23
   3675  fa2f		       42 4c 54 20*	      dc.b	"BLT ",$2D
   3676  fa34		       42 4d 49 20*	      dc.b	"BMI ",$2B
   3677  fa39		       42 4e 45 20*	      dc.b	"BNE ",$26
   3678  fa3e		       42 50 4c 20*	      dc.b	"BPL ",$2A
   3679  fa43		       42 52 41 20*	      dc.b	"BRA ",$20
   3680  fa48		       42 52 4e 20*	      dc.b	"BRN ",$21
   3681  fa4d		       42 56 43 20*	      dc.b	"BVC ",$28
   3682  fa52		       42 56 53 20*	      dc.b	"BVS ",$29
   3683  fa57		       43 42 41 20*	      dc.b	"CBA ",$11
   3684  fa5c		       43 4c 43 20*	      dc.b	"CLC ",$0C
   3685  fa61		       43 4c 49 20*	      dc.b	"CLI ",$0E
   3686  fa66		       43 4c 56 20*	      dc.b	"CLV ",$0A
   3687  fa6b		       44 41 41 20*	      dc.b	"DAA ",$19
   3688  fa70		       44 45 53 20*	      dc.b	"DES ",$34
   3689  fa75		       44 45 58 20*	      dc.b	"DEX ",$09
   3690  fa7a		       49 4e 53 20*	      dc.b	"INS ",$31
   3691  fa7f		       49 4e 58 20*	      dc.b	"INX ",$08
   3692  fa84		       4c 53 52 44*	      dc.b	"LSRD",$04
   3693  fa89		       4d 55 4c 20*	      dc.b	"MUL ",$3D
   3694  fa8e		       4e 4f 50 20*	      dc.b	"NOP ",$01
   3695  fa93		       50 53 48 41*	      dc.b	"PSHA",$36
   3696  fa98		       50 53 48 42*	      dc.b	"PSHB",$37
   3697  fa9d		       50 53 48 58*	      dc.b	"PSHX",$3C
   3698  faa2		       50 55 4c 41*	      dc.b	"PULA",$32
   3699  faa7		       50 55 4c 42*	      dc.b	"PULB",$33
   3700  faac		       50 55 4c 58*	      dc.b	"PULX",$38
   3701  fab1		       52 54 49 20*	      dc.b	"RTI ",$3B
   3702  fab6		       52 54 53 20*	      dc.b	"RTS ",$39
   3703  fabb		       53 42 41 20*	      dc.b	"SBA ",$10
   3704  fac0		       53 45 43 20*	      dc.b	"SEC ",$0D
   3705  fac5		       53 45 49 20*	      dc.b	"SEI ",$0F
   3706  faca		       53 45 56 20*	      dc.b	"SEV ",$0B
   3707  facf		       53 57 49 20*	      dc.b	"SWI ",$3F
   3708  fad4		       54 41 42 20*	      dc.b	"TAB ",$16
   3709  fad9		       54 41 50 20*	      dc.b	"TAP ",$06
   3710  fade		       54 42 41 20*	      dc.b	"TBA ",$17
   3711  fae3		       54 50 41 20*	      dc.b	"TPA ",$07
   3712  fae8		       54 53 58 20*	      dc.b	"TSX ",$30
   3713  faed		       54 58 53 20*	      dc.b	"TXS ",$35
   3714  faf2		       57 41 49 20*	      dc.b	"WAI ",$3E
   3715  faf7		       58 47 44 58*	      dc.b	"XGDX",$18
   3716  fafc		       53 4c 50 20*	      dc.b	"SLP ",$1A
   3717  fb01		       00 00 00 00*MNETBLEND  dc.b	0,0,0,0,0
   3718  fb06
   3719  fb06							;;************************************************************************
   3720  fb06							;;  External Call Jump Table
   3721  fb06							;;  Fixed locations in ROM map to ;subroutines that may re-locate
   3722  fb06							;;************************************************************************
   3723  fbd0				   JUMPTBL    org	$FBD0	; FBD0-FBF9  (fixed ROM addr. $FBD0-$FBFA)
   3724  fbd0		       7e 81 f8 	      JMP	DELAYX	;Delay based on contents of X approx 10.5us/count
   3725  fbd3		       7e 82 c5 	      JMP	OUTCHR	;Send byte in A to Serial Port
   3726  fbd6		       7e 82 d3 	      JMP	INCHR	;wait for a serial byte and return in A
   3727  fbd9		       7e 82 e4 	      JMP	INCHRE	;wait for a serial byte and return in A with echo
   3728  fbdc		       7e 83 04 	      JMP	PUTS	;Transmit data indexed by X
   3729  fbdf		       7e 83 1d 	      JMP	OUTHEX	;Output A as 2 HEX digits
   3730  fbe2		       7e 83 28 	      JMP	GETHEXB	;Wait until a HEX byte is entered
   3731  fbe5		       7e 83 7f 	      JMP	INHEXB	;Input 2 hex digits return with byte value in A
   3732  fbe8		       7e 83 69 	      JMP	GETADDR	;Get 4 byte address, save in ADDR_HI & ADDR_LO
   3733  fbeb		       7e 85 6c 	      JMP	DODUMP	;Jump here to save regs, print regs and return
   3734  fbee		       7e 85 72 	      JMP	DMPREG	;Save current state of registers in RAM
   3735  fbf1		       7e 85 86 	      JMP	PRTREGS	;Send saved register values to terminal
   3736  fbf4		       7e 82 1b 	      JMP	BEEP	;Beep based on contents of A & B
   3737  fbf7		       7e 82 ed 	      JMP	INCHRIF	;Input char if available ..Return zero if none.
   3738  fbfa							;;************************************************************************
   3739  fbfa							;;    NOTE: Messages Follow at $FC00 (see below after Interrupt Vectors)
   3740  fbfa							;;************************************************************************
   3741  fbfa
   3742  fc00					      org	$FC00	; Messages   MUST BE LAST in FILE
   3743  fc00							;******************************************************************
   3744  fc00							; Messages			(fixed ROM addr. $FC00-$FECA)
   3745  fc00							;******************************************************************
   3746  fc00		       0a 0d 20 2a*BOOTMSG    dc.b	10,13," *** HD6303 System Start v2.1 ***"
   3747  fc23		       0a 0d ff    MSGNL      dc.b	10,13,END
   3748  fc26		       0a 0d 45 52*MSGERR     dc.b	10,13,"ERROR",10,13,END
   3749  fc30		       0a 0d 4f 4b*MSGOK      dc.b	10,13,"OK",10,13,END
   3750  fc37		       0a 0d 4f 4e*MSGON      dc.b	10,13,"ON ",10,13,END
   3751  fc3f		       0a 0d 4f 46*MSGOFF     dc.b	10,13,"OFF",10,13,END
   3752  fc47		       0a 0d 45 6e*MSG001     dc.b	10,13,"Enter Address:",END
   3753  fc58		       0a 0d 20 45*MSGSTART   dc.b	10,13," Enter Start Address:",END
   3754  fc70		       0a 0d 20 45*MSGENDAD   dc.b	10,13," Enter End   Address:",END
   3755  fc88		       0a 0d 55 6e*MSGUNKCMD  dc.b	10,13,"Unknown command",END
   3756  fc9a		       0a 0d 3e ff MSGPROMPT  dc.b	10,13,#'>,END
   3757  fc9e		       0a 0d 3a ff MSGPRMPT2  dc.b	10,13,#':,END
   3758  fca2		       3f	   MSGASMERR2 dc.b	"?"
   3759  fca3		       3f ff	   MSGASMERR1 dc.b	"?",END
   3760  fca5		       20 20 20 20*MSGSPC4    dc.b	"    ",END
   3761  fcaa		       24 24 24 ff MSGATNRSP  dc.b	"$$$",END
   3762  fcae		       20 45 6e 74*MSGPRT     dc.b	" Enter Port#:(2,5 or6)",END
   3763  fcc5		       20 56 61 6c*MSGVAL     dc.b	" Value:",END
   3764  fccd		       20 1b 5b 32*MSGCLS     dc.b	32,27,91,50,74,32,27,91,72,END
   3765  fcd7		       0a 0d 20 4e*MSGBASIC   dc.b	10,13," NAM MICRO  MICROBASIC V1.3C",END
   3766  fcf6		       0a 0d 20 42*MSG19200   dc.b	10,13," Baud Rate to 19200..",END
   3767  fd0e		       0a 0d 20 2a*MSGHLP     dc.b	10,13," ****** Command Menu *****"
   3768  fd2a		       20 5b 56 32*	      dc.b	" [V2.1 11/2016] **********"
   3769  fd44		       0a 0d 20 64*	      dc.b	10,13," d   Dump Memory(16 bytes)"
   3770  fd60		       20 20 44 20*	      dc.b	"  D	Dump Memory(256 bytes)"
   3771  fd7c		       0a 0d 20 53*	      dc.b	10,13," S   Set Memory 	  "
   3772  fd98		       20 20 54 20*	      dc.b	"  T	ASCI bytes to Memory"
   3773  fdb2		       0a 0d 20 46*	      dc.b	10,13," F   Fill Memory	  "
   3774  fdce		       20 20 48 20*	      dc.b	"  H	High Speed (19200 baud)"
   3775  fdeb		       0a 0d 20 4c*	      dc.b	10,13," L   LIST		  "
   3776  fe07		       20 20 41 20*	      dc.b	"  A	ASSEMBLE"
   3777  fe15		       0a 0d 20 47*	      dc.b	10,13," G/g Go 		  "
   3778  fe31		       20 20 40 20*	      dc.b	"  @	Attention!"
   3779  fe41		       0a 0d 20 4f*	      dc.b	10,13," O   Write I/O Port	  "
   3780  fe5d		       20 20 49 20*	      dc.b	"  I	Read I/O Port"
   3781  fe70		       0a 0d 20 66*	      dc.b	10,13," f   Flash LEDs 10x	  "
   3782  fe8c		       20 20 5a 20*	      dc.b	"  Z	Beep.."
   3783  fe98		       0a 0d 20 3a*	      dc.b	10,13," :   Get iHEX Rec(no echo)"
   3784  feb4		       20 20 3b 20*	      dc.b	"  ;	Send iHEX Rec(no echo)"
   3785  fed0		       0a 0d 20 42*	      dc.b	10,13," B/b Start Basic	  "
   3786  feec		       20 20 43 20*	      dc.b	"  C	Clear Screen"
   3787  fefe		       0a 0d 20 4d*	      dc.b	10,13," M/m Menu		  "
   3788  ff1a		       20 20 25 20*	      dc.b	"  %	Start/Stop 10ms Timer"
   3789  ff35		       0a 0d ff 	      dc.b	10,13,END
   3790  ff35		       ff 38	   MSGEND     equ	.
   3791  ff38
   3792  ff38							;;************************************************************************
   3793  ff38							;;  Interrupt Vectors		  (fixed ROM addr. $FFEA-$FFFF)
   3794  ff38							;;************************************************************************
   3795  ffea					      org	$FFEA	; IRQ Vectors $FFEA - FFFF
   3796  ffea
   3797  ffea		       00 98		      dc.w	IRQIRQ2	;IRQ2	  $0098   $FFEA & $FFEB
   3798  ffec		       00 95		      dc.w	IRQCMI	;CMI	  $0095
   3799  ffee		       8a e8		      dc.w	TRAP01	;TRAP	  $FFEE & $FFEF
   3800  fff0		       00 9b		      dc.w	IRQSIO	;SIO	  $009B  $FFF0 & $FFF1
   3801  fff2		       00 92		      dc.w	IRQTOI	;TOI	  $0092
   3802  fff4		       00 8f		      dc.w	IRQOCI	;OIC	  $008F
   3803  fff6		       00 8c		      dc.w	IRQICI	;ICI	  $008C
   3804  fff8		       00 89		      dc.w	IRQIRQ1	;IRQ1	  $0089
   3805  fffa		       00 86		      dc.w	IRQSWI	;SWI	  $0086
   3806  fffc		       00 83		      dc.w	IRQNMI	;NMI	  $0083
   3807  fffe		       80 00		      dc.w	RESET	;RESET   $FFFE & $FFFF
